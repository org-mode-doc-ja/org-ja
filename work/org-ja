This is org-ja, produced by makeinfo version 4.13 from org-ja.texi.

このマニュアルは、Org-mode 7.5に対応しています。

   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy
     and modify this GNU manual.  Buying copies from the FSF supports
     it in developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Org Mode: (org-ja).        Outline-based notes management and organizer
                               (Japanese translation)
END-INFO-DIR-ENTRY


File: org-ja,  Node: Top,  Next: まえがき,  Prev: (dir),  Up: (dir)

Org Mode マニュアル
************************

このマニュアルは、Org-mode 7.5に対応しています。

   Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have the freedom to copy
     and modify this GNU manual.  Buying copies from the FSF supports
     it in developing GNU and promoting software freedom."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding a
     copy of the license to the document, as described in section 6 of
     the license.

* Menu:

* まえがき::             さあ、はじめよう
* ドキュメントの構造::  ツリーはあなたの脳のように動作します。
* テーブル::             あっという間にフォーマットする魔法
* ハイパーリンク::    コンテクストにおけるノート
* TODOアイテム::         全ツリーの枝をTODOアイテムになれます
* タグ::                   見出しのタグ付けとタグの組み合せによる検索
* プロパティとカラム::  エントリーについての情報を保存する
* 日付や時間::          計画のためにアイテムを扱いやすくする
* キャプチャ／再配置／アーカイブ::  プロジェクトへの入出力
* アジェンダビュー::  さまざまな情報をビューにまとめて表示する
* マークアップ::       リッチなエクスポートのための下準備
* エクスポート::       ノートの共有と公開
* 公開::                   相互にリンクしたOrg-modeのファイルでウェブサイト
を作る
* ソースコードとの連携::  コードブロックの出力、評価、そしてtangle
* その他::                その他の機能
* ハッキング::          Org-modeをハックする方法
* MobileOrg::                モバイルデバイスでのタスクの閲覧とキャプチャ
* 歴史と謝辞::          Org-modeがどこからやってきたか
* メインインデックス::  Org-modeのコンセプトと特徴のインデックス
* キーワードインデックス::  キーバインドのインデックス
* コマンドと関数インデックス::  コマンドの名称と内部関数
* 変数インデックス::  マニュアルで言及した変数

 --- ノードリストの細目 ---



まえがき



* 概要::                   Org-modeで何ができるか
* インストール::       Org-modeのインストール
* アクティベーション::  Org-modeを特定のバッファで有効にする方法
* フィードバック::    バグ報告、アイディア、パッチなど
* 慣例::                   マニュアルで使われる植字の慣例

ドキュメントの構造



* アウトライン::       Org-modeはoutline-modeをベースにしています
* ヘッドライン::       org-modeの階層構造の見出しをどう組み込むか
* 表示、非表示の切り替え::  簡単な操作で表示、非表示を切り替える
* 移動::                   他の見出しにジャンプする
* 見出し位置と階層の変更::  見出しの順序と階層を変更する
* ツリーの抽出::       文脈の中に埋め込まれた一致
* エントリー中の階層構造::  １つのエントリーの中に階層のある構造を追加する
* 引き出し::             いろいろなものを隠す
* ブロック::             ブロック単位で折りたたむ
* 脚注::                   org-modeの構文の中で脚注はどのように規定されるの
か
* Orgstructモード::       org-mode外のモードでの階層編集

テーブル



* 組み込みのテーブルエディタ::  単純なテーブル
* 列幅と整列::          自動設定を解除する
* 行のグループ::       縦の線を引き金にしてグループを作る
* Orgtblモード::          マイナーモードとしてのテーブルエディタ
* スプレッドシート::  テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする

スプレッドシート



* 参照::                   どうやって他のフィールドや範囲を参照するか
* Calc用の数式構文::   Calcを使って計算する
* Lisp用の数式構文::   Emacs Lispで数式を書く
* フィールドと範囲の数式::  特定の（範囲の）フィールドのための数式
* 列の数式::             カラム全体に有効な数式
* 数式の編集とデバッグ::  数式を修正する
* テーブルの更新::    依存関係にあるすべてのフィールドを再計算する
* 一歩進んだ機能::    フィールド名、パラメーター、自動再計算

ハイパーリンク



* リンクのフォーマット::  Org-modeでのリンクのフォーマット
* 内部リンク::          現在のファイルの別の場所へのリンク
* 外部リンク::          URL形式のリンク
* リンクの扱い::       創造、挿入、追随
* Org外でのリンク利用::  Cのソースコードからのリンク？
* リンクの省略記法::  複雑なリンクを書くためのショートカット
* 検索オプション::    特定の場所へのリンク
* カスタム検索::       デフォルトの検索が充分ではないとき

内部リンク



* ラジオターゲット::  プレーンテキストのリンクをターゲットに起動させる

TODOアイテム



* TODOの基本::            登録したTODOのマーキングと表示
* TODO拡張::               ワークフローと割り当て
* 進行記録::             進行管理のための日付とメモ
* プロパティ::          他より重要なものもある
* タスクの分割::       タスクを管理可能な単位に分解する
* チェックボックス::  リストをチェックする

TODOキーワードの拡張的な使い方



* ワークフローの状態::  TODOからDONEまでの流れ
* タスクの種別::       私はこの仕事をこなす。フレッドは休む。
* キーワードセット::  ごちゃまぜにしてもやり方は見つけられる
* TODOの状態への素早い対応手段::  状態を選択するための文字
* ファイル毎のキーワード::  ファイルが違えば、やりたい事も違う
* TODOキーワードのフェイス::  状態のハイライト
* TODO間の関係::         他のタスクの終了を待たないといけないタスクがある時

進行記録



* アイテムの完了::    DONEとなったのはいつ？
* 作業の状態変化の追跡::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？

タグ



* タグの継承::          アウトラインのツリー構造に沿ってタグ付けされる
* タグの設定::          見出しにタグをつける
* タグの検索::          タグの組み合わせで検索する

プロパティ（属性）とカラム（列）



* プロパティの表記法::  プロパティの表記の仕方
* スペシャルプロパティ::  他のorg-modeの機能を使用する
* プロパティの検索::  プロパティ値の一致作業
* プロパティの継承::  ツリー上でのプロパティの伝達
* カラムビュー::       表による表示と修正
* プロパティAPI::       Lispプログラマのためのプロパティ

カラムビュー



* カラムの定義::       カラムの書式のプロパティ
* カラムビューの利用::  カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック

カラムの定義



* カラム定義の有効範囲::  カラム設定の定義範囲の指定方法は？
* カラム・アトリビュート::  カラム内の表示と値

日付と時刻



* タイムスタンプ::    ツリーに時間の割り当て
* タイムスタンプの作成::  タイムスタンプを挿入するコマンド
* デッドラインとスケジュール::  作業計画をたてる
* 作業に費やした時間の計測::  タスクに費やす時間を追跡する
* 工数の見積もり::    事前に作業活動を計画する
* 相対時間タイマー::  実行中のタイマーに関する注意
* カウントダウンタイマー::  タスクのカウントダウンタイマーを起動する

タイムスタンプの作成



* 日付／時間プロンプト::  日付と時刻入力のサポート
* カスタムタイムフォーマット::  日付を異なる見た目にする

デッドラインとスケジュール



* デッドライン／スケジュールを挿入::  計画項目
* 繰り返されるタスク::  何度も現れる項目

作業に費やした時間の計測



* 計測コマンド::       時計の開始と終了
* クロックテーブル::  詳細な報告
* 空き時間の解決::    空いた時間を解決する

キャプチャ／再配置／アーカイブ



* キャプチャ::          新しいものをキャプチャする
* 添付::                   タスクにファイルを追加する
* RSSフィード::          RSSフィードから取り込む
* プロトコル::          外部（e.g.
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* ノートの再配置::    別な場所にツリーを移動する
* アーカイブ::          完了したプロジェクトの扱い方

キャプチャ



* キャプチャの設定::  キャプチャされたノートが保存される場所
* キャプチャの使用::  キャプチャの実行と中止コマンド
* キャプチャテンプレート::  異なるタイプのテンプレートを定義する

キャプチャテンプレート



* テンプレートの要素::  完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む

アーカイブ



* サブツリーを移動する::  アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す

アジェンダビュー



* アジェンダファイル::  アジェンダ生成のために探索されるファイル
* アジェンダのコマンド選択::  アジェンダビューへのキーボードアクセス
* 組み込みのアジェンダビュー::  すぐに使える機能に何があるでしょう？
* 表示とソート::       表示のためにどのようにアジェンダ項目が準備されるのか
* アジェンダのコマンド::  タスクツリーのリモート編集
* カスタムアジェンダビュー::  特別な検索とビューを定義する
* アジェンダビューの出力::  ビューをファイルに書き出す
* アジェンダのカラム表示::  収集したエントリーのためにコラムビューを使用する

アジェンダに組み込まれているビュー



* 毎週／毎日のアジェンダ::  現在のタスクが表示されたカレンダーのページ
* グローバルなTODOリスト::  全ての未完了アクション項目
* タグとプロパティとのマッチング::  微調整された検索での構造化された情報
* タイムライン::       単一ファイルでの時間順のビュー
* 検索ビュー::          文章の中を検索してエントリーを見つける
* 詳細が未決定なプロジェクト::  レビューが必要なプロジェクトを見つける

表示とソート



* カテゴリ::             全てのタスクが同じであるとは限らない
* 時刻の仕様::          アジェンダはどうやって時間を知るか
* アジェンダの項目をソートする::  物事の順番

カスタムアジェンダビュー



* 検索式の保存::       一度入力し、何度も使う
* ブロックアジェンダ::  必要な事項をひとつのバッファに集める
* 設定オプション::    ルールを変更する

リッチエクスポートのためのマークアップ



* 構造化されたマークアップの要素::  エクスポートでわかる基本的な構造
* 画像とテーブル::    テーブルと画像は含まれているだろう
* リテラルの例::       特別なフォーマットのためのソースコードの例
* ファイルの挿入::    文書に別のファイルを添付する
* エントリのインデックス::  インデックスを作る
* マクロ置換::          複雑なアウトプットを作成するためにマクロを使用する
* LaTeXの組み込み::     LaTeXはorg-modeの文書では自在に使用することができる

構造化されたマークアップの要素



* ドキュメントタイトル::  どこからタイトルが取り出されるか
* 見出しとセクション::  文書の構造はエクスポートの設定で確認できる
* 目次::                   コンテンツのテーブルの条件と場所
* 冒頭のテキスト::    最初の見出しより前に書かれた文
* リスト::                リスト
* パラグラフ::          パラグラフ
* フットノートのマークアップ::  脚注
* 強調と等幅::          太字、イタリック、その他
* 水平線のルール::    線を作る
* コメント行::          何がエクスポートされないか

Embedded LaTeX



* 特殊記号::             ギリシャ文字や他の記号
* 下付き文字と上付き文字::  テキストを上付き／下付きにする簡単な構文
* LaTeXのコード片::     複雑な数式を簡単に作成する
* LaTeXコード片のプレビュー::  このスニペットは何と似ているか
* CDLaTeXモード::         数式の入力をスピードアップする

エクスポート



* 選択エクスポート::  タグを使ってツリーを選択したり排除したりする
* エクスポートオプション::  ファイル毎のエクスポート設定
* エクスポート用コマンド選択画面::  どのようにエクスポートのコマンドにアクセ
スするか
* ASCII/Latin-1/UTF-8エクスポート::  文字コードの変換を伴う通常のファイルへ
のエクスポート
* HTMLのエクスポート::  HTMLへのエクスポート
* LaTeXとPDFエクスポート::  LaTeXへのエクスポート、そしてPDFへ変換のプロセス
* DocBookエクスポート::  DocBookへのエクスポート
* TaskJugglerエクスポート::  TaskJugglerへのエクスポート
* Freemindエクスポート::  Freemindのマインドマップへのへエクスポート
* XOXOエクスポート::   XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート

HTMLのエクスポート



* HTMLエクスポートコマンド::  HTMLへのエクスポートをどうやって起動するか
* HTMLタグの引用符::   Org-modeにHTMLを直接書き込む
* HTMLエクスポートでのリンク::  リンクはどのように解釈されフォーマットされる
か
* HTMLエクスポートでのテーブル::  テーブルのフォーマットをどのように修正する
か
* HTMLエクスポートでの画像::  HTMLの出力にどのように図形を挿入するか
* HTMLエクスポートでの数式フォーマット::  web上でも美しい数式
* HTMLエクスポートでのテキストエリア::  例示を表現するための別の方法
* CSSサポート::          出力の見栄えを変更する
* JavaScriptサポート::   webブラウザ上で説明や折りたたみを表示する

LaTeXとPDFのエクスポート



* LaTeX/PDFエクスポートコマンド::  どのキーでどのコマンドが起動するのか
* ヘッダーと章立て::  ファイル構造を出力するための準備
* LaTeXコードの引用::  LaTeXコードの統合
* LaTeXエクスポートでのテーブル::  LaTeXに表をエクスポートする際のオプション
* LaTeXエクスポートでの画像::  LaTeXの出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える

DocBookエクスポート



* DocBookエクスポートコマンド::  DocBookエクスポートの起動方法
* DocBookコードの引用::  DocBookコードをOrgファイルに取りこむ
* 章の繰り返し::       DocBookで繰り返し使われるセクション
* DocBookエクスポートでのテーブル::  表はHTMLのテーブルとして出力される
* DocBookエクスポートでの画像::  DocBookの出力に図を挿入する方法
* 特殊文字::             特殊文字の処理方法

公開



* 設定::                   プロジェクトの定義
* ファイルのアップロード::  ファイルをサーバにアップロードする方法
* 設定例::                プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド

設定



* プロジェクトのリスト::  主な設定用の変数
* ソースと公開先::    ここからそこまで
* ファイルの選択::    どのファイルがプロジェクトの一部なのか
* 公開アクション::    公開を行う関数の設定
* 公開オプション::    HTMLエクスポート時の調整
* ファイルリンク付きの公開::  どのリンクを公開した後も有効にしておくか
* サイトマップ::       全てのページリストの生成
* インデックスの生成::  ページを超えたインデックス

設定例



* 簡単な例::             1コンポーネントでの公開
* 複雑な例::             複数コンポーネントでの公開

ソースコードとの連携



* コードブロックの構造::  コードブロックシンタックスについて
* ソースコードの編集::  言語のメジャーモードを用いた編集
* コードブロックのエクスポート::  コード(と/または)結果のエクスポート
* ソースコードの抽出::  ソースコードのみのファイルの作成
* コードブロックの評価::  Org-modeバッファ中の評価結果の場所
* Babelライブラリ::     有用なコードブロックのライブラリを読む、そして貢献す
る
* 言語::                   コードブロックがサポートする言語一覧
* ヘッダー引数::       コードブロックの機能的な設定
* 評価の結果::          評価の結果を操作する方法
* Nowebでの参照の構文::  Org-modeでの文芸的プログラミング
* キーバインドと便利関数::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す

ヘッダー引数



* ヘッダー引数の利用::  ヘッダー引数を設定するための別の方法
* ヘッダー引数の指定::  ヘッダー引数のリスト

ヘッダー引数の利用



* システム全体のヘッダー引数::  全体的な初期値を設定する
* 各言語のヘッダー引数::  言語ごとに初期値を設定する
* バッファ全体のヘッダー引数::  特定のバッファで初期値を設定する
* Orgプロパティでのヘッダー引数::  ヘッダーまたはバッファに初期値を設定する
* コードブック指定のヘッダー引数::  値を設定するうえで最も一般的な方法
* 関数実行時のヘッダー引数::  最も細かいレベル

ヘッダー引数の指定



* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* tangle::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレク
トリの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をト
グルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する

その他



* 補完::                   M-TABはあなたが何を必要としているか知っています
* 簡単なテンプレート::  構造的な要素の素早い挿入
* スピードキー::       見出しの開始位置で使うの電撃的なコマンド
* コード評価の安全性::  Org-modeのファイルはインラインのコードを評価する
* カスタマイズ::       Org-modeをユーザーの好みに合わせる
* バッファ内での変数制御::  「#+KEYWORDS」の概要
* 「C-c C-c」キーはとても忙しい::  わからなかったら「C-c
                                                C-c」
* アウトラインの「*」を取り除く::  アウトラインの「*」の並びを取り除く
* TTYキー::                Org-modeをtty端末で使う
* 連携::                   Emacsの他のパッケージ

他のパッケージとの関係



* 協調::                   Orgと連携するパッケージ
* 衝突::                   衝突を起こすパッケージ

ハッキング



* フック::                Orgの内部にアクセスするのはどれ？
* アドオンパッケージ::  利用できるエクステンション
* ハイパーリンクのタイプの追加::  新しいリンクタイプの作成
* 状況依存のコマンド::  機能的なコマンドの追加方法
* 任意の構文によるテーブル::  LaTeXのためのOrgtblと他のプログラム
* ダイナミックブロック::  自動的にブロック内に挿入する
* 特別なアジェンダビュー::  カスタマイズされたビュー
* アジェンダ情報の抽出::  アジェンダ情報の後処理
* プロパティAPIを使う::  項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング

任意のシンタックスによる表やリスト



* ラジオテーブル::    ラジオテーブルの送受信
* LaTeXの例::              少しずつ、チュートリアルのようなものを
* 変換関数::             コピーと修正
* ラジオリスト::       リストでも同じように

MobileOrg



* ディレクトリの設定::  モバイルデバイスとはどこでデータをやりとりすれば良い
ですか？
* ディレクトリへの出力::  Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する


File: org-ja,  Node: まえがき,  Next: ドキュメントの構造,  Prev: Top,  Up: Top

1 まえがき
**************

* Menu:

* 概要::                   Org-modeで何ができるか
* インストール::       Org-modeのインストール
* アクティベーション::  Org-modeを特定のバッファで有効にする方法
* フィードバック::    バグ報告、アイディア、パッチなど
* 慣例::                   マニュアルで使われる植字の慣例


File: org-ja,  Node: 概要,  Next: インストール,  Prev: まえがき,  Up: まえがき

1.1 概要
==========

Org-modeは、高速かつ効率的に動作するプレーンテキストのシステムを用いて、ノー
トを保存したり、TODOリストを管理したり、プロジェクトを計画するためのEmacsモ
ードです。

プレーンなテキスト形式でリストやプロジェクトに関する情報を含む分散したノート
から、Org-modeは組織的に結びついたタスク群を生成します。Org-modeはアウトライ
ンモードを元に実装されているます。そのため、大きなファイルの内容をわかりやす
く構造化した状態に維持できます。また、必要な部分だけを表示する機能と文書構造
の編集機能がツリー形式の文書編集を手助けします。ビルトインされたテーブルエデ
ィタで簡単に表を作成できます。Org-modeは、TODOアイテム、デッドライン、タイム
スタンプ、そして、スケジュール管理に対応しています。スケジュール管理はタスク
を動的にアジェンダへ蓄積します。アジェンダはEmacsのcalendarとdiaryの多くの機
能を利用し、スムーズに統合しています。プレーンテキストで記述されるURLに似た
リンクは、ウェブサイト、メール、ネットのメッセージ、BBDBのデータ、そして、プ
ロジェクトに関連するどのようなファイルとも結びついています。ノートの印刷や共
有のために、構造化されたアスキー形式のファイルやHTMLのファイル、または（TODO
とアジェンダアイテムに限り）iCalendar形式のファイルへOrg-modeのファイルをエ
クスポートできます。また、リンクの張られたウェブページ一式を公開するツールと
しても役立ちます。

見出しとなるノードにメタデータを追加することで、Org-modeはプロジェクトを計画
する環境となります。そのメタデータに基づくことでクエリの中から特定のエントリ
ーを抽出でき、動的なagenda viewsを生成できます。

Org-modeはOrg-Babel環境を含んでいて、次のようなことが可能になります。すなわ
ち、ソースコードブロックが組み込まれたファイルで作業でき、コードを評価、文書
化、そして、文芸的プログラミングを実践できます。

Org-modeの自動的かつ文脈を読み取る表編集機能は、表計算ソフトと互換性があり、
マイナーモードのOrgtblを動かすことでどのようなメジャーモードにも組み込めます
。表を変換することで、たとえばLaTeXの表のように任意のファイルタイプで表を維
持することができます。構造編集とリスト生成の機能は、マイナーモードの
OrgstructによってOrg-modeの外部で利用できます。

Org-modeは単純なものは単純なまま保持します。初めて起動したOrg-modeは、わかり
やすく、簡単に使えるアウトライナーのように感じるはずです。Org-modeに複雑さは
なく、それでいて、必要に応じて数多くの機能を利用できます。Org-modeはツールボ
ックスであり、様々な方法で、そして様々な目的で利用できます。例えば、具体的に
は以下のようなものです。

     * ツリーの表示状態の切り替えと構造編集を可能にしたアウトラインの拡張
     * 構造化されたノートを取るための、テキスト整形の仕組みと表編集機能
     * TODOリストの編集機能
     * 締切日とスケジュールの管理機能を備えた完全なアジェンダと予定表
     * Devid Allen 氏のGTDシステムを実行するための環境
     * シンプルなハイパーテキストシステム（HTMLとLaTeXエクスポートを含む）
     * 内部リンクで構成されたウェブページ群を生成するための公開ツール
     * 文芸的プログラミングのための環境

最新バージョンへのリンクがある、Org-modeのためのウェブサイトがあります。関連
情報、よくある質問(FAQ)、または、チュートリアルなどへのリンクも集約されてい
ます。`http://orgmode.org' で公開されています。

   このマニュアルのバージョン7.3は paperback book from Network Theory
Ltd. (http://www.network-theory.co.uk/org/manual/)で手に入ります。


File: org-ja,  Node: インストール,  Next: アクティベーション,  Prev: 概要,  Up: まえがき

1.2 インストール
======================

重要:
もしあなたが、Emacsの一部として組み込まれたOrg-modeを利用している、もしくは、
XEmacsのパッケージを利用している場合には、このセクションを飛ばして直接
*note
アクティベーション::に移動してください。あなたのEmacsに含まれているOrg-mode
（存在する場合）のバージョンを見るためには、`M-x load-library RET
org'を実行 してから、`M-x org-version'を実行してください。

すでにインターネットからOrg-modeをダウンロードしているならば、`.zip'か`.tar'
もしくはGitアーカイブかを問いませんが、以下の手順に沿ってインストールしてく
ださい。まず、配布されたOrg-modeのディレクトリを解凍し、そこに移動します。次
に、`Makefile'の最初のセクションを編集します。Emacsバイナリの名前を記入しな
ければなりません。たとえば、`emacs'もしくは`xemacs'のような名前です。最後に
、ローカルのLispとInfoファイルが保存されているディレクトリへのパスを記入しま
す。システムディレクトリへのアクセス権を持っていないならば、`lisp'（訳注：解
凍したディレクトリの直下にあるサブディレクトリ）をEmacsのロードパスに加える
ことで、配布されたOrg-modeのディレクトリを使って、簡単にOrg-modeを動かせます
。このようにするためには、`.emacs'に次の行を加えてください。

     (setq load-path (cons "~/path/to/orgdir/lisp" load-path))

もし`contrib'サブディレクトリのコードを使うならば、このディレクトリについて
も同様のステップを実行します。

     (setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))

そして、シェルコマンドを使ってLispファイルをバイトコンパイルします。

     make

解凍したOrg-modeファイルがあるディレクトリでOrg-modeを動かすならば、これでイ
ンストール完了です。もしOrg-modeをシステムディレクトリにインストールしたいな
らば、管理者権限で次のコマンドを実行します。

     make install

INFOファイルのインストール方法はシステムに依存します。これは、`install-info'
プログラムの違いに原因があります。Debianであれば、`install-info'がINFOファイ
ルを正しいディレクトリにコピーし、INFOディレクトリファイル（訳注：dirのこと
）を変更します。その他の多くのシステムでは、各ファイルが別々に正しいディレク
トリにコピーされる必要があります。そして、`install-info'がディレクトリファイ
ルだけを修正します。システムのドキュメントを読んで、次のどちらのコマンドを必
要とするかを調査してください。

     make install-info
     make install-info-debian

最後に、以下の一行を`.emacs'に追加します。これは、Org-modeの開始時には読み込
まれないファイルにある関数を、Emacsが自動的に読み込むために必要です。
     (require 'org-install)

次節に解説されているOrg-modeのアクティベーションを忘れずに実行してください。


File: org-ja,  Node: アクティベーション,  Next: フィードバック,  Prev: インストール,  Up: まえがき

1.3 アクティベーション
===============================

拡張子が`.org'のファイルで必ずOrg-modeを利用することを確実にするために、次の
行を`.emacs'に追加します。
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
Org-modeのバッファは、フォントロックが有効になっている必要があります。これは
Emacsの標準の設定です(1)。

   Org-modeの4つのコマンド（`org-store-link', `org-capture',
`org-agenda',
`org-iswitchb'）は、グローバルキーを割り当てて使いやすくするべきでしょう（つ
まり、Org-modeのバッファだけではなく、Emacsでいつでも使えるようにします。）
。これらのキーバインドとして以下を割り当てることをお勧めします。自分の環境に
応じて適当にキーを変更してください。
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)

ここまでの設定を用いると、拡張子が`.org'のファイルのすべてがOrg-modeに設定さ
れます。別の方法として、ファイルの一行目に次のような一文を追加することでも、
Org-modeに設定できます。

     MY PROJECTS    -*- mode: org; -*-

この設定が書き込まれたバッファは、ファイルの名前とは無関係にOrg-modeが有効に
なります。変数`org-insert-mode-line-in-empty-file'も確認してください。

Org-modeの多くのコマンドは、リージョンがアクティブならば、そのリージョンに対
して動作します。アクティブなリージョンをハイライトするためには、
`transient-mark-mode'（XEmacsでは`zmacs-regions'）を有効にする必要があります
。Emacs23では標準で有効になっていますが、Emacs22では次のように自分で設定する
必要があります。
     (transient-mark-mode 1)
もし`transient-mark-mode'が好みでないならば、マウスを利用した領域の選択で、
アクティブなリージョンを指定できます。もしくは、カーソルを移動する前に
`C-<SPC>'を二回押します。

   ---------- Footnotes ----------

   (1) もしグローバルにフォントロックを使わない場合は、 `(add-hook
'org-mode-hook 'turn-on-font-lock)'を使って、Org-modeのバッファの
フォントロックを有効化してください。


File: org-ja,  Node: フィードバック,  Next: 慣例,  Prev: アクティベーション,  Up: まえがき

1.4 フィードバック
=========================

Org-modeで問題を発見した場合、あるいは質問や意見、アイディアがある場合には、
Org-modeのメーリングリスト<emacs-orgmode@gnu.org>へメールしてください。あな
たがメーリングリストのメンバーでないと、投稿したメールは管理者が承認した後に
メーリングリストへ転送されます(1)。

バグをレポートする時は、まず始めに最新バージョンのOrg-modeを利用して該当のバ
グが再現されるか試してください。古いバージョンを利用している場合、すでにその
バグが修正されている可能性が高いです。バグの再現性が確認できたならば、レポー
トを準備して可能な限り多くの情報を提供してください。具体的には、Emacsのバー
ジョン情報（`M-x emacs-version <RET>'）とOrg-modeのバージョン情報（
`M-x org-version
<RET>'）、また、Org-modeに関連する`.emacs'の設定をバグレポ
ートに記載してください。このようなバグレポートの形式を守るための最も簡単な方
法は、次のコマンドを利用することです。
     M-x org-submit-bug-report
この関数を実行すると、Emacsのメールバッファに必要なテンプレートを書きこんで
くれるので、バグの説明だけを書き加えればよい状態になります。Emacsを利用して
メールを送信しない場合は、テンプレートの内容をメールクライアントにコピー＆ペ
ーストしてください。

もしOrg-modeを使っていてエラーが発生したら、バックトレースがとても役立ちます
（作り方は次節を参照してください）。しばしば例となる小さなファイルが問題解決
の手助けになります。それらには次のような明瞭な情報を含んでいます。

  1. 正確に何を実行したのか

  2. 何が起きることを期待していたのか

  3. 期待と異なり何が起こったのか
        Org-modeの改善にご協力いただき感謝します。

有用なバックトレースを生成する方法
...................................................

Org-modeを利用していて理解できないメッセージのエラーが発生したら、バグを発見
した可能性があります。エラーを報告する最良の方法は、すでに説明したバグレポー
トの書式に加えて、_backtrace_を提供することです。バックトレースは、ビルトイ
ンされたデバッガによるエラーの発生箇所とどのように発生したかについての情報を
含みます。以下に、有用なバックトレースを生成する手順を示します。

  1.
     コンパイルされていないOrg-modeのLispファイル群を再度読み込みます。コン
     パイルされていないコードを利用して生成したバックトレースは、より多くの
     情報を含みます。そのために、次のコマンドを実行します。
          C-u M-x org-reload RET
     もしくは、`Org -> Refresh/Reload -> Reload Org
     uncompiled'をメニューか ら選択します。

  2. オプションメニュー`Options'から、`Enter Debugger on
     Error'を選択します
     （XEmacsでは、このオプションは`Troubleshooting'サブメニューにあります
     ）。

  3.
     エラーを再現するために必要な操作を行なってください。実行した操作を忘れ
     ずにメモしておいてください。

  4.
     エラーが再現されると、`*Backtrace*'バッファが画面上に表示されます。こ
     のバッファを別のファイルとして保存し（例えば`C-x
     C-w'を使って）、バグ レポートに添付します。

   ---------- Footnotes ----------

   (1) メーリングリストの管理者の仕事量を最小化する
ために、ぜひメーリングリストの購読を検討してください。


File: org-ja,  Node: 慣例,  Prev: フィードバック,  Up: まえがき

1.5 本マニュアルで使われる植字ルール
====================================================

Org-modeは、3種類のキーワードを使います。TODOキーワード、タグ、プロパティで
す。このマニュアルでは次のように植字を使い分けます。

`TODO'
`WAITING'
     TODOキーワードは、すべて大文字で記述されます。ユーザーが定義する場合も
     同様です。

`boss'
`ARCHIVE'
     ユーザー定義のタグは、小文字で記述されます。特別な意味を持つビルトイン
     されたタグは、すべて大文字で記述されます。

`Release'
`PRIORITY'
     ユーザー定義のプロパティは、大文字で始めて残りが小文字で記述されます。
     特別な意味を持つビルトインされたプロパティは、すべて大文字で記述されます。

このマニュアルでは、Org-modeの機能を利用するためのキーバインドと、対応するコ
マンドの両方を表記します。Org-modeは、しばしば異なる関数に対して同じキーバイ
ンドを使います（これはコマンドを利用する状況に依存しています）。そのようなキ
ーバインドが割り振られたコマンドには、`org-metaright'のような一般的な名称が
あります。このマニュアルでは、可能な限り一般的なコマンドを用いて内部的に呼び
出される関数の名称を提示します。例えば、ドキュメントの構造についての章では、
`M-<right>'は`org-do-demote'を呼び出すように表記します。一方で、テーブルにつ
いての章では、`org-table-move-column-right'を呼び出すように表記します。

もし望むならば、`org.texi'にある`cmdnames'フラグの設定を外すことで、コマンド
の名称を表示しないようにマニュアルをコンパイルできます。


File: org-ja,  Node: ドキュメントの構造,  Next: テーブル,  Prev: まえがき,  Up: Top

2 ドキュメントの構造
*****************************

Org-modeは、Outline
modeをベースとしており、ドキュメントの構造を編集するため
にフレキシブルなコマンドを用意しています。

* Menu:

* アウトライン::       Org-modeはoutline-modeをベースにしています
* ヘッドライン::       org-modeの階層構造の見出しをどう組み込むか
* 表示、非表示の切り替え::  簡単な操作で表示、非表示を切り替える
* 移動::                   他の見出しにジャンプする
* 見出し位置と階層の変更::  見出しの順序と階層を変更する
* ツリーの抽出::       文脈の中に埋め込まれた一致
* エントリー中の階層構造::  １つのエントリーの中に階層のある構造を追加する
* 引き出し::             いろいろなものを隠す
* ブロック::             ブロック単位で折りたたむ
* 脚注::                   org-modeの構文の中で脚注はどのように規定されるの
か
* Orgstructモード::       org-mode外のモードでの階層編集


File: org-ja,  Node: アウトライン,  Next: ヘッドライン,  Prev: ドキュメントの構造,  Up: ドキュメントの構造

2.1 アウトライン
======================

Org-modeはoutline
modeの上で実行されます。アウトラインによって階層構造で体系化されたドキュメン
トが作られ、（少なくとも私にとっては）それによって、ノートや思考の最高の表現
方法となります。ドキュメントの大きな部分を折りたたむ（隠す）ことによって、ド
キュメントの骨格のみを表示したり、現在、作業している部分を表示したりして、ド
キュメントの構造の全体を見渡すことができるのです。Org-modeは、全体を表示した
り／隠したりする機能を、たったひとつのコマンド、`org-cycle'、それは<TAB>キー
と結びついていますが、に圧縮することにより、アウトラインの使用を大変単純なも
のにしています。


File: org-ja,  Node: ヘッドライン,  Next: 表示、非表示の切り替え,  Prev: アウトライン,  Up: ドキュメントの構造

2.2 ヘッドライン
======================

見出しは、アウトラインのツリーの構造を定義します。Org-modeの見出しは、左のマ
ージン(1)上にある１つもしくは それ以上の数の「＊」で始まります。例えば。

     * Top level headline
     ** Second level
     *** 3rd level
         some text
     *** 3rd level
         more text

     * Another top level headline

たくさんの「＊」があるとうるさく感じ、空白のあとに、見出しの始まりとしてのひ
とつの「＊」があるという形式のアウトラインを好む人もいるでしょう。このような
形式の設定について、*note
アウトラインの「*」を取り除く::,で説明しています。

最後のサブツリーの直後の空白行は、そのサブツリーの一部と見なされます。そのた
めサブツリーが折り畳まれたときには、隠れてしまいます。しかしながら、すくなく
とも2行の空白行を残したときは、折り畳んだビューを構造化するために、サブツリ
ーを折り畳んだあとも、1つの空白行は残ったままになります。この動作を修正した
いときは、`org-cycle-separator-lines'を参照してください。

   ---------- Footnotes ----------

   (1)
見出しの中で、`C-a'、`C-e'および`C-k'の特別な作用を設定するために、
`org-special-ctrl-a/e'、`org-special-ctrl-k'、および
`org-ctrl-k-protect-subtree'の変数を参照してください。


File: org-ja,  Node: 表示、非表示の切り替え,  Next: 移動,  Prev: ヘッドライン,  Up: ドキュメントの構造

2.3 表示、非表示の切り替え
=====================================

アウトラインによって、バッファの中で、テキストの一部を隠すことが可能となりま
す。Org-modeはバッファ内での表示の状況を変更するために、<TAB>と`S-<TAB>'とに
結びついた2つのコマンドを使用します。

`<TAB>'     (`org-cycle')
     _Subtree cycling_：カレントのサブツリーの状態を順番 に表示します。

          ,-> FOLDED -> CHILDREN -> SUBTREE --.
          '-----------------------------------'

     これを動作(1)
     させるためにはカーソルが見出しの上に置かれている必要があります。カーソ
     ルがバッファの一番上の行にあり、そして最初の行が見出しでない場合は、
     <TAB>が実際にグローバルな切り替えが実行されます。（下記を参照） (2)
     前置引数(`C-u
     <TAB>')をつけて呼び出したときは、グローバルな切替が実行 されます。

`S-<TAB>'     (`org-global-cycle')
C-u <TAB>
     _Global cycling_：バッファ全体を交代で状態を変更する。

          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'

     `S-<TAB>'がNという数字のついた前置引数と一緒に呼び出されたときは、レベ
     ルN以上の見出しがCONTENTSビューに表示されます。テーブルの中では、
     `S-<TAB>'は前のフィールドにジャンプするということに注意してください。

`C-u C-u C-u <TAB>'     (`show-all')
     全てを表示する。引き出しを含む。

`C-c C-r'     (`org-reveal')
     カレントエントリーや、下の見出しや上の階層を表示して、その場所でのコン
     テクストを表示する。ツリーの抽出コマンド（*note
     ツリーの抽出::）やアジェンダ のコマンド（*note
     アジェンダのコマンド::）によって表示された場所の周辺で作業
     をするのに役立ちます。前置引数をつけることで、各階層での同一レベルの見
     出しを表示する。前置引数を2重に使った場合は、親のサブツリー全体を表示する。

`C-c C-k'     (`show-branches')
     サブツリーの見出しを全て表示し、ひとつのサブツリーのためのコンテンツビ
     ューである。

`C-c C-x b'     (`org-tree-to-indirect-buffer')
     　間接的なバッファ (3).
     の中にあるカレントのサブツリーを表示する。Nという数値付きの前置引数を
     つけると、N段階上の階層に上がるがそのツリーを捉える。もしもNがマイナス
     の値ならば、多くの階層まで遡る。`C-u'の前置引数をつけたならば、それ以
     前に使用された間接的なバッファを削除してはならない。

EmacsであるOrg-modeファイルを最初に開いたときに、グローバルな状態としては、
概観のビューで開くように設定されています。すなわち、最上位の階層の見出しのみ
が表示されています。これは、`org-startup-folded'変数によって設定されています
。つまり、以下に示す行をバッファ上のどこかに追加することによって、ファイル毎
に設定することができます。

     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything

さらに、どのエントリーも`VISIBILITY'属性（*note
プロパティとカラム::）を持っており
、それを受けて適用された表示性をしめすでしょう。この属性のために許されている
値は、`folded'、`children'、`content'および`all'です。
`C-u C-u <TAB>'     (`org-set-startup-visibility')
     　そのバッファにおける起動時
     の表示条件に戻ります。すなわち、起動時のオプションで要求されている内
     容、そして個々のエントリーの中で設定されている`VISIBILITY'の属性に。

   ---------- Footnotes ----------

   (1) しかしながら、`org-cycle-emulate-tab'オプションを参照してく
ださい。

   (2) `org-cycle-global-at-bob'オプション参照。

   (3) 間接的なバッファとは、
は全てのバッファを含んでいるが、カレントのツリーに制限されるだろう。間接的なバッファを編集することは、オリジナルのバッファに変更を加えることでもある。だがそのバッファの中での表示に影響を与えることはできない。


File: org-ja,  Node: 移動,  Next: 見出し位置と階層の変更,  Prev: 表示、非表示の切り替え,  Up: ドキュメントの構造

2.4 移動
==========

以下のコマンドはバッファの中で他の見出しにジャンプするものです。

`C-c C-n'     (`outline-next-visible-heading')
     　次の見出しへ。

`C-c C-p'     (`outline-previous-visible-heading')
     　前の見出しへ。

`C-c C-f'     (`org-forward-same-level')
     　次の同一階層の見出しへ。

`C-c C-b'     (`org-backward-same-level')
     　前の同一階層の見出しへ。

`C-c C-u'     (`outline-up-heading')
     　一つ上の階層の見出しに戻る。

`C-c C-j'     (`org-goto')
     　現在のアウトラインの表示状態を変更することなく、別
     の場所にジャンプする。現在のバッファの中で文書の構造を表示し、そこでは
     あなたの目的の場所を見つけるために以下のようなキーを使用することができます。
          <TAB>         表示を切り替える。
          <down> / <up>   次の／前の表示されている見出しへ。
          <RET>         この場所を選択する。
          /           ツリーの抽出による検索を実行する
          もしも`org-goto-auto-isearch'　を停止したときには以下のキーが動作する
          n / p        次の／前の表示されている見出しへ。
          f / b        次の／前の同じ階層の見出しへ。
          u            ひとつ上の階層へ。
          0-9          数値の変数。
          q            停止
     `org-goto-interface'変数もまた参照のこと。


File: org-ja,  Node: 見出し位置と階層の変更,  Next: ツリーの抽出,  Prev: 移動,  Up: ドキュメントの構造

2.5 見出し位置と階層の変更
=====================================

`M-<RET>'     (`org-insert-heading')
     カレントの階層と同じ階層の新しい見出しを挿入します。もしもカーソルがプ
     レーンなリストアイテムの中にあるならば、新しいアイテムが作成されます
     (*note
     エントリー中の階層構造::)。新しい見出しを強制的に作成するには前置引数
     をつけます。このコマンドが行の途中で使用されたときは、その行が分割され
     、その行の残りの部分が新しい見出し(1)となり
     ます。もしも見出しの先頭でそのコマンドが使用されたときは、カレント行の
     前に新しい見出しが作られます。もしも見出し以外の行の先頭の場合は、その
     行の内容が新しい見出しとして作成されます。そのコマンドが折り畳まれてい
     るサブツリーの行末で使用されたならば（i.e.
     見出しの最後の楕円の後）、カレントの見出しと同様な見出しが、サブツリー
     の末尾の後に挿入されるでしょう。

`C-<RET>'     (`org-insert-heading-respect-content')
     `M-<RET>'とちょうど同じよ
     うに、カレントの見出しの下に新しい見出しが付け加えられたときを除いて、
     新しい見出しは本文の前に置かれるかわりに、本文の後に置かれます。このコ
     マンドはエントリーの中のどの場所からでも動作します。

`M-S-<RET>'     (`org-insert-todo-heading')
     カレントの見出しと同じ階層の新しいTODOエントリーが挿入されます。
     `org-treat-insert-todo-heading-as-state-change'変数も同じように参照し
     てください。

`C-S-<RET>'     (`org-insert-todo-heading-respect-content')
     カレントの見出しと同一の階層に新しいTODOエントリーを挿入します。
     `C-<RET>'と同様に、新しい見出しはカレントのサブツリーの後に挿入される
     でしょう。

`<TAB>'     (`org-cycle')
     新しいエントリーでまだ文が書かれていない状態で、最初に<TAB>を実行する
     と、そのエントリーの階層を下げ、その前の見出しの子になります。次に
     <TAB>を実行すると、その見出しを親として、それによってトップの階層まで
     、作成します。さらに次の<TAB>で、初期の階層にもどります。

`M-<left>'     (`org-do-promote')
     カレントの見出しを1階層上げる。

`M-<right>'     (`org-do-demote')
     カレントの見出しを1階層下げる。

`M-S-<left>'     (`org-promote-subtree')
     カレントのサブツリーを1階層上げる。

`M-S-<right>'     (`org-demote-subtree')
     カレントのサブツリーを1階層下げる。

`M-S-<up>'     (`org-move-subtree-up')
     サブツリーを上に移動する。（同じ階層の前のサブツリーと交換する。）

`M-S-<down>'     (`org-move-subtree-down')
     サブツリーを下に移動する。（同一階層の次のサブツリーと交換する。）

`C-c C-x C-w'     (`org-cut-subtree')
     サブツリーをキルする。i.e.
     そのサブツリーをバッファから取り除くが、キルリングに保存する。Nという
     数字付きの前置引数をつけたときは、N個連続でサブツリーをキルする。

`C-c C-x M-w'     (`org-copy-subtree')
     サブツリーをキルリングにコピーする。Nという数字付きの前置引数をつけた
     ときは、N個連続でサブツリーをコピーする。

`C-c C-x C-y'     (`org-paste-subtree')
     キルリングからサブツリーを貼り付ける。これによると、貼り付けるポジショ
     ンにうまく合わせて、ツリーに適合するようにサブツリーの階層を調整する。
     数字付きの前置引数をつけるか、`****'のような星印のついた見出しの後に貼
     り付けることによって、貼り付ける階層を指定することができる。

`C-y'     (`org-yank')
     `org-yank-adjusted-subtrees'と`org-yank-folded-subtrees'という変数によ
     って、Org-modeの内部の`yank'コマンドは、賢い方法で、`C-c C-x
     C-y'と同
     等のコマンドを用いて、折り畳まれているサブツリーを貼り付けることができ
     るでしょう。デフォルトの設定では、階層の調整は行われませんが、貼り付け
     られたツリーは、既に表示されているテキスト受け入れない限り、折り畳まれ
     たままでしょう。このコマンドに対して何らかの前置引数をつけることで、渡
     されたプレフィックスに応じて、通常の`yank'を実行させることになります。
     通常のyankを実行する良い方法は`C-u
     C-y'です。yankの後で`yank-pop'を使
     うと、階層の調整や折り畳みをすることなく、それ以前にkillしたアイテムを
     プレーンにyankします。

`C-c C-x c'     (`org-clone-subtree-with-time-shift')
     た
     くさんのそれと同じ兄弟のコピーを作成することで、サブツリーの複製を作り
     ます。たくさんのコピーの作成を実行したいならば、そのエントリーに含まれ
     ているタイムスタンプも調整されるように指定することもできます。この機能
     は便利です。例えば、準備している一連の講義に関連した沢山のタスクを作成
     するという場合のように。もっと詳細な情報が必要ならば、
     `org-clone-subtree-with-time-shift'コマンドの解説を参照してください。

`C-c C-w'     (`org-refile')
     エントリーやリージョンを別の場所に保管します。 *Note
     ノートの再配置::.

`C-c ^'     (`org-sort-entries-or-items')
     同じ階層のエントリー
     を並び替えられます。アクティブなリージョンがあるときに、そのリージョン
     にあるすべてのエントリーは順番に並びます。もう一方で、カレントの見出し
     の子供の階層も並び替えられます。並び替えの形式をコマンドで入力します。
     すなわちアルファベット順、数字順、時間順（実行するために参照される作成
     日、予定日、期限などの最初のタイムスタンプ）、優先順位順、TODOキーワー
     ド順（設定の中で定義された一連のキーワードの中で）あるいは属性の価値の
     順に並べ替えるために。並び順を反転することも同様に可能です。並び替えの
     キーを拡張するために自分自身の関数を用意することもできます。`C-u
     C-u'
     という二重の前置引数を使用すると、複製されたエントリーは削除されます。

`C-x n s'     (`org-narrow-to-subtree')
     カレントのサブツリーのためにバッファを ナローイングします。

`C-x n b'     (`org-narrow-to-block')
     カレントのブロックの ためにバッファをナローイングします。

`C-x n w'     (`widen')
     ナローイングを取り除きバッファを広げます。

`C-c *'     (`org-toggle-heading')
     普通の行やプレーンなリストアイテムを見出しに変更します。（そのため、そ
     れらの場所によってはサブの見出しになります。）星汁うぃを取り除くことに
     よって見出しを普通の行に変更することもできます。もしもアクティブなリー
     ジョンあるならば、その領域のすべての行が見出しに変更されます。もしもそ
     の領域の中の最初の行がアイテムだったら、そのアイテムの行のみが見出しに
     変更されます。最後に、もし最初の行が見出しならば、その領域の中の全ての
     見出しから星印が取り除かれます。

   アクティブなリージョンがあるときには（Transient Mark
mode）、そのリージョンのすべての見出しの階層を上げたり、下げたり作用すること
ができる。あるリージョンの見出しを選択するためには、行の先頭にポイントを置い
てマークし、最初の見出しの先頭でマークし、変更する最後の見出しの次の行にポイ
ントを置くのが良い方法である。カーソルがテーブル (*note
テーブル::)の中にあるときに、Meta-Cursorキーは異なる機能性を持つことに注意
してください。

   ---------- Footnotes ----------

   (1) もしも行を途中で分割したくないとき
は、`org-M-RET-may-split-line'変数をカスタマイズしてください。


File: org-ja,  Node: ツリーの抽出,  Next: エントリー中の階層構造,  Prev: 見出し位置と階層の変更,  Up: ドキュメントの構造

2.6 ツリーの抽出
======================

Org-modeの重要な特徴の一つに、あるアウトラインのツリーに含まれている選択され
た情報のために_sparse
trees（ツリーの抽出）_を作ることができるということがあ
ります。そのため文書全体が最大限畳まれていても、その(1)
上に見出し構造に沿って表示することができるのです。試してみて、それがどんなに
素早く動作するかを見てください。

Org-modeにはそういうツリーを作成するためのいくつものコマンドがあります。これ
らのコマンドの全てはディスパッチャーを通してアクセスすることができます。

`C-c /'     (`org-sparse-tree')
     これは、ツリーの抽出を選択するためのコマンドを作成する追加のキーを入力
     する。

`C-c / r'     (`org-occur')
     発生。正規表現のための入力と全ての一致したものについてのツリーの抽出を
     表示する。もしもその一致した言葉が見出しの中にあるならば、その見出しが
     表示される。もしもその一致した言葉がエントリーの本文の中にあるならば、
     見出しと本文が表示される。最小の内容を区分するために、その一致した言葉
     のある見出しの階層全体が表示され、同様にその一致した言葉に続く見出しも
     表示される。どの一致した言葉もハイライトされる。そのハイライトはバッフ
     ァが編集コマンド(2) 　によって変更されるか、`C-c
     C-c'を押すことで消える。`C-u'前置引数が呼
     ばれたときは、以前のハイライトは維持される。そのため何度もこのコマンド
     を呼び出すと積み重ねることができる。

`M-g n'  or  `M-g M-n'     (`next-error')
     そのバ ッファの中の次のツリーの抽出部分にジャンプする。

`M-g p'  or  `M-g M-p'     (`previous-error')
     　そのバッファの前のツリーの抽出部分にジ ャンプする。

特定の検索文字列によるツリーの抽出を何度も使用するために、
`org-agenda-custom-commands'変数を使って特定のツリーの抽出に、素早くキーボー
ドからアクセスする定義をすることができる。これらのコマンドはアジェンダディス
パッチャー(*note
アジェンダのコマンド選択::)を通してアクセスすることができる。例え ば。

     (setq org-agenda-custom-commands
           '(("f" occur-tree "FIXME")))

`FIXME'という文字列にマッチするツリーの抽出するためのショートカットとして、
`C-c a f'を定義します。

他のツリーの抽出のためのコマンドは、TODOキーワード、タグ、あるいは属性に基づ
いて見出しを選択するもので、このマニュアルの後の部分で議論されるだろう。

抽出したツリーを印刷するためには、Emacsの`ps-print-buffer-with-faces'という
コマンドを使用することができます。それを使うと文書(3)のうちの表示されていな
い部分は印刷されません。あるいは、文書の見えている部分をエクスポートするため
に、`C-c C-e
v'コマンドを使用し、エクスポートしたファイルを印刷することがで きます。

   ---------- Footnotes ----------

   (1) 検索に一致したときに、
どの範囲の内容を表示するかを詳細にコントロールするために、
`org-show-hierarchy-above'`org-show-following-heading'、`org-show-siblings'
、そして`org-show-entry-below'変数を参照のこと

   (2) これは`org-remove-highlights-with-change'オプションに 依存する。

   (3) このコマンドは、XEmacsで
は動作しません。というのは、XEmacsでは、テキスト属性の部分ではなく、アウトラ
インを選択して表示するために使用するものだからです。


File: org-ja,  Node: エントリー中の階層構造,  Next: 引き出し,  Prev: ツリーの抽出,  Up: ドキュメントの構造

2.7 エントリー中の階層構造
=====================================

アウトラインのエントリーの中に、手動でフォーマットしたリストによって、別の構
造化された項目を追加することができます。そのリストを使って、チェックボックス
(*note
チェックボックス::)のリストを作成する方法が提供されています。Org-modeではそ
ういうリストの編集をサポートしており、そしてすべてのエクスポート機能
(*note
エクスポート::)はそれらのリストの構文を解析しフォーマット化することができま
す。

Org-modeでは、数字付きのリスト、順序のないリスト、そして記述リストを解釈しま
す。
   *
     _順序のない_リストアイテムは、`-'、`+'、または箇条書きの太い中黒として
     の`*'(1) が文頭に付きます。

   * _順番のある_ リストアイテムは、数字のあとにピリオドか右括弧 (2)
     がついた形ではじまっています。例えば、`org-alphabetical-lists'を設定す
     ることによって、`1.'や`1)'(3)のように。もしもあなたがリストをこれら以外の値(e.g.
     20)で始めたいと思ったら、そのアイテムの最初の文字を`[@20]'(4)
     のような文字で始めます。

   *
     _説明_のリストアイテムは順序のないリストアイテムで、説明内容と_用語_の
     記述を区別するために` ::
     'といった区分するための記号を含んでいます。

同じリストに属しているアイテムは、最初の行と同じインデントでなければならない
。特に、もしも順番のついたリストが`10.'番に到達したら、その２つの数字の番号
は、そのリストの中の他の番号とおなじく左寄せで書かれなければなりません。アイ
テムは、次の行が、そのbullet／数字よりも少ないか等しいインデントの場合の前ま
でで終わります。

   リストを終わらせるために２つの方法(5)
が用意されています。ひとつのリストは、それぞれのアイテムが終了すると終わりま
す。そのことは、トップのレベルのアイテムよりも少ないか等しいインデントの行の
前までであるということを意味しています。また、空行 (6)
が2行あると終了します。その場合、すべてのアイテムが閉じていることになります
。うまく管理するには、`org-list-end-regexp'の中のどれかのパターンの設定でリ
ストを終わることです。事例を紹介します。

     ** ロードオブザリング
        渡しの大好きなシーンは (この順で)
        1. the Rohirrimの攻撃
        2. Eowynが魔法使いの王と一緒に戦うところ
           + これはもともと本を読んだときも私のお気に入りのシーンだった
           + 私はMiranda Ottoが本当に好きだ。
        3. Peter JacksonがLegolasに撃たれる
           - DVDだけで
           そのとき彼は本当に面白い顔をした。
        しかし、結局、映画全体を通して個性的なシーンがない。
        この映画での重要な俳優は:
        - Elijah Wood :: Frodo役
        - Sean Austin :: Sam役, Frodoの友達。私は今でもThe Goonies
          の中でMikey Walsh役として素晴らしい役回りを演じたことを覚えている。

   Org-modeでは、これらのリストを正しく(7)取り扱うために、埋め込
んだり包んだりするコマンドをチューニングし、適切にエクスポートする
(*note
エクスポート::)ことによって、これらのリストに対応しています。これらのリスト
の構造を管理しているのがインデントであるため、`#+BEGIN_...'ブロックのような
多くの構造的な構成を、特別なアイテムに帰属しているという目印のためにインデン
トを設定することができます。

（カレントのリストの階層のために使用するというよりも）サブリストのために、異
なるbulletを使うことが読みやすくできると思ったら、
`org-list-demote-modify-bullet'変数をカスタマイズしてください。

あるアイテムの最初の行（bulletまたは数字のついている行）にカーソルがあるとき
に、以下のコマンドがアイテムに作用します。それらのコマンドのいくつかは、リス
トの構造を完全なままたもつために自動的なルールのアプリケーションであることを
暗示しています。これらのコマンドの動作のいくつかを独自のやりかたにしたいなら
ば、それらを個別に無効にするために、`org-list-automatic-rules'を設定してくだ
さい。

`<TAB>'     (`org-cycle')
     アイテムは見出しの階層と同じように折り畳むことができます。通常これらは
     カーソルがプレーンなリストアイテムの上にあるときに限り動作します。もっ
     と詳しく理解するには、`org-cycle-include-plain-lists'変数を参照してく
     ださい。もしもこの変数が`integrate'に設定されているときは、プレーンな
     リストアイテムは下の階層の見出しと同様に取り扱われます。そのため筆のア
     イテムの階層はbulletまたは数字のインデントによって決定されます。アイテ
     ムは実際の見出しに常に従属しているのです。しかしながら、階層構造は完全
     に区別されたままになります。

`M-<RET>'     (`org-insert-heading')
     新しいアイテムをカレントの階層に挿入します。前置引数を用いると、新しい見出し
     (*note
     見出し位置と階層の変更::.)となります。もしもこのコマンドがアイテムの
     途中で使用されるならば、そのアイテムは２つに_分割_
     されます。そして2番目の部分は新しいアイテム(8)となります。もしもこのコマンドが、_本文の前で_実行されるならば、新し
     いアイテムは、カレントのアイテムの_前に_作成されます。

M-S-<RET>
     チェックボックス(*note
     チェックボックス::)のついた新しいアイテムを挿入します 。

`<TAB>'     (`org-cycle')
     テキストがまだ書かれていない新しいアイテムの中で、最初の<TAB>
     でそのアイテムをその前のアイテムの子の階層に移動します。それに続けて
     <TAB>を入力していくと、そのアイテムをリスト上で意味のある階層に移動し
     、そして最終的にもとあった一に戻ります。

S-<up>
S-<down>
     カレントのリストの中で、前の／次のアイテムにジャンプします。ただし
     `org-support-shift-select'
     がオフになっている時だけです。もしもそうなっていないなら、`C-<up>'
     と`C-<down>'のようなパラグラフのジャンプコマンドと全く同様の効果が現れ
     るように使用することができます。

M-S-<up>
M-S-<down>
     サブアイテムを持っているアイテムを上下（同じインデントのついたアイテム
     の前後と入れ替わる）に移動します。もしもリストに序列があるならば、自動
     的に採番しなおします。

M-<left>
M-<right>
     一つのアイテムのインデントを増減します。子のアイテムを残したままで。

M-S-<left>
M-S-<right>
     サブアイテムを含んだまま、アイテムのインデントを増減します。初期設定で
     は、アイテムのツリーはカレントのインデントに基づいて選択されます。直接
     連続してこれらのコマンドが何度も実行されたときは、たとえ新しいインデン
     トが異なる階層であるとわかっていても、初期に選択されたリージョンが使用
     されます。新しい階層を使用するために、カーソルを移動させるコマンドの連
     鎖をブレイクする必要があります。

     特別な場合として、リストの本当に最初のアイテムの上で、このコマンドを使
     用することで全てのリストを動かすことができます。この動作は
     `org-list-automatic-rules'を設定することで無効にすることができます。あ
     るリストのグローバルなインデントは、そのリストの_後の_テキストにはなん
     の影響も与えません。

C-c C-c
     アイテムの行にチェックボックス(*note
     チェックボックス::)がある場合には、チェ
     ックボックスの状態を切り替えます。ともかく、リスト全体についてbulletと
     インデントの整合性を検証します。

C-c -
     `org-plain-list-ordered-item-terminator'の設定により、異なる箇条書き/
     番号付きのbullet(`-', `+', `*', `1.', `1)')
     、またはそれらのサブセットをもとにして全体のリストの階層、リストのタイ
     プ、リストの位置(9)を切り替
     えます。Nという数字の付いた前置引数を使用すると、これらのリストの中のN
     番目のbulletが選択されます。もしも、このコマンドを呼び出したときにアク
     ティブなリージョンがあるならば、選択された文章は普通のアイテムに変更さ
     れます。前置引数を使うと、すべての行がリストアイテムに変換されます。も
     しも最初の行がすでにリストアイテムだったならば、どのアイテムの符号もリ
     ストから削除されるでしょう。最後に、アクティブなリージョンでない場合で
     も、リストアイテムに変換されます。

C-c *
     プレーンなリストのアイテムを見出しに変更します（そのロケーションによっ
     てはサブの見出しになることもあります。）*Note
     見出し位置と階層の変更::.、こ こに詳しい説明があります。

C-c C-*
     プレーンなリスト全体をカレントの見出しのサブツリーに変換します。チェック
     ボックス(*note
     チェックボックス::)は、チェックされていないとき（またはチェッ
     クされているとき）はTODO（またはDONE）キーワードになるでしょう。

S-<left>/<right>
     bullet上、またはアイテムの行のどこかにカーソルが置かれているときに、こ
     のコマンドは、また、bulletのスタイルを切り替えます。詳細は
     `org-support-shift-select'に依存します。

C-c ^
     プレーンなリストを並び替えます。次の並び替えの方法を入力します。数字順
     、アルファベット順、時間順、あるいはカスタムな機能の順番に。

   ---------- Footnotes ----------

   (1) `*'を箇条書きの太い中黒として使用するときは、それらの行はインデ
ントが設定されている必要があります。そうでなければ、それらの行は見出し
のトップ階層と見なされてしまいます。また、わかりやすいアウトラインビュ
ーを得るために、先頭の星印を隠しているときは、プレーンなリストアイテム
の場合は、本当の見出しと区別が付かなくなります。簡単に言えば、`*'をサ
ポートしているもののプレーンなリストアイテムのためには使用しない方が良
いかもしれません。

   (2)
`org-plain-list-ordered-item-terminator'の設定によって、それらのリス
トをはずすことが可能です。

   (3) `a.'、`A.'、あるいは`a)'といった形式も可能
です。通常のテキストの混乱を最小限にするために、１つの文字のみに限定さ
れています。この制限を超えると、数字に替えてbulletが自動的に使用されま
す。

   (4) そのアイテ
ムの中にチェックボックスがある場合は、そのクッキーは、チェックボックス
の_前に_置かれなければなりません。もしも活性化されたアルファベットのつ
いたリストがあるならば、`[@b]'といったカウンターを使用することもでき
ます。

   (5) これらどちらも無効にするためには、
`org-list-ending-method'を設定します。

   (6) `org-empty-line-terminates-plain-lists'を参照してください。

   (7) Org-modeではEmacs用のみの埋め込みの設定
を変更できます。XEmacs用としては、Kyle E.
Jonesの`filladapt.el'を使用しなけ
ればなりません。この設定を起動するためには、`.emacs':に `(require
'filladapt)'を記述しておく必要があります。

   (8) もしもアイテムを分割したく
ないならば、`org-M-RET-may-split-line'変数をカスタマイズしてください。

   (9) もっと多くの情報が必要ならば、
`org-list-automatic-rules'の中の`bullet'を参照してください。


File: org-ja,  Node: 引き出し,  Next: ブロック,  Prev: エントリー中の階層構造,  Up: ドキュメントの構造

2.8 引き出し
================

あるエントリーに関連する情報を保持していたいときがあるが、普段はその情報を見
たくはないということがあります。こういうときのために、Org-modeは_引き出し_と
いう機能を持っています。引き出しは
`org-drawers'(1)変数で設定する必要があります。引
き出しはこんな形をしています。

     ** これは見出しです
        ここはまだ引き出しの外側です
        :DRAWERNAME:
        これは引き出しの内側です。
        :END:
        引き出しの後です。

   見出し上で表示の切り替え(*note
表示、非表示の切り替え::)を行うとエントリーを隠した
り表示したりすることができますが、引き出しの部分は1行に畳まれたままの状態に
なります。引き出しの中身を見るためには、カーソルを引き出しの行に移動し、そこ
で<TAB>キーを押すことが必要です。Org-modeは属性(*note
プロパティとカラム::)を保持
するために、`PROPERTIES'という引き出しを使用します。そしてノート (*note
作業の状態変化の追跡::)と時刻(*note
作業に費やした時間の計測::)の変化の状態を用意
するために`LOGBOOK'という引き出しの中に保存をすることができます。もしも、状
態の変化のためと似たような方法で素早くノートをLOGBOOKの引き出しに保存したい
ときには、このように使います。

`C-c C-z'
     LOGBOOKのための引き出しにタイムスタンプ付きのノートを追加します。

   ---------- Footnotes ----------

   (1) `#+DRAWERS: HIDDEN PROPERTIES STATE'というような行を使ってファ
イル毎に引き出しを定義することができます。


File: org-ja,  Node: ブロック,  Next: 脚注,  Prev: 引き出し,  Up: ドキュメントの構造

2.9 ブロック
================

Org-modeはソースコードの例(*note リテラルの例::)
から時刻のログ情報(*note
作業に費やした時間の計測::)を記録することまで、いろいろな
目的のために、begin...endというブロックを使用します。このブロックでは、行の
先頭でTABを押すことによって、折り畳んだり、折り畳みを解いたりすることができ
ます。`org-hide-block-startup'変数を設定するか、以下のようなファイル毎の設定
をすることで、起動時に全てのブロックを折り畳んでおくこともできます。

     #+STARTUP: hideblocks
     #+STARTUP: nohideblocks


File: org-ja,  Node: 脚注,  Next: Orgstructモード,  Prev: ブロック,  Up: ドキュメントの構造

2.10 脚注
===========

Org-modeは脚注の作成をサポートしています。Org-modeは、`footnote.el'パッケー
ジと対照的に、1回限りのEメールのような文書だけでなく、大きな文書上で動作する
よう設計されています。基本構文は`footnote.el'の構文で使われているのと良く似
ており、i.e.インデントが認められていない、カラム0の角カッコの中の脚注の印
によって始まるパラグラフの中で定義されます。もしも脚注の中でパラグラフを改行
したいならば、LaTeXの用語である`\par'を使用します。脚注の参照は、テキストの
中の単純な角カッコの中の記号です。例えば。

     Org-modeのホームページ[fn:1] は以前に比べて現在は相当改良されていると思いま
     す。
     ...
     [fn:1] リンク先は: http://orgmode.org

Org-modeでは数字をベースとした構文を、_名前のついた_脚注とオプションのインラ
インでの定義へと拡張しています。プレーンな数字を(`footnote.el'で行えるように
）マーカーとして使うことは、下位の互換性としてサポートされていますが、LaTeX
のsnippet(*note
LaTeXの組み込み::)と衝突する危険性があるのでお奨めはできません。以
下に確かな参考資料を説明します。

`[1]'
     プレーンな数字付きの脚注用の記号です。`footnote.el'と互換性はあります
     が、`[1]'のような記号は、snippetのコードとかぶることが多いので推奨しま
     せん。

`[fn:name]'
     名前付きの脚注参照、そこでは`name'がユニークな言葉によるラベルとなって
     おり、さもなければ簡単に自動的に作成される、数字が用いられます。

`[fn:: これは脚注のインラインの定義です]'
     参照のポイントに直接定義がなされるLaTeXのような無記名の脚注。

`[fn:name: a definition]'
     脚注のインラインでの定義、それはまた、ノートのための名前を明確に規定し
     ます。Org-modeは同じノートに対して多重の参照を許容するので、新たな参照
     を作成するために、`[fn:name]'を使用することができます。

脚注のラベルは自動的に作成することができます。そうしないならば、あなた自身で
名前を作成することができます。これは`org-footnote-auto-label'変数で操作され
、`#+STARTUP'キーワードに対応します。詳細については変数の説明を参照してくだ
さい。

以下のコマンドはプロパティを操作する助けとなります。

`C-c C-x f'
     脚注の動作のコマンド。

     カーソルが脚注参照上にあるときに、定義部分にジャンプします。カーソルが
     定義部分にあるときに、（最初の）参照されている部分にジャンプします。

     そうでなければ、新しい脚注を作成します。
     `org-footnote-define-inline'(1)によっ
     て、参照の一部として、または、`org-footnote-section'変数によって決定さ
     れる場所の中に区分されて、テキストの中に正しく定義が配置されるでしょう。

     前置引数と一緒にコマンドが呼び出された場合は、追加のオプションのメニュ
     ーが提示されます。
          s   参照の順場によって、脚注の定義は並び替えられます。編集している間は、
              Org-modeは特定の並びの中に脚注の定義を並び替える努力はしません。
              もしもそれらを並び替えたいならば、このコマンドを使用してください。
              それによって`org-footnote-section'に従ってエントリーをまた移動しま
          す。
              挿入／削除のあとに自動的に並び替えるには、変数を使うことで設定する
              ことができます。
          r   単純な`fn:N' の脚注を思い出してください。挿入／削除それぞれのあとの

              自動的な採番は、`org-footnote-auto-adjust'変数を使う
              ことで設定できます。
          S   最初の`r'のショートカットで、`s'はアクションです。
          n   すべての定義（インラインの定義もふくみます）を特別なセクションに集
          める
              ことによって脚注を標準化します。そしてそれからそれらの定義を順番に
          採番
              します。参照先にも番号がふられます。これは、ひとつのドキュメントを
          終了
              する前の最後の段階であることを意味します。(e.g. Eメールを発送する）
          。
              エクスポート機能はこのことを自動的に行い、
              `message-send-hook'のような何かを行います。
          d   そのポイント、およびそれについての参照先の定義を削除します。
     `org-footnote-auto-adjust'(2)と`nofnadjust'の変数に依存し、そ
     れぞれの挿入と削除のあとに、番号の振り直しと脚注の並び替えが自動的に行
     われます。

`C-c C-c'
     もしもカーソルが脚注の参照の上にあるときは、定義部分に飛びます。もしも
     それがある定義ならば、参照先にジャンプして戻ります。前置引数と一緒に、
     脚注の場所を呼び出すときに、`C-c C-x
     f'として同じメニューが提供されて います。

`C-c C-o  or mouse-1/2'
     脚注のラベルはまた、定義／参照先に対応してリンクを貼ります。そして通常
     のコマンドでこれらのリンクをフォローするための通常のコマンドを使用する
     ことができます。

   ---------- Footnotes ----------

   (1) 対応するインバッファの設定は、 `#+STARTUP: fninline'または
`#+STARTUP: nofninline'となります。

   (2) 対応するインバッファのオプションは
`fnadjust'と`nofnadjust'になります。


File: org-ja,  Node: Orgstructモード,  Prev: 脚注,  Up: ドキュメントの構造

2.11 The Orgstruct minor mode
=============================

もしもOrg-modeの構造の編集とリストのフォーマットの動作について直感的な方法を
好むのならば、あなたはTextモードやMailモードと同じような他のモードのコマンド
を使用したいと思うでしょう。`orgstruct-mode'というマイナーモードでそれが可能
になります。`M-x
orgstruct-mode'を使ってモードを切り替えるか、例えばMessage
モードの中で、デフォルトでそれを作動させるか、次のいずれかを用いて、

     (add-hook 'message-mode-hook 'turn-on-orgstruct)
     (add-hook 'message-mode-hook 'turn-on-orgstruct++)

このモードがアクティブで、カーソルが見出しやリストアイテムの最初の行のような
Org-modeのような行の上にあるときには、ほとんどの構造の編集のためのコマンドは
動作するでしょう。たとえ、あなたが使っているメジャーモードの中で、同じキーが
普通に異なる機能を持っているとしても。もしもカーソルがそういった特別の行の一
つの中に置かれていなくても、Orgstructモードは影の中で静かに隠れています。
`orgstruct++-mode'を使ったときは、Org-modeは、それらのモードの中に、インデン
トやオートフィルの設定を書き出すでしょう。そして、アイテムの最初の行の後にア
イテムのコンテクストを見つけるでしょう。


File: org-ja,  Node: テーブル,  Next: ハイパーリンク,  Prev: ドキュメントの構造,  Up: Top

3 テーブル
**************

Org-modeは、高速で直感的なテーブルエディタを備えています。Emacsの`calc'パッ
ケージを用いて、スプレッドシートのような計算機能に対応しています。
(*note Calc: (Calc)Top.).

* Menu:

* 組み込みのテーブルエディタ::  単純なテーブル
* 列幅と整列::          自動設定を解除する
* 行のグループ::       縦の線を引き金にしてグループを作る
* Orgtblモード::          マイナーモードとしてのテーブルエディタ
* スプレッドシート::  テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする


File: org-ja,  Node: 組み込みのテーブルエディタ,  Next: 列幅と整列,  Prev: テーブル,  Up: テーブル

3.1 組み込まれたテーブルエディタ
==============================================

Org-modeを使うと、プレーンなASCII形式のテーブルを手軽に編集できます。空白文
字を除いて、最初の文字が`|'であれば、どの行もテーブルの一部であるとみなされ
ます。`|'は、列を区分するセパレータとしても使われます。Org-modeのテーブルは
、次のような見た目になるでしょう。

     | Name  | Phone | Age |
     |-------+-------+-----|
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   テーブルの中で、<TAB>や<RET>もしくは`C-c
C-c'を押す度に、テーブルの表示が自
動的に更新されます。<TAB>を押すとカーソルが次のフィールドに移ります（<RET>の
場合は次の行へ）。また、テーブルの端もしくは水平ラインの直前の行で押せば、テ
ーブルに新しい行が追加されます。テーブルのインデントは一行目で決定されます。
`|-'で開始するどんな行も水平ラインとして解釈され、次にテーブルが更新される時
に、水平ラインはテーブル幅いっぱいに拡張されます。つまり、上記のテーブルを作
成するためには、次のように入力するだけでよかったのです。

     |Name|Phone|Age|
     |-

続いて<TAB>を押してテーブルを整列し、フィールドへの入力を始めます。さらに素
早いテーブルの作成方法は、`|Name|Phone|Age'に続いて`C-c
<RET>'と入力すること です。

フィールドに文字を入力すると、Org-modeは<DEL>と<Backspace>、また、すべての文
字キーを特別な方法で扱います。文字の挿入と削除によって他のフィールドがズレて
しまうことを避けるためです。また、_`<TAB>'、`S-<TAB>'もしくは`<RET>'によって
、カーソルが新しいフィールドへ移動した直後に文字を入力すると_、自動的に空白
文字が挿入されます。この動作が気に入らない場合には、変数
`org-enable-table-editor'と`org-table-auto-blank-field'を調節してください。

テーブルの作成と変換
..............................

`C-c |     (`org-table-create-or-convert-from-region')'
     アクティブリージョンをテーブルに変換します。全ての行が少なくとも一つの
     タブを含んでいるならば、この関数は処理対象をタブ区切りの表であると想定
     します。また、全ての行がコンマを含んでいるならば、コンマ区切り（いわゆ
     るCSV）であると想定されます。それ以外の場合は空白文字で区切られている
     と想定します。プレフィックスを用いることで、区切り文字を強制的に指定で
     きます。すなわち、`C-u'でCSV、`C-u
     C-u'でTAB区切りを指定できます。また
     、プレフィックスの引き数として整数値Nを用いれば、少なくともN個の連続し
     た空白を区切りとして指定できます。条件に合わなければ、TABが代わりの区
     切りとして使われるでしょう。
     もしアクティブリージョンが存在しないならば、このコマンドは空のテーブル
     を生成します。しかし、`|Name|Phone|Age <RET> |-
     <TAB>'とタイプしてテー ブルを作り始める方が簡単です。

テールの整列とフィールドの動き
.............................................

`C-c C-c     (`org-table-align')'
     カーソルを動かさずにテーブルを整列します。

`<TAB>     (`org-table-next-field')'
     テーブルを整列して、カーソルを次のフィールドに移します。必要ならば新た
     な行を生成します。

`S-<TAB>     (`org-table-previous-field')'
     テーブルを整列して、カーソルを前のフィールドに移します。

`<RET>     (`org-table-next-row')'
     テーブルを整列して、次の行にカーソルを下げます。必要ならば新しい行を追
     加します。行頭もしくは行末にカーソルがあるときの<RET>は、NEWLINEを意味
     して、テーブルの分割に使われます。

`M-a     (`org-table-beginning-of-field')'
     フィールド内の文頭にカーソルを移動します。もしくは、前のフィールドの文
     頭に移動します。

`M-e     (`org-table-end-of-field')'
     フィールド内の文末にカーソルを移動します。もしくは、次のフィールドの文
     末に移動します。

テーブルの列と行の編集
.................................

`M-<left>     (`org-table-move-column-left')'
`M-<right>     (`org-table-move-column-right')'
     カーソルがある列を左右に移動します。

`M-S-<left>     (`org-table-delete-column')'
     カーソル位置の列を削除します。

`M-S-<right>     (`org-table-insert-column')'
     カーソル位置の左に新しい列を追加します。

`M-<up>     (`org-table-move-row-up')'
`M-<down>     (`org-table-move-row-down')'
     カーソル位置の行を上下に移動します。

`M-S-<up>     (`org-table-kill-row')'
     カーソル位置の行もしくは水平ラインを削除します。

`M-S-<down>     (`org-table-insert-row')'
     カーソル位置の上に新しい行を追加します。プレフィックスを使うと、カーソ
     ル位置の下に追加されます。

`C-c -     (`org-table-insert-hline')'
     カーソル位置の下に水平ラインを追加します。プレフィックスを使うと、カー
     ソル位置の上に追加されます。

`C-c <RET>     (`org-table-hline-and-move')'
     カーソル位置の下に水平ラインを追加して、カーソルを追加された水平ライン
     の次の行に移動します。

`C-c ^     (`org-table-sort-lines')'
     リージョンに含まれるテーブルの各行をソートします。ポイントのある列の情
     報がソートに利用されます。また、ソート対象となる範囲は、最も近い水平ラ
     インの行まで、もしくは、テーブル全体が指定されます。カーソル位置がテー
     ブルの第一列よりも前にあるときは、ソートに利用する列を指定するためにプ
     ロンプトが表示されます。すでにアクティブリージョンが存在する場合、マー
     クは第一行とソートに利用する列を指定して、同時にポイントは、ソート対象
     に含まれる最終行に位置しなければなりません。このコマンドは、ソートの種
     類（アルファベット順、数値順、もしくは時間順）を指定するためにプロンプ
     トを表示します。プレフィックスを利用すると、大文字と小文字が区別されます。

リージョン
...............

`C-c C-x M-w     (`org-table-copy-region')'
     テーブルの矩形領域を特別なクリップボードにコピーします。ポイントとマー
     クは、矩形領域を構成する末端となるフィールドを決定します。アクティブリ
     ージョンがなければ、カーソル位置のフィールドだけをコピーします。この処
     理は、テーブルの水平ラインを無視します。

`C-c C-x C-w     (`org-table-cut-region')'
     テーブルの矩形領域を特別なクリップボードにコピーし、領域内の全てのフィ
     ールドを空にします。つまりこれは「カット」操作です。

`C-c C-x C-y     (`org-table-paste-rectangle')'
     テーブルに矩形領域をペーストします。領域の左上がカーソル位置のフィール
     ドに上書きされます。ペーストする領域に重なるすべてのフィールドは上書き
     されます。対象とするテーブルに矩形領域が合わないならば、必要に応じてテ
     ーブルは拡張されます。この処理は、テーブルの水平ラインを無視します。

`M-<RET>     (`org-table-wrap-region')'
     カーソル位置でフィールドの文字列を分割し、カーソル以降を一つ下のフィー
     ルドの文頭に移動します。アクティブリージョンが存在し、またポイントとマ
     ークの両方が同じ列にあるとき、列に含まれるテキストは、与えられた行数を
     最小化するように改行されます（訳注：余計な空白が消される）。プレフィッ
     クスで指定する整数値は、希望する行数に合わせるために使われます（訳注：
     M行をN行に圧縮できます）。もし選択領域がない状態でプレフィックスを指定
     すると、カーソル位置のフィールドは空白になり、元々あった文字列は一つ上
     のフィールドの文末に付け加えられます。

計算機能
............

`C-c +     (`org-table-sum')'
     カーソル位置の列、もしくは、アクティブリージョンで定められた矩形領域に
     含まれる数値を合計します。計算結果はエコー領域に表示され、`C-y'で挿入
     できます。

`S-<RET>     (`org-table-copy-down')'
     カーソル位置のフィールドが空白のとき、上にある空白でないフィールドから
     文字列をコピーします。空白でないときには、値を次の行のフィールドにコピ
     ーし、カーソルも移動させます。`org-table-copy-increment'の値に依存して
     、フィールドが整数値のときは値を一つ増やしてからコピーされるでしょう。
     整数の値が大きすぎる場合は、値が増やされません。また、プレフィックスで
     `0'を用いれば、一時的に値の増加を防げます。このキーバインドは、
     shift-selectionと、これに関連するモードでも使われています（*note
     衝突::）。

その他の機能
..................

`C-c `     (`org-table-edit-field')'
     専用のウィンドウでカーソル位置のフィールドを編集します。この機能は、フ
     ィールドの全体が表示されていない場合に便利です（*note
     列幅と整列::）。プレフ
     ィックス`C-u'を伴って関数が呼ばれると、フィールドの全ての内容が表示さ
     れます（訳注：フィールドの文字列が一部隠れている場合にだけ呼び出せる）
     。そのためカーソル位置のフィールドをそのまま編集できます。

`M-x org-table-import'
     ファイルをテーブルとしてインポートします。テーブルは、タブもしくは空白
     で区切られている必要があります。この機能は、例えば、スプレッドシートの
     テーブルやデータベースの情報をインポートするために利用します。というの
     も、一般的にこれらのプログラムが、タブ区切りのテキストフィールドを書き
     出せるためです。このコマンドは、ファイルの内容をバッファに挿入すること
     で処理が始まり、その領域をテーブルに変換します。コンバータに与えられる
     すべてのプレフィックスは、セパレータを決定するために利用されます。

`C-c |     (`org-table-create-or-convert-from-region')'
     org-modeのバッファにテーブル状のテキスト（訳注：文字列がタブで区切られ
     ているテキスト領域など）をペーストすることでもorg-modeのテーブルを作成
     できます。`C-x
     C-x'でバッファにペーストされているテキストを選択して、 `C-c
     |'でorg-modeのテーブルに変換します（前述のCreation and conversion
     を参照してください）。

`M-x org-table-export'
     テーブルをエクスポートします。エクスポートされるファイルでは、標準でタ
     ブ区切りが使われます。この機能は、例えば、スプレッドシートやデータベー
     スプログラムと情報を交換するために使います。ファイルのエクスポートに使
     われるフォーマットは、変数`org-table-export-default-format'で調節でき
     ます。また、ファイル名を指定するためにプロパティ`TABLE_EXPORT_FILE'を
     利用でき、サブツリーでのテーブルエクスポートのフォーマットを指定するた
     めにプロパティ`TABLE_EXPORT_FORMAT'を指定できます。エクスポートされる
     テーブルについて、org-modeはかなり一般的なフォーマットをサポートします
     。エクスポートのフォーマットは、Orgtblのラジオテーブルで使われているも
     のと同じです。より詳しい説明は*note 変換関数::を参照してください。

`|'で始まる行を思い通りに編集するため、自動的なテーブルの編集が好みでない場
合は、次のコマンドでこの機能を停止できます。

     (setq org-enable-table-editor nil)

こうすると、テーブルのコマンドで利用できるのは、`C-c
C-c'による手動の再整列 だけになります。


File: org-ja,  Node: 列幅と整列,  Next: 行のグループ,  Prev: 組み込みのテーブルエディタ,  Up: テーブル

3.2 列幅と整列
===================

テーブルの各列の幅はテーブルエディタによって自動的に決定されます。また、列の
配置も自動的に決定されます。具体的には、列の中で数値でないフィールド数に対す
る、数値（と解釈できる）フィールド数の割合に応じて決まります。

ただ一つ、または、いくつかのフィールドでより多くのテキストを扱おうとすると、
困ったことに列幅が広がってしまいます。もしくは、フィールドの内容にかかわらず
、固定幅の列でテーブルを作成したいと思うかもしれません。列の幅を指定するため
には、列のどこに記述してもよいですが、一つのフィールドが文字列`<N>'だけを含
む必要があります。ここで`N'は、列の幅を指定する整数値の文字列です(1)。次に行なわれるテーブルの整列では、この数値を用い
て列の幅を設定します。

     |---+------------------------------|               |---+--------|
     |   |                              |               |   | <6>    |
     | 1 | one                          |               | 1 | one    |
     | 2 | two                          |     ----\     | 2 | two    |
     | 3 | This is a long chunk of text |     ----/     | 3 | This=> |
     | 4 | four                         |               | 4 | four   |
     |---+------------------------------|               |---+--------|

指定された幅よりも広いフィールドは一部が切り取られ、文字列`=>'で終わります。
フィールド内に表示されていたテキストは、バッファ内部にそのまま存在し、表示が
隠されていることに注意してください。隠されたテキストも含めてすべてを表示する
ためには、対象とするフィールドにマウスカーソルを置いてください。ツールチップ
が現われて、フィールドに含まれるすべての内容が表示されます。このようなフィー
ルドを編集するには、`C-c
`'を使います（`C-c'に続いてバッククォートを入力しま
す）。フィールドの全ての内容を表示した新しいウィンドウが開かれます。フィール
ドの内容を編集し、`C-c C-c'で完了します。

幅が狭められた列を持つテーブルが記述されているファイルを訪問する段階では、ま
だ文字列の隠蔽は実行されていません。見た目を良くするにはテーブルを整列する必
要があります。オプションの`org-startup-align-all-tables'
を設定すると、ファイルを訪問するときにファイルに記述された全てのテーブルが自
動的に整列されます。ただしスタートアップが少し遅くなります。以下の設定を利用
すれば、ファイルごとにこのオプションを設定することもできます。

     #+STARTUP: align
     #+STARTUP: noalign

数値の多い列を右揃えにして、文字列の多い列を左揃えにする自動的な整列を無効に
したいならば、`<r>'、`c'(2)、もしくは`<l>'を同じような形式で利用
できます。`<|10>'のようにすれば、列を揃える方法とフィールドの幅を同時に指定
できます。

書式の設定情報のみを含む行は、ドキュメントをエクスポートするときに自動的に削
除されます。

   ---------- Footnotes ----------

   (1) この機能は 、XEmacsでは動作しません

   (2) Emacsの表示上は中央揃えにはできませんが、HTMLへエク
スポートするときに中央揃えになります。


File: org-ja,  Node: 行のグループ,  Next: Orgtblモード,  Prev: 列幅と整列,  Up: テーブル

3.3 行のグループ
======================

org-modeのテーブルをエクスポートすると、垂直ラインを標準で表示しません。これ
は、一般に視覚的な満足度がより高いためです。しかし場合によっては、列のグルー
プでテーブルを構造化する目的で、垂直ラインが役に立つます。これは水平ラインが
いくつかの行をグループ化するために役立つことと同じです。列のグループを指定す
るために、最初のフィールドが`/'だけを含む特別な行を使います。それ以降のフィ
ールドについては、`<'を含むとき、その列がグルーピングされる列の始めであるこ
とを意味します。`>'を含む場合は、グループの終了を表します。`<>'を含む列はこ
れ自体を一つのグループにします。列のグループを表す境界線が、エクスポート時に
垂直ラインで表示されます。以下に例を示します。

     | N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |---+-----+-----+-----+---------+------------|
     | / |   < |     |   > |       < |          > |
     | 1 |   1 |   1 |   1 |       1 |          1 |
     | 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
     | 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
     |---+-----+-----+-----+---------+------------|
     #+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))

表示させたいすべての垂直ラインの後ろに、列のグループ開始を指定するだけでも十
分です。

     |  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
     |----+-----+-----+-----+---------+------------|
     | /  | <   |     |     | <       |            |


File: org-ja,  Node: Orgtblモード,  Next: スプレッドシート,  Prev: 行のグループ,  Up: テーブル

3.4 Orgtblマイナーモード
===============================

org-modeのテーブルエディタが提供する直感的な編集が好みなら、テキストモードや
メールモードのような別のモードで利用したくなるかもしれません。これはマイナー
モードのOrgtblモードが実現してくれます。`M-x
orgtbl-mode'でトグルできます。
標準でOrgtblモードを有効にするには、たとえばメッセージモードのときに、次の設
定を使います。

     (add-hook 'message-mode-hook 'turn-on-orgtbl)

さらに、いくつかの特別な手順を追加することで、orgtblモードの任意のシンタック
スを使ってテーブルをメンテナンスできます。たとえば、orgtblモードの簡単さと機
能を用いてLaTeXのテーブルを構築できます。これは表計算機能も含んでいます。さ
らなる詳細は、*note 任意の構文によるテーブル::.を参照してください。


File: org-ja,  Node: スプレッドシート,  Next: Org-Plot,  Prev: Orgtblモード,  Up: テーブル

3.5 スプレッドシート
============================

org-modeのテーブルエディタは、表計算機能を実装するためにEmacsの`calc'を利用
します。異なるフィールドの値を使って様々なフィールドの値を算出するために、
Emacs
Lispの書式も評価できます。十分な表計算機能が備わっていますが、org-modeの実装
が他の表計算ソフトと全く同等というわけではありません。たとえば、org-modeは
_列の数式_の概念を理解しています。これは、関連する各フィールドに数式をコピー
することなく、ヘッダーを除いた列にある全てのフィールドに適用されます。数式の
デバッガもあります。また、数式に含まれる参照に対応するフィールドを、テーブル
内でハイライトする機能と、それらの参照に矢印キーで移動する機能を持つ数式エデ
ィタがあります。

* Menu:

* 参照::                   どうやって他のフィールドや範囲を参照するか
* Calc用の数式構文::   Calcを使って計算する
* Lisp用の数式構文::   Emacs Lispで数式を書く
* フィールドと範囲の数式::  特定の（範囲の）フィールドのための数式
* 列の数式::             カラム全体に有効な数式
* 数式の編集とデバッグ::  数式を修正する
* テーブルの更新::    依存関係にあるすべてのフィールドを再計算する
* 一歩進んだ機能::    フィールド名、パラメーター、自動再計算


File: org-ja,  Node: 参照,  Next: Calc用の数式構文,  Prev: スプレッドシート,  Up: スプレッドシート

3.5.1 参照
------------

テーブル内部のフィールドを他のフィールドの値を使って計算するに、数式は、他の
フィールドか範囲を必ず参照していなければなりません。org-modeでは、名前、絶対
的または相対的な位置によってフィールドを参照することができます。フィールドの
位置がどこかを特定するためには、そのフィールドで`C-c
?'を押してください。も しくは、グリッド表示をトグルするために`C-c
}'を使用してください。

フィールドの参照
........................

数式は別フィールドの値を2つの方法で参照できます。他の表計算ソフトと同じよう
に、`B3'のような文字と数値の組み合わせでフィールドを参照できます。三行目の第
二フィールドを意味しています。

org-modeでは、もう一つの方法を好みます(1)。より一般的な次のような表記です。
     @ROW$COLUMN

また、相対的な参照も認めています。すなわち、値が計算されいるフィールドの行と
列に相対的な参照です。このような相対的な参照は、数式を一度だけ記録すればよく
、数式のコピーや変更せずにたくさんのフィールドで利用できます。

列の参照は、`1'、`2'、...`N'のように絶対的に表されるか、もしくは、カーソル
位置の列に対して相対的に`+1'、`-2'のように表されます。`$>'はテーブルの最終列
を参照します。さらに、`$>-2'のようなオフセットを指定できます。この場合、一番
右から三番目の列を表します。

行の指定ではデータを含む行のみをカウントして、水平ライン（hline）を無視しま
す。列と同様に、`1'...`N'のように絶対的な行の番号を利用できます。また、
`+3'や`-1'のようにカーソル位置の行に対する相対的な位置を表し、`@>'でテーブ
ルの最終行を参照します(2)。ある水平ラインに対する相対的な行を指定することもでき
ます。`I'は最初のhlineへの参照(3)で、`II'は二番目の水平ラインへの
参照、といった具合に指定します。`-I'は、カーソル位置の行の上方にある最初の水
平ラインを参照し、`+I'は下方にある最初の水平ラインを参照します。`III+2'のよ
うに指定すると、テーブルの三番目の水平ラインから二番目の行を表します。

`0'は、カーソル位置の行と列を参照します。また、もし参照について列と行のいず
れかを記述しなければ、カーソル位置の行または列が暗黙に参照されます。

org-modeの_符号無し_数値を使った参照は、静的な参照です。つまり、二つの異なる
フィールドにある数式の中で同じ参照を利用すれば、常に同じフィールドが参照され
ます。_符号付き_数値を使った参照は、動的な参照です。これは、見た目上は同じ参
照であっても、数式で計算されるフィールドに依存して、異なるフィールドを参照で
きるためです。

   いくつかの例を示します。

     @2$3      第二行、第三列
     C2        同上
     $5        現在行の第五列
     E&        同上
     @2        現在列、第二行
     @-1$-3    カーソル位置から一つ上、左に三つ目
     @-I$2     カーソル位置の上方の水平ライン直下の第二列

範囲参照
............

複数のフィールドを集めた矩形の範囲を参照できます。この範囲は、二つの参照を二
つのドット`..'で接続して指定します。二つの参照が共にカーソル位置の行にあると
き、単純に`$2..$7'と指定できます。しかし、一方のフィールドが異なる列にあると
きは、少なくとも最初に指定するフィールドについて`@row$column'のような省略し
ない形式を使う必要があります（つまり、正しく解釈させるために参照を`@'で始め
なければなりません）。具体例は次のようになります。

     $1..$3        カーソル位置の行の始めの3フィールド
     $P..$Q        列の名前を使った範囲（後述する詳細を見てください）
     @2$1..@4$3    二つのフィールド間にある6フィールド
     A2..C4        同上
     @-1$-2..@-1   カーソル位置の左の列の2つ上方の行の3フィールド
     @I..II        第一と第二の水平ラインに挟まれた領域（`@I..@II'の短縮表記）

範囲参照はCalcのベクトル関数に代入可能な値のベクトルを返します。範囲に含まれ
る空のフィールドは、普通は除去されます。これはベクトルが空ではないフィールド
のみを含むようにするためです（ただし下記の`E'モードスイッチも参照してくださ
い）。もし、すべてのフィールドが空ならば、数式のシンタックスエラーを避けるた
めに`[0]'が返されます。

数式中のフィールドの座標
....................................

Calc形式とLisp形式の数式では、数式の演算結果が指すフィールドの行と列の番号を
取得するために、`@#'と`$#'を利用できます（訳注：前者が行を表し、後者が列を
表す）。伝統的なLispの数式に相当するのは`org-table-current-dline'と
`org-table-current-column'です。たとえば、

     if(@# % 2, $#, string(""))   奇数行に限定して列の番号を抽出する
     $3 = remote(FOO, @@#$2)      テーブルFOOの二列目をコピーし、
                                  現在のテーブルの三列目に上書きする

二つ目の例では、テーブルFOOは少なくとも、カーソル位置のテーブルが持つ行数と
同じ数の行がなければなりません。たくさんの行があると処理が重くなる(4)ことに気を付けてください。

名前付き参照
..................

`$name'は、列の名前として解釈されます。パラメーターや定数を扱います。定数は
、変数`org-table-formula-constants'を利用してグローバルに定義されます。また
、次のような一文を追加して、ファイルのローカル変数として定義されます。

     #+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6

プロパティ（*note
プロパティとカラム::）もテーブルの数式では定数として扱われます。
プロパティ`:Xyz:'については`$PROP_Xyz'という名前を使います。そして、このプロ
パティは現在のアウトラインエントリーとその上位が階層的に検索されます。もし
`constants.el'パッケージを読み込んでいるならば、これも定数を決めるために使わ
れます。このパッケージには、プランク定数`$h'のような物理定数、そしてキロメー
ター`$km'のような単位が含まれています(5)。列の名前と
パラメーターは、テーブルの特別なラインで設定できます。詳細は後述します（
*note
一歩進んだ機能::.）。すべての名前は文字から始まり、それ以降は文字と数値で構
成します。

リモート参照
..................

別テーブルの定数、フィールドそして範囲を参照できます。現在のファイルでも、別
ファイルにある場合でも参照できます。シンタックスは、

     remote(NAME-OR-ID,REF)

NAMEは別ファイルにあるテーブルの名前で、テーブルの前の行に`#+TBLNAME:
NAME'
と設定しておきます。エントリーのIDも利用でき、別ファイルにあるものも指定でき
ます。この場合はエントリーに含まれる最初のテーブルを参照します。REFは前述し
たような絶対的なフィールドか範囲参照で、`@3$3'や`$somename'と表され、参照さ
れたテーブルにおいて有効です。

   ---------- Footnotes ----------

   (1) org-modeはユーザーが指定する`B4'のよ
うな参照を理解しますが、編集を目的とした数式を提供するときはこのシンタックス
は使われません。変数`org-table-use-standard-references'を使うことで、この動
作を変更できます。

   (2) 後方互換のために、`$LR5'や`$LR12'のような特別な名前も
利用できます。これらは、テーブル最終行にある5番目と12番目のフィールドを正し
く参照します。しかしながら、このシンタックスは廃止予定であり、新たな文書で使
うべきではありません

   (3) テーブルの各行を_分離している_水平ラインだけ
がカウントされることに注意してください。ヘッダーの上に水平ラインがあるテーブ
ルでは、その水平ラインをカウントしません。

   (4) この計算
の規模は、O(N^2)のオーダーです。各フィールドをコピーするために、テーブルFOO
がパースされるのが原因です。

   (5) `constants.el'は、`SI'と`cgs'の二つの
異なる単位系で定数の値を提供します。どちらが利用されるかは、変数
`constants-unit-system'の値に依存します。カレントバッファで値を設定するため
に、`#+STARTUP'でオプション`constSI'と`constcgs'を指定します。


File: org-ja,  Node: Calc用の数式構文,  Next: Lisp用の数式構文,  Prev: 参照,  Up: スプレッドシート

3.5.2 Calc用の数式構文
----------------------------

数式は、Emacsの`Calc'パッケージが理解できる任意の代数表現です。通常の計算とは
異なる`Calc'の慣例に気を付けてください。`/'は`*'よりも低く優先されます。つま
り、`a/b*c'は、`a/(b*c)'として解釈されます。`calc-eval'（ *note
calc-eval: (Calc)Calling Calc from Your
Programs.）で評価される以前に、先ほどのルールに従って変数が代入されます。 範囲指定するベクトルは`vmean'や`vsum'のようなCalcのベクトル関数に直接渡され
ます。

数式は、セミコロンの後に続くオプションモードの文字列を含むことができます。こ
の文字列は実行時にCalcや他のモードに作用するフラグで構成されます。デフォルト
では、org-modeは標準のCalcモード（精度=12桁、角度単位=度、分数／シンボリック
モード=OFF）を使います。ただし、表示フォーマットは、テーブルをコンパクトに保
つために、`(float 8)'に変更されています。

     p20           Calcの内部計算精度を20桁に設定
     n3 s3 e2 f4   通常表記、科学指数、工学指数、固定小数点
                   でCalcの出力結果がorg-modeに戻る。
                   Calcの計算精度が表示上の精度よりも高い限り、
                   Calc表記は精度上の制限を受けない。
     D R           角度モード（度／ラジアン）
     F S           分数／シンボリックモード
     N             全フィールドを数値として解釈。非数値は0を使用
     T             強制的に文字列として解釈
     E             領域中のフィールドを空に保つ
     L             リテラル

大きな整数値を使用しないか、浮動小数点での高精度な計算と表示を行なわないなら
ば、Calcがすでにフォーマットした結果ではなく、org-modeに戻された後のCalcの出
力結果を再フォーマットする目的で、`printf'によるフォーマット指定を代わりとし
て与えることが可能です(1)。いくつかの例を示します。

     $1+$2                第一と第二フィールドの和
     $1+$2;%.2f           同上。ただし、小数点以下2桁表示
     exp($2)+exp($1)      関数も利用可能
     $0;%.1f              小数点以下1桁に再フォーマット
     ($3-32)*5/9          華氏から摂氏への変換
     $c/$1/$cm            周波数[Hz]から波長[cm]への変換（constants.elを使用）
     tan($1);Dp3s1        角度計算（3桁精度、科学指数1桁）
     sin($1);Dp3%.1e      同上。ただし、printfでの表示指定
     vmean($2..$7)        列の平均値、ベクトルを利用
     vmean($2..$7);EN     同上。ただし、空フィールドを0とする
     taylor($3,x=7,2)     $3の2次のテーラー級数でx=7の値

   Calcは論理演算の完全な集合も含んでいます。例として次があります。

     if($1<20,teen,string(""))  もし年齢$1が20未満なら十代、そうでなければ空

   ---------- Footnotes ----------

   (1) `printf'による再フォーマットは、精度の影響を受けます
。`integer'や`double'に変換された値が渡されるためです。`integer'は、符号付き
32ビット整数値に丸め込まれます。`double'は、全体が64ビット精度に制限され、近
似的に16ビットの10進数の有意桁数があります。


File: org-ja,  Node: Lisp用の数式構文,  Next: フィールドと範囲の数式,  Prev: Calc用の数式構文,  Up: スプレッドシート

3.5.3 数式としてのEmacs Lisp形式
----------------------------------------

Emacs
Lispで数式を記述することもできます。Calcの機能では不十分なら、文字列操作と構
造の制御に役立ちます。開き括弧が後ろに続くシングルクォートで数式が始まるとき
、Lisp形式として解釈されます。評価値は、文字列か数値で返ります。`Calc'の数式
と同じように、セミコロンの後にモードとprintfフォーマットを指定できます。
Emacs
Lisp形式では、フィールドの参照がLisp形式で挿入されることを意識する必要があり
ます。デフォルトで、参照はフィールドを含む（ダブルクォートで括られた）Lispの
文字列として挿入されます。もし`N'モードスイッチを指定すると、全ての参照され
た要素は数値になり（非数値のフィールドは0になる）、クォートなしでLisp形式の
数値として挿入されます。`L'フラッグを指定すると、全てのフィールドは、クォー
トなしでそのままの内容が挿入されます。すなわち、もしLisp形式の文字列として参
照が挿入されることを望むなら、`"$3"'のように、ダブルクォートで参照のオペレー
タ自体を包んでください。範囲はスペースで区切られたフィールドとして挿入されま
す。そのため、リストやベクトルシンタックスに埋め込んだりできます。いくつかの
例を示します。Lispを用いて計算をするときに、`N'モードの使われ方に注意してく
ださい。

     一列目の内容について、一文字目と二文字目を入れ替える
       '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
     一列目と二列目を加算する。Calcの`$1+$2'と同じ
       '(+ $1 $2);N
     列1から列4の合計を計算。Calcの`vsum($1..$4)'と同じ
       '(apply '+ '($1..$4));N


File: org-ja,  Node: フィールドと範囲の数式,  Next: 列の数式,  Prev: Lisp用の数式構文,  Up: スプレッドシート

3.5.4 フィールドと範囲の数式
---------------------------------------

特定のフィールドに数式を割り当てるためには、`:='に続けて、直接フィールドに書
き込みます。たとえば、`:=vsum(@II..III)'のようにします。カーソルがフィール
ドにある状態で、<TAB>や<RET>、もしくは`C-c
C-c'を押すと、入力した数式はその
フィールド専用の数式として保存され、評価された後、フィールドの表示が演算結果
で置き換わります。

数式はテーブルの下にある`#+TBLFM:'で始まる特別な行に保存されます。テーブルの
中で第三行の四番目のフィールドに数式を入力すると、この数式は`@3$4=$1+$2'の
ように記述されます。適当なコマンドで列と行の挿入／消去／入れ替えを行なうとき
、保存された数式の中の絶対参照（相対参照では関係ありません）は、同一のフィー
ルドを参照するために変更されます。もちろん通常の編集コマンドを用いてテーブル
の構造を編集するときには実行されません。したがって、マニュアルで数式を補正し
なければなりません。フィールドに数式を記入する代わりに、次のコマンドも使用で
きます。

`C-u C-c =     (`org-table-eval-formula')'
     現在のフィールドに新しい数式をインストールします。このコマンドは、
     `#+TBLFM:'行から選ばれたデフォルトの数式を表示し、現在のフィールドに適
     用してから保存します。

多数の別フィールドに数式を割り当てるために、等式の左側は特別な表現を指定でき
ます。範囲数式を入力するショートカットはありません。これを入力するには、数式
エディタ（*note
数式の編集とデバッグ::）を用いるか、`#+TBLFM:'行に直接記述します。

`$2='
     列の数式。列の全体に対して有効。よく利用されるため、org-modeはこれらの
     数式を特別な方法で扱います。*note 列の数式::.を参照してください。

`@3='
     行の数式。特定の行が含む全てのフィールドに適用する。`@L='は最終行を意
     味する。

`@1$2..@4$3='
     範囲数式、与えられた矩形領域の全てのフィールドに適用する。これはある行
     の全てのフィールドではなく一部に対して数式を割り当てることにも利用できます。

`$name='
     名前付きフィールド（*note 一歩進んだ機能::を参照）


File: org-ja,  Node: 列の数式,  Next: 数式の編集とデバッグ,  Prev: フィールドと範囲の数式,  Up: スプレッドシート

3.5.5 列の数式
------------------

`$3='のような、シンプルな列の参照を数式に指定すると、同じ数式がその列の全て
のフィールドで使用されます。次の項目を利便性の高めるための例外としています。
（1）テーブルが水平ラインを含む場合は、最初の水平ラインよりも上に存在する全
ての行がテーブルの_ヘッダー_の一部であると考えられ、列の数式によって変更され
ません。（2）フィールドや範囲の数式からすでに値を取得しているフィールドは、
列の数式は関与しません。これらの条件によって列の数式はとても使いやすくなって
います。

列に数式を割り当てるためには、列のフィールドに直接記述します。イコールの後に
続くように、`=$1+$2'としましょう。同じフィールド内で<TAB>や<RET>もしくは
`C-c
C-c'を押すと、入力した数式はそのフィールドのための数式として保存され、
評価されたのち、フィールドの表示が演算結果で置き換わります。フィールドが
`='だけの場合、以前に列で保存した数式が利用されます。各列について、org-mode
は直前に利用した数式だけを記憶します。`#+TBLFM:'行で、列の数式は`$4=$1+$2'の
ように保存されます。列数式のイコールの左側には、列の名前を置くことができず、
数値の列の参照か`$>'を置かなければなりません。

   フィールドに数式を書き入れる代わりに、次のコマンドも利用できます。

`C-c =     (`org-table-eval-formula')'
     現在の列に新しい数式を書き込み、数式の演算結果で置き換える。このコマン
     ドは`#+TBLFM:'の列から取得したデフォルトの数式を表示し、カーソル位置の
     フィールドに適用してから保存します。数値のプレフィックス（たとえば
     `C-5 C-c
     ='）を用いると、現在の列で連続したフィールドに同じ効果を与え ます。


File: org-ja,  Node: 数式の編集とデバッグ,  Next: テーブルの更新,  Prev: 列の数式,  Up: スプレッドシート

3.5.6 数式の編集とデバッグ
------------------------------------

ミニバッファ、もしくは、直接フィールド内で、個々の数式を編集できます。
org-modeは、テーブルに含まれるすべてのアクティブな数式が表示される特別なバッ
ファも用意しています。数式を編集しようとすると、もし可能ならば、org-modeは参
照を標準のフォーマット（`B3'や`D&'のような記法）に変換します。内部フォーマッ
ト（`@3$2'や`$4'のような記法）を用いて編集したい場合は、変数
`org-table-use-standard-references'を設定してください。

`C-c =  or  C-u C-c =     (`org-table-eval-formula')'
     カーソル位置の列やフィールドに結びついている数式をミニバッファで編集す
     る。*note 列の数式::と*note
     フィールドと範囲の数式::を参照してください。

`C-u C-u C-c =     (`org-table-eval-formula')'
     カーソル位置のフィールドにアクティブな数式（フィールドの数式、もしくは
     列の数式）を再挿入します。これはフィールドの中でそのまま編集できるよう
     にするためです。ミニバッファでの編集よりも有利なのは、`C-c
     ?'を使える ことです。

`C-c ?     (`org-table-field-info')'
     テーブルのフィールド内で数式を編
     集するときに、数式内のカーソルが置かれている参照によって指し示されたフ
     ィールドをハイライトする。

`C-c }'
     オーバーレイ（`org-table-toggle-coordinate-overlays'）を使用して、テー
     ブルの行と列の番号を表示するようにトグルする。テーブルが整列される度に
     表示が変わり、`C-c C-c'で強制的に表示を更新できます。

`C-c {'
     数式のデバッガをON／OFFする（`org-table-toggle-formula-debugger'）。

`C-c '     (`org-table-edit-formulas')'
     現在のテーブルにあるすべての数式を、特別なバッファで編集する。バッファ
     では数式はラインごとに一つずつ表示される。カーソル位置のフィールドにア
     クティブな数式があるとき、カーソルエディタのカーソルはその数式をマーク
     します。この特別なバッファの中では、org-modeは、カーソルがあるどんなフ
     ィールドや範囲参照も自動的にハイライトします。数式の編集、削除、追加が
     可能で、さらに次のコマンドを利用できます。
    `C-c C-c  or  C-x C-s     (`org-table-fedit-finish')'
          数式エディタを抜けて、修正された数式を保存します。プレフィックス`C-u'
          を使うと、新しい数式をテーブル全体に適用します。

    `C-c C-q     (`org-table-fedit-abort')'
          変更を破棄して数式エディタを抜けます。

    `C-c C-r     (`org-table-fedit-toggle-ref-type')'
          数式エディタの全ての参照について、(`B3'のような）標準の記法と（`@3$2'
          のような）内部の記法をトグルします。

    `<TAB>     (`org-table-fedit-lisp-indent')'
          カーソル位置のLisp数式を見やすくするかインテンドします。ラインにLisp数
          式が含まれる場合は、Emacs
          Lispのルールに基づいて数式を整えます。さらに<TAB>を押すと、整えられた
          数式を崩して元の状態に戻します。開いた数式では、Emacs
          Lispモードのように<TAB>でさらにインテンドします。

    `M-<TAB>     (`lisp-complete-symbol')'
          Emacs LispモードのようにLispの記号を補完します。

    `S-<up>/<down>/<left>/<right>'
          カーソル位置の参照を移動します。たとえば、参照が`B3'で`S-<right>'を押
          すと、`C3'に変化します。これは相対参照や水平ラインの参照についても同じ
          ように動作します。

    `M-S-<up>     (`org-table-fedit-line-up')'
    `M-S-<down>     (`org-table-fedit-line-down')'
          列の数式のためのテストライン（訳注：現在ハイライトされている行）を
          org-modeのバッファで上下に移動します。

    `M-<up>     (`org-table-fedit-scroll-down')'
    `M-<down>     (`org-table-fedit-scroll-up')'
          テーブルを表示するウィンドウをスクロールします。

    `C-c }'
          テーブルの座標グリッドをON／OFFする

テーブルのフィールドを空欄にしても、そのフィールドに結びつけられた数式は削除
されません。これは数式が別な行（`#+TBLFM:'行）に保存されているためです。次に
再計算が行なわれる際に、再びフィールドに数式の結果が戻ります。フィールドから
数式を削除するためには、数式を表示させて空にするか、`#+TBLFM:'行を編集する必
要があります。

`#+TBLFM:'行は直接編集でき、変更した数式が再適用できます。これは`#+TBLFM:'行
で`C-c
C-c'を押すか、テーブルで通常の再計算コマンドを発行することで実行でき
ます。

数式のデバッグ
.....................

数式を評価してエラーが生じた時は、フィールドの文字列が`#ERROR'に変わります。
バグを見つけるために、変数の代入と計算の過程で何が起こっているかを調べたいな
らば、`Tbl'メニューにある数式のデバッグを有効にして、計算をやり直してくださ
い。たとえば、フィールド内で`C-u C-u C-c =
<RET>'と押します。すると、詳細な 情報が表示されます。


File: org-ja,  Node: テーブルの更新,  Next: 一歩進んだ機能,  Prev: 数式の編集とデバッグ,  Up: スプレッドシート

3.5.7 テーブルの更新
---------------------------

テーブルの再計算は、通常は自動的に行なわれず、コマンドにより実行する必要があ
ります。*note
一歩進んだ機能::を参照してください。少なくとも半自動で計算されます。

テーブルのある行もしくはテーブル全体を再計算するために、次のコマンドを使いま
す。

`C-c *     (`org-table-recalculate')'
     最初に保存されている列の数式を用いて、現在行を左から右に再計算します。
     現在行の全てのフィールドと範囲数式が対象です。

`C-u C-c *'
`C-u C-c C-c'
     行ごとにテーブル全体を再計算します。最初の水平ラインの以前にあるどの行
     も再計算されません。これらは、テーブルのヘッダーであると想定します。

`C-u C-u C-c *  or  C-u C-u C-c C-c     (`org-table-iterate')'
     計算結果の変化が生じなくなるまでテーブルの再計算を繰り返します。これは
     、計算の流れにおいて後段で計算される別フィールドの値を、すでに計算の対
     象となっているフィールドで利用する場合に必要になるでしょう。

`M-x org-table-recalculate-buffer-tables'
     現在のバッファに含まれる全てのフィールドを再計算します

`M-x org-table-iterate-buffer-tables'
     テーブル間の依存関係を収束させるために、カレントバッファの全てのテーブ
     ルを反復計算する。


File: org-ja,  Node: 一歩進んだ機能,  Prev: テーブルの更新,  Up: スプレッドシート

3.5.8 一歩進んだ機能
---------------------------

もしも自動的にフィールドを再計算したい、もしくは、フィールドと列に名前を割り
当てたいならば、テーブルの第一列を特別なマーキング文字を格納するために予約し
ておく必要があります。
`C-#     (`org-table-rotate-recalc-marks')'
     第一行の計算用マーカを` '、`#'、
     `*'、`!'、`$'の順番に循環します。アクティブリージョンがあれば、その領
     域のすべてのマーカを変更します。

例として、学生の試験結果を集めて自動再計算の機能を使うテーブルを示します。

     |---+---------+--------+--------+--------+-------+------|
     |   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
     |---+---------+--------+--------+--------+-------+------|
     | ! |         |     P1 |     P2 |     P3 |   Tot |      |
     | # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
     | ^ |         |     m1 |     m2 |     m3 |    mt |      |
     |---+---------+--------+--------+--------+-------+------|
     | # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
     | # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
     |---+---------+--------+--------+--------+-------+------|
     |   | Average |        |        |        |  29.7 |      |
     | ^ |         |        |        |        |    at |      |
     | $ | max=50  |        |        |        |       |      |
     |---+---------+--------+--------+--------+-------+------|
     #+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@-II..@-I);%.1f

重要: このような特別なテーブルについて、`C-u C-c
*'を使った再計算は、`#'もし
くは`*'でマークされた行、そして、自身に対して数式が適用されているフィールド
だけに影響することに気をつけてください。最初のフィールドが空になっている行に
は、列の数式が適用されません。

   マーキング文字には、次のような意味があります。
`!'
     行に含まれるフィールドが、対応する列の名前を表します。これは`$6'ではな
     く`$Tot'として列を参照可能にするためです。

`^'
     _上側の_列のフィールドについて名前を定義します。この定義を用いることで
     、テーブルのどのような数式でも、値`10'を参照するために`$m1'を利用でき
     ます。また、名前を定義するフィールドに数式を割り当てると、`$name=...'
     として保存されます。

`_'
     `^'とほぼ同じだが、_下側にある_列のフィールドに対する名前を定義します
     。

`$'
     この行のフィールドは、数式の_パラメータ_を定義します。たとえば、`$'が
     指定された行で、フィールドが`max=50'を含むならば、テーブルの数式は
     `$max'を用いて値`50'を参照できます。パラメーターは、正に定数として動作
     し、テーブルごとに定義されます。

`#'
     行の中で<TAB>、`RET'、または`S-<TAB>'を押すと、この行のフィールドは自
     動的に再計算されます。また、この行は`C-u C-c
     *'によるグローバルな再計
     算に利用されます。このコマンドでは、マークされていない行はそのままに維
     持されます。

`*'
     `C-u C-c
     *'によるグローバルな再計算にこの行を利用します。ただし、自動
     的な再計算には利用されません。自動再計算が編集速度を著しく低下させる場
     合に利用します。

`'
     マークされていない行は、`C-u C-c
     *'による再計算から除外されます。再計
     算の対象とするすべきすべての行は、`#'や`*'でマークされなければなりませ
     ん。

`/'
     この行はエクスポートしない。表示幅を狭くする`<N>'マーカ、もしくは列の
     グループマーカを含む列で使うと便利です。

最後に、素晴らしい`calc.el'パッケージで何ができるのかを知るという学習欲を刺
激するために、一つのテーブルを示します。このテーブルは、いくつかの関数に対し
て、`x'における`n'次のテーラー級数を計算します。

     |---+-------------+---+-----+--------------------------------------|
     |   | Func        | n | x   | Result                               |
     |---+-------------+---+-----+--------------------------------------|
     | # | exp(x)      | 1 | x   | 1 + x                                |
     | # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
     | # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
     | # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
     | # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
     | * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
     |---+-------------+---+-----+--------------------------------------|
     #+TBLFM: $5=taylor($2,$4,$3);n3


File: org-ja,  Node: Org-Plot,  Prev: スプレッドシート,  Up: テーブル

3.6 Org-Plot
============

Org-Plotは、org-modeのテーブルに保存された情報を用いた2次元と3次元のグラフを
生成できます。`Gnuplot' `http://www.gnuplot.info/'と`gnuplot-mode'
`http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html'を利用していま
す。動作を確認するためには、GnuplotとGnuplotモードの両方がシステムにインスト
ールされていることを確かめてください。その上で、次に示すテーブルで
`org-plot/gnuplot'を呼び出してください。

     #+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
     | Sede      | Max cites | H-index |
     |-----------+-----------+---------|
     | Chile     |    257.72 |   21.39 |
     | Leeds     |    165.77 |   19.68 |
     | Sao Paolo |     71.00 |   11.50 |
     | Stockholm |    134.19 |   14.33 |
     | Morelia   |    257.56 |   17.67 |

Org-Plotは、テーブルのヘッダをラベルとして適用できます。ラベル、タイプ、コン
テンツ、プロットの外観は、テーブルの上の`#+PLOT:'で始まる行によって制御可能
です。以下のOrg-Plotオプションの完全なリストを見てください。さらなる情報と例
は、`http://orgmode.org/worg/org-tutorials/org-plot.html'にあるOrg-Plotのチ
ュートリアルを参照してください。

プロットオプション
...........................

`set'
     グラフの描画時に設定される`gnuplot'のオプションを指定します。

`title'
     プロットのタイトルを設定します。

`ind'
     `x'軸として利用するテーブルの列を指定します。

`deps'
     Lispスタイルのリストで描画するように列を指定します。括弧で括られ、スペ
     ースで分離されます。たとえば、`dep:(3
     4)'とすると、第三と第四列を描画
     します（デフォルトでは、`ind'の列を除いて他の全ての列が描画されます）。

`type'
     プロットの種別（`2d'、`3d'もしくは`grid'）を指定します。

`with'
     `with'オプションで挿入される、各プロット点の表示種別を指定します。たと
     えば、
     `lines'、`points'、`boxes'、`impluses'などで、デフォルトは`lines'。

`file'
     プロット結果を外部ファイルに出力したいときに、
     `"PATH/TO/DESIRED/OUTPUT-FILE"'のように指定します。

`labels'
     `deps'で利用されるラベルのリストを指定します。標準では列のヘッダーが使
     われます（存在する場合）。

`line'
     Gnuplotのスクリプトに、記述内容がそのまま挿入される行を設定します。

`map'
     プロットの種別で`3d'もしくは`grid'を指定する場合に、このオプションを
     `t'にすると、`3d'の立体的な傾斜がわかる表示ではなく、平らな表示（訳注
     ：平面に射影した状態）でプロットします。

`timefmt'
     Gnuplotが解釈するような形式にorg-modeのタイムスタンプを整えます。デフ
     ォルトでは、 `%Y-%m-%d-%H:%M:%S'が使われます。

`script'
     Gnuplotをさらに制御するために、プロットに利用されるスクリプトファイル
     （ファイル名をダブルクォーテーションで囲んでください）を指定できます。
     プロットを始める前に、指定されたスクリプトファイルに含まれるすべての
     `$datafile'の記述は、プロット点を格納するファイル（訳注：org-plotが作
     る一時的なプロット点データ）へのファイルパスで置き換えられます。仮にこ
     のオプションを指定しても、データファイルの内容に影響を与えることができ
     るように、プロットの種別を制御したくなるかもしれません。


File: org-ja,  Node: ハイパーリンク,  Next: TODOアイテム,  Prev: テーブル,  Up: Top

4 ハイパーリンク
***********************

HTMLのように、Org-modeはファイル内でリンクしたり、他のファイルやUsenetの記事
やメールなど、外部へリンクしたりすることができます。

* Menu:

* リンクのフォーマット::  Org-modeでのリンクのフォーマット
* 内部リンク::          現在のファイルの別の場所へのリンク
* 外部リンク::          URL形式のリンク
* リンクの扱い::       創造、挿入、追随
* Org外でのリンク利用::  Cのソースコードからのリンク？
* リンクの省略記法::  複雑なリンクを書くためのショートカット
* 検索オプション::    特定の場所へのリンク
* カスタム検索::       デフォルトの検索が充分ではないとき


File: org-ja,  Node: リンクのフォーマット,  Next: 内部リンク,  Prev: ハイパーリンク,  Up: ハイパーリンク

4.1 リンクのフォーマット
==================================

Org-modeはURLのようなリンクを認識して、クリック可能なリンクにしてくれます。
Org-mode上での一般的なリンクのフォーマットは以下のようなものです:

     [[リンク][項目名]]       または           [[リンク]]

すべての括弧を入力し終えてリンクが完成すると、Org-modeは、[[リンク][項目名]]
のかわりに「項目名」を、[[リンク]]のかわりに「リンク」を表示します。リンクは
「org-link」で設定されたフェイスでハイライトされます。なおデフォルトのフェイ
スはアンダーラインになっています。表示されている部分については、直接編集する
ことができます。項目名がない場合はリンクの編集になり、項目名がある場合は項目
名の編集になることに注意してください。表示されていないリンクを編集するには、
該当するリンクの上で「C-c C-l」を実行します。

表示されたテキストの始端もしくは終端にカーソルを置いて<BACKSPACE>を押すと、
その場所にある（表示されていない）括弧を取り除くことができます。これによって
リンクは不完全なものになり、リンクの内部は再びプレーンなテキストとして表示さ
れます。取り除かれた括弧を再度挿入することでリンクは再び内部化され隠されます
。すべてのリンクの内部的な構造を表示するには、
`Org->Hyperlinks->Literal links'というメニューを使用します。


File: org-ja,  Node: 内部リンク,  Next: 外部リンク,  Prev: リンクのフォーマット,  Up: ハイパーリンク

4.2 内部リンク
===================

もしもリンクがURLのようなものではない場合、現在使用しているファイル内へのリ
ンクだとみなされます。最も重要なケースは、`[[#my-custom-id]]'のようなリンク
で、`my-custom-id'という`CUSTOM_ID'プロパティのついた見出しへリンクします。
このようなカスタムIDは、HTMLでのエクスポート(*note
HTMLのエクスポート::)時にセクシ
ョン毎のリンクを書き出してくれるので、大変便利です。ただし、各カスタムID名が
ファイル内で重複しないようにする必要があります。

   `[[My Target]]'や`[[My Target][Find my
target]]'のようなリンクは、現在使用し
ているファイル内でのテキスト検索になります。

   マウスのクリック、またはリンク上にカーソルがあるときは`C-c
C-o'で、リンクを 開くことができます(*note
リンクの扱い::)。カスタムIDへのリンクは、対応する見出しを
指し示します。テキストへのリンクには、専用のターゲットを用意する方が良いでし
ょう。同じ文字列を二重の角付きの括弧でくくるとか。ターゲットはどこに置かれて
いてもかまいません。しかし、コメント行のようなところに置いたほうが便利なこと
が多いでしょう。たとえば、以下のように。

     # <<My Target>>

HTMLでのエクスポート（*note
HTMLのエクスポート::）では、このようなターゲットは、
`http'で直接アクセスできる名前つきのアンカーになります(1)。

もしも専用のターゲットが存在しない場合には、Org-modeはそのリンクにある語句と
同じ見出しを検索しますが、TODOキーワードやタグ(2)も検索されます。Org-mode以外のファイルでは、リンクのテ
キストにある語句を検索します。上記の例では、`my target'が検索されます。

リンクをたどると、Org-mode自身のマークリングにマークが格納されます。`C-c
&'
で、ひとつ前のポジションに戻ります。このコマンドを連続して使うことにより、更
に前のポジションへと戻ることができます。

* Menu:

* ラジオターゲット::  プレーンテキストのリンクをターゲットに起動させる

   ---------- Footnotes ----------

   (1) 最初の見出しより前の
文はエクスポートされないことに注意してください。このためそのようなターゲット
の最初のものは、最初の見出しより後にある必要があります。

   (2) 見出しへのリンクを挿入すると
きは、バッファ内補完をすることができます。*印の後にいくつか文字を入力し、
`M-<TAB>'を実行してください。現在のバッファ内にあるすべての見出しが補完候補
として表示されます。


File: org-ja,  Node: ラジオターゲット,  Prev: 内部リンク,  Up: 内部リンク

4.2.1 ラジオターゲット
------------------------------

Org-modeは、通常のテキスト部分に書かれたターゲット名を、自動でリンクにするこ
とができます。ですから、わざわざ個別のリンクを作成することなく、それぞれのテ
キストがターゲットにリンクされます。ラジオターゲットは、３つの角括弧で囲まれ
たものです。例えば、`<<<My
Target>>>'というターゲットは、通常のテキスト部分 に`my
target'が登場する度にアクティブなリンクにしてくれます。Org-modeファイ
ル内のラジオターゲットは、最初の読み込み時のみ自動的にスキャンされます。編集
中にターゲットをアップデートしてリンクするには、ターゲットのところで
`C-c C-c'を実行します。


File: org-ja,  Node: 外部リンク,  Next: リンクの扱い,  Prev: 内部リンク,  Up: ハイパーリンク

4.3 外部リンク
===================

Org-modeは次のようなリンクをサポートしています。ファイル、webサイト、ネット
ニュース、emailのメッセージ、BBDBデータベースの項目、IRCの会話とログなど。外
部リンクはURLを記載するような方法でリンクします。それらはコロンの前に短い定
義用の文字列をつけて表記します。コロンのあとに空白をとってはいけません。以下
に例とそれぞれのリンクのタイプの一覧を示します。

     http://www.astro.uva.nl/~dominik          ウェブへのリンク
     doi:10.1000/182                           電子文献のためのDOI
     file:/home/dominik/images/jupiter.jpg     ファイルへの絶対パス
     /home/dominik/images/jupiter.jpg          上に同じ
     file:papers/last.pdf                      ファイルへの相対パス
     ./papers/last.pdf                         same as above
     file:/myself@some.where:papers/last.pdf   リモートマシン上のファイルへのパス
     /myself@some.where:papers/last.pdf        same as above
     file:sometextfile::NNN                    ジャンプ先の行番号付きファイル
     file:projects.org                         他のOrg-modeファイルへのリンク
     file:projects.org::some words             Org-modeファイル内でのテキスト検索
     file:projects.org::*task title            Org-modeファイル内での見出し検索
     docview:papers/last.pdf::NNN              ファイルをページ指定して開く
     id:B7423F4D-2E8A-471B-8810-C40F074717E9   IDのついた見出しへのリンク
     news:comp.emacs                           Usenetへのリンク
     mailto:adent@galaxy.net                   メールリンク
     vm:folder                                 VMのフォルダへのリンク
     vm:folder#id                              VMのメールメッセージへのリンク
     vm://myself@some.where.org/folder#id      リモートマシン上のVMのメールメッセージへのリンク
     wl:folder                                 WANDERLUSTのフォルダーへのリンク
     wl:folder#id                              WANDERLUSTのメールメッセージへのリ
     ンク
     mhe:folder                                MH-Eのフォルダーへのリンク
     mhe:folder#id                             MH-Eのメールメッセージへのリンク
     rmail:folder                              RMAILのフォルダへのリンク
     rmail:folder#id                           RMAILのメールメッセージへのリンク
     gnus:group                                Gnusグループへのリンク
     gnus:group#id                             Gnusの記事へのリンク
     bbdb:R.*Stallman                          BBDBへのリンク(正規表現)
     irc:/irc.com/#emacs/bob                   IRCへのリンク
     info:org#External%20links                 Infoノードへのリンク(空白をエンコー
     ド)
     shell:ls *.org                            シェルコマンドへのリンク
     elisp:org-agenda                          Elispコマンドへのリンク
     elisp:(find-file-other-frame "Elisp.org") Elispフォームを評価

   Org-modeをカスタマイズして、新しいリンクのタイプを付け加えるには、
*note ハイパーリンクのタイプの追加::を参照してください。

リンクは二重括弧で囲んだ方が良いでしょう。URLの代わりにテキストを表示するこ
ともできます(*note リンクのフォーマット::)。たとえば、以下のように。

     [[http://www.gnu.org/software/emacs/][GNU Emacs]]

項目名が画像を指し示すファイル名やURLの場合、HTMLエクスポート (*note
HTMLのエクスポート::)によって、画像はクリック可能なボタンとして書き出されま
す。項目名がない画像の場合には、インライン画像として書き出されます。

Org-modeは、通常のテキスト内のリンクを見つけ出し、外部リンクとします。もしス
ペースがリンクの一部として必要な場合(たとえば、`bbdb:Richard
Stallman')や、
リンクの末端であいまいさをなくしたい場合、角括弧で囲みます。


File: org-ja,  Node: リンクの扱い,  Next: Org外でのリンク利用,  Prev: 外部リンク,  Up: ハイパーリンク

4.4 リンクの扱い
======================

Org-modeは正しい構文でリンクを作成したり、Org-modeのファイルにリンクを挿入し
たり、そのリンクをたどったりする方法を提供しています。

`C-c l     (`org-store-link')'
     現在の位置へのリンクを一時保管します。これはリンクを作成するときに、ど
     のバッファでも使用できる_グローバルな_コマンド(あなた自身でキーバイン
     ドを作成しなければなりません。)です。リンクは一時保管され、後から
     Org-modeのバッファへ挿入することができます(下記参照)。どの種類のリンク
     が作成されるかは、現在のバッファが何であるかによります。

     Org-modeバッファ
     もしカーソル位置に`<<target>>'がある場合、リンクはそのターゲットを指しま
     す。それ以外の場合は、見出しを指し、見出しは項目名にもなります。

     もし見出しに`CUSTOM_ID'プロパティがある場合、このカスタムIDプロパティ
     へのリンクが一時保管されます。また、(`org-link-to-org-use-id'の値によ
     りますが)グローバルに固有の`ID'プロパティが、リンクを作成するために作
     られます。ですから、このコマンドをOrg-modeバッファ内で使うと、潜在的に
     ふたつのリンクを作成することになります。つまり、Org-modeバッファ内でこ
     のコマンドを使用することにより、人間が読むことのできるカスタムIDと、グ
     ローバルに固有で、エントリーがファイル間を移動しても動作するリンクが作
     成されます。後にリンクを挿入するときには、どのリンクを挿入するかを決め
     なければなりません。

     メール/ニュースクライアント:VM, Rmail, Wanderlust, MH-E, Gnus
     ほとんどすべてのEmacsのメールクライアントがサポートされています。リンク
     は現在の記事を指し示します。Gnusバッファでは、グループを指し示すことも
     あるでしょう。項目名は筆者名と題名から作成されます。

     ウェブブラウザー:W3 and W3M
     現在のURLがリンクになり、ページのタイトルが項目名になります。

     連絡先:BBDB
     BBDBバッファ内で作成されたリンクは、現在のエントリーへのリンクになります
     。

     Chat: IRC
     IRCリンクの場合、`org-irc-link-to-logs'変数を`t'にした場合は、ログファ
     イル内に、現在の会話に相当する部分への`file:/'形式のリンクが作成されま
     す。それ以外の場合は、user/channel/serverへの`irc:/'スタイルのリンクが
     一時保管されます。

     その他のファイル
     その他のファイルの場合、リンクは、現在の行を指ししめす検索語句
     (*note
     検索オプション::)を伴って作成されます。もし、アクティブなリージョンが
     ある場合は、選択された言葉が検索語句の基本となります。自動的に作成され
     たリンクがうまく働かなかったり、不正確であったりする場合は、カスタム関
     数を書いて、検索語句を選択したり、特定のファイル形式を検索したりするこ
     とがきます。*note カスタム検索::を参照してください。`C-c
     l'というキーバイン ディングはひとつの提案に過ぎません*note
     インストール::)。

     アジェンダビュー
     カーソルがアジェンダビューにあるときは、作成されたリンクは現在の行が参照
     するエントリーを指し示します。

`C-c C-l     (`org-insert-link')'
     リンク(1)
     を挿入します。そうすると、プロンプトによって、バッファに挿入するリンク
     をたずねられます。テキストを使った内部リンクや、既に述べましたリンクタ
     イプのいずれかへのリンクを入力するだけです。リンクは項目名とともに、バ
     ッファ(2)
     に挿入されます。もし、このコマンドの呼び出し時にテキストが選択されてい
     た場合には、選択されたテキストがデフォルトの項目名になります。

     一時保管されたリンクを挿入
     <現在のセッションで一時保管されたすべてのリンクは、このプロンプトの履歴
     となっていますので、<up>や<down>(あるいは、`M-p/n')を使ってこれらにア
     クセスすることができます。

     補完の支援
     <TAB>を使用した補完機能によって、リンクの省略記法で定義された接頭辞
     (*note
     リンクの省略記法::)を含む、`http'や`ftp'などのリンクを適切に挿入する
     ことができるでしょう。もし、PREFIXのみをタイプした後に<RET>を押すと
     、Org-modeは、いくつかのリンク形式(3)に対して詳細な補完の支
     援を行います。たとえば、`file
     <RET>'をタイプすると、ファイル名の補完(( または、`C-u C-c
     C-l'をタイプします。以下を参照。)を行い、`bbdb <RET>'
     をタイプすると、連絡先の名前を補完することができます。

`C-u C-c C-l'
     接頭辞`C-u'を付けて`C-c
     C-l'が呼び出されたときは、ファイルへのリンクが
     挿入され、ファイル名の補完を利用することができます。リンクされたファイ
     ルがカレントディレクトリにあるときや、カレントディレクトリのサブディレ
     クトリにあるとき、あるいはパスが`../'を使って相対パスで書かれていると
     きは、ファイルへのパスは、現在のOrg-modeファイルからの相対パスとして挿
     入されます。それ以外の場合は絶対パスが使われ、可能であれば、ホームディ
     レクトリには`~/'が使われます。2つの`C-u'を付けることによって、絶対パス
     表記を明確に指定することができます。

`C-c C-l  (カーソルがリンク上にある場合)'
     リンク上にカーソルがある場合、`C-c
     C-l'を実行すると、リンクと項目名を 編集することができます。

`C-c C-o     (`org-open-at-point')'
     その場所にあるリンクを開きます。リンクがURLならば、
     (`browse-url-at-point'を使って)ウェブブラウザーを開きますし、それぞれ
     対応するリンクにより、VM/MH-E/Wanderlust/Rmail/Gnus/BBDBが起動し、シェ
     ルへのリンクの場合はコマンドを実行します。カーソルが内部リンク上にある
     ときは、対応する検索を行います。カーソルが見出しのタグ上にあるときは、
     対応するタグビューを作成します。カーソルがタイムスタンプ上にあるときは
     、その日のアジェンダを表示します。さらに、`file:'リンクの場合、テキス
     トファイルやリモートマシン上のファイルはEmacsで、非テキストファイルは
     適切なアプリケーションで、ファイルを開きます。ファイルの分類は、拡張子
     のみによって判断されます。`org-file-apps'を参照してください。もし、デ
     フォルトのアプリケーションではなくEmacsでファイルを開きたい場合は、接
     頭辞`C-u'を付け、Emacsで開くことを避けたい場合は、接頭辞`C-u
     C-u'を付
     けてください。カーソルがリンクではない見出し上にあるときは、見出し上の
     すべてのリンクとエントリーテキストを表示します。

`'
     <RET> `org-return-follows-link'が設定されているときは、`<RET>'もポイント上の
     リンクを開きます。

`mouse-2'
`mouse-1'
     リンク上では、`mouse-2'は`C-c C-o'と同様にリンクを開きます。Emacs
     22以降では、`mouse-1'もリンクを開きます。

`mouse-3'
     `mouse-2'と同様にリンクを開きますが、ファイルのリンクを強制的にEmacsで
     開き、内部リンクは別のウインドウ (4)で開きます。

`C-c C-x C-v     (`org-toggle-inline-images')'
     リンクされた画像のインライン表示をトグルします。通常これはリンクに項目
     名がない画像のみをインライン表示するものです。すなわち、エクスポート時
     にインラインになる画像のことです。`org-startup-with-inline-images'変数
     (5)を設定する
     ことにより、インライン画像を起動時に表示されることができます。

`C-c %     (`org-mark-ring-push')'
     現在のポジションをマークリングに格納し、現在のポジションに簡単に戻って
     こられるようにします。ファイル内部でのリンクをたどるときは、自動的にこ
     れが行われます。

`C-c &     (`org-mark-ring-goto')'
     記録されたポジションへ戻ります。ポジションは、内部リンクをたどるコマン
     ドと`C-c
     %'によって記録されます。このコマンドを連続して何回か使うと、
     記録されたポジション間を移動することができます。

`C-c C-x C-n     (`org-next-link')'
`C-c C-x C-p     (`org-previous-link')'
     バッファ内の前後のリンクへ移動します。バッファの端では、移動は、いった
     んエラーになり、もう一度行うと回り込みます。このキーバインドはとても長
     いので、`C-n'と`C-p'に設定したいと考えるかもしれません。
          (add-hook 'org-load-hook
            (lambda ()
              (define-key org-mode-map "\C-n" 'org-next-link)
              (define-key org-mode-map "\C-p" 'org-previous-link)))

   ---------- Footnotes ----------

   (1) リンクを挿入するのに、このコマンドを使わなければならないわけで
はないことに注意してください。Org-modeでのリンクはプレーンテキストです
ので、リンクはタイプしたりペーストしたりして直接バッファへ入力すること
ができます。このコマンドを使うことによって、リンクは自動的に二重括弧に
入れられ、オプションとして項目名を入力するかどうかをたずねられます。

   (2) 一時保管されたリンクを挿入した後は、そのリンクは一時保管リスト
から削除されます。後で使用するためにリンクを保存したままにしておきたい
場合は、`C-c C-l'の前に3回`C-u'をタイプするか、
`org-keep-stored-link-after-insertion'オプションを設定してください。

   (3) これは`org-PREFIX-complete-link'と
いう特別な関数を呼び出すことによって行います。

   (4)
`org-display-internal-link-with-indirect-buffer'変数を参照してくださ
い。

   (5) 対応する`#+STARTUP'`inlineimages'と`inlineimages'と共に。


File: org-ja,  Node: Org外でのリンク利用,  Next: リンクの省略記法,  Prev: リンクの扱い,  Up: ハイパーリンク

4.5 Org外でのリンク利用
===============================

Org-modeだけでなく、どのEmacsのバッファでも、Org-mode構文を持つリンクを挿入
し、たどることができます。このためには、次のような2つのグローバルコマンドを
作成しなければなりません(自分に適したグローバルなキーを設定してください)。

     (global-set-key "\C-c L" 'org-insert-link-global)
     (global-set-key "\C-c o" 'org-open-at-point-global)


File: org-ja,  Node: リンクの省略記法,  Next: 検索オプション,  Prev: Org外でのリンク利用,  Up: ハイパーリンク

4.6 リンクの省略記法
============================

長いURLをタイプするのは面倒ですが、往々にしてひとつの文章には似たようなリン
クが数多く登場するものです。このような場合には、リンクの省略記法を使うことが
できます。省略記法されたリンクは次のようなものです。

     [[リンク語句:タグ][項目名]]

タグはなくても構いません。リンク語句は文字で始まる語句、数字、`-'、`_'を使う
ことができます。省略記法は、リンク語句とリンクテキストを関連づける
`org-link-abbrev-alist'変数の値にしたがって展開されます。以下に例を示します
。

     (setq org-link-abbrev-alist
       '(("bugzilla" . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
         ("google"   . "http://www.google.com/search?q=")
         ("gmap"     . "http://maps.google.com/maps?q=%s")
         ("omap"     . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
         ("ads"      . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))

置き換えるテキストに`%s'が含まれている場合は、タグに置き換えられます。それ以
外の場合は、タグはリンクを作成するために文字列に付け加えられます。リンクを作
成する引数としてタグと一緒に呼び出される機能を指定したほうがよいかもしれませ
ん。

上記の設定だと、`[[bugzilla:129]]'で特定のバグへリンクすることができ、
`[[google:OrgMode]]'で`OrgMode'をウェブ検索することができ、 `[[gmap:51
Franklin Street, Boston]]'でFree Software Foundationの、
`[[omap:Science Park 904, Amsterdam, The
Netherlands]]'でCarstenのオフィスの
地図上の位置を表示することができ、`[[ads:Dominik,C]]'でOrg-modeの作者がEmacs
のハッキングの他に何をしているかを見つけることができます。

ある特定のOrg-modeバッファだけでリンクの省略記法を使いたい場合は、次のように
することで定義できます。

     #+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
     #+LINK: google    http://www.google.com/search?q=%s

バッファ内補完(*note
補完::)は、`['以降でリンクの省略記法を補完するために使用する
ことができます。`C-c
C-l'でリンクを挿入することへの特別な支援(たとえば、補完
)を実行する`org-PREFIX-complete-link'関数を定義することもできます。このよう
な関数はいかなる引数も受け入れず、接頭辞付きのリンクを返します。


File: org-ja,  Node: 検索オプション,  Next: カスタム検索,  Prev: リンクの省略記法,  Up: ハイパーリンク

4.7 ファイルリンクにおける検索オプション
==========================================================

ファイルへのリンクには、ファイル内の特定の場所へジャンプするリンクを含ませる
ことができます。これは、ダブルコロン(1)の後に行番号や検索語句を置くことによって行い
ます。たとえば、`C-c
l'コマンドをタイプして、あるファイルへのリンクを作成す る場合(*note
リンクの扱い::)、現在の行の言葉を検索語句としてリンクに含めることがで
き、`C-c C-o'コマンドで開くことができます。

説明と共に、あるファイルリンクへの検索語句を付加する様々な構文の方法を示しま
す。

     [[file:~/code/main.c::255]]
     [[file:~/xx.org::My Target]]
     [[file:~/xx.org::*My Target]]
     [[file:~/xx.org::#my-custom-id]]
     [[file:~/xx.org::/regexp/]]

`255'
     255行目へジャンプします。

`My Target'
     内部リンクの検索と同様に、`<<My
     Target>>'という名前のリンクターゲット 、あるいは`my
     target'というテキストを検索します(*note 内部リンク::を参照して
     ください。)。HTMLエクスポート(*note
     HTMLのエクスポート::)では、このようなフ
     ァイルへのリンクは、リンク先のファイル内にある、一致する名前のアンカー
     へのHTMLリンクになります。

`*My Target'
     Org-modeファイルの中で見出しの検索に限定されます。

`#my-custom-id'
     `CUSTOM_ID'プロパティを持つ見出しへリンクします。

`/regexp/'
     `regexp'を正規表現検索します。これは、Emacsの`occur'コマンドを使って、
     一致するすべてを別ウインドウでリスト表示します。ターゲットがOrg-modeフ
     ァイルならば、`org-occur'が使われ、一致した部分について、ツリーの抽出
     を行います。

特殊なケースとして、ファイル名が指定されていないファイルのリンクは、現在のフ
ァイルの検索となります。たとえば、`[[file:::find me]]'は、`[[find
me]]'と同 様に、現在のファイルで`find me'を検索します。

   ---------- Footnotes ----------

   (1) 下方互換性のために、行番号はシングルコ
ロンの後に置くこともできます。


File: org-ja,  Node: カスタム検索,  Prev: 検索オプション,  Up: ハイパーリンク

4.8 カスタム検索
======================

デフォルトの検索文字列作成のメカニズムと、実際のファイル検索のメカニズムは、
すべての場合でうまく動作するとは限りません。たとえば、BibTeXデータベースのフ
ァイルは、`year=\"1993\"'のようなエントリーをたくさん有していますが、これは
良い検索文字列であるとは言えません。なぜならば、BibTeXのエントリーでは、唯一
の識別情報は引用キーだからです。

このような問題に直面した場合は、特定のファイルタイプに適した検索文字列を設定
し、そのファイルで検索を行うカスタム関数を書くことができます。`add-hook'を使
用して、これらの関数は、`org-create-file-search-functions'、
`org-execute-file-search-functions'というフック変数に付け加えられる必要があ
ります。これらの変数についてのより詳しい情報は、ドキュメント文字列を参照して
ください。Org-modeは、実際にこのメカニズムをBibTeXデータベースファイルに使用
しており、該当するコードを実装のサンプルとして使うことができます。
`org-bibtex.el'というファイルを参照してください。


File: org-ja,  Node: TODOアイテム,  Next: タグ,  Prev: ハイパーリンク,  Up: Top

5 TODOアイテム
******************

Org-modeではTODOリストを個別の文書として管理するわけではありません。
(1)その変りに、TODOアイテムはノートファイルの
一部として存在します。なぜならTODOアイテムはメモを書いている最中に頭に浮かぶ
ものだからです!Org-modeでは、ツリーの中のどの項目でも簡単にマークしてTODOア
イテムとするだけです。この方法により特定の情報を複数個所にもつ必要は無くなり
、TODOアイテムを作成するのに使用した全文書が常に最新であることになります。

もちろん、こうした手法をとることで、あなたのノートファイルの中のあちこちに、
TODOアイテムが散らばることになります。それを補うためにOrg-modeでは、やらなけ
ればならない事柄の全体を見渡す方法が提供されています。

* Menu:

* TODOの基本::            登録したTODOのマーキングと表示
* TODO拡張::               ワークフローと割り当て
* 進行記録::             進行管理のための日付とメモ
* プロパティ::          他より重要なものもある
* タスクの分割::       タスクを管理可能な単位に分解する
* チェックボックス::  リストをチェックする

   ---------- Footnotes ----------

   (1)
もちろん、長いTODOリストだけを含む個別の文書を作成することもできますが、そ
うする必要はないということです。


File: org-ja,  Node: TODOの基本,  Next: TODO拡張,  Prev: TODOアイテム,  Up: TODOアイテム

5.1 基本的なTODOの機能
=============================

どの見出しでも`TODO'という言葉を前につけることで、TODOアイテムとみなします。
例えば:

     *** TODO サム フォーチュンに手紙を書く。

TODO項目を入力するときの最も重要なコマンドは以下のとおりです。

`C-c C-t     (`org-todo')'
     現在のTODOの状態を次のように切り替えます。

          ,-> (マーク無し) -> TODO -> DONE --.
          '----------------------------------'

     同じような状態の切り替えは、タイムラインとアジェンダバッファで`t'コマ
     ンドキー（*note
     アジェンダのコマンド::参照）を入力することで「間接的に」完了
     にすることもできます。

`C-u C-c C-t'
     補完や「すでに設定されていれば」さらに速い選択方法を提供
     するインターフェイスを使用して特定のキーワードを選択します。後者の方法
     では、TODOの状態に対してキーを割り振る必要があります。詳細は、
     *note ファイル毎のキーワード::と*note
     タグの設定::を参照してください。

`S-<right>  /  S-<left>'
     切り替えの機能に似て、後にくるTODOの状態、あるいは前にくるものを選択し
     ます。もっとも役に立つのはTODOの状態が２段階以上の場合です。(*note
     TODO拡張::).`shift-selection-mode'との連携については、*note
     衝突::も参照してください
     。変数`org-treat-S-cursor-todo-selection-as-state-change'も参照してく
     ださい。

`C-c / t     (`org-show-todo-key')'
     _ツリーの抽出_機能を使ってTODOを確認します（*note
     ツリーの抽出::）参照。バッ
     ファ全体を折り畳みますが、全てのTODO項目「DONE状態以外の」とその上の見
     出しの階層を表示します。前置引数をつけることで(もしくは、キーバインド
     `C-c /
     T')、ある特定のDONE状態の項目も表示させることができます。検索用
     のキーワードを入力するためのプロンプトが表示されます。さらにキーワード
     のリストを次のように入力することもでき`KWD1|KWD2|...'、この内のどれか
     に一致するものが表示されます。前置引数Nを使って、変数
     `org-todo-keywords'内のN番目のキーワードを含むツリーを表示することもで
     きます。２回の前置引数を指定すると、すべてのTODO状態「DONEとそれ以外を
     含む」を見つけることができます。

`C-c a t     (`org-todo-list')'
     グローバルTODO
     リストを表示します。すべての「DONE状態以外の」TODOアイテムをすべてのア
     ジェンダファイル(*note
     アジェンダビュー::)から集めて、一つのバッファに表示し
     ます。その新しくできたバッファは、`agenda-mode'で表示され、確認や修正
     を加えるためのコマンドも提供されます。(*note
     アジェンダのコマンド::).  *Note
     グローバルなTODOリスト::.を参照してください。

`S-M-<RET>     (`org-insert-todo-heading')'
     新しいTODOを現在の位置にあるTODOの 前に入力します。

TODOの状態の変更は、タグの変更をすることになることがあります。詳細については
、オプション`org-todo-state-tags-triggers'のドキュメント文字列を参照してくだ
さい。


File: org-ja,  Node: TODO拡張,  Next: 進行記録,  Prev: TODOの基本,  Up: TODOアイテム

5.2 TODOキーワードの拡張的な使い方
===============================================

デフォルトでは、マークされたTODOの状態は、TODOとDONEの２つしかありません。さ
らにOrg-modeは、_TODOキーワード_「`org-todo-keywords'に指定されています。」
を使って、より複雑にTODOアイテムを分類できます。特別な設定により、TODOキーワ
ードシステムは、ファイルによって異なる働きにすることできます。

注記、タグは見出しと特にTODOアイテムを分類するもう一つの方法です。(*note
タグ::).

* Menu:

* ワークフローの状態::  TODOからDONEまでの流れ
* タスクの種別::       私はこの仕事をこなす。フレッドは休む。
* キーワードセット::  ごちゃまぜにしてもやり方は見つけられる
* TODOの状態への素早い対応手段::  状態を選択するための文字
* ファイル毎のキーワード::  ファイルが違えば、やりたい事も違う
* TODOキーワードのフェイス::  状態のハイライト
* TODO間の関係::         他のタスクの終了を待たないといけないタスクがある時


File: org-ja,  Node: ワークフローの状態,  Next: タスクの種別,  Prev: TODO拡張,  Up: TODO拡張

5.2.1 ワークフローの状態としてのTODOキーワード
----------------------------------------------------------------

TODOキーワードを使用して、アイテムの_連続した_異なる状態を表すことができます
。例えば、(1):

     (setq org-todo-keywords
       '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))

縦線は、TODOキーワード「_アクションが必要な_状態」とDONE状態「アクションが必
要ない状態」を分けます。縦線が指定されていない場合は、最後の状態が、DONE状態
として使用されます。 この設定により、コマンド`C-c
C-t'で、TODOからFEEDBACKへ、それからVERIFY、最
後にDONE、DELEGATEDというように順番に切り替えます。前置引数を使用することで
、特定の状態を即座に選択することもできます。例えば`C-3 C-c
C-t'と入力すると
、すぐに３番目のVERIFYに変更することができます。もしくは、`S-<left>'により、
逆の方向に順番に切り替えることもできます。もしも、たくさんのキーワードを定義
した場合は、バッファ内補完機能（*note
補完::）か特別な一つのキーによる選択により特
定のキーワードをバッファに入力することができます。 (*note
TODOの状態への素早い対応手段::)TODOの状態の変更は、タイムスタンプと共にログ
をとることができます。（より詳しい情報は*note
作業の状態変化の追跡::を参照）

   ---------- Footnotes ----------

   (1) この変数の変更は、Org-modeをバッファ内で再起動した場合のみ有効に
なります。


File: org-ja,  Node: タスクの種別,  Next: キーワードセット,  Prev: ワークフローの状態,  Up: TODO拡張

5.2.2 種類としてのTODOキーワード
-------------------------------------------

TODOキーワードの２つ目の使い方として、いろいろな_種類_のやるべき事として表す
使用法です。例えば、項目を「仕事」または「家」を示すようにも使えます。もしく
は、複数の人と同じプロジェクトに参加するとき、その中の何人かに彼らの名前を
TODOキーワードとして使って直接やるべき事を割り当てたいかもしれません。これは
、以下のように設定します。：

     (setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))

この場合、それぞれのキーワードは作業の順序を表しているのではなく、別々のタイ
プを表すことになります。そのため、通常の作業の流れとしてタスクを一人に割り振
ることになり、その後のDONEになります。Org-modeは、このような形式をサポートす
るため、「`C-c
C-t'」コマンドの動作が少し変化します（(1)）。まずは、適当なタイプを
選択するのに、繰り返し押すことで、順番にキーワードの名称が表示されます。しば
らく間をおいてその項目に戻ってきて、「`C-c
C-t'」を再度実行すると、そのとき
は、すぐDONEに切り替えられます。前置引数か補完を使えば、適当なタイプをすぐに
選ぶことができます。さらに`C-c /
t'に前置引数を指定することにより、抽出され
たツリーの中で特定のTODOタイプの項目を確認することもできます。例えば、Lucyが
やらねばならないにすべての項目を見るには、「`C-3 C-c /
t'」を実行します。す
べてのアジェンダファイルの中からLucyの項目を一つのバッファに集約するには、グ
ローバルなtodoリストを作成し、前置引数を使用します:「`C-3 C-c a t'」、

   ---------- Footnotes ----------

   (1) タイムラインやアジェン
ダのバッファでは、「`t'」コマンドも同じ仕様です。


File: org-ja,  Node: キーワードセット,  Next: TODOの状態への素早い対応手段,  Prev: タスクの種別,  Up: TODO拡張

5.2.3 同一ファイル内での複数のキーワードセット
------------------------------------------------------------------

時には、異なるセットのTODOキーワードを同時に使いたい場合があるかもしれません
。例えば、通常の`TODO'/`DONE'を使用しつつ、バグフィックスのワークフロー、さ
らにアイテムがキャンセルをされたことを表すもう一つの状態を使用したい場合など
です「つまりDONEではないが、次のアクションが必要ない場合」。その場合の設定は
次のようになります:

     (setq org-todo-keywords
           '((sequence "TODO" "|" "DONE")
             (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
             (sequence "|" "CANCELED")))

キーワードは、すべて異なるようにすべきで、そうすることでOrg-modeが、今入力さ
れたキーワードから次に続くものを認識するのに役立ちます。この設定では、
`C-c
C-t'は、サブグループ内だけで働きます。つまり`DONE'から(何も無い状態)か
ら`TODO'へ、そして`FIXED'から(何も無い状態)から`REPORT'へ。その為、まず使い
たいサブグループを選ぶ方法が必要です。当然通常行うようにキーワードをタイプす
るか、補完、または次のコマンドを使うこともできます:

`C-u C-u C-c C-t'
`C-S-<right>'
`C-S-<left>'
     これらのキーは、あるTODOのサブグループから次へとジャンプします。上の例
     では、`C-u C-u C-c C-t'または、`C-S-<right>'は、`TODO'か`DONE'から
     `REPORT'、そして、二番目のサブグループのどれかの状態から`CANCELED'へジ
     ャンプします。注意として`C-S-'キーバインディングは、
     `shift-selection-mode' (*note 衝突::)と衝突します。

`S-<right>'
`S-<left>'
     `S-<<left>>'と`S-<<right>>'は、すべてのサブグループの_すべて_のキーワ
     ードに切り替えいきます。例えば、上記の例では、`S-<<right>>'は、`DONE'
     に切り替えられ、さらに`REPORT'になります。`shift-selection-mode'と連携
     させる方法については、*note 衝突::を参照してください。>


File: org-ja,  Node: TODOの状態への素早い対応手段,  Next: ファイル毎のキーワード,  Prev: キーワードセット,  Up: TODO拡張

5.2.4 TODOの状態への素早い対応手段
----------------------------------------------

もし、切り替えせずに任意のTODOの状態にすばやく変更したい場合は、キー登録して
一文字でその状態に変更できます。それには、各キーワードの後に括弧で括ってセク
ションキーを割り当てることにより実現できます。例えば:

     (setq org-todo-keywords
           '((sequence "TODO(t)" "|" "DONE(d)")
             (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
             (sequence "|" "CANCELED(c)")))

   `C-c
C-t'を押して、選択の為のキーを押せば、その選ばれた状態へ切り替えられま
す。さらに<SPC>を使って、どのTODOキーワードも削除することができます。
(1)

   ---------- Footnotes ----------

   (1)
変数`org-fast-tag-selection-include-todo'も見てください、この変数は、タグを
使って状態の変更を可能にします(*note
タグの設定::)、この二つを混ぜて使いたいならで
すが。この場合、それぞれのキーワードセットに単一なキーを準備する必要がありま
す。


File: org-ja,  Node: ファイル毎のキーワード,  Next: TODOキーワードのフェイス,  Prev: TODOの状態への素早い対応手段,  Up: TODO拡張

5.2.5 ファイル別にキーワードを設定する
------------------------------------------------------

異なるファイルごとに、TODOの機能をさまざまなの方法で使用できるととても便利で
す。ファイル単位のローカルな設定をするためには、そのファイルだけに通用するキ
ーワードを特別な行として記入することで設定する必要があります。例えば、前述し
た２つの例のうちの一つを設定するの場合、次のような行を、そのファイルのどこか
で行頭から開始する必要があります。

     #+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
(解釈を明確にするために`#+SEQ_TODO'と記入してもいいです。しかし、`#+TODO'と
記入するのと同じです。)、もしくは、
     #+TYP_TODO: Fred Sara Lucy Mike | DONE

   同時に複数のキーワードグループの設定には:

     #+TODO: TODO | DONE
     #+TODO: REPORT BUG KNOWNCAUSE | FIXED
     #+TODO: | CANCELED

間違いなく正しいキーワードを使うため、そのバッファ内で`#+'をタイプして、
`M-<TAB>'を使って補完してください。

縦線の後のキーワード「もしくは、縦線が指定されてない場合は、最後のキーワード
」は、そのアイテムがいつもDONE「最後のもの」であることを覚えていてください「
と言ってもDONE以外のキーワードも使えます」。これらの変更を加えた後、Org-mode
に変更を認識させるため、カーソルを変更した場所に置いたままで`C-c
C-c'してく ださい。(1)

   ---------- Footnotes ----------

   (1)
Org-modeがこれらの行を読み込むのは、ファイルを開いてOrg-modeが実行
された場合だけです。`#+'で始まる行にカーソルを置いて`C-c
C-c'をすると、単に 現在のバッファでOrg-modeを再起動したことになります。


File: org-ja,  Node: TODOキーワードのフェイス,  Next: TODO間の関係,  Prev: ファイル毎のキーワード,  Up: TODO拡張

5.2.6 TODOキーワードのフェイス
----------------------------------------

Org-modeは、TODOキーワードを特別なフェイスを使ってハイライトします
:`org-todo'は、あるアイテムがアクションを必要とするキーワードであることを指
しています。`org-done'は、あるアイテムが完了していることを指しています。もし
2つ以上の異なる状態を使用しているのであれば、特別なフェイスを使いたくなるか
もしれません。これは、変数`org-todo-keyword-faces'を変更することで可能です。
例えば:

     (setq org-todo-keyword-faces
           '(("TODO" . org-warning) ("STARTED" . "yellow")
             ("CANCELED" . (:foreground "blue" :weight bold))))

CANCELEDにあるようにフェイスプロパティのリストを使えば上手くいく_はず_ですが
、いつもうまくいっているように見えないかもしれません。必要であれば、特別なフ
ェイスを定義してそれを使うのもいいかもしれません。文字列は、カラーとして解釈
されます。変数`org-faces-easy-properties'により、文字の色にするか、背景色に
するか指定できます。


File: org-ja,  Node: TODO間の関係,  Prev: TODOキーワードのフェイス,  Up: TODO拡張

5.2.7 TODO間の関係
----------------------

Orgファイルの構成「階層とリスト」は、TODOの依存関係の定義を容易にします。通
常、親TODOタスクは、すべてのサブタスク「子タスクと定義されている」が終るまで
は、DONEにするべきではありません。そして時折、多く「サブ」タスクに対して論理
的な順序があるので、あるタスクがその前にあるすべての関連したタスクが終るまで
始められないこともあります。もし、変数`org-enforce-todo-dependencies'をカス
タマイズすれば、Orgは、未完了の子タスクが終わるまでDONEへの状態の変更を防ぎ
ます。さらに、もし、あるアイテムに`ORDERED'のプロパティが設定されていると、
その前の関連したタスクのすべてがDONEになるまで、そのそれぞれの子タスクは、変
更できないようになります。ここに例があります:

     * TODO このTODOは、２番が終るまで変更できない。
     ** DONE １番
     ** TODO ２番

     * 親
       :PROPERTIES:
         :ORDERED: t
       :END:
     ** TODO a
     ** TODO b, (a)が終わるのを待つ必要があります。
     ** TODO c, (a)と(b)が終わるのを待つ必要があります。

`C-c C-x o     (`org-toggle-ordered-property')'
     `ORDERED'プロパティを現在のアイテムに対してトグルします。プロパティが
     、この動作に使われるのは、タグのように継承するのではなく、現在のアイテ
     ムに対してのみ動作させるためです。しかし、もし見やすいようにタグを使っ
     てプロパティの値を記録したいのであれば、変数
     `org-track-ordered-property-with-tag'をカスタマイズしてください。

`C-u C-u C-u C-c C-t'
     変更できない状態のものでもTODOの状態を変更します 。

変数`org-agenda-dim-blocked-tasks'を設定すれば、依存関係のせいで閉じることの
できないTODOエントリーをアジェンダビューで薄暗いフォントにして表示するか、さ
らに見えなくすることもできます。(*note アジェンダビュー::).

   チェックボックスを見ることでTODOの状態の変更を妨げることもできます
(*note
チェックボックス::)。変数`org-enforce-todo-checkbox-dependencies'を設定すれ
ば、チェックされていないチェックボックスをもつエントリーがDONEになるのを妨げ
ることもできます。

もし、より複雑な依存関係の構造が必要であれば、例えば、異なるツリーやファイル
のエントリー同士の依存関係、付属モジュールの`org-depend.el'を参照してみてく
ださい。


File: org-ja,  Node: 進行記録,  Next: プロパティ,  Prev: TODO拡張,  Up: TODOアイテム

5.3 進行記録
================

Org-modeは、TODOアイテムにDONEという完了の印をつけたときや、TODOアイテムの状
態を変更したときはいつでも、自動的にタイムスタンプとメモを記録できます。かな
り柔軟に設定することが可能で、キーワードごとに設定したり、ファイルやサブツリ
ーごとに設定することもできます。タスクの時間管理についての情報は、
*note 作業に費やした時間の計測::を参照してください。

* Menu:

* アイテムの完了::    DONEとなったのはいつ？
* 作業の状態変化の追跡::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？


File: org-ja,  Node: アイテムの完了,  Next: 作業の状態変化の追跡,  Prev: 進行記録,  Up: 進行記録

5.3.1 アイテムの完了
---------------------------

一番基本的な時間の記録機能は、_いつ_TODOアイテムが完了したかを記録することで
す。これは、次のようにしてください(1)

     (setq org-log-done 'time)

この後、毎回TODO「未完了」からDONEの状態に移行したとき、見出しの後に
`CLOSED:
[タイムスタンプ]'の行が挿入されます。切り替えていく間に一つのエント
リーに対してTODOの状態に戻すと挿入された行はまた削除されます。タイムスタンプ
と一緒にメモも記録したいのであれば、次のようにしてください(2)

     (setq org-log-done 'note)

この設定によりメモの入力を聞いてきます。そのメモは`Closing
Note'という見出し の下に挿入されます。

   タイムライン「*note タイムライン::」とアジェンダ「*note
毎週／毎日のアジェンダ::」上で、
`l'キー使用してTODOアイテムと`CLOSED'タイムスタンプを日ごとに表示することが
できます。何が完了しているかのサマリも提供されます。

   ---------- Footnotes ----------

   (1) これに対応するイン-バッファ定義は :`#+STARTUP: logdone'

   (2) これに対応するイ ン-バッファ定義は:`#+STARTUP: lognotedone'


File: org-ja,  Node: 作業の状態変化の追跡,  Next: 習慣の追跡,  Prev: アイテムの完了,  Up: 進行記録

5.3.2 作業の状態変化の追跡
------------------------------------

TODOキーワードがワークフローの状態(*note
ワークフローの状態::)として使われる時に、
いつその状態の変化が起きたか記録し、さらにメモを取りたくなるかもしれません。
その場合、タイムスタンプかタイムスタンプ付きメモを記録することができます。こ
れらは、見出しの後に一番新しいものを先頭として(1)項目ごとにリストされ挿入さ
れます。たくさんのメモをとっている場合、そのメモを引き出しの中に入れて隠した
いようになるかもしれません「*note 引き出し::」。その場合、変数
`org-log-into-drawer'を編集してください。オススメの引き出しは、`LOGBOOK'と呼
ばれています。さらにサブツリーのために、この変数の設定も`LOG_INTO_DRAWER'プ
ロパティを修正すれば、その効果を無視して上書きすることができます。

通常、すべての状態でメモを記録するのはやりすぎになるので、Org-modeは、キーワ
ードごとに設定されると想定します。これは、特別なマーカー`!'「タイムスタンプ
用」、`@'「メモ用」をキーワードの後に括弧に入れることでできるようになります
。例えば、以下のようになります。

     (setq org-todo-keywords
       '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

これで、グローバルTODOキーワードとショートカットキーを定義するだけでなく、
DONEに状態が変更された際、時間も記録されるようにも定義できます。(2)そして、WAITかCANCELEDに状態が変化した
ときにメモが記録されます。WAITの設定は、さらに特別です:斜線の後の`!'は、その
状態に最初に切り替わる際に挿入されるメモの記録だけでなく、WAITの状態から次に
の状態に変わる時に、タイムスタンプも記録されます「でもこれは、次の状態が切
り替わる時に記録する設定がない場合にのみ有効です」。そのため、WAITからDONEに
切り替わる際には影響がありません、なぜならDONEは、タイムスタンプを記録するだ
けとして設定されているからです。しかしWAITからTODOに戻る場合は、TODOになにも
記録するように設定されてなくても、WAITの`/!'設定が、タイムスタンプを挿入する
ようになります。

   まったく同じ構文を使ってバッファ内のみ有効な設定を使用できます。
     #+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

サブツリーまたは、一つのアイテムだけ局所的にログの設定を定義したい場合は、そ
のエントリーにLOGGINGプロパティを定義してください。空ではないLOGGINGプロパテ
ィは、すべてのログの設定をnilにリセットします。この後、`lognotedone'か
`logrepeat'のようなSTARTUPキーワード、そして`TODO(!)'のような状態に特化した
設定を追加して、特定のツリーに対してログを開始するようにできます。例えば

     * TODO 各状態のタイムスタンプだけをログを取る
       :PROPERTIES:
       :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
       :END:
     * TODO WAITに切り替えられ、さらに繰り返されたときだけログを取る
       :PROPERTIES:
       :LOGGING: WAIT(@) logrepeat
       :END:
     * TODO 何もログを取らない
       :PROPERTIES:
       :LOGGING: nil
       :END:

   ---------- Footnotes ----------

   (1) 変数 `org-log-states-order-reversed'を確認してください

   (2) Org-modeは
、`org-log-done'と状態変化の際の記録機能を使えば、二つのタイムスタンプを記録
することも可能です。それでも、二つのメモをするように聞かれることはできません
。もし実際に、両方の機能を設定した場合、状態変化の際の記録機能の方が優先され
て、`Closing Note'は、使われません。


File: org-ja,  Node: 習慣の追跡,  Prev: 作業の状態変化の追跡,  Up: 進行記録

5.3.3 習慣の追跡
---------------------

Org-modeには、「habits(習慣)」と呼ばれるTODOの特別なカテゴリーの一貫性を記録
するための機能があります。habitには、以下の性質があります:

  1.
     変数`org-modules'をカスタマイズすることで`habits'モジュールを有効にし
     てある。

  2. habitは、TODO一種であり、TODOキーワードを使い未解決を表します。

  3. プロパティ`STYLE'に、`habit'を値として定義してある。

  4.
     このTODOは、スケジュールされた日付があり、通常`.+'スタイルで繰り返され
     る間隔を表します。`++'スタイルは、時間制限があるような場合に有効でしょ
     う。例えば、週末にしなければいけないことなどです。`+'スタイルは、遅れ
     ることがあるような通常の習慣ではないような場合「例:週次報告書」に適し
     ています。

  5.
     このTODOは、最短から最長の期間を`.+2d/3d'のようなシンタックスで指定で
     きます。この例の場合、このタスクを少なくともで３日ごとか、多くて２日ご
     とにこなすと指定しています。

  6.
     記録されていたデータが一貫性のあるグラフに表記されるように、状態のログ
     を取る`DONE'を使用できるようにしておく必要があります。使用できるように
     なっていない場合は、エラーにはなりませんが、一貫性を表すはずのグラフが
     まったく意味のないものになります。

上記にある定義が実際にはどのようになるか分かってもらうために、ここに経過の記
録情報と共に実際のhabitがあります。

     ** TODO 髭剃り
        SCHEDULED: <2009-10-17 Sat .+2d/4d>
        - State "DONE"       from "TODO"       [2009-10-15 Thu]
        - State "DONE"       from "TODO"       [2009-10-12 Mon]
        - State "DONE"       from "TODO"       [2009-10-10 Sat]
        - State "DONE"       from "TODO"       [2009-10-04 Sun]
        - State "DONE"       from "TODO"       [2009-10-02 Fri]
        - State "DONE"       from "TODO"       [2009-09-29 Tue]
        - State "DONE"       from "TODO"       [2009-09-25 Fri]
        - State "DONE"       from "TODO"       [2009-09-19 Sat]
        - State "DONE"       from "TODO"       [2009-09-16 Wed]
        - State "DONE"       from "TODO"       [2009-09-12 Sat]
        :PROPERTIES:
        :STYLE:    habit
        :LAST_REPEAT: [2009-10-19 Mon 00:36]
        :END:

このhabitが表しているのは、髭剃りを多くて２日ごとか「`SCHEDULED'により指定さ
れた日付と繰り返される間隔」、少なくとも４日ごとにする。もし、今日が１５日と
すると、このhabitは、二日後の１０月１７日にアジェンダに表示されて、４日後の
１９日には、期限切れとして表示されます。

habitsの本当に使い易いところは、定期性グラフと表示されることです。これは、過
去にどれぐらいタスクが定期的に完了したかを見るためのものです。このグラフは、
毎日過去３週間のタスクが完了したかを色分けして表示します。各色は、以下を表し
ます:

`青'
     まだ、その日までにタスクが完了してなくていい場合。

`緑'
     その日に完了できたはずのタスクの場合。

`黄'
     明日になると期限切れになるタスクの場合。

`赤'
     その日に期限切れのタスクの場合。

日ごとの色分けだけでなく、その日に終わったタスクに関してはアスタリスクでマー
クされ、感嘆符が、グラフ中の今日の日付の部分に付きます。

   アジェンダ上でhabitsが表示方法を変える幾つかの設定変数があります。

`org-habit-graph-column'
     定期的グラフを表記させるバッファ列。これにより指定された列にある文字列
     を上書きします。そのため、habitのタイトルを短く要点を付くようにすると
     いいでしょう。

`org-habit-preceding-days'
     今日より前に、定期的グラフに何日分の日付を表示するかの指定。

`org-habit-following-days'
     今日より後に、定期的グラフに何日分の日付表示するかの指定。

`org-habit-show-habits-only-for-today'
     nil以外が指定されている場合、habitsを今日のアジェンダビューだけに表示
     する。これは、初期値で真に設定されています。

最後に、アジェンダバッファで`K'を押すことによりhabitsを一時的に使用不可にし
、まったく表示させないようにできます。もう一度`K'を押すと元にもどります。例
えば、もし特定の前後の内容によてのみ必要なhabitsの場合は、タグのフィルタリン
グの影響も受けます。


File: org-ja,  Node: プロパティ,  Next: タスクの分割,  Prev: 進行記録,  Up: TODOアイテム

5.4 プロパティ
===================

もし、Org-modeよく使うのであれば、最終的にTODOアイテム量が増え、優先順位付け
をした方がいいとなるかもしれません。優先順位付けはTODOアイテムの見出しに、次
のように_優先順位クッキー_を置くことで可能になります:

     *** TODO [#A] サム フォーチュンに手紙を書く。

初期値としてOrg-modeは、次の３つの優先順位付けをサポートします:`A'、`B'、
`C'。`A'が一番高い優先度です。クッキーなしの場合は、`B'の優先度として扱われ
ます。優先順位付けは、アジェンダの順番を付けるときのみ影響します。「
*note
毎週／毎日のアジェンダ::アジェンダ外では、Org-modeで継承されたりしません。ク
ッキーは、変数`org-priority-faces'をカスタマイズすることにより、特別なフェイ
スを使ってハイライトすることもできます。

優先順位付けどんなアウトラインモードにも付けるとができます。つまりTODOアイテ
ムである必要はありません。

`C-c ,'
     現在の見出しの優先順位付けをする「`org-priority'」。このコマンドは、優
     先順位付けのための文字`A'、`B'、または、`C'を聞いてきます。その代わり
     に<SPC>を押すと、優先順位付けのクッキーが見出しから削除されます。優先
     順位は、タイムラインまたは、アジェンダバッファからも`,'コマンドで遠隔
     的に変更できます。「*note アジェンダのコマンド::」。

`S-<up>     (`org-priority-up')'
`S-<down>     (`org-priority-down')'
     現在の見出し優先度を上下する。(1).これらのキーはタイムスタンプ
     を修正するのにも使うので注意してください。「*note
     タイムスタンプの作成::」
     `shift-selection-mode'との相互利用に関しては次を参照してください。
     *note 衝突::

変数`org-highest-priority'、`org-lowest-priority'、`org-default-priority'を
設定することで、変更できる優先度の範囲を変えることができます。バッファごとに
、「上限、下限、既定値」の設定を以下のようにすることができます。「必ず一番上
の優先度の文字が、一番下の優先度よりもアルファベットの並びで前の文字であるよ
うにしてください。」:

     #+PRIORITIES: A C B

   ---------- Footnotes ----------

   (1) 次のオプションも参照してください。
`org-priority-start-cycle-with-default'.


File: org-ja,  Node: タスクの分割,  Next: チェックボックス,  Prev: プロパティ,  Up: TODOアイテム

5.5 タスクをサブタスクに細分化する。
====================================================

通常、大きなタスクは小さくて管理しやすいサブタスクに細分化することをお勧めし
ます。これはTODOアイテムの下にアウトラインツリーをさらに詳細なサブタスクをそ
のツリーを付けて作成することで可能です。(1)すでに完了したサブタスクの進捗状況を表示してさせておくには、`[/]'か`[%]'ヘ
ッドラインのどこかに挿入してください。これらのクッキーは、サブタスクのTODOの
状態が変わるかクッキー上で`C-c C-c'を押すたびに更新されます。例えば:

     * パーティーの準備をする [33%]
     ** TODO 出席者に電話する [1/2]
     *** TODO ピーター
     *** DONE サラ
     ** TODO 食べ物を買う
     ** DONE 近所の人と話す

もし、見出しがチェックボックスと子TODOを両方持っていた場合、統計クッキーは、
あいまいなものになります。この問題を解決するには、`COOKIE_DATA'プロパティを
`checkbox'か`todo'に設定してください。

もし統計クッキーに「直下のTODOだけでなく」すべてのサブツリーのTODOエントリー
を含めたい場合は、変数`org-hierarchical-todo-statistics'を設定してください。
これを一つのサブツリーに行うには、`recursive'というキーワードを`COOKIE_DATA'
プロパティの値として設定してください。

     * 親キャプチャ統計 [2/20]
       :PROPERTIES:
       :COOKIE_DATA: todo recursive
       :END:

もしすべての子タスクが終了後、TODOエントリーを自動的にDONEに切り替えたい場合
は、以下の設定を行なってください:

     (defun org-summary-todo (n-done n-not-done)
       "すべてのサブツリーが終了するとDONEに切り替え、その他の場合は、TODOになす
     る。"
       (let (org-log-done org-log-states)   ; 記録「logging」を終了
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

その他の方法としては、チェックボックスをつかって「階層化された」多量のサブタ
スクがいくつあるか調べることもできます。「*note チェックボックス::」

   ---------- Footnotes ----------

   (1) サブタスクをグローバルTODOリストに
含めないようにするには、`org-agenda-todo-list-sublevels'を参照してください。


File: org-ja,  Node: チェックボックス,  Prev: タスクの分割,  Up: TODOアイテム

5.6 チェックボックス
============================

プレーンなリスト(1)「 *note エントリー中の階層構造::」は、`[
]'で開始することでチェックボックスにするこ
とができます。この機能は、TODOアイテムに似ていますが「*note
TODOアイテム::」、より
気軽につかえます。チェックボックスは、グローバルTODOリストに追加されません。
そのためタスクを分岐するのに便利です。もしくは、買い物リストに使えます。チェ
ックボックスをチェックした状態するには、`C-c
C-c'を使ってください。もしくは 、マウスでクリックしてください。「Piotr
Zielinskiの`org-mouse.el'に感謝」。

   以下は、チェックボックスリストの例です:

     * TODO パーティーの準備 [2/4]
       - [-] みんなに連絡 [1/3]
         - [ ] ピーター
         - [X] サラ
         - [ ] サム
       - [X] 食べ物を注文
       - [ ] どんな音楽を掛けるか考える
       - [X] 近所の人と話す

チェックボックスは、階層化に対応しています。そのため、もしあるチェックボック
ス下の項目が複数のチェックボックスである場合、チェックボックスが全くチェック
されていないか、いくつかされているか、全てされているかによりその内の一つのチ
ェックボックスをチェックした状態にすると親チェックボックスに影響します。

最初と二列目の`[2/4]'と`[1/3]'はクッキーであり、いくつのチェックボックスがそ
のエントリーでチェックされているかとそのすべてのチェックボックス数が表示され
ています。これにより、いくつのチェックボックスが残っているか、折りたたまれて
いても分かるようになっています。クッキーは見出しかプレーンなリスト「の最初の
列」に置くことができいます。各クッキーは、クッキーのある見出し／項目の直下に
ある子構造であるチェックボックスを表しています。(2)自分でクッキーを
`[/]'もしくは、`[%]'をタイプして入力しなければなりません。`[/]'を入力すると
上記したように、`m個の内のn個'となります。`[%]'の場合は、何パーセントのチェ
ックボックスがチェックされているかが情報として得られます。「上記の例では、そ
れぞれ`[50%]'と`[33%]となります」'.
見出しの下では、クッキーは、見チェックボックスか子TODOの状態の数を数えます。
また、最後の変更に基づいて表示されます。この問題を解決するには、プロパティ
`COOKIE_DATA'を`checkbox'か`todo'に設定してください。

アウトラインノードに`ORDERED'プロパティが設定されている場合、チェックボック
スは、連続でチェックされていなければなりません。上部のチェックボックスがチェ
ックされていない状態でその下部のチェックボックスをチェックしようとするとエラ
ーがスローされます

以下のコマンドでチェックボックスを操作できます:

`C-c C-c     (`org-toggle-checkbox')'
     チェックした状態をトグルするか「前置引数
     と実行すると」チェックボックスを作成します。ダブル前置引数だと、`[-]'
     が設定されます。これは、中間の状態を表します。

`C-c C-x C-b     (`org-toggle-checkbox')'
     チェックした状態をトグルするか「前置
     引数と実行すると」チェックボックスを作成します。ダブル前置引数だと、
     `[-]'が設定されます。これは、中間の状態を表します。
        -
          アクティブなリージョンがある場合は、そのリージョンの最初のチェックボッ
          クスをトグルします。そして残りのボックスを最初のボックスと同じ状態にし
          ます。前置引数と使用すると、リージョン内のすべてのチェックボックスを作
          成するか削除します。

        -
          カーソルが見出し上にある場合、現在の見出しから次の見出しのリージョン内
          のチェックボックスをトグルします。「つまりサブツリー全体では_ない_」

        -
          アクティブなリージョンがなければ、その場所のチェックボックスをトグルします。

`M-S-<RET>     (`org-insert-todo-heading')'
     新しい項目をチェックボックスと共に挿入し
     ます。これは、プレーンなリスト(*note
     エントリー中の階層構造::)内にカーソルがすでに
     ある場合にのみ動作します。

`C-c C-x o     (`org-toggle-ordered-property')'
     `ORDERED'プロパティを設定します。これは、連続でチェックボックスがチェックさ
     れていなければならないと指定します。プロパティが使用されます、なぜならこの指
     定はローカルに影響するべきでタグのように継承されるないからです。しかし、見や
     すいようにタグを使ってプロパティの値を記録したい場合は、
     `org-track-ordered-property-with-tag'変数をカスタマイズしてください。

`C-c #     (`org-update-statistics-cookies')'
     現在のアウトライン内の統計クッキーを更
     新します。`C-u'引数と呼び出されるとファイル全体を更新します。`C-c
     C-c'でチェ
     ックボックスをトグルした場合と`M-S-<RET>'で新しいチェックボックス項目が作成
     された場合、チェックボックス統計クッキーは、自動的に更新されます。TODO状態を
     変更すると統計クッキーも更新されます。手動でチェックボックスや項目を削除した
     り、それらを追加したり変更した場合は、このコマンドをつかって状態を更新してく
     ださい。もしくは、単にコマンドを二度トグルしてください「`C-c
     C-c'チェックボ ックスを作成など」。

   ---------- Footnotes ----------

   (1) これは概要リスト以外という意味ですが、このリストも
`org-list-automatic-rules'を修正することで可能です。

   (2) もし直下だけでなくクッキー
のしたにあるすべてのチェックボックスを網羅したい場合は、変数
`org-hierarchical-checkbox-statistics'を設定してください。


File: org-ja,  Node: タグ,  Next: プロパティとカラム,  Prev: TODOアイテム,  Up: Top

6 タグ
********

相互に関係する情報のためにコンテクストやラベルをつけるためのすばらしい方法の
一つは見出しにタグを対応づけることです。Org-modeはタグについて幅広く対応して
います。

全ての見出しはタグのリストを取ることができて、タグは見出しの最後に置かれます
。タグはいわゆる普通の単語で利用される文字や数字、`_'、`_'を利用できます。タ
グはコロンで始まりコロンで終わらなければなりません。例えば、`:work:'です。複
数のタグはこのように書きます。`:work:urgent:'。タグはデフォルトでは太字のフ
ェイスで見出しと同じ色で表示されます。TODOのキーワード (*note
TODOキーワードのフェイス::)と同じように変数`org-tag-faces'を変更することで
特別なフェイスを設定することも可能です。

* Menu:

* タグの継承::          アウトラインのツリー構造に沿ってタグ付けされる
* タグの設定::          見出しにタグをつける
* タグの検索::          タグの組み合わせで検索する


File: org-ja,  Node: タグの継承,  Next: タグの設定,  Prev: タグ,  Up: タグ

6.1 タグの継承
===================

タグはアウトラインツリーの階層構造を利用します。もしある見出しに特定のタグが
ついていれば、全ての下位レベルにタグが継承されます。以下に例を示します:

     * Meeting with the French group      :work:
     ** Summary by Frank                  :boss:notes:
     *** TODO Prepare slides for him      :action:

最後の見出しには明示的にマークされていない、`:work:'、`:boss:'、`:notes:'、
`:action:'のタグがついています。ファイル全体の見出しに継承される見出しをつけ
ることもでき、これは仮定的にレベル0の見出しとして定義され、ファイル全体に反
映させることができます。この例を次に示します(1):

     #+FILETAGS: :Peter:Boss:Secret:

特定のタグについてタグの継承を制限するには変数`org-use-tag-inheritance'、
`org-tags-exclude-from-inheritance'を利用します。

タグの継承が有効の場合にタグの検索で見出しが一致したとき、その見出しの全ての
サブツリーも同じように一致します(2)。始めにタグが一致したサブツリーのみを表示したいので
あれば、変数`org-tags-match-list-sublevels'を設定してください (非推奨).

   ---------- Footnotes ----------

   (1) これら全てのバッファ内の設定は 、`C-c
C-c'とタイプすることでその行の変更を有効にすることができる

   (2) タグ以外の条件を加えて検索するとこの限りで
はない(これはもしその検索が、より複雑な属性を含む条件を伴わないときだけ正し
い)(*note プロパティの検索::)


File: org-ja,  Node: タグの設定,  Next: タグの検索,  Prev: タグの継承,  Up: タグ

6.2 タグの設定
===================

簡単に見出しの最後へタグは入力することができます。コロンの次に`M-<TAB>'でタ
グの補完をします。他にもタグの入力のための特別なコマンドが以下に続きます:

`C-c C-q     (`org-set-tags-command')'
     現在の見出しに新しくタグを入力します。org-modeは補完を始めるか、特別な
     ワンキーのインタフェースを提示します。ワンキーのインタフェースは後で説
     明します。タグを入力し、<RET>キーをタイプするとタグが挿入され、
     `org-tags-column'の列に整列されます。数引数(`C-u'
     prefix)をつけて呼び出すと、カレントバッファの全てのタグがきれいに見え
     るように整列されます。TAGSは自動的に昇格や降格した後に再整列され、TODO
     の状態が変わります(*note TODOの基本::)。

`C-c C-c     (`org-set-tags-command')'
     カー ソルが見出し行にある時は`C-c C-q'と同じ動作をします。

   Org-modeは_list of
tags_に基づくタグの挿入をサポートしています。このリストは
デフォルトでは動的に構築され、バッファで使われているタグを全て含みます。変数
`org-tag-alist'にタグのリストを設定することでグローバルにタグを指定しておく
こともできます。デフォルトのタグを次のようにファイルに記述することでもデフォ
ルトのタグリストを設定できます。

     #+TAGS: @work @home @tennisclub
     #+TAGS: laptop car pc sailboat

もし変数`org-tag-alist'にタグを設定することでタグリストがグローバルに定義さ
れていたとして、そのリストよりもファイルから生成された動的なタグリストを利用
したければ、次のような空のTAGSオプションをファイルに指定します

     #+TAGS:

もし全てのファイルで使うつもりのタグや、ファイルごとのTAGSオプションで定義さ
れたタグの集合を優先したければ、変数`org-tag-persistent-alist'に明記すればよ
い。これを止めるにはファイルごとにSTARTUPオプションを次のように書きます。

     #+STARTUP: noptag

デフォルトでOrg-modeはタグの入力に標準的なミニバッファでの補完を使います。し
かし_fast tag
selection_と呼ばれるもう一つの速い実装もあります。これはタグの
選択や除外をワンキーで可能にするものです。これをうまく動かすためにあなたはユ
ニークな文字を良く使うタグにアサインするべきです。変数`org-tag-alist'を
`.emacs'に設定することでグローバルにこの機能を使うことができます。例えば複数
のファイルの多くの項目に`:@home:'タグをつけるという需要があったとします。こ
の場合次のような設定なるでしょう。

     (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))

もしそのタグが作業中のファイルにおいてのみふさわしいのであれば、かわりに次の
ようにTAGSオプションを書くこともできます。

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)

タグインタフェースはスプラッシュウィンドウにとりうるタグを表示します。もし特
定のタグの後に新しい行から始めたいのであればタグリストに`\n'を挿入します。

     #+TAGS: @work(w)  @home(h)  @tennisclub(t) \n laptop(l)  pc(p)

もしくは2行に分けて書きます。

     #+TAGS: @work(w)  @home(h)  @tennisclub(t)
     #+TAGS: laptop(l)  pc(p)

また次のようにブレース(波括弧{})を使うことで相互排除したグループにタグをま
とめることもできます。

     #+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)

これは`@work'、`@home'、`@tennisclub'のうち少なくとも一つは選択されること
を意図しています。そのようなグループを複数持つことも可能です。

これらの変更を有効にするために、その行にカーソルを置いて<C-c
C-c>を押すこと を忘れないようにしてください。

これらの相互排除グループを変数`org-tags-alist'で設定するためには、ブレースの
代わりにダミーのタグとして`:startgroup'と`:endgroup'を使わなければなりません
。同様に改行を表現するためにダミーのタグとして`:newline'を使うことができます
。直前の例を設定すると次のような記述になります。

     (setq org-tag-alist '((:startgroup . nil)
                           ("@work" . ?w) ("@home" . ?h)
                           ("@tennisclub" . ?t)
                           (:endgroup . nil)
                           ("laptop" . ?l) ("pc" . ?p)))

   もし少なくとも一つのタグに選択用キーが設定されていると、`C-c
C-c'が押された
ときに自動的に特別なインタフェースが表示されます。そのインタフェースは継承さ
れたタグ、現在の見出しのタグ、全ての有効な付随するタグを提示します(1)。このインタフェー
スでは以下のキーが利用できます。

`a-z...'
     アサインされたキーを押すことで現在の行にタグが追加または削除されます。
     相互排除グループのタグを選択することでそのグループの他のタグは無効にな
     ります。

`<TAB>'
     たとえあらかじめ定義されていないタグでも、ミニバッファでタグを入力しま
     す。バッファ内の全てのタグを補完することができます。コンマで区切ること
     で複数のタグを追加することも可能です。

`<SPC>'
     この行のタグを全てクリアします。

`<RET>'
     変更された集合を確定します。

`C-g'
     変更を破棄します。

`q'
     もし`q'がタグにアサインされていなければ`C-g'のように変更を破棄します。

`!'
     相互排除しているタグのグルーピングを無効にします。これはそのグループ内
     のタグを(例外的に)複数個、タグづけるときに使います。

`C-c'
     次の変更後の自動終了をトグルします(下記参照)。もしもしエキスパートモー
     ドを使っているのであれば、最初の`C-c'が選択ウィンドウに表示されます。

このメソッド(特別なインタフェース)であなたはとても少ないタイプで見出しにタグ
をつけられます。上記の設定で、現在のタグをクリアして、`@home'、`laptop'、
`pc'のタグをつけるには次のように入力します: `C-c C-c <SPC> h l p
<RET>'。タグ`@home'を`@work'へ付け替えるには `C-c C-c w
<RET>'とタイプするか代わりに`C-c C-c C-c w'とタイプします。定義さ
れていないタグ`Sarah'を追加するには`C-c C-c <TAB> S a r a h <RET>
<RET>'すれ ばよいのです。

もしタグを決定するのをただひとつのキーを押すだけにする必要があれば、変数
`org-fast-tag-selection-single-key'を設定します。これによってタグを選択する
キーを押した後に`RET'を押す必要がなくなります。もしキー入力が必要であれば
`C-c'で無効化できます(つまりタグの選択を始めるために`C-c C-c
C-c'の代わりに `C-c
C-c'を使います)。もしこの変数に`expert'を設定すれば、タグのワンキー選択
用の特別なウィンドウを表示しなくなります。`C-c'を追加してはじめてそのウィン
ドウが表示されるようになります。

   ---------- Footnotes ----------

   (1) キーが設 定されていないタグにはは自動的にキーがアサインされます。


File: org-ja,  Node: タグの検索,  Prev: タグの設定,  Up: タグ

6.3 タグの検索
===================

一度タグシステムが設定されると、関連する情報を特殊なリストに集めるのに使われ
ます。

`C-c / m  or  C-c \     (`org-match-sparse-tree')'
     タグ検索にマッチした全てのツリーを抽出する。`C-u'のプレフィックスをつ
     けて呼び出すことで、TODOの見出しのみに限定する。

`C-c a m     (`org-tags-view')'
     全てのアジェンダファイルにおいてタグにマッチしたものの一覧を作成する。
     *Note タグとプロパティとのマッチング::.

`C-c a M     (`org-tags-view')'
     全てのアジェンダファイルにおいてタグにマッチしたものの一覧を作成する。
     ただしTODOの項目に限定し、サブツリーの項目の検索を強制する(変数
     `org-tags-match-list-sublevels'参照)。

これらのコマンドは全てマッチ文字列を問います。マッチ文字列はタグ`boss'と
`urgent'を含み、`project1'を含まないものを検索する`+boss+urgent-project1'や
、タグ`Kathy'または`Sally'がつけられているエントリーを検索する`Kathy|Sally'
のような基本的な論理構造が使用可能です。検索文字列の全ての構文はリッチでTODO
キーワードやエントリーのレベル、プロパティにもマッチします。完全な説明と多く
の例は*note タグとプロパティとのマッチング::を見てください。


File: org-ja,  Node: プロパティとカラム,  Next: 日付や時間,  Prev: タグ,  Up: Top

7 プロパティ（属性）とカラム（列）
**************************************************

プロパティはエントリーに関連付けられたキーと値を持つペアのあつまりです。
Org-modeでは、プロパティのための主要なアプリケーションが2つあります。1つ目は
、プロパティはタグのようですが値を持つことです。2つ目は、Org-modeのバッファ
で(とても基本的な)データベース機能を実装するためにプロパティを使えることです
。1つ目のアプリケーションの例に、ソフトウェアのリリース計画とバグを文章化す
るファイルを管理することを想像して下さい。`:release_1:'、`:release_2:'のよう
なタグを使う代わりに、`:Release:'というプロパティを使い、異なるサブツリーの
中に`1.0'や`2.0'のような異なる値を持たせれば良いのです。プロパティの2つ目の
アプリケーションの例に、音楽CDのトラックを管理する事を想像して下さい。そこで
はアルバム名、アーティスト名、リリース日、トラックの数などがプロパティとなる
でしょう。

   プロパティはカラムビューで便利に編集、閲覧できます(*note
カラムビュー::)。

* Menu:

* プロパティの表記法::  プロパティの表記の仕方
* スペシャルプロパティ::  他のorg-modeの機能を使用する
* プロパティの検索::  プロパティ値の一致作業
* プロパティの継承::  ツリー上でのプロパティの伝達
* カラムビュー::       表による表示と修正
* プロパティAPI::       Lispプログラマのためのプロパティ


File: org-ja,  Node: プロパティの表記法,  Next: スペシャルプロパティ,  Prev: プロパティとカラム,  Up: プロパティとカラム

7.1 プロパティの表記法
===============================

プロパティはキーと値のペアです。それらは、名前`PROPERTIES'を持つ特別な引き出
し(*note
引き出し::)の中にある必要があります。各プロパティは最初に(コロンで囲われ
た)キーを持ち、その後に値を持つ1行で記述されます。以下に例を示します。

     * CD collection
     ** Classic
     *** Goldberg Variations
         :PROPERTIES:
         :Title:     Goldberg Variations
         :Composer:  J.S. Bach
         :Artist:    Glen Gould
         :Publisher: Deutsche Grammophon
         :NDisks:    1
         :END:

プロパティ`:Xyz_ALL:'のように設定する事で、特定なプロパティ`:Xyz:'の許容値を
定義できます。この特別なプロパティは、もしレベル1のエントリに設定されたなら
ば全てのツリーに適用されるように_継承_されます。許容値を定義すると、対応する
プロパティの設定が簡単になり、入力ミスを防ぐ事ができます。CDコレクションの例
では、以下のように1つのボックスの中に発売元とディスクの数をあらかじめ定義で
きます。

     * CD collection
       :PROPERTIES:
       :NDisks_ALL:  1 2 3 4
       :Publisher_ALL: "Deutsche Grammophon" Philips EMI
       :END:

1つのファイル全体で継承されるプロパティを設定したいならば、以下の行のように
します。
     #+PROPERTY: NDisks_ALL 1 2 3 4

   グローバル変数`org-global-properties'に設定するプロパティの値は全ての
Org-modeのファイルに継承されます。

以下のコマンドはプロパティを操作する助けとなります。

`M-<TAB>     (`pcomplete')'
     行にある最初のコロンのうしろで、プロパティのキーを
     補完します。現在のファイルで使われた全てのキーは可能な補完候補として提
     供されます。

`C-c C-x p     (`org-set-property')'
     プロパティを設定します。プロパ
     ティ名と値の入力を促します。必要なら、プロパティの引き出しがさらに作ら
     れます。

`M-x org-insert-property-drawer'
     現在のエントリーの中にプロパティの引き出しを入れます。引き出しはエント
     リーのはじめに入りますが、デッドラインのような計画情報を持つ行の後とな
     ります。

`C-c C-c     (`org-property-action')'
     プロパティの引き出しの中にカーソ
     ルがあるとき、プロパティコマンドを実行します。

`C-c C-c s     (`org-set-property')'
     現在のエントリにプロパティを設定します。プ
     ロパティと値の両方共、補完を使って入力できます。

`S-<right>     (`org-property-next-allowed-value')'
`S-<left>     (`org-property-previous-allowed-value')'
     ポイントのプロパティを次/前の許容値に切り替えます。

`C-c C-c d     (`org-delete-property')'
     現在のエントリからプロパティを削除します。

`C-c C-c D     (`org-delete-property-globally')'
     プロパティを現在のファイルにある全てのエントリからグローバルに削除します。

`C-c C-c c     (`org-compute-property-at-point')'
     ポイントにあるプロパティを最も近い列のフォーマット定義からオペレータやスコープを使って計算します。


File: org-ja,  Node: スペシャルプロパティ,  Next: プロパティの検索,  Prev: プロパティの表記法,  Up: プロパティとカラム

7.2 スペシャルプロパティ
==================================

以前の章で述べたTODO状態や、エントリの優先度のようなスペシャルプロパティは、
Org-modeの機能への別のアクセス方法を提供します。このインターフェイスはカラム
ビュー(*note
カラムビュー::)にそれらの状態を含めたり、クエリにそれらを使ったりする
事で生じます。次のプロパティ名は特別(`:CATEGORY:'を除いて)で、プロパティの引
き出しでキーとして使われません。

     TODO         エントリのTODOキーワード
     TAGS         見出しに直接定義されたタグ
     ALLTAGS      継承されたタグも含む全てのタグ
     CATEGORY     エントリのカテゴリ
     PRIORITY     1文字の文字列である、エントリの優先度
     DEADLINE     山括弧(<>)のないデッドライン時刻文字列
     SCHEDULED    山括弧(<>)のないスケジュールタイムスタンプ
     CLOSED       いつこのエントリがクローズされたか
     TIMESTAMP    エントリで最初のキーワードのないタイムスタンプ
     TIMESTAMP_IA エントリで最初のアクティブでないタイムスタンプ
     CLOCKSUM     サブツリーでのCLOCKインターバルの合計。`org-clock-sum'\n
                  が値を計算するために最初に実行されなければならない。\n
     BLOCKED      "t" であれば、タスクが子供や兄弟に現在ブロックされている
     ITEM         エントリの内容
     FILE         エントリのあるファイル名


File: org-ja,  Node: プロパティの検索,  Next: プロパティの継承,  Prev: スペシャルプロパティ,  Up: プロパティとカラム

7.3 プロパティの検索
============================

プロパティに基づいて選択した特別なリストやツリーの抽出を作成するために、タグ
検索(*note タグの検索::)の場合と同じコマンドが使えます。
`C-c / m  or  C-c \     (`org-match-sparse-tree')'
     全てのマッチしたエントリについて抽出したツリーを作成します。前置引数
     `C-u'をつけると、TODO行でない見出しは無視します。

`C-c a m     (`org-tags-view')'
     全てのアジェンダファイルからマッチするタグ・プ
     ロパティのグローバルなリストを作成します。 *Note
     タグとプロパティとのマッチング::.

`C-c a M     (`org-tags-view')'
     全てのアジェンダファイルからマッチするタグのグローバルなリストを作成し
     ます。しかし、TODO項目と下位項目の強制チェック(変数
     `org-tags-match-list-sublevels'参照)のみチェックします。

   検索文字列のための文法は、*note
タグとプロパティとのマッチング::で説明されています 。

1つのプロパティに基いて抽出したツリーを作成するための特別なコマンドもありま
す。

`C-c / p'
     プロパティの値に基づいて抽出したツリーを作成します。これは最
     初にプロパティ名、次にその値の入力を促します。抽出したツリーは与えられ
     た値でこのプロパティを定義する全てのエントリで作られます。その値を大括
     弧で括っていたならば正規表現として解釈され、プロパティ値に対してマッチ
     します。


File: org-ja,  Node: プロパティの継承,  Next: カラムビュー,  Prev: プロパティの検索,  Up: プロパティとカラム

7.4 プロパティの継承
============================

Org-mode文章のアウトライン構造はプロパティの継承モデルを適用しています。ツリ
ーの親があるプロパティを持っているならば、子はこのプロパティを継承します。
Org-modeはこれをデフォルトで有効としていません。これはプロパティの検索を遅く
してしまうためとあまり必要とされないためです。しかしながら、継承が役立つ場面
があるならば、変数`org-use-property-inheritance'を設定する事で有効とできます
。この変数は、全てのプロパティを親から継承する`t'、継承されるべきプロパティ
のリスト、継承されるプロパティにマッチする正規表現を設定できます。もしプロパ
ティが値`nil'を持つならば、継承検索がこの値で停止し`nil'を返すように、明示的
に未定義のプロパティであると解釈されます。

Org-modeは、継承がハードコードされているプロパティがいくつかあります。少なく
ともそれらを使う特別なアプリケーションがあります。

`COLUMNS'
     `:COLUMNS:'プロパティは、カラムビュー(*note
     カラムビュー::)のフォーマットを
     定義します。`:COLUMNS:'プロパティが定義されているレベルがカラムビュー
     テーブルの開始地点として使われるという意味で継承されます。そして、列表
     示が有効である場所とサブツリーの場所とは無関係です。

`CATEGORIES'
     アジェンダビュー用です。`:CATEGORY:'プロパティを通して設定されたカテゴ
     リがサブツリー全体に適用されます。

`ARCHIVE'
     アーカイブ用です。`:ARCHIVE:'プロパティは、サブツリー全体のアーカイブ
     位置を定義します(*note サブツリーを移動する::)。

`LOGGING'
     LOGGINGプロパティは、エントリやサブツリーのログ取得設定について定義し
     ます(*note 作業の状態変化の追跡::)。


File: org-ja,  Node: カラムビュー,  Next: プロパティAPI,  Prev: プロパティの継承,  Up: プロパティとカラム

7.5 カラムビュー
======================

アウトラインツリーにあるプロパティを閲覧、編集するための最も良い方法は_カラ
ムビュー_です。カラムビューでは、各アウトラインノードがテーブル行に変換され
ます。このテーブルにある列がエントリのプロパティへのアクセスです。Org-modeは
、各項目の見出し上にテーブル構造をオーバレイすることで列を実装します。見出し
はテーブル列に変換されますが、アウトラインツリーの見た目もまだ変えられます。
例えば、CONTENTS
ビュー(`S-<TAB>S-<TAB>'、もしくは、カラムビューがアクティブであるときに単純
に`c')にスイッチする事でコンパクトなテーブルを得られますが、まだ各見出し以下
のエントリを開いたり、読んだり、編集したりもできます。また、ツリーの抽出コマ
ンドを実行した後にカラムビューに切り替える事もでき、この方法では選択した項目
のみのテーブルを得ます。カラムビューは利用可能な複数のファイルから選択した項
目を集めたクエリのあるアジェンダバッファ(*note
アジェンダビュー::)でも動作します。

* Menu:

* カラムの定義::       カラムの書式のプロパティ
* カラムビューの利用::  カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック


File: org-ja,  Node: カラムの定義,  Next: カラムビューの利用,  Prev: カラムビュー,  Up: カラムビュー

7.5.1 カラムの定義
------------------------

最初にカラムビューを設定するために、カラムを定義する必要があります。これはカ
ラムフォーマット行を定義する事によってなされます。

* Menu:

* カラム定義の有効範囲::  カラム設定の定義範囲の指定方法は？
* カラム・アトリビュート::  カラム内の表示と値


File: org-ja,  Node: カラム定義の有効範囲,  Next: カラム・アトリビュート,  Prev: カラムの定義,  Up: カラムの定義

7.5.1.1 カラム定義の有効範囲
......................................

カラムフォーマットを定義するために、次のように行を記載します。

     #+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO

指定したツリーに適用するだけのフォーマットを指定するために、`:COLUMNS:'プロ
パティをそのツリーの一番上のノードに追加します。例えば、

     ** カラムビューの最初のノード
        :PROPERTIES:
        :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
        :END:

もし`:COLUMNS:'プロパティがエントリに現れると、そのエントリ自身とそれ以下の
サブツリー全体の列を定義します。列定義は文章の階層構造の一部なので、全てのサ
ブレベルに十分一般的なレベル1の列を定義でき、また、ツリーのより深い部分を編
集するとき、より下位の指定された列を定義できます。


File: org-ja,  Node: カラム・アトリビュート,  Prev: カラム定義の有効範囲,  Up: カラムの定義

7.5.1.2 カラム・アトリビュート
.........................................

列定義は、列の属性の集りです。一般的な定義は以下のようになります。

      %[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]

パーセントとプロパティ名を除いて、全ての項目はオプションです。個々のパーツは
次の意味を持ちます。

     WIDTH           列の幅を文字数で指定する整数。
                     省略すると、幅は自動的に決定されます。
     PROPERTY        この列で編集できるプロパティ。
                     メタデータを示す特別なプロパティがここで許容されます。
                     (*note スペシャルプロパティ::)
     TITLE     列の見出しテキスト。省略するとプロパティ名が使われます。
     {SUMMARY-TYPE}  サマリタイプ。
                             指定すると親ノードの列の値は子から計算されます。
                     サポートされるサマリのタイプは以下です。
                     {+}       この列にある数の和。
                     {+;%.1f}  `+'と似ているが、フォーマットが`%.1f'となる。
                     {$}       通貨。`+;%.2f'の略。
                     {:}       時刻の合計。HH:MM。数値は時間。
                     {X}       チェックボックスの状態。
                                 子が全て`[X]'ならば、`[X]'です。
                     {X/}      チェックボックスの状態。`[n/m]'。
                     {X%}      チェックボックスの状態。`[n%]'。
                     {min}     列の最も小さい数値。
                     {max}     最も大きい数値。
                     {mean}    数の算術平均。
                     {:min}    列に最も小さい時間数値。
                     {:max}    最も大きい時間数値。
                     {:mean}   時刻の算術平均。
                     {@min}    最小時刻(日/時間/分/秒)。
                     {@max}    最大時刻(日/時間/分/秒)。
                     {@mean}   時刻の算術平均(日/時間/分/秒)。
                     {est+}    低-高見積りを追加。

含めるあらゆるプロパティに1つのサマリタイプしかを持てないという事に気をつけ
て下さい。同じプロパティを参照する後にくる列は全て同じサマリの情報を表示しま
す。

`est+'サマリタイプはもう少し説明が必要です。それは低-高の幅で表現される見積
りを組み合わせるために使われます。例えば、特定のタスクが5日必要であると見積
る代わりに、どのくらいの仕事が必要とされるか公正に確実に見積もるならば5日か
ら6日と、それをなすのに必要な時間が本当に分からないならば、1-10日と見積るで
しょう。両者の幅の平均は5.5日ですが、前者はより予測可能な発言を示しています
。

そのような見積りを組み合わせるとき、単純に低と高を追加すると非現実的な幅の結
果を作ります。代わりに、`est+'は合計から最終的な見積りを生成する事で統計的意
味やサブタスクの分散を追加します。例えば、10個のタスクがあるとき、各々が0.5
から2日の仕事であると見積られました。全てが非常によく進む、もしくは悪く進む
と期待する事による計算で、ストレートな追加は5日から20日の見積りであると生成
します。対照的に、`est+'は全ての仕事より現実的に10日から15日であると見積りま
す。

   以下は許可値にそって列定義を計算する例です。

     :COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \(1)
                        %10Time_Estimate{:} %CLOCKSUM
     :Owner_ALL:    Tammy Mark Karl Lisa Don
     :Status_ALL:   "In progress" "Not started yet" "Finished" ""
     :Approved_ALL: "[ ]" "[X]"

最初の列、`%25ITEM'はその項目の25文字を意味します。すなわち見出しのです。
おそらく常に`ITEM'指示子を持つ列定義をはじめるべきでしょう。その他の指示子は
許容値の名前のリストを持つ列`Owner'、4つの異なる利用可能な値を持つ`Status'、
チェックボックスフィールドを持つ`Approved'を生成します。`%'文字の後に幅が与
えられていないとき、列は全ての値を完全に表示するために必要な幅と同じぐらい正
確に広くなります。`Approved'列は修正れたタイトル(クエスチョンマークのある
`Approved?')を持っています。サマリは、HH:MMのように表現する持続時間を追加す
ることで`Time_Estimete'を、全ての子がチェックされているなら`[X]'を提供するこ
とで`Approved'を作ります。`CLOCKSUM'は特別で、サブツリーにあるCLOCKインター
バルの合計をリストします。

   ---------- Footnotes ----------

   (1) COLUMNS定義
は1行でなければならないことに注意して下さい。書式の制約のためここでラップさ
れます。


File: org-ja,  Node: カラムビューの利用,  Next: カラム表示の保存,  Prev: カラムの定義,  Up: カラムビュー

7.5.2 カラムビューの利用
---------------------------------

カラムビューのオン・オフ
....................................

`C-c C-x C-c     (`org-columns')'
     カラムビューを有効とします。カーソルがそのファイルの最初の見出しより前
     にあるならば、カラムビューは`#+COLUMNS'定義を使う事によりファイル全体
     に対して有効となります。カーソルがアウトラインの内側のどこかにあるなら
     ば、このコマンドはフォーマットを定義する`:COLUMNS:'プロパティをポイン
     トから上部の階層に向かって検索します。1つ見つかったとき、カラムビュー
     テーブルは`:COLUMNS:'プロパティを含むエントリではじまるツリー用に設立
     されます。そのようなプロパティが見付からないときは、フォーマットは
     `#+COLUMNS'行もしくは、変数`org-columns-default-format'から取得され、
     カラムビューは現在のエントリとそのサブツリーのために設置されます。

`r     (`org-columns-redo')'
     バッファにある最近作られた変更を反映するためにカラ
     ムビューを再生成します。

`g     (`org-columns-redo')'
     `r'と同じです。

`q     (`org-columns-quit')'
     カラムビューを抜けます。

値を編集する
..................

`<left> <right> <up> <down>'
     フィールドからフィールドへカラムビューを通じて移動します。

`S-<left>/<right>'
     フィールドの次と前の許可値を切り替えます。このために、プロパティの指定
     された許可値を持つ必要があります。

`1..9,0'
     直接にN番目の許可値を選択します。`0'は10番目の値を選択します。

`n     (`org-columns-next-allowed-value')'
`p     (`org-columns-previous-allowed-value')'
     `S-<left>/<right>'と同じです。

`e     (`org-columns-edit-value')'
     ポイント下のプロパティを編集します。特別なプロパティでは通常そのプロパティを変更するために使うのと同じインタフェースを呼び出します。例えば、TAGSプロパティを編集するとき、タグ補完や高速選択インタフェースがポップアップします。

`C-c C-c     (`org-columns-set-tags-or-toggle')'
     チェックボックスがあるならば、それを切り替えます。

`v     (`org-columns-show-value')'
     このプロパティの完全な値を表示します。列の幅がその値よりも小さいときに便利です。

`a     (`org-columns-edit-allowed')'
     このプロパティの許可値のリストを編集します。リストが階層で見つかるならば、修正された値はそこに保存されます。リストが見つからないならば、新しい値は現在のカラムビューの一部である最初のエントリに保存されます。

テーブル構造を編集する
.................................

`<     (`org-columns-narrow')'
`>     (`org-columns-widen')'
     1文字分列を狭く・広くする

`S-M-<right>     (`org-columns-new')'
     現在の列の左に新しい列を挿入する。

`S-M-<left>     (`org-columns-delete')'
     現在の列を削除する。


File: org-ja,  Node: カラム表示の保存,  Prev: カラムビューの利用,  Up: カラムビュー

7.5.3 カラム表示の保存
------------------------------

カラムビューはバッファへのオーバレイのみなので、直接にエクスポートや印字がで
きません。カラムビューをキャプチャしたいならば、`columnview'ダイナミックビュ
ー(*note
ダイナミックブロック::)を使って下さい。このブロックのフレームは以下のよう
に見えます。

     * The column view
     #+BEGIN: columnview :hlines 1 :id "label"

     #+END:

ダイナミックブロックを更新するには以下のコマンドを使用します。

`:id'
     これは最も重要なパラメーターです。カラムビューはある(サブ)ツリーによく
     ローカライズされる機能であり、キャプチャブロックはファイル内の異なる位
     置にあるかもしれません。キャプチャするビューをもつツリーを識別するため
     に、4つの値を使えます。
          local     キャプチャブロックに位置するツリーを使います。
          global    そのファイル内の全ての見出しを含む、
                    グローバルビューを作ります。
          "file:PATH-TO-FILE"
                    このファイルの一番上のカラムビューを実行します。
          "ID"      値labelである`:ID:'プロパティを
                    持つツリーにあるカラムビューを呼び出します。現在の
                    エントリ用にグローバルにユニーグなIDを作り、
                    kill-ringにそれをコピーするために
                    `M-x org-id-copy'を使えます。

`:hlines'
     `t'のとき、全ての行の後に横線を挿入します。数値Nのとき、レベル `<=
     N'を持つ各見出しの前に縦線を挿入します。

`:vlines'
     `t'に設定するとき、列グループに縦線を強制します。

`:maxlevel'
     数値を設定すると、そのレベル以下のエントリをキャプチャしません。

`:skip-empty-rows'
     `t'に設定すると、カラムビューの空でない指定子が`ITEM'のみである行をス
     キップします。


次のコマンドはダイナミックブロックを挿入、更新します。

`C-c C-x i     (`org-insert-columns-dblock')'
     カラムビューをキャプチャするダイ
     ナミックブロックを挿入します。そのビューのスコープやIDの入力を促されま
     す。

`C-c C-c  or  C-c C-x C-u     (`org-dblock-update')'
     ポイント下のダイナミックブ
     ロックを更新します。カーソルはダイナミックブロクの`#+BEGIN'行にある必
     要があります。

`C-u C-c C-x C-u     (`org-update-all-dblocks')'
     全てのダイナミッ クブロックを更新します(*note
     ダイナミックブロック::)。複数のクロックテーブル
     ブロックや列キャプチャブロック、その他のダイナミックブロックがバッファ
     にあるとき便利です。

カラムビューテーブルに計算式を追加し、テーブルの前にプロットする命令を追加で
きます。これらはブロックの更新があっても生き残ります。テーブルの後に
`#+TBLFM:'があるならば、テーブルは実際に更新の後に自動的に実際に再計算されま
す。

   テーブルの中でプロパティ値を処理したりキャプチャする別の方法はEric
Schulteの`org-collector.el'によりできます。それは寄付されたパッケージ
(1)です。あるスコープにあ
るエントリからプロパティを集めるための一般的なAPIやテーブルやダイナミックブ
ロックの中に挿入する前にそれらの値を処理する任意のLisp式を提供します。

   ---------- Footnotes ----------

   (1)
寄付されたパッケージはEmacsの一部ではありませんがOrgのメインの配布物と共に
配布されます(`http://orgmode.org'を訪ずれて下さい)。


File: org-ja,  Node: プロパティAPI,  Prev: カラムビュー,  Up: プロパティとカラム

7.6 プロパティAPI
======================

プロパティにアクセス、変更するための完全なAPIがあります。このAPIはプロパティ
と共に動作するために、また、それらを元とした機能を実装するためにEmacs
Lispプログラムから使われます。詳細な情報は*note
プロパティAPIを使う::を参照して下 さい。


File: org-ja,  Node: 日付や時間,  Next: キャプチャ／再配置／アーカイブ,  Prev: プロパティとカラム,  Up: Top

8 日付と時刻
*****************

プロジェクトのプランニングを補助するため、TODOアイテムは日付または時刻でラベ
リングすることができます。このような形でフォーマットされた日付および時刻の情
報を含む文字列はOrg-modeでは_タイムスタンプ_と呼ばれています。一般的な用法で
は、タイムスタンプは何かを作成したときや最後に変更したときの記録を示しますの
で、若干紛らわしいかもしれませんが、Org-modeではタイムスタンプという用語をよ
り広い意味で用います。

* Menu:

* タイムスタンプ::    ツリーに時間の割り当て
* タイムスタンプの作成::  タイムスタンプを挿入するコマンド
* デッドラインとスケジュール::  作業計画をたてる
* 作業に費やした時間の計測::  タスクに費やす時間を追跡する
* 工数の見積もり::    事前に作業活動を計画する
* 相対時間タイマー::  実行中のタイマーに関する注意
* カウントダウンタイマー::  タスクのカウントダウンタイマーを起動する


File: org-ja,  Node: タイムスタンプ,  Next: タイムスタンプの作成,  Prev: 日付や時間,  Up: 日付や時間

8.1 タイムスタンプ、デッドラインおよびスケジューリング
===============================================================================

タイムスタンプは、例えば`<2003-09-16 Tue>'、`<2003-09-16 Tue 09:39>'、
`<2003-09-16 Tue
12:00-12:30>'といった独自形式での日付（場合によっては時刻お
よび時間間隔を含む）の指定方法です(1)。タイムスタンプはOrgツリー
構造の見出し、本文のいずれにも挿入できます。タイムスタンプを指定することによ
り、指定された日付のアジェンダ(*note
毎週／毎日のアジェンダ::)にそのエントリーが表
示されます。その際には以下の区別が行われます。

`プレーンなタイムスタンプ、イベント、アポイント'
     項目に対して単一の日付または時刻を割り当てるシンプルなタイムスタンプで
     す。紙の予定表に予定あるいはイベントを記入するのとほぼ同じ感覚です。タ
     イムラインおよびアジェンダを表示すると、プレーンなタイムスタンプが指定
     されたエントリーの見出しはまさにその指定された日付に表示されます。

          * ピーターと映画を見に行く<2006-11-01 Wed 19:15>
          * 気候変動についてのディスカッション<2006-11-02 Thu 20:00-22:00>

`リピート間隔を指定したタイムスタンプ'
     タイムスタンプには_リピート間隔_を含めることができます。すなわち単一の
     日時だけでなく、N日(d)、N週間(w)、Nヶ月(m)あるいはN年(y)といった一定の
     間隔で繰り返すようなケースに対応しています。例えば、毎週水曜日のアジェ
     ンダに表示する場合は以下のようになります。

          * 学校までサムを迎えに行く<2007-05-16 Wed 12:30 +1w>

`ダイアリー形式のS式項目'
     より複雑な日付の指定方法として、Org-modeではEmacsのcalendarまたはdiary
     パッケージで実装されているS式のダイアリー項目を使用することができます
     。例えば以下のような形式です。

          * 毎月第2木曜日のオタクの集まり
            <%%(diary-float t 4 2)>

`日付または時刻の間隔'
     2つのタイムスタンプを`--'でつなげることにより、時間間隔を表現できます
     。時間間隔の指定されたヘッドラインは、間隔の始めと終わりの日、およびそ
     の間の現在表示されている日付の項目に表示されます。以下のような形です。

          ** アムステルダムでのミーティング
             <2004-08-23 Mon>--<2004-08-26 Thu>

`アクティブでないタイムスタンプ'
     プレーンなタイムスタンプと同様ですが、<>ではなく[]で囲むことによりアク
     ティブでないタイムスタンプとなります。このようなタイムスタンプが指定さ
     れたエントリーは、アジェンダに表示_されません_。

          * ジリアンが5度目の遅刻　[2006-11-01 Wed]


   ---------- Footnotes ----------

   (1) この表記は標準的なISO8601の日付、時刻フォ
ーマットをもとに考案されています。代替フォーマットの使用については、
*note カスタムタイムフォーマット::を参照してください。


File: org-ja,  Node: タイムスタンプの作成,  Next: デッドラインとスケジュール,  Prev: タイムスタンプ,  Up: 日付や時間

8.2 タイムスタンプの作成
==================================

Org-modeがタイムスタンプを認識するためには、特定のフォーマットを用いる必要が
あります。以下のコマンドのいずれを用いても正しいフォーマットでタイムスタンプ
を生成することができます。

`C-c .     (`org-time-stamp')'
     日付を入力して、それに対応するタイムスタンプを挿
     入します。既にバッファ内に存在するタイムスタンプにカーソルが置かれてい
     る場合は、このコマンドは新たなタイムスタンプを挿入する代わりに、既にあ
     るタイムスタンプを変更します。このコマンドを2回連続で使用すると、時間
     間隔を指定することができます。

`C-c !     (`org-time-stamp-inactive')'
     コマンド `C-c
     .'と同様ですが、アクティブでない（アジェンダのエントリーに反映さ
     れない）タイムスタンプを生成します。

`C-u C-c .'
`C-u C-c !'
     `C-c .'および`C-c
     !'と同様ですが、日付と時刻を含む代替フォーマットを使
     用します。標準では、時刻は5分間隔で丸められます。
     `org-time-stamp-rounding-minutes'のオプションを参照して下さい。

`C-c <     (`org-date-from-calendar')'
     カレンダーのカーソルに対応したタイムスタ ンプを挿入します。

`C-c >     (`org-goto-calendar')'
     現在時刻のEmacsカレンダーに
     アクセスします。現在の行に既にタイムスタンプが存在する場合は、それに対
     応する日付にアクセスします。

`C-c C-o     (`org-open-at-point')'
     タイムスタンプ
     および時間間隔で指定された日付でアジェンダにアクセスします (*note
     毎週／毎日のアジェンダ::)。

`S-<left>     (`org-timestamp-down-day')'
`S-<right>     (`org-timestamp-up-day')'
     カーソ
     ル一の日付を1日変更します。このキーバインドはシフト選択およびそれに関
     連するモードと衝突します(*note 衝突::)。

`S-<up>     (`org-timestamp-up')'
`S-<down>     (`org-timestamp-down-down')'
     カーソルのあ
     るタイムスタンプの項目を変更します。カーソルが年、月、日、時間あるいは
     分の上に置かれている場合に使用できます。例えば、タイムスタンプが
     `15:30-16:30'のように時間間隔を含む場合、左の時刻を変更すると自動的に
     右の時刻も変更され、間隔は一定の長さに保たれます。間隔の長さを変更する
     には、右の時刻を変更して下さい。ただし、カーソルがタイムスタンプではな
     く見出し上にある時には、同じキー操作により項目の優先度が変更されますの
     で気をつけて下さい(*note
     プロパティ::)。このキーバインドはシフト選択および関
     連するモードとも衝突します(*note 衝突::)。

`C-c C-y     (`org-evaluate-time-range')'
     開始日時と終了日時の差を計算することにより、時間間隔を計算します。前置
     引数を指定することにより、計算結果をタイムスタンプの後に挿入できます（
     テーブルの中では隣の列に挿入されます）。

* Menu:

* 日付／時間プロンプト::  日付と時刻入力のサポート
* カスタムタイムフォーマット::  日付を異なる見た目にする


File: org-ja,  Node: 日付／時間プロンプト,  Next: カスタムタイムフォーマット,  Prev: タイムスタンプの作成,  Up: タイムスタンプの作成

8.2.1 日付／時間プロンプト
------------------------------------

Org-modeが日付または時刻をプロンプトに表示するとき、標準では標準フォーマット
による形式が表示されるため、そのフォーマットで入力することが必須だと勘違いし
そうになります。ところが、実際には日付または時刻の情報を含む任意の文字列を入
力することができ、Org-modeはかなり利口に入力された時間情報を解釈します。例え
ば、`C-y'により電子メールの文面からコピーした文字列（複数行でも可）を挿入す
ることができます。Org-modeは文面の中の時間情報を見つけ出し、そこで指定されて
いない情報は_デフォルトの日付時刻_を用います。デフォルトは通常は現在の日付お
よび時刻ですが、既にあるタイムスタンプを変更する場合や、時間間隔の2つ目の項
目を入力する場合には、バッファ内のタイムスタンプから情報が取得されます。情報
を解釈する際に、Org-modeは多くの場合では入力したい時間が未来の時間であると推
測します。例えば年月の情報を省略して、今日より前の時刻を指定しようとすると、
Org-modeは未来の時刻を意図しているものと推測します (1)。
日付が自動的に未来にシフトされた場合、プロンプトには`(=>F)'が表示されます。

例えば、今日が2006年6月13日であるとしたとき、以下の左ような入力は右のように
解釈されます。Org-modeにより推定された部分を太字で示します。

     3-2-5         => 2003-02-05
     2/5/3         => 2003-02-05
     14            => 2006-06-14
     12            => 2006-07-12
     2/5           => 2007-02-05
     Fri           => 直近の金曜日(基準日かそれより後)
     sep 15        => 2006-09-15
     feb 15        => 2007-02-15
     sep 12 9      => 2009-09-12
     12:45         => 2006-06-13 12:45
     22 sept 0:34  => 2006-09-22 0:34
     w4            => 現在の年（2006年）のISO週番号
     2012 w4 fri   => 2012年のISO4週目の火曜日の日付
     2012-w04-5    => 上と同様

さらに、相対的な日付を入力するための方法として、入力の_最初に_プラスまたはマ
イナス記号、数値および文字([dwmy])により日、週、月あるいは年の変化を指定する
方法があります。単一のプラス/マイナスを入力すると、常に今日に対する相対的な
日付が指定されます。2つのプラスまたはマイナスが入力されると、標準の日付に対
する相対値となります。一文字の代わりに時間に関する省略文字列を指定すると、N
番目の該当する日が指定されます。以下に例を示します。

     +0            => 今日
     .             => 今日
     +4d           => 今日から4日後
     +4            => 上と同様
     +2w           => 今日から2週間後
     ++5           => 標準日時から5日後
     +2tue         => 今日から数えて2回目の火曜日

この機能では、英語の月および曜日の省略記法に対応しています。省略しない記法や
他の言語の記法を使用したい場合には、変数`parse-time-months'および
`parse-time-weekdays'を変更して下さい。

時間間隔は、開始時刻と終了時刻を入力するか、開始時刻とその継続時間(HH:MMの形
式)を入力することにより指定できます。前者の場合は分離記号として`-'あるいは
`-{}-'を使用し、後者の場合は分離記号として'+'を使用して下さい。例えば以下
の通りです。

     11am-1:15pm    => 11:00-13:15
     11am--1:15pm   => 上と同様
     11am+2:15      => 上と同様

ミニバッファのプロンプトと並行して、カレンダーがポップアップします(2)。カレンダー内の日付をクリックするか、<RET>を入力することにより日付のプ
ロンプトを抜けると、カレンダーで選択した日付とプロンプトで入力された情報が組
み合わされます。カレンダーはミニバッファから自由に操作することがきます。

     <RET>           カレンダーのカーソル地点の日付を選択する。
     mouse-1        クリックにより日付を選択する。
     S-<right>/<left>     1日分進める/戻る
     S-<down>/<up>     1週間分進める/戻る
     M-S-<right>/<left>   1ヶ月分進める/戻る
     > / <          カレンダーを1ヶ月前/後ろにスクロールする
     M-v / C-v      カレンダーを3ヶ月前/後ろにスクロールする

文章の説明では、日付時刻プロンプトの動作は複雑に思えるかもしれませんが、徐々
に慣れてくると、これ以外の方法で日付および時刻を入力することのほうが面倒に感
じることでしょう。動作の仕組みに対する理解を助けるため、入力された情報に対す
るその時点での解釈がミニバッファに表示されます。(3)。

   ---------- Footnotes ----------

   (1)
`org-read-date-prefer-future'の変数を参照。この変数`time'に該当する変数を変
更することにより、現在時刻より前の時刻を明日にシフトすることも可能です。

   (2) カレンダ
ーの表示が不要の場合、変数`org-popup-calendar-for-date-prompt'を変更して下さ
い。

   (3) もしミニバッファの表示が目
障りな場合は、`org-read-date-display-live'で表示しないよう設定することができ
ます。


File: org-ja,  Node: カスタムタイムフォーマット,  Prev: 日付／時間プロンプト,  Up: タイムスタンプの作成

8.2.2 カスタムタイムフォーマット
---------------------------------------------

日付や時間を表現するため、Org-modeはISO8601で定義されているような標準的なISO
の記法を使用しています。もしこの記法に不慣れで、別の日付や時間の記法のほうが
好みである場合は、変数`org-display-custom-times'および
`org-time-stamp-custom-formats'をカスタマイズすることができます。

`C-c C-x C-t     (`org-toggle-time-stamp-overlays')'
     カスタムフォーマットの日付 および時間の表示をトグルします。

Org-modeは文字列のスキャンニングのためにデフォルトのフォーマットを必要とする
ため、カスタムフォーマットの日付および時刻は標準フォーマットを_置き換えませ
ん_。その代わりに、テキストのプロパティを用いて標準フォーマットに_上書きされ
ます_。これが原因で以下のような動作が生じます。
   *
     タイムスタンプの上にカーソルを置くことはできなくなり、その前後にしかカ
     ーソルが移動しなくなります。

   *
     `S-<up>/<down>'のキー操作は、タイムスタンプの各要素を変更するために使
     用できなくなります。カーソルがスタンプの前にある場合、`S-<up>/<down>'
     によりスタンプを1日だけ変更します。これは`S-<left>/<right>'と同様です
     。スタンプの後ろにある場合、時間が1ヶ月ずつ変更されます。

   *
     タイムスタンプが時間間隔や繰り返し時刻を含む場合、これらは上書きされず
     に元の形式のままバッファに表示されます。

   *
     タイムスタンプを一文字ずつ消去した場合、(隠れた)ISO標準フォーマット文
     字列の_全て_を削除した場合のみカスタムフォーマットのタイムスタンプが消
     去されます。

   *
     もし、カスタムフォーマットのタイムスタンプが標準フォーマットより長く、
     テーブル内で用いられている場合、テーブルの整形が崩れます。標準フォーマ
     ットより短い場合には、期待通りに動作します。


File: org-ja,  Node: デッドラインとスケジュール,  Next: 作業に費やした時間の計測,  Prev: タイムスタンプの作成,  Up: 日付や時間

8.3 デッドラインとスケジュール
===========================================

プランニングを補助するため、タイムスタンプの前に所定のキーワードを置くことが
できます。

`DEADLINE'
     意味:タスク(多くの場合はTODOアイテムですが、それに限りません)はタイム
     スタンプで示された日のうちに終了するものと見なされます。

     デッドラインが付けられた場合は、そのタスクはアジェンダの中に記載されま
     す。それに加えて、_今日_のアジェンダはデッドラインが近づいたり、それを
     超過したりした場合に警告を発します。警告は期限の
     `org-deadline-warning-days'だけ前から表示され、エントリがDONEとされる
     までは消えません。以下に例を示します。

          *** TODO ガイド誌の地球についての記事を書く。
              担当編集者は[[bbdb:Ford Prefect]]
              DEADLINE: <2004-02-29 Sun>

     以下の構文を用いることにより、個別のデッドラインについて異なる警告のリ
     ードタイムを指定することができます。以下は5日間の警告期間を指定する場
     合の例です`DEADLINE: <2004-02-29 Sun -5d>'。

`SCHEDULED'
     意味:指定された日に、そのタスクに取りかかる予定であることを示します。

     見出しは指定された日付の下に記載されます(1)。それに加えて、ス
     ケジューリングされた日付を超過した場合には_今日_のリストにエントリが
     DONEとなるまでリマインダが表示され続けます。すなわち、タスクは完了する
     まで自動的に後回しにされます。

          *** TODO トリリアンに大晦日のデートについて電話する。
              SCHEDULED: <2004-12-25 Sat>

     重要:Org-modeで項目をスケジューリングすることは、ミーティングをスケジュ
     ーリングすることと同様であるという理解は正しくありません。ミーティン
     グをセットするのは単なるアポイントですが、このような場合はエントリーに
     はプレーンなタイムスタンプを使用し、日付が来れば項目が表示されるように
     設定するべきです。これはユーザーがしばしば誤解する点です。Org-modeでは
     スケジューリングは何らかのアクションアイテムに取りかかる際に、日付を設
     定することを意味します。

スケジューリングやデッドラインの項目には、繰り返しを含むタイムスタンプを使用
することが可能です。Org-modeは、タイムスタンプが繰り返し日付の直近の日付を表
すものと推測して事前あるいは事後の警告を発します。しかし、スケジューリングや
デッドラインにおいては`<%%(diary-float t
42)>'のような日記のS式項目は限定的
にしか使用できません。Org-modeはこれらS式項目の内部構造について十分理解して
いないため、事前および事後の警告を発することはできません。ただし、S式項目と
一致したそれぞれの日付に項目を表示することは行われます。

* Menu:

* デッドライン／スケジュールを挿入::  計画項目
* 繰り返されるタスク::  何度も現れる項目

   ---------- Footnotes ----------

   (1) 項目がDONEとマークされた場合
でも、指定日の項目に表示され続けます。この設定が好みでなければ、変数
`org-agenda-skip-scheduled-if-done'を指定して下さい


File: org-ja,  Node: デッドライン／スケジュールを挿入,  Next: 繰り返されるタスク,  Prev: デッドラインとスケジュール,  Up: デッドラインとスケジュール

8.3.1 デッドラインおよびスケジュールの挿入
------------------------------------------------------------

以下のコマンドにより、項目にデッドラインまたはスケジュールを瞬時に挿入
(1)することができます。

`C-c C-d     (`org-deadline')'
     タイムスタンプと`DEADLINE'キーワードを挿入します
     。挿入は見出しの直下の行に対して行われます。前置引数を伴って呼ばれた場
     合は、エントリーから既に存在するデッドラインが消去されます。変数
     `org-log-redeadline'(2)に対応して、既に存在する
     デッドラインを変更する際にノートをとることができます。

`C-c C-s     (`org-schedule')'
     タイムスタンプと`SCHEDULED'キーワードを挿入しま
     す。挿入は見出しの直下の行に対して行われます。CLOSEDのタイムスタンプは
     全て消去されます。前置引数を伴って呼ばれた場合は、エントリーからスケジ
     ューリングの日付が消去されます。変数`org-log-reschedule'(3)に対応して、既に存在するスケジューリングを変更する際
     にノートをとることができます。

`C-c C-x C-k     (`org-mark-entry-for-agenda-action')'
     現在の項目をアジェンダのアクションのためにマークします。このように項目
     をマークした後で、アジェンダまたはカレンダーを開いて適切な日を探すこと
     ができます。選択した日付の上にカーソルを置いて`k s'あるいは`k
     d'を入力
     することにより、マークされた項目にスケジュールを設定できます。

`C-c / d     (`org-check-deadlines')'
     全てのデッドラインのうち、既に過ぎているものと
     `org-deadline-warning-days'以内に期限となるものを抽出したツリーを作成
     します。前置引数`C-u'により、ファイル内の全てのデッドラインを表示しま
     す。前置引数で数値を指定すると、指定した分だけ先のデッドラインを表示し
     ます。例えば、`C-1 C-c /
     d'とすると明日期限となる全てのデッドラインを 表示します。

`C-c / b     (`org-check-before-date')'
     指定された日より前のデッド ラインを抽出したツリーを作成します。

`C-c / a     (`org-check-after-date')'
     指定 された日より後のデッドラインを抽出したツリーを作成します。

   ---------- Footnotes ----------

   (1)
`SCHEDULED'あるいは`DEADLINE'の付いた日付が見出しのすぐ下の行に挿入されます
。見出しとこの行の間には文字を記入してはいけません。

   (2) 対応する`#+STARTUP'キーワード`logredeadline'、
`lognoteredeadline'、および`nologredeadline'

   (3) 対応する
`#+STARTUP'キーワード`logredeadline'、`lognoteredeadline'、および
`nologredeadline'


File: org-ja,  Node: 繰り返されるタスク,  Prev: デッドライン／スケジュールを挿入,  Up: デッドラインとスケジュール

8.3.2 繰り返されるタスク
---------------------------------

タスクの中には、何度も繰り返し行うものがあります。Org-modeでは、そのようなタ
スクの管理を助けるため、通常あるいはDEADLINE、SCHEDULEDのタイムスタンプに対
してリピーターと呼ばれる機能を提供しています。以下の例を参照して下さい。
     ** TODO 家賃の支払い
        DEADLINE: <2005-10-01 Sat +1m>
この中で`+1m'がリピーターと呼ばれるもので、そのタスクが<2005-10-01>のデッド
ラインを持つと同時に、その日から一週間ごとに繰り返すことを意味します。デッド
ラインエントリーに対してリピーターと警告期間の両方を指定する必要がある場合に
は、`DEADLINE: <2005-10-01 Sat +1m
-3d>'のようにリピーターを先に書き、警告期 間を後に書きます。

デッドラインおよびスケジューリングされた項目は期限を過ぎた場合にはアジェンダ
上にエントリーが作成されるため、項目が終了した場合にはそのようなエントリは実
施済みとマークできることが必要です。DEADLINEあるいはSCHEDULEDのTODOエントリ
ーをDONEとマークした時には、アジェンダ上でのエントリーは作成されなくなります
。一方で、問題となるのは繰り返し項目の_次の_日時も同時にアクティブでなくなっ
てしまうことです。Org-modeでは、このような状況に対して以下のように対処します
。繰り返しのエントリーをDONEに変更しようとした場合(`C-c
C-t'などにより)、繰
り返しタイムスタンプの基準時刻が一つ分シフトされ、すぐにエントリーの状態が
TODOに戻されます(1)。上の例では、DONEの状態にする
ことにより日付が以下のように変更されます。

     ** TODO 家賃の支払い
        DEADLINE: <2005-11-01 Tue +1m>

   デッドラインの下にタイムスタンプが追加され(2)、これにより前の時刻の
デッドラインについて実際に行動したことが記録されます。

日付がシフトされた結果として、このエントリーはアジェンダ上の過去の日付からは
見えなくなりますが、将来の日付はアジェンダ上で確認することができます。

`+1m'の繰り返し指定により、日付は常に1ヶ月きっちりシフトされます。そのため、
例えば家賃を3ヶ月支払っていない場合には、一度このエントリーをDONEにしたとし
ても、相変わらず期限を過ぎたデッドラインと判断されます。タスクの性質によって
、この方法が常に適切な処理方法とは限りません。例えば、父親と連絡をとるのを3
週間忘れてしまった場合、それを埋め合わせるために一日に3回電話をすることはな
いでしょう。さらに、バッテリーの充電のように、最後に行ってから一定時間経過後
に常に繰り返す必要がある場合もあります。このようなタスクについてはOrg-modeは
専用の反復演算子`++'および`.+'を用意しています。例えば以下の通りです。

     ** TODO 父に電話
        DEADLINE: <2008-02-10 Sun ++1w>
        この項目をDONEとすると、日付が一週間シフトされ、同時にタスクが
        行われるまでは将来の全ての日曜日に対して項目がシフトされます。
        土曜日に電話をしたとしても、次の日曜日にシフトされます。
     ** TODO 火災報知器の電池をチェックする
        DEADLINE: <2005-11-01 Tue .+1m>
        この項目をDONEとすると、確認した日のちょうど1ヶ月後にシフトされます。

同じタスクに対して、スケジューリングとデッドラインの情報を両方付けることがで
きます。この場合には、両方の繰り返し間隔は同じになりますので、注意して下さい
。

繰り返し演算子を使わない代替的な方法の一つとして、タスクサブツリーのコピーを
いくつか作成し、それぞれのコピーに対してシフトされた時刻を指定する方法があり
ます。そのために`C-c C-x c'コマンドがあります。この機能は *note
見出し位置と階層の変更::で解説されています。

   ---------- Footnotes ----------

   (1) 実際には、変更される状態は`REPEAT_TO_STATE'プロパティ或いは
変数`org-todo-repeat-to-state'によって決められます。これらが指定されていない
場合は、デフォルトとしてTODO状態に戻ります。

   (2) この部分の動作は、オプション
`org-log-repeat'、あるいは`#+STARTUP'オプションの`logrepeat'、
`lognoterepeat'、`nologrepeat'により変更することができます。`lognoterepeat'
を指定した場合には、メモを入力するように促されます。


File: org-ja,  Node: 作業に費やした時間の計測,  Next: 工数の見積もり,  Prev: デッドラインとスケジュール,  Up: 日付や時間

8.4 作業に費やした時間の計測
========================================

Org-modeでは、プロジェクトの中で特定のタスクを実行するのにかかった時間を計測
することができます。ある項目について取りかかる時に、計測を開始します。そのタ
スクを中断するときやタスクが終了した時に計測が終了し、対応する時間間隔が記録
されます。同時に、あるプロジェクトの全てのサブツリーでかかった時間の合計が計
算されます。さらに、最近に時間が計測されたタスクが記憶されているため、その時
点で取りかかっている複数のタスク間を素早く移動することができます。

Emacsセッションでの経過時間の履歴を保存するためには、以下のコマンドを使いま
す。
     (setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)
Emacsの再開後に新しいタスクの計測を始めると、不完全な時計(1)が表示され(*note
空き時間の解決::) 、それについて何をするかを入力するように促されます。

* Menu:

* 計測コマンド::       時計の開始と終了
* クロックテーブル::  詳細な報告
* 空き時間の解決::    空いた時間を解決する

   ---------- Footnotes ----------

   (1) Emacsの外でタスク
に取りかかっていたという想定で時計を再開する場合は、 `(setq
org-clock-persist t)'を使用して下さい。


File: org-ja,  Node: 計測コマンド,  Next: クロックテーブル,  Prev: 作業に費やした時間の計測,  Up: 作業に費やした時間の計測

8.4.1 計測コマンド
------------------------

`C-c C-x C-i     (`org-clock-in')'
     現在の項目に対して、時間の計測を開始します（クロックイン）。これにより
     CLOCKキーワードとともにタイムスタンプが挿入されます。最初の計測でない
     場合には、複数のCLOCK行が表示され、`:LOGBOOK:'という引き出しに格納され
     ます(変数`org-clock-into-drawer'についても参照のこと)。前置引数`C-u'と
     共に呼ばれた場合は、最近時間が計測されたタスクのリストからタスクを選択
     します。2個の前置引数`C-u
     C-u'が入力された場合は、現在位置のタスクの計
     測を開始し、そのタスクをデフォルトに指定します。デフォルトのタスクは、
     時間計測の選択をする場合に常にリストの中に表示され、文字`d'が付けられ
     ます。
     時間を計測している間は、現在の計測時間とタスクの名前がモード行に表示さ
     れます。表示される計測時間はこのタスクとその子タスクについての全ての時
     間です。タスクが工数の見積もり(*note
     工数の見積もり::)を含む場合には、モード
     行は見積もりに対する現在の経過時間を表示します(1)。タスクが繰り返しを含む
     場合には、そのタスクの最近のリセットからの経過時間(2)のみが計測されます。表示される時間について変更
     したい場合には、プロパティ`CLOCK_MODELINE_TOTAL'を変更します。この中に
     は現在計測中の時刻のみ表示する`current'、今日計測された全ての時間を表
     示する`today'(変数`org-extend-today-until'についても参照)、全ての時間
     を表示する`all'、デフォルトの設定である`auto'などがあります(3)。
     モード行を`mouse-1'でクリックすることにより、メニューと時間計測のオプシ
     ョンがポップアップします。

`C-c C-x C-o     (`org-clock-out')'
     時間の計測を終了します（クロックアウト）。これにより、時間計測が開始さ
     れたのと同じ場所にもう一つのタイムスタンプが挿入されます。同時に、計測
     された時間間隔が開始時刻と終了時刻の後に`=>
     HH:MM'の形式で挿入されます
     。クロックアウトのタイムスタンプ作成時にノートを追加するには、変数
     `org-log-note-clock-out'を参照して下さい(4)。

`C-c C-x C-e     (`org-clock-modify-effort-estimate')'
     現在時間を計測しているタ
     スクについて、工数見積もりをアップデートします。

`C-c C-c  or  C-c C-y     (`org-evaluate-time-range')'
     タイムスタンプの一つを変更し
     た後で、時間間隔を更新します。これはタイムスタンプを手動で変更した場合
     にのみ必要です。`S-<cursor>'キーにより変更した場合には、自動的に再計算
     されます。

`C-c C-t     (`org-todo')'
     TODOの項目をDONEに変更することにより、その
     項目で時間が計測されている場合には自動的に停止します。

`C-c C-x C-x     (`org-clock-cancel')'
     現在の時間計測をキャンセルします。これは
     間違って時間を計り始めてしまった場合や、結果的に意図したタスク以外を行
     ってしまった場合に便利です。

`C-c C-x C-j     (`org-clock-goto')'
     現在クロックイ
     ン中のタスクの見出しにジャンプします。前置引数`C-u'により、最近時間が
     計測されたタスクから目的のタスクを選択します。

`C-c C-x C-d     (`org-clock-display')'
     現在のバッファの各サブツリーからの時間のサマリーを作成します。これによ
     りそれぞれの見出しの後ろに時間が上書きされ、その見出しの中で下位の見出
     しも含めて記録された時間の合計が表示されます。表示の切り替えにより、ツ
     リーの各項目を確認できますが、バッファを変更した場合や`C-c
     C-c'を入力 した場合は時間の上書きは消えてしまいます(変数
     `org-remove-highlights-with-change')を参照)。

   タイムライン(*note タイムライン::)およびアジェンダ(*note
毎週／毎日のアジェンダ::)の中で
キー`l'を入力することにより、その日のうちに完了したタスクがどれかを表示する
ことができます。

   ---------- Footnotes ----------

   (1) 「その場で」工数の見積
もりを追加するには、その機能を持つ関数を変数
`org-clock-in-prepare-hook'にフックして下さい

   (2) プロパティ `LAST_REPEAT'により記録

   (3) 変数 `org-clock-modeline-total'についても参照

   (4) これに対応するバッファ内の設 定は`#+STARTUP:
lognoteclock-out'です。


File: org-ja,  Node: クロックテーブル,  Next: 空き時間の解決,  Prev: 計測コマンド,  Up: 作業に費やした時間の計測

8.4.2 クロックテーブル
------------------------------

Org-modeは、時間計測の情報をもとにかなり詳細なレポートを作成することができま
す。このようなレポートは_クロックテーブル_と呼ばれており、その名の通り
Org-modeのテーブルまたはその組み合わせにより作成されます。

`C-c C-x C-r     (`org-clock-report')'
     現在のファイルにOrg-modeテーブル形式の計
     測時間レポートを含む動的ブロック(*note
     ダイナミックブロック::)を挿入します。
     前置引数とともに呼ばれた場合は、現在の文書の最初のクロックテーブルに移
     動し、それを更新します。

`C-c C-c  or  C-c C-x C-u     (`org-dblock-update')'
     現在位
     置の動的ブロックを更新します。カーソル位置は動的ブロックの`#+BEGIN'行
     の中に位置している必要があります。

`C-u C-c C-x C-u'
     全ての動的ブロック を更新します(*note
     ダイナミックブロック::)。この機能はバッファ内で複数のクロ
     ックテーブルが存在する場合に有用です。

`S-<left>'
`S-<right>     (`org-clocktable-try-shift')'
     現在の`:block'の時間間隔
     を変更し、テーブルを更新します。このコマンドを使用するには、カーソルが
     `#+BEGIN:
     clocktable'行にある必要があります。例えば`:block'が`today'の
     場合、このコマンドにより`today-1'にシフトされます。

   以下に、`C-c C-x
C-r'コマンドによりバッファに挿入されるクロックテーブルのフ
レームの例を示します。

     #+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
     #+END: clocktable
   `BEGIN'行には、レポートの対象範囲、構造およびフォーマットを定めるオプション
を指定します。これらのデフォルト値は変数`org-clocktable-defaults'により変更
することができます。

まず、時間が計測されたエントリのうちどれが選択されるかを定めるオプションがあ
ります。
     :maxlevel    テーブルに表示される最大の深さレベル。
                  これより深いレベルの時間は上位レベルに積算されて表示される。
     :scope       対象とするスコープ。以下のうちいずれかを指定する。
                  nil        現在のバッファ、或いはナローされた領域
                  file       現在のバッファ全体
                  subtree    クロックテーブルのあるサブツリー内
                  treeN      周囲のレベルNのツリー、例えば`tree3'
                  tree       周囲のレベル1のツリー
                  agenda     アジェンダファイル群の全体
                  ("file"..) 指定されたファイルをスキャンする
                  file-with-archives    現在のファイルとそのアーカイブ
                  agenda-with-archives  アーカイブを含む全てのアジェンダファイル
     :block       対象とする時間範囲、この範囲は絶対時間または現在からの相対時間
                  で表記され、以下のいずれかのフォーマットに従う。
                  2007-12-31    2007年の大晦日
                  2007-12       2007年12月
                  2007-W50      2007年のISO週で50週目
                  2007-Q2       2007年の第二四半期
                  2007          2007年
                  today, yesterday, today-N          相対的な日指定
                  thisweek, lastweek, thisweek-N     相対的な週指定
                  thismonth, lastmonth, thismonth-N  相対的な月指定
                  thisyear, lastyear, thisyear-N     相対的な年指定
                  `S-<left>/<right>'キーにより間隔をシフトすることができる。
     :tstart      対象となる時間の始まりを示す文字列
     :tend        対象となる時間の終わりを示す文字列
     :step        テーブルをまとめる間隔。`week'または`day'を指定。
                  この機能を使うには、`:block'、`:tstart'、`:tend'のいずれかを指定
     する必要がある。
     :stepskip0   時間間隔がゼロの項目を表示しない。
     :fileskip0   時間間隔がゼロのファイルについて、テーブルに表示しない。
     :tags        特定のタグがついたエントリのみ収集の対象とする。

さらに、テーブルのフォーマットを指定するためのオプションがあります。これらの
オプションは関数`org-clocktable-write-default'により解釈されますが、パラメー
ター`:formatter'により解釈のためのユーザー独自の関数を指定することができます
。
     :emphasize   値が`t'の場合、レベル1およびレベル2の項目を強調表示します。
     :lang        項目名のセル(例えば"Task")で用いる言語(1)。
     :link        テーブルの見出しの項目と元のファイルでの位置をリンクする。
     :narrow      Org-modeのテーブルの見出し列の幅の上限を決める整数。
                  `50!'のように指定すると、エクスポート時にも見出しが短縮表示され
     る。
     :indent      各見出しフィールドをそのレベルに合わせてインデントする。
     :tcolumns    時間を表示するために使われる列の数。この値が`:maxlevel'より小さ
     い場合、
                  それより下位のレベルは一つの列に合わせて表示される。
     :level       レベル番号を示す列を含めるかどうか指定する。
     :compact     コンパクトに表示する。
     `:level nil :indent t :narrow 40! :tcolumns 1'
                  の短縮表現で、明示的に`:narrow'で指定されなければ、全ての変数は
     上書きされる。
     :timestamp   エントリのタイムスタンプが存在する場合には、それを表示する。
     SCHEDULED、
                  DEADLINE、TIMESTAMP、TIMESTAMP_IAの順に探索される。
     :formula     追加的な`#+TBLFM'の内容。通常の形式に追加されて評価される。
                  特殊なケースとして、`:formula %'を追加すると経過時間の割合行が追
     加される。
                  ここで形式をしていしない場合は、クロックテーブルの下に存在する形
     式が
                  アップデートされずに評価される。
     :formatter   時刻データをフォーマットし、バッファに表示するための関数。
現在のレベル1のツリーについて、当日分の時間サマリーを得る場合は以下のように
指定します。
     #+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
     #+END: clocktable
   明示的に時間間隔を指定する場合には、以下のように記述します(2)。
     #+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                         :tend "<2006-08-10 Thu 12:00>"
     #+END: clocktable
現在のサブツリーでの経過時間のまとめを%表示するには、以下のように記述します
。
     #+BEGIN: clocktable :scope subtree :link t :formula %
     #+END: clocktable
ここ1週間で計測された時間をコンパクトな幅で表示するには、以下のようにします
。
     #+BEGIN: clocktable :scope agenda :block lastweek :compact t
     #+END: clocktable

   ---------- Footnotes ----------

   (1) 言語に関する項目は、変数
`org-clock-clocktable-language-setup'により設定することができます。

   (2) 全てのパラメータ
ーは単一行で指定する必要があるので注意して下さい。この例ではマニュアルの文字
幅の制約のために改行が入っています。


File: org-ja,  Node: 空き時間の解決,  Prev: クロックテーブル,  Up: 作業に費やした時間の計測

8.4.3 空き時間の解決
---------------------------

ある項目について作業を開始したあとで、例えば電話を取る場合などで一時的にコン
ピュータの前を離れると、その時間について現在の経過時間から差し引いたり、他の
項目に加えたりして「解決」する必要が生じます。

変数`org-clock-idle-time'を適当な整数値(例えば10や15)に設定することにより、
設定時間を超える休止のあとで戻ってきた場合にEmacsはアラートを出し、その休止
時間をどのように処理するか尋ねます(1)。休止か
ら戻った時点で幾つか質問が表示され、実際にどの程度休止時間があったか（その時
点までの計測時間が随時表示されます）を入力すると同時に、休止の扱いについて以
下のような選択が可能です。

`k'
     休止時間として計測された時間の一部または全てをタスクの計測時間として保
     持する場合には、`k'を押します。Org-modeは何分間保持するか尋ねます。
     <RET>キーを押すことにより全ての時間が保持され、タスクの計測時間は変更
     されません。数値を指定すると、指定した分数だけ時間が保持されます。

`K'
     シフトキーと共に`K'を押した場合、入力された分数だけ時間を保持すると同
     時にただちに現在のタスクの計測を中止します。全ての休止時間を保持する場
     合、これは単にタスクの計測を中止したのと同じことになります。

`s'
     休止時間を保持しない場合には、`s'を押すことにより計測時間から全ての休
     止時間が差し引かれ、戻ってきた時点から再開されます。

`S'
     休止時間を保持せず、休止開始時の時刻で時間の計測を止める場合には、シフ
     トキーと共に`S'を押して下さい。シフトキーを使うと、いずれのオプション
     でも時間の計測が中止されるということを覚えておいて下さい。

`C'
     時間計測そのものをキャンセルする場合は、`C'を押して下さい。キャンセル
     しない場合でも、時間が引かれた結果の残り時間が1分未満である場合には、
     中身の無いエントリでログが見づらくなるのを防ぐため、時間計測はやはりキ
     ャンセルされますので注意して下さい。

空き時間について、現在の計測時間から差し引いたあとで別の計測項目に追加したい
場合にはどうすれば良いでしょうか。その場合は、差し引いたあとに単純に次のタス
クの計測を開始して下さい。Org-modeは差し引かれた時間があることを記憶していて
、次の時間計測を始める際にその時間を足し込むかを尋ねます。

次のようなケースでも、時間解決機能が魔法のような働きをします。あなたがタスク
の時間計測をしながらご機嫌に作業をすすめていると、突然飼い猫がネズミを追いか
けて、それを見たハムスターが驚いてUPSの電源装置に衝突してしまったとしましょ
う!あなたは全てのバッファを失うことになりますが、オートセーブ機能のおかげで
Org-modeで行った最近の変更は保持され、途中であった時間計測の時間も保持されて
います。

Emacsを再開してタスクの計測を開始すると、Org-modeは最後のセッションで計測が
終了されていない半端の時間計測があることに気がつきます。そのようなタスクにつ
いては、計測の開始時刻を不明な時刻の始点として、その間の時間をどのように解決
するかについて尋ねます。その際の考え方や挙動は空き時間の処理方法と全く同じで
、単に空き時間ではなくリカバリの際に発生しているだけなのです。

Org-modeのアジェンダが半端時間を絶えずチェックしているファイルのリストは、
`M-x org-resolve-clocks'により確認することができます。

   ---------- Footnotes ----------

   (1) Mac OS Xのコンピュータでは、Emacsの休止時
間だけでなくユーザーが実際に休止した時間を計測します。X11では、Org-modeのgit
ディストリビューションから入手できるユーティリティプログラム`x11idle.c'をイ
ンストールすることにより、同様に全体の休止時間を計測することができます。その
他のシステムでは、休止時間はEmacsが休止していた時間のみを表します。


File: org-ja,  Node: 工数の見積もり,  Next: 相対時間タイマー,  Prev: 作業に費やした時間の計測,  Up: 日付や時間

8.5 工数の見積もり
=========================

詳細な作業計画を立てて仕事を行いたい場合や、仕事の工数の見積もりを作成する必
要がある場合には、エントリに工数見積もりを割り当てたいと思うかもしれません。
また、同時に時間の計測を行う場合には、あとで見積もった時間数と実際にかかった
時間を比較したいと思うかもしれません。それは見積もりの精度を上げる良い方法で
もあります。工数の見積もりは専用のプロパティである`Effort'に保存されます
(1) 。エントリに工数を追加するには、以下のようなコマンドを用います。

`C-c C-x e     (`org-set-effort')'
     現在のエントリについて工数の見積もりを行いま
     す。前置引数に数値を指定することにより、N番目の数値に指定します(下記の
     例を参照)。このコマンドはアジェンダからも`e'キーを押すことによりアクセ
     スできます。

`C-c C-x C-e     (`org-clock-modify-effort-estimate')'
     現在時間が計 測されている項目の工数見積もりを変更します。

   明らかなように、工数見積もりを行う最善の方法はカラムビュー(*note
カラムビュー::)を
用いることです。個別の項目についての工数見積もりから始めて、`COLUMNS'フォー
マットによりこれらの値と実際の計測時間(時間の計測を行いたい場合)を同時に表示
します。例えば、あるバッファについて以下のように指定できます。

     #+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00
     #+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM

さらに良い方法としては、変数`org-global-properties'あるいは
`org-columns-default-format'をカスタマイズすることにより、これらの数値をグロ
ーバルに指定できます。特にこの指定をアジェンダで使用したい場合には、グローバ
ルな指定を行うことが推奨されます。

   個別の項目について見積もりを割り当てるには、カラムモードに移行し、
`S-<right>'および`S-<left>'を使うことにより値を変更します。入力された数値は
すぐに階層構造で足し合わされます。その隣の列には計測された時間が表示されるこ
とになります。

日別あるいは週別のアジェンダでカラムビューに移行すると、工数の列は各日につい
ての工数見積もりを足し合わせて表示され(2)、これを用いてスケジュー
ルの空きを見つけることができます。その日の作業について全体像をつかみたい場合
には、オプション`org-agenda-columns-add-appointments-to-effort-sum'を指定す
ることができます。時間間隔が指定されているアポイントで、その日に発生するもの
についても負荷見積もりに加算して表示されます。

工数見積もりは、アジェンダ内で`/'を押すことによりアジェンダの2次的なフィルタ
リングに用いることができます(*note
アジェンダのコマンド::)。このような見積もりを確
実に行えば、2、3回キーを押すことにより空いている時間間隔に合うように項目を絞
り込むことができます。

   ---------- Footnotes ----------

   (1)
使用されるプロパティは、変数`org-effort-property'で変更することができます

   (2) 単準なリストを階層的に足し合わせる際
には落とし穴があります(*note アジェンダのカラム表示::)。


File: org-ja,  Node: 相対時間タイマー,  Next: カウントダウンタイマー,  Prev: 工数の見積もり,  Up: 日付や時間

8.6 相対時間タイマーを使ったノート作成
=======================================================

例えば会議やビデオ閲覧時にノートをとる際など、開始時からの経過時間がわかると
便利な場合があります。Org-modeはそのような場合に使える相対時間タイマー機能を
持っており、時間を含むノートを簡単に作ることができます。

`C-c C-x .     (`org-timer')'
     バッファに相対時間タイマーを挿入します。最初に使
     う際にはタイマーが開始されます。前置引数と共に呼ばれた場合には、タイマ
     ーがリスタートされます。

`C-c C-x -     (`org-timer-item')'
     現在の相対時刻での記
     述項目を挿入します。前置引数と共に呼ばれた場合は、タイマーの時刻が0に
     リセットされます。

`M-<RET>     (`org-insert-heading')'
     タイマーリストが既に開始
     されている場合は`M-<RET>'で新しいタイマー項目を追加することもできます
     。

`C-c C-x ,'
     タイマーを一時停止します。一時停止されている場合には再開します
     (`org-timer-pause-or-continue')。

`C-u C-c C-x ,'
     タイマーを停止します。これを実行した後には古いタイマーを再開することは
     できず、新しいタイマーの作成のみが可能です。このコマンドによりモード行
     からもタイマーが削除されます。

`C-c C-x 0     (`org-timer-start')'
     バッファに何
     も挿入せずにタイマーをリセットします。デフォルトではタイマーは0にリセ
     ットされますが、前置引数`C-u'と共に呼ばれた場合は、指定された時間から
     タイマーが始められます。ユーザーは開始時間を入力するよう促されます。同
     じ位置に既にタイマー文字列がある場合には、その時間がデフォルトとして指
     定されます。そのため、このコマンドは休憩時間のあとなどでノート取りを再
     開する場合などに用いることができます。2つの前置引数`C-u
     C-u'と共に呼ば
     れた場合は、アクティブなリージョンにある全てのタイマー文字列を一定の時
     間だけ変化させます。これはタイマーを正しい時刻に開始できなかった場合、
     タイマー文字列を一度に修正する場合に使用できます。


File: org-ja,  Node: カウントダウンタイマー,  Prev: 相対時間タイマー,  Up: 日付や時間

8.7 カウントダウンタイマー
=====================================

Org-modeバッファから`org-timer-set-timer'を呼ぶことにより、カウントダウンタ
イマーが利用できます。アジェンダバッファの場合は<;>、その他は<C-c C-x
;>によ り実行できます。

`org-timer-set-timer'により、ユーザーに時間間隔を入力するように促し、モード
行にカウントダウンタイマーを表示します。`org-timer-default-timer'によりデフ
ォルトのカウントダウン値を設定します。前置引数で数値を指定することで、デフォ
ルトの値が上書きされます。


File: org-ja,  Node: キャプチャ／再配置／アーカイブ,  Next: アジェンダビュー,  Prev: 日付や時間,  Up: Top

9 キャプチャ／再配置／アーカイブ
***********************************************

管理システムにおける重要な点の一つとして、新しいアイディアやタスクを素早くキ
ャプチャし、それらを参考資料と連携する能力があることです。Org-modeではキャプ
チャと呼ばれるプロセスを用いて行います。また、タスクに関係するファイル
(attachments)を特別なディレクトリに保存することがも可能です。一度システムへ
取り込むと、タスクとプロジェクトを移動させる必要があります。完了したプロジェ
クトツリーをアーカイブファイルへ移動することで、システムをコンパクトで速く保
つことが可能です。

* Menu:

* キャプチャ::          新しいものをキャプチャする
* 添付::                   タスクにファイルを追加する
* RSSフィード::          RSSフィードから取り込む
* プロトコル::          外部（e.g.
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* ノートの再配置::    別な場所にツリーを移動する
* アーカイブ::          完了したプロジェクトの扱い方


File: org-ja,  Node: キャプチャ,  Next: 添付,  Prev: キャプチャ／再配置／アーカイブ,  Up: キャプチャ／再配置／アーカイブ

9.1 キャプチャ
===================

Org-modeでは、新しいアイテムをキャプチャする方法はJohn
Wiegleyによる素晴らしいrememberパッケージから多くのアイディアを得ています。
バージョン6.36のOrg-modeまでは`remember.el'用の特別な設定を使っていました。
`org-remember.el'は従来の設定との逆互換性のため、まだOrg-modeの一部です。
org-rememberに関するドキュメントは`http://orgmode.org/org-remember.pdf'にあ
ります。

ここで述べる新しいキャプチャのための設定が好ましく、新しいユーザーはこれを使
用するべきです。あなたの`org-remember-templates'を変換する場合は以下のコマン
ドを実行します。
     M-x org-capture-import-remember-templates <RET>
   そして新しい変数を`M-x customize-variable
org-capture-templates'でカスタマイ
ズし、結果を確認してから保存してください。これにより、新しい仕組みになれるま
ではリメンバーとキャプチャの両方を使うことができます。

キャプチャはワークフローにおいて小さい割り込みで素早くノートを保存することが
できます。キャプチャの基本的なプロセスはリメンバーととても良く似ていますが、
Org-modeはそれをテンプレートなどで強化しました。

* Menu:

* キャプチャの設定::  キャプチャされたノートが保存される場所
* キャプチャの使用::  キャプチャの実行と中止コマンド
* キャプチャテンプレート::  異なるタイプのテンプレートを定義する


File: org-ja,  Node: キャプチャの設定,  Next: キャプチャの使用,  Prev: キャプチャ,  Up: キャプチャ

9.1.1 キャプチャの設定
------------------------------

以下のカスタマイズはノートを取るデフォルトのファイルと新しい素材をキャプチャ
するためのグローバルなキー(1)

     (setq org-default-notes-file (concat org-directory "/notes.org"))
     (define-key global-map "\C-cc" 'org-capture)

   ---------- Footnotes ----------

   (1) 自分のキーを選択して下さい。`C-c c'はただの提案で す。


File: org-ja,  Node: キャプチャの使用,  Next: キャプチャテンプレート,  Prev: キャプチャの設定,  Up: キャプチャ

9.1.2 キャプチャの使用
------------------------------

`C-c c     (`org-capture')'
     `org-caputre'コマンドを呼びます。このキーバインドは
     グローバルで、デフォルトではアクティブになっておらず、インストールする
     必要があることに注意が必要です。もしテンプレートがあるならば defined
     *note キャプチャテンプレート::,
     これらのテンプレートの選択か、デフォ
     ルトのテンプレートを使用した新しい Org
     アウトラインノードが使用されます。

`C-c C-c     (`org-capture-finalize')'
     キャプチャバッファに情報を入力し終わった ら、`C-c
     C-c'はキャプチャプロセスの前に設定されたウィンドウへ戻します
     。これによってこれ以上気を散らさずに作業を再開することができます。前置
     引数と一緒に呼ばれた場合は、仕上げをしたあとキャプチャした項目へ移動します。

`C-c C-w     (`org-capture-refile')'
     ノートを別の場所に差し替える (*note
     ノートの再配置::)ことでキャプチャプロセスを仕上げます。これは通常の差
     し替えコマンドが実行されることを認識してください。したがってこのコマン
     ドを実行するときのカーソル位置が重要です。もし親や小を持つツリーを挿入
     する場合、まずカーソルを親へ移動してください。このコマンドに渡された接
     頭辞引数はすべて`org-refile'コマンドに渡されます。

`C-c C-k     (`org-capture-kill')'
     キャプチャプロセスをアボートして前の状態へ戻 ります。


   `org-capture'をアジェンダから`k
c'キーの組合せを用いた特別な方法で呼ぶことも
できます。この方法では、選択されたキャプチャテンプレートに挿入されるタイムス
タンプは、現在の日付ではなくアジェンダ内のカーソルがある位置の日付がデフォル
トになります。

最後にキャプチャが保存された場所を探すには、`org-capture'をプレフィックスコ
マンドと一緒に使用します。

`C-u C-c c'
     キャプチャテンプレートが対象としている場所に移動します。テンプレートの
     選択は通常と同じように行います。

`C-u C-u C-c c'
     バッファ内で最後に保存したキャプチャアイテムの場所に移動します。


File: org-ja,  Node: キャプチャテンプレート,  Prev: キャプチャの使用,  Up: キャプチャ

9.1.3 キャプチャテンプレート
---------------------------------------

テンプレートは異なる種類のキャプチャアイテムや、異なる場所へ使用することがで
きます。最も簡単にそのようなテンプレートを作る方法、カスタマイズインターフェ
ースを通じて行うことです。

`C-c c C'
     `org-capture-templates'変数のカスタマイズを行います。

テンプレート定義の正式な説明の前に、例を挙げます。一般的なTODOエントリーを作
成する場合を考えます。また、これらのエントリーは`~/org/gtd.org'の中にある見
出し`Tasks'の下に作成され、`journal.org'内のデートツリーはジャーナルエントリ
ーがキャプチャされます。このような場合の設定は以下のようになります。

     (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?
       %i
       %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
             "* %?
     Entered on %U
       %i
       %a")))

ここで`C-c c t'を押すと、Org-modeはこのようなテンプレートを用意します。
     * TODO
       [[file:LINT TO WHERE YOU INITIATED CAPTURE]]

テンプレートが展開される際、`%a'はキャプチャコマンドを呼んだ場所へのリンクに
変換されます。これは例えばメールからタスクを登録する時にとても役立ちます。タ
スクの定義を埋め、`C-c
C-c'を押すとOrg-modeはキャプチャ動作を始めた場所へま
た連れ戻してくれます。

特定のテンプレートを対話的な選択なしに用いてキャプチャする特別なキーを定義す
るには、以下のようにキーバインドを作成できます。

     (define-key global-map "\C-cx\n"
       (lambda () (interactive) (org-capture nil "x")))

* Menu:

* テンプレートの要素::  完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む


File: org-ja,  Node: テンプレートの要素,  Next: テンプレートの拡張,  Prev: キャプチャテンプレート,  Up: キャプチャテンプレート

9.1.3.1 テンプレートの要素
...................................

それではテンプレートを定義するための要素について述べています。
`org-capture-templates'中にあるそれぞれのエントリーは以下の項目から構成され
るリストです。

`keys'
     キーは文字列で示されるテンプレートを文字だけで選択します。例えば、
     `"a"'はaキーだけで選択するテンプレートであり、`"bt"'は２つのキーで選択
     します。幾つかのキーを使う場合、同じ接頭辞キーを持つキーはリストの中で
     連続している必要があり、以下に例をあげるような、接頭辞キーを表す２つの
     要素を持つエントリーをその前に置きます。
                   ("b" "買い物リストのためのテンプレート")
     もし`C'キーにテンプレートを定義していなければ、このキーでこの複雑な変
     数のカスタマイズバッファを開きます。

`description'
     選択時に表示されるテンプレートの短い説明文。

`type'
     エントリーの種類をシンボルで表します。正しい値は以下の通りです。
    `entry'
          見出しのついたOrg-modeのノード。対象エントリーの子かトップレベルのエン
          トリーとして書き込まれます。対象のファイルはOrg-modeのファイルでなけれ
          ばならなりません。

    `item'
          対象の場所の最初にある単純なリストへ書き込まれる単純なリストの項目。対
          象のファイルはOrg-modeのファイルでなければならなりません。

    `checkitem'
          チェックボックス項目。これは単純なリストとデフォルトのテンプレートが異
          なるだけです。

    `table-line'
          対象の場所にある最初のテーブルへ追加する新しい行。行が追加される場所は
          `:prepend'と`:table-line-pos'プロパティに依存します。(下記参照)

    `plain'
          そのまま挿入される文章

`target'
     キャプチャされた項目が挿入されるべき場所の指定。Org-modeファイルでは、通常タ
     ーゲットはノードで定義されます。エントリーはこのノードの子になります。他のタ
     イプはこのノードの本文にあるテーブルやリストに追加されます。多くのターゲット
     の指定にはファイル名が含まれます。もしファイル名が空の文字列だった場合、
     `org-default-notes-file'がデフォルトになります。ファイルは変数や関数、Emacs
     Lispのフォームでも与えられます。

     正しい値は以下の通りです。
    `(file "path/to/file")'
          文章はこのファイルの先頭か最後に挿入されます。

    `(id "現存するorgエントリーのid")'
          このエントリーの子として、もしくはこのエントリの本文として記入します。

    `(file+headline "path/to/file" "node headline")'
          対象の見出しがファイル中で一つしか無い場合の速い設定。

    `(file+olp "path/to/file" "Leval 1 heading" "Leval 2" ...)'
          唯一でない見出しの場合、フルパスの方が安全です。

    `(file+regexp  "path/to/file" "regexp to find location")'
          カーソルの位置に正規表現を使った場合。

    `(file+datatree "path/to/file")'
          今日の日付で日付ツリーの見出しを作ります。

    `(file+datetree+prompt "path/to/file")'
          promptで与えられた日付で日付ツリーの見出しを作ります。

    `(file+function "path/to/file" function-finding-location)'
          ファイルの中で正しい場所を見つける関数

    `(clock)'
          ファイル中で現在時間を測っているエントリー。

    `(function function-finding-location)'
          一般的な方法、ファイルと場所を見つける自分の関数を書く方法。

`template'
     キャプチャする項目を作るテンプレート。もし空にした場合、デフォルトのテンプレ
     ートを使用します。もしエスケープコードを付加した文字列の場合、キャプチャされ
     た時の時間と状況に依存して置換されます。エスケープされた文字列はテンプレート
     ファイルからロードされ、特別な構文`(file
     "path/to/template")'を使用します。 詳細をいかに示します。

`properties'
     エントリーの残りは追加オプションのプロパティリストです。理解できるプロパティ
     は
    `:prepend'
          通常新しくキャプチャされた情報は対象の場所(最後の子、最後のテーブル、
          最後のリスト項目...)に追加されます。このプロパティを設定することで変更
          します。

    `:immediate-finish'
          セットされると情報の編集を行わなず、追加だけを直ちに行います。テンプレ
          ートが自動的に追加できる情報だけを必要とする場合だけ意味を成します。

    `:empty-lines'
          新しい項目の前後に挿入する行の数をこれに設定します。デフォルトは０で、
          通常の他の値は１です。

    `:clock-in'
          この項目の時計を開始します。

    `:clock-keep'
          キャプチャしたエントリーを追加しても時計を動かし続けます。

    `:clock-resume'
          もし時計を割り込むキャプチャを始めた場合、キャプチャ終了時に時計を再開
          します。`:clock-keep'は`:clock-resume'より優先されることに注意が必要で
          す。もしどちらの設定も`t'に設定された場合、現在の時計が動き、一つ前の
          時計は再開されません。

    `:unnarrowed'
          対象とするバッファの幅を狭めず、単純にフルバッファで表示します。デフォ
          ルトでは幅を狭くし、新しい内容だけが表示されます。

    `:kill-buffer'
          対象のファイルがキャプチャ時にまだ読み込まれていなかった場合、キャプチ
          ャ終了時に再びバッファを閉じます。


File: org-ja,  Node: テンプレートの拡張,  Prev: テンプレートの要素,  Up: キャプチャテンプレート

9.1.3.2 テンプレートの拡張
...................................

テンプレート自身の中では、特別な`%'-エスケープ(1)によって動的に内容を
挿入できます。

     %^{PROMPT} ユーザーに文字列を入力させこの順序と置換します。
                 デフォルトの値と補完テーブルは以下のように指定します。
                 %^{prompt|デフォルト値|補完2|補完3...}
                 矢印キーで入力の履歴をたどることができます。
     %a          注釈、通常は`org-store-link'で作成されたリンク
     %A          `%a'と同様、しかし説明部分への入力を行います。
     %i          初期の内容、キャプチャが呼ばれた時にアクティブに
                 なっているリージョン全体。
                 全体のテキストは`%i'自身と同じ様にインデントされます。
     %t          タイムスタンプ、日付のみ
     %T          時間と日付からなるタイムスタンプ
     %u, %U      上記と同じだが、不活性なタイムスタンプ
     %^t         `%t'と同じだが、日付の入力を行います。`%^T'、`%^u'、`%^U'と似てい
     ます。
                 プロンプトを`%^{Birthday}t'の様に定義できます。
     %n          ユーザーネーム(`user-full-name'から取ってきます)
     %c          現在のキルリングの先頭
     %x          Xクリップボードの内容
     %^C         キルかクリップどちらを使うか対話的に選択します。
     %^L         `%^C'と同様だが、リンクとして挿入します。
     %k          現在計時しているタスクのタイトル。
     %K          現在計時しているタスクへのリンク。
     %f          org-captureが呼ばれた時に現在のバッファで表示していたファイル。
     %F          `%f'と同様だが、フルパスを含んでいます。
     %^g         タグの入力を対象ファイル中のタグから補完して入力します。
     %^G         タグの入力をアジェンダファイルすべてから補完して入力します。
     %^{PROP}p   ユーザーにPROPプロパティの値の入力を行わせます。
     %:keyword   あるリンクのタイプを指示する特定の情報
     %[FILE]     FILEで与えられるファイルへ内容を挿入します。
     %(SEXP)     SEXPで与えられるElispを評価してその結果と入れ替えます。

リンクのタイプを指定するため、以下のキーワードが定義(2)されています。

     リンクタイプ       |  使用可能なキーワード
     -------------------+----------------------------------------------
     bbdb                    |  %:name %:company
     irc                     |  %:server %:port %:nick
     vm, wl, mh, mew, rmail  |  %:type %:subject %:message-id
                             |  %:from %:fromname %:fromaddress
                             |  %:to   %:toname   %:toaddress
                             |  %:date (ヘッダーメッセージ中にあるメッセージの日付
     )
                             |  %:date-timestamp (アクティブなタイムスタンプとして
     の日付)
                             |  %:date-timestamp-inactive (アクティブでないタイム
     スタンプとしての日付)
                             |  %:fromto (\"to NAME\"か\"from NAME\"のどちらか
     )(3)
     gnus                    |  %:group, メッセージとそれに加えてすべてのemailフィ
     ールドのため。
     w3, w3m                 |  %:url
     info                    |  %:file %:node
     calendar                |  %:date

テンプレート展開後のカーソル位置のために以下を用います。

     %?          テンプレートを完了したあと、カーソル位置をここに移動します。

   ---------- Footnotes ----------

   (1) もしこれらの文字通りの並びが
必要な場合は、`%'をバックスラッシュでエスケープすること

   (2) もしあなたが自分のリン クタイプを定義しているならば(*note
ハイパーリンクのタイプの追加::)、
`org-store-link-props'に保存されているいずれのプロパティもキャプチャテンプレ
ート中に同じ方法でアクセス可能です。

   (3)
これはユーザーではなく常に他人になる。`org-from-is-user-regexp'を参照する
こと。


File: org-ja,  Node: 添付,  Next: RSSフィード,  Prev: キャプチャ,  Up: キャプチャ／再配置／アーカイブ

9.2 添付
==========

参照すべきものをアウトラインノートやタスクと連携させることは大抵役立ちます。
小さなプレーンテキストの塊は単純にプロジェクトのサブツリーとして保存可能です
。ハイパーリンク(*note
ハイパーリンク::)はあなたのコンピュータやクラウドなどにある
ファイル、例えばプロジェクトに関連するemailやソースコードファイルとの連携を
確立します。その他の方法として、attachmentsがあります。これはアウトラインノ
ードの属するディレクトリにあるファイルです。これらのディレクトリは`data'ディ
レクトリの中に位置し、あなたのOrgファイルが保存されているディレクトリと同じ
ディレクトリの中にある(1)。もしこのディレクトリを`git
init'で初期化した場合、Org-modeは変更点を見つ
けた時に自動的にそれらをコミットします。添付システムはJohn
Wiegleyの貢献によってOrg-modeへ追加されました。

もしそれがより良い方法に思える場合は、エントリーへディレクトリを添付すること
も自身の選択で可能です。子エントリーは親から添付ディレクトリを受け継ぐため、
サブツリー全体が同じ添付ディレクトリを使うことになります。

以下のコマンドはプロパティを操作する助けとなります。

`C-c C-a     (`org-attach')'
     添付システムに関連するコマンドのコマンド選択画面。これらのキーのあとに
     、コマンドのリストが表示され、コマンドを選択するために更にキーを押す必
     要があります。

    `a     (`org-attach-attach')'
          ファイルを選択してそれをタスクの添付ディレクトリへ移動します。ファイル
          は`org-attach-method'によって複製、移動、リンクされます。ハードリンク
          はすべてのシステムでサポートされていないことに注意が必要です。

    `c/m/l'
          コピー/移動/リンクメソッドを使ってファイルを添付します。ハードリンクは
          すべてのシステムでサポートされていないことに注意が必要です。

    `n     (`org-attach-new')'
          Emacsのバッファとして新しい添付を作成しま す。

    `z     (`org-attach-sync')'
          あなた自身で添付を追加した場合に、現在のタスクをその添付ディレクトリと
          同期します。

    `o     (`org-attach-open')'
          現在のタスクに関する添付を開きます。もし１つ以上ある場合は、まずファイ
          ル名を入力させます。開き方は`org-file-apps'に従います。詳細は、ハイパ
          ーリンクを辿るための情報(*note
          リンクの扱い::)を参照してください。

    `O     (`org-attach-open-in-emacs')'
          これも添付を開きますが、強制的にファイルをEmacsを用います。

    `f     (`org-attach-reveal')'
          現在のタスクの添付ディレクトリを開きま す。

    `F     (`org-attach-reveal-in-emacs')'
          これもディレクトリを開きますが、強制的にEmacs内で`dired'を用います。

    `d     (`org-attach-delete-one')'
          添付の１つを選択し削除します。

    `D     (`org-attach-delete-all')'
          タスクに関連する添付をすべて削除します。安全な方法は`dired'を用いてデ
          ィレクトリを開き、そこから削除する方法です。

    `s     (`org-attach-set-directory')'
          特定のディレクトリをエントリーの添付ディレクトリーに指定します。これは
          ディレクトリのパスを`ATTAH_DIR'プロパティに代入することで動作します。

    `i     (`org-attach-set-inherit')'
          `ATTACH_DIR_INHERIT'プロパティをセットします。これによって子も親と同じ
          ディレクトリを添付として使用します。

   ---------- Footnotes ----------

   (1) もしエントリーやOrgファイルを他のディレクトリに移動し
た場合、`org-attach-directory'が絶対パスを含むように設定する必要があります。


File: org-ja,  Node: RSSフィード,  Next: プロトコル,  Prev: 添付,  Up: キャプチャ／再配置／アーカイブ

9.3 RSSフィード
===================

Org-modeはエントリーの追加や変更をRSSフィードとAtomフィードの情報を元に行う
ことができます。この機能を使ってプロダクトフィードのなかからそれぞれの新しい
プロダクトに対してタスクを作ることも可能です。もしくは、携帯電話を対象とした
Web上のノート作成サービスをOrg-modeのタスクにインポートできます。フィードに
アクセスするには、`org-feed-alist'を設定します。この変数のドキュメント文字列
に詳細はあります。以下に例をしまします。

     (setq org-feed-alist
          '(("Slashdot"
              "http://rss.slashdot.org/Slashdot/slashdot"
              "~/txt/org/feeds.org" "Slashdot Entries")))

この例は、以下のコマンドが使われるたびに、`rss.slashdot.org'で提供されている
フィードの新しいアイテムから、`~/org/feeds.org'ファイル内に `Slashdot
Entries'をヘッダーにもつ新しいエントリーを生成します。

`C-c C-x g     (`org-feed-update-all')'

`C-c C-x g'
     `org-feed-alist'に設定されたフィードからアイテムを収集し、上記のように
     振る舞う。

`C-c C-x G     (`org-feed-goto-inbox')'
     はフィード名を入力し、そのフ
     ィードに設定されたインボックスへ移動します。

幾つかの見出しでは、Org-modeは`FEEDSTATUS'という引き出しを作成します。これは
フィード中にあるアイテムのステータス情報を保存しています。なんども同じアイテ
ムが追加されないためには、`FEEDSTATUS'をファイルの引き出しの中に追加すること
が必要です。

     #+DRAWERS: LOGBOOK PROPERTIES FEEDSTATUS

Atomフィードの読み方などのより詳しい情報は、`org-feed.el'を御覧ください。ま
た、`org-feed-alist'のドキュメント文字列もあります。


File: org-ja,  Node: プロトコル,  Next: ノートの再配置,  Prev: RSSフィード,  Up: キャプチャ／再配置／アーカイブ

9.4 外部アクセスのためのプロトコル
=================================================

Org-modeを扱うためのプロトコルを外部のアプリケーションから、`emacsserver'を
通じてEmacsに渡すことができます。例えば、ウェブブラウザーのブックマークをキ
ャプチャ(*note
キャプチャ::)を使って現在のページへのリンクとしてOrg-modeに送り、新
しいノートを作るように設定できます。または、Emacsに現在ウェブブラウザーで開
いているウェブサイトのローカルにあるソースファイルを開くようなブックマークを
作ることも出来ます。詳細な説明や設定方法は
`http://orgmode.org/worg/org-contrib/org-protocol.php'を御覧ください。


File: org-ja,  Node: ノートの再配置,  Next: アーカイブ,  Prev: プロトコル,  Up: キャプチャ／再配置／アーカイブ

9.5 ノートの再配置
=========================

キャプチャしたデータを見なおしているとき、幾つかのエントリーをプロジェクトな
どの異なるリストへ移動したい時があるでしょう。カットし、正しい位置をさがし、
ノートを貼り付けるのは面倒です。これを単純にするには、以下に示す特別なコマン
ドを使います。

`C-c C-w     (`org-refile')'
     エントリーや現在のリージョンをリファイルします。このコマンドはエントリ
     ーをリファイルする場所を求め、補完とともに１つ選択させます。アイテム(
     またはリージョン内のアイテム)は対象の見出しの下にサブアイテムとして挿
     入されます。`org-reverse-note-order'に依存して、サブアイテムの先頭か最
     後のどちらかに挿入されます。
     デフォルトでは、現在のバッファのレベル１の見出しすべては対象と考えられ
     ますが、いくつものファイルにまたがった複雑な定義もすることが可能です。
     詳細は`org-refile-targets'変数をご覧ください。もし場所をアウトラインの
     パスをファイルパスのような補完で選択したければ、
     `org-refile-use-outline-path'と`org-outline-path-complete-in-steps'変
     数をご覧ください。もしリファイルするノードの親ノードをその場で作れるよ
     うにしたいときは、`org-refile-allow-creating-parent-nodes'変数をご覧く
     ださい。`org-log-refile'変数(1)がセットされてい
     る場合、タイムスタンプやノートがエントリーがリファイルされたときに記録
     されます。

`C-u C-c C-w'
     　リファイルのインターフェースを見出しのジャン プに使います。

`C-u C-u C-c C-w     (`org-refile-goto-last-stored')'
     `org-refile'が最後に木を 移動させた場所に移動します。

`C-2 C-c C-w'
     現在計時しているアイテムの子としてリファイルします。

`C-0 C-c C-w  or  C-u C-u C-u C-c C-w'

`C-0 C-c C-w  or  C-u C-u C-u C-c C-w     (`org-refile-cache-clear')'
     対象のキャッシュを削除します。リファイル対象のキャッシュは
     `org-refile-use-cache'を設定することで設定します。コマンドに新しい対象
     を見せるために、このコマンドでキャッシュを削除する必要があります。

   ---------- Footnotes ----------

   (1) `#+STARTUP'キーワード、`logfile'、
`lognoterefile'、そして`nologrefile'に対応している。


File: org-ja,  Node: アーカイブ,  Prev: ノートの再配置,  Up: キャプチャ／再配置／アーカイブ

9.6 アーカイブ
===================

(サブ)ツリーとして表現されたプロジェクトが終わった時、ツリーを外に移動し、そ
れがアジェンダに現れない様にしたいでしょう。アーカイブは活動中のファイルをコ
ンパクトにし、アジェンダビューを作るようなグローバルな検索を早くするために重
要です。

`C-c C-x C-a     (`org-archive-subtree-default')'
     現在のエントリーを`org-archive-default-command'変数で指定されたコマン
     ドを使ってアーカイブします。

* Menu:

* サブツリーを移動する::  アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す


File: org-ja,  Node: サブツリーを移動する,  Next: ファイル内部でのアーカイブ,  Prev: アーカイブ,  Up: アーカイブ

9.6.1 ツリーをアーカイブファイルへ移動
------------------------------------------------------

もっとも一般的なアーカイブアクションはプロジェクトを他のファイル、アーカイブ
ファイル、へ移動させることです。

`C-c C-x C-s  or short  C-c $     (`org-archive-subtree')'
     カーソルの場所から始まるサブツリーを`org-archive-location'で与えられる
     場所にアーカイブします。

`C-u C-c C-x C-s'
     現在の見出しにある子がアーカイブへ移動可能か調べます。これを行うために
     は、それぞれのサブツリーがオープンなTODOエントリーとしてチェックされて
     いる必要がります。もし１つも見つからなければ、コマンドはこれをアーカイ
     ブの場所へ移動するか訪ねてきます。もしコマンドが入力されたときに、カー
     ソルがへっどらいんで_ない_場合、レベル１のツリーがチェックされます。

通常のアーカイブ場所は現在のファイルと同じディレクトリにある、現在のファイル
名に`_archive'を付加した名前のファイルです。これを変更するための情報や例は、
`org-archive-location'変数のドキュメント文字列をご覧ください。以下に示すよう
な、バッファ内でこれを変更するためのオプションもあります(1)。

     #+ARCHIVE: %s_done::

もしあるエントリー又は(サブ)ツリーに対して特別なアーカイブ場所を指定したいと
きには、エントリーに`:ARCHIVE:'プロパティを場所を値として与えてください
(*note プロパティとカラム::)。

もしサブツリーが移動した場合、エントリーが移動してきたファイル、アーカイブし
たときのアウトラインパスなどのコンテクスト情報が記録されます。
`org-archive-save-context-info'変数を設定することで追加される情報の量を調整
します。

   ---------- Footnotes ----------

   (1) 後方互換性のために
、もしこれらの行がファイル中にいくつか存在する場合、それ以下のテキストのアー
カイブ場所をそれぞれ指定します。最初の行はその定義以前のすべてのテキストに適
応されます。しかし、この方法は文書のアウトライン構造と互換性が無く、_全く_推
奨されません。複数のアーカイブ場所をバッファ内で設定する正しい方法は、プロパ
ティを使う方法です。


File: org-ja,  Node: ファイル内部でのアーカイブ,  Prev: サブツリーを移動する,  Up: アーカイブ

9.6.2 ファイル内部でのアーカイブ
---------------------------------------------

もし異なるファイルへサブツリーを移動させずに、それをアジェンダビューで非表示
にしたいなら、`ARCHIVE tag'を使うことができます。

   ARCHIVE タグ(*note
タグ::)でマークされている見出しはアウトラインツリー内の場所に留
まりますが、下記のような振る舞いをします。
   - 表示を切り替えるコマンド(*note
     表示、非表示の切り替え::)では開くことはできま
     せん。アーカイブしたサブツリーを強制的に切り替えるには`C-<TAB>'を使う
     か、`org-cycle-open-archived-trees'オプションを設定します。また、
     `show-all'などの通常のアウトラインコマンドはアーカイブしたサブツリーも
     開きます。

   - ツリーの抽出を行う過程で(*note
     ツリーの抽出::)、アーカイブしたサブツリー内で
     マッチしたものは`org-suparse-tree-open-archived-trees'オプションを設定
     しない限り現れません。

   - アジェンダビューの抽出を行う過程で(*note
     アジェンダビュー::)、アーカイブした
     ツリーの内容は、`org-agenda-skip-archived-trees'を設定した場合は無視さ
     れ、設定されない場合は常に表示されます。アジェンダでは、`v
     a'を押すこ とで一時的にアーカイブを含むことができます。

   - アーカイブされたツリーは見出し以外はエクスポートされません (*note
     エクスポート::)。`org-export-with-archived-trees'変数を使って詳細な設
     定は行なってください。

   - アーカイブしたツリーは`org-columns-skip-archived-trees'変数が`nil'に設
     定されない限りカラムビューから除外されます。

   以下に示すコマンドがARCHIVEタグの編集に役立ちます。

`C-c C-x a     (`org-toggle-archive-tag')'
     現在の見出しのARCHIVEタグをトグルす
     る。もしタグが設定されているならば、見出しは shadowed
     faceに変更され、以下のサブツリーは隠されます。

`C-u C-c C-x a'
     現在の見出しが持つ直接の子がアーカイブされるべきかチェックする。これを
     おこなうには、それぞれのサブツリーがオープンなTODOエントリーかチェック
     される。もし何も見つからなかった場合、コマンドは子にARCHIVEタグをセッ
     トする。カーソルがコマンド実行時に見出し上に_無い_場合、レベル１のツリ
     ーがチェックされる。

`C-TAB     (`org-force-cycle-archived')'
     もしARCHIVEタグ がついていてもツリーの切り替えを行う

`C-c C-x A     (`org-archive-to-archive-sibling')'
     現在のエントリーを_アーカイ
     ブ兄弟_に移動する。これは見出しが`Archive'か`ARCHIVE'タグの付いたエン
     トリーの兄弟である。このエントリーはこの兄弟の子になる。そのため、継承
     したタグやアウトライン内のだいたいな位置など、従来の状況は保ち続けている。


File: org-ja,  Node: アジェンダビュー,  Next: マークアップ,  Prev: キャプチャ／再配置／アーカイブ,  Up: Top

10 アジェンダビュー
***************************

Org-modeで作業した結果、TODOアイテム、タイムスタンプのついたアイテム、タグの
付いた見出しなどが、1つのファイル、あるいはいくつものファイルにまたがって、
撒き散らされることとなります。ある特定の日に重要な、実際に動いているアイテム
やイベントの全体像を把握するためには、ひとつの管理された方法で、これらの情報
を集めたり、並び替えたりしながら、表示することが必要です。

Org-modeでは、いろいろな基準によってアイテムを選択することが可能であり、独立
したバッファにそれらのアイテムを表示させることができます。７つの異なるビュー
のタイプが用意されています。：

   * _アジェンダ_　カレンダーのように指定した日付の情報を表示します、

   * _TODOリスト_　未完了のアクションアイテムをカバーします、

   *
     _マッチビュー_　関連づけられているタグやプロパティ、TODOの状態に基づい
     て見出しを表示します、

   *
     _タイムラインビュー_　1つのOrg-modeのファイルの中に含まれている全ての
     イベントを時間順のビューに表示します、

   * a
     _テキストの検索ビュー_　複数のファイルの中かから、指定したキーワード
     を含んでいるすべてのエントリーを表示します、

   * a
     _詳細が未決定のプロジェクトビュー_　現在作業が進んでいないプロジェク
     トを表示します。そして、

   *
     _カスタムビュー_　特別な検索や異なるビューの組合せによるビューです。

抽出された情報は特別な_アジェンダバッファ_に表示されます。このバッファはリー
ドオンリーですが、オリジナルのOrg-modeファイルにジャンプしたり、オリジナルの
ファイルを間接的に編集することができます。

２つの変数によって、アジェンダバッファをどのように表示するか、アジェンダが存
在したときに、ウインドウの設定を元に戻すかどうかをコントロールします。；
`org-agenda-window-setup'と`org-agenda-restore-windows-after-quit'.

* Menu:

* アジェンダファイル::  アジェンダ生成のために探索されるファイル
* アジェンダのコマンド選択::  アジェンダビューへのキーボードアクセス
* 組み込みのアジェンダビュー::  すぐに使える機能に何があるでしょう？
* 表示とソート::       表示のためにどのようにアジェンダ項目が準備されるのか
* アジェンダのコマンド::  タスクツリーのリモート編集
* カスタムアジェンダビュー::  特別な検索とビューを定義する
* アジェンダビューの出力::  ビューをファイルに書き出す
* アジェンダのカラム表示::  収集したエントリーのためにコラムビューを使用する


File: org-ja,  Node: アジェンダファイル,  Next: アジェンダのコマンド選択,  Prev: アジェンダビュー,  Up: アジェンダビュー

10.1 アジェンダファイル
================================

表示される情報は、通常すべての_アジェンダファイル_から収集されます。アジェン
ダファイルは`org-agenda-files'(1)変数にリスト化されたファイルが対象となります。もしもこのリ
ストの中にディレクトリ名が記載されていたら、
そのディレクトリの中にある`.org'という拡張子がついた全てのファイルが、アジェ
ンダファイルの対象となります。

したがって、たとえあなたが1つのOrg-modeファイルでしか作業をしていなくても、
このファイルをそのリスト(2)に記載したことになるでしょう。`org-agenda-files'をカスタマイズすることが
可能で、しかも以下に述べるコマンドを通して簡単な方法で維持することができます
。

`C-c [     (`org-agenda-file-to-front')'
     　アジェンダファイルのリストに編集中の
     ファイルを追加する。そのファイルは、リストの先頭に追加される。もしも既
     にリストに存在していたら、先頭に移動する。前置引数をつけることで、リス
     トの最後に追加／移動する。

`C-c ]     (`org-remove-file')'
     　編集中のファイルを アジェンダファイルのリストから削除する。

`C-'     (`org-cycle-agenda-files')'
`C-,'
     アジェンダファイルのリストに従って、1つのファイルから次のファイルへと
     切り替える。

`M-x org-iswitchb'
     `iswitchb'と似たようなインターフェースでOrg-modeのバッファの間を切り替
     えるコマンド。

Org-modeメニューには、現時点のファイルのリストが含まれており、その中のファイ
ルに移動するのに役立ちます。

もしもこのリストに載っているファイルではなく、作業中のアジェンダファイルに焦
点をあてたかったり、リストにあるファイルのまさにひとつのファイルに焦点をあて
たかったり、はたまたあるファイルの中のあるサブツリーに焦点をあてたかったりし
たいときは、いくつかの方法が用意されています。単一のアジェンダコマンドとして
、コマンド選択画面上 (*note
アジェンダのコマンド選択::)で`<'を1回ないし数回押すとよいのです。アジェンダ
の対象をある限定した期間に絞り込むために以下のコマンドが用意されています。：

`C-c C-x <     (`org-agenda-set-restriction-lock')'
     アジェンダの対象を現在カー
     ソルが置かれているサブツリーに固定的に制限します。前置引数をつけたり、
     ファイルの最初の見出しよりも前にカーソルが置かれているときには、アジェ
     ンダの対象範囲はファイル全体になります。この制約は`C-c C-x
     >'を実行し
     て取り除くか、`<'または`>'をアジェンダのコマンド選択画面上で入力するま
     では維持します。もしもウインドウ上にアジェンダビューが表示されているな
     らば、あたらしい制約が即座に効果を及ぼします。

`C-c C-x >     (`org-agenda-remove-restriction-lock')'
     `C-c C-x <'で作成された 固定する制限を削除します。

`speedbar.el'を併用しているときは、Speedbarのフレームの中で以下のコマンドを
使用することができます。
`< in the speedbar frame     (`org-speedbar-set-agenda-restriction')'
     　
     Speedbarのフレームの中で、1つのOrg-modeファイルか、そのファイルのサブ
     ツリーの一つか、カーソルの置かれているアイテムに対応してアジェンダを恒
     久的に限定します。もしもアジェンダビューが表示されているウインドウがあ
     るならば、限定箇所が変更されると即座に反映する。

`> in the speedbar frame     (`org-agenda-remove-restriction-lock')'
     　制限を ふたたび解除する。

   ---------- Footnotes ----------

   (1) もしもその変数の値がリストではなく、単独のフ
ァイル名の場合には、その外部ファイルの中に記載されているアジェンダファイルの
名前となります。

   (2) コマンド選択画面を使用しているときに、コマンドを選
択する前に、`<'を押すと、編集中のファイルに対するコマンドが制限されて、次の
コマンド選択画面でコマンドが入力されるまで、`org-agenda-files'は無視されます
。


File: org-ja,  Node: アジェンダのコマンド選択,  Next: 組み込みのアジェンダビュー,  Prev: アジェンダファイル,  Up: アジェンダビュー

10.2 アジェンダのコマンド選択画面
===============================================

グローバルなキーと結びついている、コマンド選択画面を通してそのビューは作成さ
れます。--例えば、`C-c a' (*note
インストール::)のように。以下のように、コマンド選択画面にアクセスする方法と
して`C-c
a'を想定しており、キーボードでコマンドにアクセスするためのリストが
表示されています。`C-c
a'を入力した後、コマンドを実行するために、次に入力す
る文字を要求します。コマンド選択画面では以下に記載するデフォルトのコマンドが
提供されています。
`a'
     カレンダーのようなアジェンダを作成します。(*note
     毎週／毎日のアジェンダ::)

`t / T'
     すべてのTODOアイテムのリストを作成します。 (*note
     グローバルなTODOリスト::)

`m / M'
     タグの表記にマッチした見出しのリストを作成します。 (*note
     タグとプロパティとのマッチング::)

`L'
     カレントバッファ用のタイムラインのビューを作成します。(*note
     タイムライン::)

`s'
     そのエントリーに存在するしないにかかわらず、and/orという正規表現による
     キーワードの論理式で選択したエントリのリストを作成します。

`/'
     すべてのアジェンダファイルと`org-agenda-text-search-extra-files'の中で
     リスト化かれているファイルの中から正規表現を用いて検索します。これは
     Emacsの`multi-occur'というコマンドを使用します。前置引数をつけると、そ
     れぞれのマッチした行の状況の数をしていすることができます。デフォルトは
     1となっています。

`# / !'
     詳細が未決定のプロジェクトのリストを作成します。 (*note
     詳細が未決定なプロジェクト::)

`<'
     カレントバッファ(1)に対してアジェンダコマンドを制限します。
     `<'を入力したあと、コマンドを選択するために文字を入力する必要がありま
     す。

`< <'
     もしもアクティブなリージョンがあるときは、以下のようなアジェンダコマン
     ドがそのリージョンに限定されます。一方、カレントのサブツリー(2)に限定することもできます。`<
     <'を入力し たあと、コマンドを選択する文字を入力する必要があります。

あなたは、あたかもデフォルトのコマンドのように、コマンド選択画面でアクセスす
るカスタムコマンドを定義することもできます。複数のブロックを同時に含めた拡張
されたアジェンダバッファを作成する可能性を含んでいます。例えば週のアジェンダ
、グローバルなTODOリスト、そして多数の特定タグの検索など。 *Note
アジェンダのカラム表示::.

   ---------- Footnotes ----------

   (1) 逆の互換性として、`1'をカレントバッファを制限するため
に入力することもできます。

   (2) 逆の互換
性として、カレントリージョンまたはカレントサブツリーに限定するために
`0'を入力することもできます。.


File: org-ja,  Node: 組み込みのアジェンダビュー,  Next: 表示とソート,  Prev: アジェンダのコマンド選択,  Up: アジェンダビュー

10.3 アジェンダに組み込まれているビュー
========================================================

このセクションではビルトインビューについて説明します。

* Menu:

* 毎週／毎日のアジェンダ::  現在のタスクが表示されたカレンダーのページ
* グローバルなTODOリスト::  全ての未完了アクション項目
* タグとプロパティとのマッチング::  微調整された検索での構造化された情報
* タイムライン::       単一ファイルでの時間順のビュー
* 検索ビュー::          文章の中を検索してエントリーを見つける
* 詳細が未決定なプロジェクト::  レビューが必要なプロジェクトを見つける


File: org-ja,  Node: 毎週／毎日のアジェンダ,  Next: グローバルなTODOリスト,  Prev: 組み込みのアジェンダビュー,  Up: 組み込みのアジェンダビュー

10.3.1 毎週／毎日のアジェンダ
----------------------------------------

1週間の／1日の_アジェンダ_の目的は、その週あるいはその日のタスクをすべて表示
して、紙のアジェンダのページのように、実行に移すことです。

`C-c a a     (`org-agenda-list')'
     　Org-modeのファイルのリストの中からその週の
     予定を収集するものです。予定はそれぞれの日に表示されます。（ `C-u
     2 1 C-c a
     a'のように)前置引数に数字をつけて(1)表示する日数を設定することができます。

表示されるデフォルトの日数は、`org-agenda-span'(あるいは古くさくなってしまい
ましたが`org-agenda-ndays')という変数で設定します。この変数は、アジェンダの
中でデフォルトとして確認したい日数、あるいは、期間を示す`day'、`week'、
`month'や`year'といった期間を示す名前をつけて設定します。

アジェンダバッファからリモートで編集するとは、例えば、アジェンダバッファの中
でデッドラインやアポイントメントの日付を変更することができるという意味です。
アジェンダバッファの中で利用できるコマンドは、*note
アジェンダのコマンド::の中で一 覧表にしています。

カレンダー／日記の統合
.................................

Emacsには、Edward M.
Reingoldによって開発されたカレンダーと日記の機能があります。カレンダーでは、
国や文化の異なる祝祭日を備えた3ヵ月分のカレンダーが表示されます。日記には記
念日、月の満ち欠け、日の出日の入り、繰り返しの予定（隔週、隔月）などを記録し
ておくことができます。このような機能は、Org-modeに対して大変補完的な関係にあ
ります。日記とOrg-modeの出力を結びつけることは大変有益です。

Emacsの日記からOrg-modeのアジェンダに項目を落とし込むために、あなたは次のよ
うに変数を設定するだけです。

     (setq org-agenda-include-diary t)

その後、すべてが自動的に行われます。祝祭日や記念日などを含むすべての項目は、
Org-modeで作成されるジェンダバッファに取り込むことができます。日記に記録され
ている項目を編集するために、アジェンダバッファ上で<SPC>、 <TAB>、及び
<RET>を入力することで、日記のファイルにジャンプすることができます。その日に
新しいエントリーを挿入する`i'というコマンドはアジェンダバッファ上で動作しま
す。あたかも、日の出日の入りの時刻を表示したり、月の満ち欠けの状態を表示した
り、他の暦に変換するための、`S'、`M'、および`C'というコマンドと同様です。
`c'はカレンダーとアジェンダの間を行ったり来たりすることができます。

もしもあなたが日記をS式項目と祝祭日だけで使用しているのならば、上のような設
定をするよりも、Org-modeファイルに直接コピーしたり移動したりしたほうが手っ取
り早いです。Org-modeは日記形式のS式項目を評価し、しかもより早く、というのは
、最初にカレンダーを表示するという負荷がかからないからです。S式項目は左端か
ら記述し、式の前にスペースが入ってはいけないことに注意してください。たとえば
、あるOrg-modeファイルについての、以下にのべるセグメントが処理され、項目がア
ジェンダの中に作成されます。

     * Birthdays and similar stuff
     #+CATEGORY: Holiday
     %%(org-calendar-holiday)   ; special function for holiday names
     #+CATEGORY: Ann
     %%(diary-anniversary  5 14 1956)(2) Arthur Dent is %d years old
     %%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old

Anniversaries from BBDB
.......................

もしもBig Brothers
Databaseを使用して連絡先を管理しているのならば、あなたは先に述べたのと同様に
、独立したOrg-modeのファイルや日記のファイルに登録するよりも、BBDBの中に記念
日を登録したいと考えるでしょう。Org-modeはこれもサポートしており、アジェンダ
の一部としてBBDBの記念日を表示することができます。そのために必要なことは、以
下のような記述をアジェンダファイルに行うことです。

     * Anniversaries
       :PROPERTIES:
       :CATEGORY: Anniv
       :END:
     %%(org-bbdb-anniversaries)

それからBBDBのデータレコードのための記念日の定義に取り掛かることができます。
基本的には、BBDBのレコードの中にカーソルを置いて、`C-o anniversary
<RET>'を
実行し、それから日付を`YYYY-MM-DD'または`MM-DD'の形式で記入し、半角スペース
に続けて記念日の種類(`birthday'、`wedding'、または定型句)のクラスを記入しま
す。もしもクラスを省略した場合は、デフォルトでは`birthday'であるとみなします
。いくつかの例を書いてみました。`org-bbdb.el'ファイルの先頭のところにもう少
し詳しい説明が書いてあります。

     1973-06-22
     06-22
     1955-08-02 wedding
     2008-04-14 %s released version 6.01 of org-mode, %d years ago

BBDBを変更したり、Emacsのセッションで最初にアジェンダを表示したとき後は、ア
ジェンダの表示が少し遅くなるかもしれません。というのはOrg-modeが記念日のハッ
シュデータを更新するからです。しかしながら、そのことについていうと非常に早い
といえます。実際Org-modeの日記ファイルに`%%(diary-anniversary)'のエントリー
を長々と書き連ねた場合よりもずっと早いと言えるでしょう。

Appointment reminders
.....................

Org-modeはEmacsの予定を通知する機能と連携しています。あなたのアジェンダファ
イルに含まれているすべてのアポイントを追加するために、`org-agenda-to-appt'コ
マンドを使います。このコマンドはあなたの予定のリストにフィルターをかけ、特別
なカテゴリーに属しているものや正規表現の検索に合致したものを追加します。詳細
はドキュメント文字列を参照してください。

   ---------- Footnotes ----------

   (1) 逆方向の互換性のため
に、普遍的な前置引数`C-u'をつけることでアジェンダ（予定表）より上に、
TODOリストを書き出すことができます。この機能は軽視されており、専用の
TODOリストやブロックアジェンダ(*note
ブロックアジェンダ::).をその代わりに利 用することが多いです。

   (2) Note that the order of the arguments (month, day, year) depends
on the setting of `calendar-date-style'.


File: org-ja,  Node: グローバルなTODOリスト,  Next: タグとプロパティとのマッチング,  Prev: 毎週／毎日のアジェンダ,  Up: 組み込みのアジェンダビュー

10.3.2 The global TODO list
---------------------------

グローバルなTODOリストには、形式を整えられ、1つの場所に集められたすべての未
完了のTODOアイテムが含まれています。

`C-c a t     (`org-todo-list')'
     　グローバルなTODOリストを表示します。これはす
     べてのアジェンダファイル(*note
     アジェンダビュー::)からTODOアイテムを１つのバ
     ッファに集約します。デフォルトでは、このアイテムのリストはDONEという状
     態ではないアイテムです。そのバッファは`agenda-mode'となり、そのバッフ
     ァからTODOアイテムを直接調べたり操作したりするコマンドが用意されていま
     す(*note アジェンダのコマンド::)。 上と似ていますが、指定したTODOキーワードと合致したものを表示します。同
     じことを前置引数をつけて`C-c a
     t'を実行することでも指定できます。キー
     ワードの入力を促す指示が表示され、そして複数のキーワードを論理式ORとい
     う意味で`|'で区切って指定することができます。数字付きの前置引数をつけ
     ると`org-todo-keywords'の中のN番目のキーワードを選択することができます
     。 `r'キーをアジェンダバッファで使用するとバッファの再構成が行われます。
     たとえば`3
     r'というように、前置引数をつけてこのコマンドを実行すると選
     択したTODOキーワードが変更することができます。もしも特定のキーワードを
     使って検索することが多い場合は、カスタムコマンドを定義することもできま
     す(*note アジェンダのコマンド選択::)。
     特定のTODOキーワードと合致するものを検索するのは、タグ検索の１機能として行
     うこともできます(*note タグの検索::)。

リモートでTODOアイテムを編集するということの意味は、1つのキーを入力すること
でTODOエントリーの状態を変更できるということです。TODOリストの中で利用できる
コマンドは*note アジェンダのコマンド::の記述を参考にしてください。

通常グローバルなTODOリストには、TODOキーワードのついたすべて見出しが表示され
ます。このリストは大変長いものになる場合もあります。それをコンパクトにするに
は２つの方法があります。
   - TODOアイテムが、実行するために_scheduled_となっている、あるいは、もは
     や_open_となっている_deadline_(*note
     タイムスタンプ::)を持っているかどうかを
     確認したい人もいるでしょう。`org-agenda-todo-ignore-scheduled'、
     `org-agenda-todo-ignore-deadlines'、`org-agenda-todo-ignore-timestamp'
     および／または`org-agenda-todo-ignore-with-date'という変数を設定し、グ
     ローバルなTODOリストから取り除くことができます。

   - TODOアイテムがサブタスクにブレイクダウンされた下位のレベルを持っている
     かもしれません。そういった場合は、最上位のTODOの見出しを表示すれば十分
     で、グローバルなリストからは下位のレベルの項目は省略してもよい場合があ
     ります。そういったときは`org-agenda-todo-list-sublevels'変数を設定する
     ことで可能となります


File: org-ja,  Node: タグとプロパティとのマッチング,  Next: タイムライン,  Prev: グローバルなTODOリスト,  Up: 組み込みのアジェンダビュー

10.3.3 タグとプロパティとのマッチング
----------------------------------------------------

アジェンダファイルの中の見出しに_tags_(*note
タグ::)がついていたり、あるいは属性 (*note
プロパティとカラム::)がついていたときは、このメタデータに基づいて見出しを選
択し、アジェンダバッファに収集することができます。この項で述べている検索構文
は`C-c / m'を用いたツリーの抽出を行うときも適用できます。

`C-c a m     (`org-tags-view')'
     　一組のタグのセットに合致したすべての見出しの
     リストを作成します。選択の基準の入力を指示するコマンドでタグのついた論
     理式による表現で記入します。例えば、`+work+urgent-withboss'あるいは
     `work|home' というように(*note
     タグ::)。もしも特定の検索をよく行うならばそのためのカスタ
     ムコマンドを定義することができます(*note
     アジェンダのコマンド選択::)。

`C-c a M     (`org-tags-view')'
     `C-c a
     m'と似ていますが、not-DONEの状態にあるTODOアイテムの見出しから
     選択するもので、自動的にサブアイテムもチェックします
     (`org-tags-match-list-sublevels'変数参照)。予定／期限のついたアイテム
     を除外するには`org-agenda-tags-todo-honor-ignore-options'の変数を参照
     してください。特定のTODOキーワードをタグの一致と一緒に指定することも可
     能です。*note タグの検索::を参照してください。

   タグのリストで利用できるコマンドは*note
アジェンダのコマンド::のところで説明してい ます。

Match syntax
............

検索文字列ではANDの意味で`&'、ORの意味で`|'という論理式を使うことができます
。`&'は`|'よりも強く結びつけます。括弧（
）は現在準備されていません。検索のどの要素も、タグそのものか、正規表現でマッ
チしたタグか、あるいは`PROPERTY OPERATOR
VALUE'のような属性値にアクセスして
比較操作のできる値のいずれかになります。どの要素も`-'を先頭につけてそれ以外
のものを表現するか、`+'を先頭につけてポジティブな選択を行う、というような糖
衣構文（簡便な構文）で表現します。`&'でANDを取り扱うことは`+'、`-'で表現でき
るもののオプションです。下にタグだけをつかったいくつかの例を挙げておきました
。

`+work-boss'
     `:work:'というタグがついているが、`:boss:'というタグがついていない見出
     しを選択します。

`work|laptop'
     `:work:'または`:laptop:'というタグがついたものを選択します。

`work|laptop+night'
     前の文と同じですが、`:laptop:'の行には、同時に`:night:'というタグが付
     いている必要があります。

タグの代わりに、大括弧でくくられた正規表現により指定をすることもできます。例
えば、`work+{^boss.*}'と指定すると、`:work:'というタグのついた見出しで
`boss'という単語でstartingするタグがついているものに一致します。

   タグとマッチするものを探すと同時に属性(*note
プロパティとカラム::)の検索をすること
も可能です。属性としては実際の属性のほかに、他のメタデータで表現された特別な
属性(*note
スペシャルプロパティ::)にも対応しています。例えば、そのエントリーの中の
TODOキーワードで表現された`TODO'という「属性」。あるいは、そのエントリーの階
層を示す`LEVEL'という「属性」などです。そのため、`+LEVEL=3+boss-TODO="DONE"'
という検索式は、第3階層のすべての見出しの中で、`boss'というタグがついており
、TODOキーワードがDONEでは`ない'もののリストを表示します。
`org-odd-levels-only'という設定がなされているバッファでは`LEVEL'は＊の数を数
えるのではなく、`LEVEL=2'（2番目）
の階層は＊が３つある階層が該当します。

   いくつかの例を紹介します。
`work+TODO="WAITING"'
     `:work:'というタグがあるTODO行のうち、特にTODOキーワードが`WAITING'と
     なっている行を選択します。

`work+TODO="WAITING"|home+TODO="WAITING"'
     workとhomeというタグがついているWaitingとなっているタスク

属性の検索では、多数の異なる操作で属性の値をテストすることができます。複雑な
例を挙げます。

     +work-boss+PRIORITY="A"+Coffee="unlimited"+Effort<2         \
              +With={Sarah\|Denny}+SCHEDULED>="<2008-10-11>"

比較のタイプは比較の値がどのように書かれているかによります。
   -
     比較する値が普通の数字ならば、数値の比較が行われ、`<'、`='、`>'、`<='
     、`>='、および`<>'という操作が可能です。

   -
     比較する対象がダブルクォーテーションで囲まれている場合は、文字列の比較
     が行われ、前項と同じ操作が可能です。

   - もしも比較対象が、(`DEADLINE<="<2008-12-24
     18:30>"'のように)、ダブルク
     ォーテーション_および_角括弧<>で囲まれていた場合は、両方の値がOrg-mode
     流の標準的な日付・時刻の指定であると仮定し、それにそって比較を行います
     。いくつかの特別な値があります。`"<now>"'は（時刻も含めた）現在を示し
     、`"<today>"'、`"<tomorrow>"'はそれらの日の0:00つまり、時刻の指定が
     ないことを表します。同様に、`"<+5d>"'または`"<-2m>"'というような文字列
     は、それぞれ日、週、月、年を示す、`d'、`w'、`m'、`y'という単位がついて
     いるものとして使用されます。

   -
     もしも比較対象が中括弧｛｝でくくられていて、正規表現での比較がなされる
     ときは、`='は一致していることを示し、`<>'は一致していないことを示しま
     す。

そのため、例に掲げた検索文字列の意味は、`:work:'というタグがつけられているが
、`:boss:'というタグはついておらず、また、優先順位の値が`A'であり、
`:Coffee:'が`unlimited'という値であり、`Effort'
属性が数値で２より小さく、`:With:'の値が`Sarah\|Denny'であり、スケジュールが
2008年10月11日もしくはそれ以降に予約されたものを示しています。

TODO、LEVEL、CATEGORYを検索するときは短時間ですみます。それ以外の属性を検索
するときはいささか時間がかかります。しかしながら、一度高い代償を払って1つの
プロパティを検索したら、他の属性を追加して再び検索するときは安くあがります。

検索の際にOrg-modeで属性の継承という機能を使用するように設定することができま
すが、相当検索スピードが落ちることを覚悟してください。詳細は *note
プロパティの継承::参照。

逆互換として、さらにまたタイプのスピードを上げるために、検索においてTODOの状
態をテストする別の方法があります。このためには、検索文字列（それは`|'で結合
された複数の用語が含まれていると思いますが）のタグ・属性検索の部分を`/'を使
って終了させ、TODOキーワードを論理式で結んで指定します。その構文はタグの検索
で使用したのと似ていますが、よく考えて適用する必要があります。例えば、複数の
TODOキーワードが存在することを検索するには論理式のANDで結びつけても意味があ
りません。しかしながら、_negative
selection_（存在しないことを選択する場合）
では「AND」で結合することは意味を持ちます。これを確かめるには、実際にいくつ
かのTODOキーワードで、`C-c a
M'を用いて確認するだけです（そのほうがスピード
アップできます）。あるいはスラッシュのあとに`!'を記入して同時にTODOの部分を
開始します。`C-c a
M'または`/!'を使用したときは、DONEの状態にあるTODOキーワ
ードを検索することはできません。例えば、

`work/WAITING'
     `work+TODO="WAITING"'と同じ

`work/!-WAITING-NEXT'
     `:work:'を選択。ただしTODO行では`WAITING'と`NEXT'のどちらのタグもつい
     ていないもの

`work/!+WAITING|+NEXT'
     `:work:'を選択。TODO行に`WAITING'か`NEXT'かどちらかのタグがついている
     もの。


File: org-ja,  Node: タイムライン,  Next: 検索ビュー,  Prev: タグとプロパティとのマッチング,  Up: 組み込みのアジェンダビュー

10.3.4 Timeline for a single file
---------------------------------

タイムラインはひとつのOrg-modeファイルの中から_time-sorted
view_（時間順のビ
ュー）ですべてのタイムスタンプのついたアイテムをまとめてて表示します。このコ
マンドの主な目的は、あるプロジェクトに含まれているイベント全体の概要をつかむ
ためにあります。

`C-c a L     (`org-timeline')'
     すべてのタイムスタンプの付いたアイテムについて、
     Org-modeファイルの中で時間順のビューを提供します。`C-u'という前置引数
     をつけて呼び出したときは、現在の日付の時点で、すべての未完了のTODOエン
     トリー（予約されているものも、そうでないものも）を一覧にします。

タイムラインのバッファで利用できるコマンドは、*note
アジェンダのコマンド::にリスト 化されています。


File: org-ja,  Node: 検索ビュー,  Next: 詳細が未決定なプロジェクト,  Prev: タイムライン,  Up: 組み込みのアジェンダビュー

10.3.5 検索ビュー
----------------------

アジェンダのビューではOrg-modeのエントリーに対する一般的なテキスト検索機能を
持っています。これはノートを探すのに特に役に立ちます。

`C-c a s     (`org-search-view')'
     　このコマンドは特別な検索のためのもので、論
     理式を使って、文字列または特定の単語に合致するエントリーを選択します。
   例えば、`computer equipment'という検索文字列は、`computer
equipment'という1
つの文字列が含まれているエントリーを検索するでしょう。もしも、２つの単語が、
1つ以上のスペースまたは改行で分かれていても、依然として一致するものを検索す
るでしょう。検索ビューでは、エントリーの中にある特別なキーワードについて論理
式を使って検索することもできます。`+computer +wifi -ethernet
-{8\.11[bg]}'
という検索文字列では、次のようなノートエントリーを検索します。`computer'と
`wifi'というキーワードを含んでおり、`ethernet'というキーワードは含まれておら
ず、`8\.11[bg]'という正規表現を含んでいない、すなわち8.11bおよび
8.11gともに含まれていないという意味ですが、エントリーを検索します。最初の
`+'は単語検索を開始するために必要ですが、ほかの`+'はオプションです。詳しく知
りたい場合は、`org-search-view'というコマンドのドキュメント文字列を参照して
ください。

   アジェンダファイルに加えて、このコマンドは
`org-agenda-text-search-extra-files'の中で一覧になっているファイルもまた検索
するということに注意してください。


File: org-ja,  Node: 詳細が未決定なプロジェクト,  Prev: 検索ビュー,  Up: 組み込みのアジェンダビュー

10.3.6 詳細が未決定なプロジェクト
----------------------------------------------

もしもあなたが、以下に述べるようなDavid
Allen氏のGTDのようなシステムであなたの仕事を管理しているならば、あなたが抱え
ている「義務」のひとつは、すべてのプロジェクトが進んでいるかを明確にするため
に、レビューを定期的に行うことです。_詳細が未決定_のプロジェクトは、次の行動
が何も定義がされていないため、Org-modeが提示するTODOリストに、全く何も表示さ
れることがないのです。レビューをする際に、そういったプロジェクトを明確にし、
それらのプロジェクトための次の行動を定義することが必要です。

`C-c a #     (`org-agenda-list-stuck-projects')'
     　詳細が未決定のプロジェクトリ スト

`C-c a !'
     `org-stuck-projects'の変数をカスタマイズすることで何が詳細が未決定のプ
     ロジェクトで、どうやったらそういうプロジェクトを発見できるかを定義する
     ことができます。

あなたは九分九厘このコマンドが機能するために、このビューを定義する必要があり
ます。あらかじめビルトインされているデフォルトの設定では、すべてのあなたのプ
ロジェクトは第2階層の見出しに記述されており、あるプロジェクトが未決定である
とはいえない状況とは、すくなくとも1つのエントリーにTODOまたはNEXTまたは
NEXTACTIONという印がつけられている場合です。

Org-modeを使う際に、あなた自身の方法でアプローチするとして、PROJECTというタ
グがあるものをプロジェクトと定義し、プロジェクトがまだ検討する段階にないとい
うことを示すためにTODOキーワードでMAYBEと書いているものと仮定しましょう。さ
らにTODOキーワードでDONEという印の付いたものは完了したプロジェクトであると仮
定しましょう。そしてまたNEXTもしくはTODOと書かれたものはNextActionであると仮
定しましょう。@SHOPというタグがついたときはNEXTというタグが付いていなくても
、ショッピングに行くという次の行動を示しているとします。最終的に、もしもプロ
ジェクトにIGNORE（無視）という特別なキーワードがどこかについていたら、それは
リストに表示されないものとします。このようなケースの場合、タグ・
TODO(1)が`+PROJECT/-MAYBE-DONE'とマッチし、さらにサブツリーに
TODO、NEXT、@SHOP、およびIGNOREというタグが付いているようなプロジェクトは、
詳細が未決定のプロジェクトではないといえます。このようなカスタマイズを正しく
定義するには、

     (setq org-stuck-projects
           '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@SHOP")
                                    "\\<IGNORE\\>"))

もしもあるプロジェクトが詳細が未決定のプロジェクトではないと定義されたならば
、そのエントリーのサブツリーは依然として詳細が未決定のプロジェクトとして検索
されるということに注意してください。

   ---------- Footnotes ----------

   (1) *Note タグの検索::.


File: org-ja,  Node: 表示とソート,  Next: アジェンダのコマンド,  Prev: 組み込みのアジェンダビュー,  Up: アジェンダビュー

10.4 表示とソート
=======================

アジェンダビューにアイテムが表示される前に、Org-modeではそのアイテムを表示し
並び替える準備を行っています。それぞれのアイテムは1行を占めます。その行には
その項目の_category_ (*note
カテゴリ::)を含んだ_prefix_とそれ以外の重要な情報を含んでいます。あなたは
`org-agenda-tags-column'を使って表示されるコラムタグをカスタマイズすることが
できます。`org-agenda-prefix-format'のオプションを使用して前置引数をカスタマ
イズすることができます。この前置引数は、そのアイテムに関連するアウトラインの
見出しの最新のバージョンに従います。

* Menu:

* カテゴリ::             全てのタスクが同じであるとは限らない
* 時刻の仕様::          アジェンダはどうやって時間を知るか
* アジェンダの項目をソートする::  物事の順番


File: org-ja,  Node: カテゴリ,  Next: 時刻の仕様,  Prev: 表示とソート,  Up: 表示とソート

10.4.1 カテゴリ
-------------------

カテゴリーとは、それぞれのアジェンダアイテムに割り当てられた幅の広いラベルで
す。デフォルトでは、カテゴリーはファイルの名前から単純に作成されます。しかし
、バッファ上で特別な行を足すことでそれを指定することができます。(1)

     #+CATEGORY: Thesis

もしもあなたが、1つのエントリーもしくは1つの（サブ）ツリーに特別なCATEGORYを
持たせたいと望むのならば、そのエントリーに、値として適用したいと思っている特
別なカテゴリーを`:CATEGORY:'という属性に設定しなさい。

アジェンダバッファの表示は、そのカテゴリーが10文字以上長くしない方が見栄えが
良いです。

あなたは`org-agenda-category-icon-alist'変数をカスタマイズすることで、カテゴ
リーにアイコンを設定することができます。

   ---------- Footnotes ----------

   (1) 逆に言うと
、以下のような動作も生じます。もしも1つのファイルの中に、いくつかののそうい
う行が存在するならば、それよりも下の行にあるテキストに、そのカテゴリーをそれ
ぞれ指定することになります。最初のカテゴリーは、その最初のCATEGORYの行はより
も前にあるどのテキストにも適用されます。しかしながら、_strongly_という手法を
使うことは、文書のアウトライン構造と非互換であることを、_強く_非難することに
なります。複数のカテゴリーをバッファの中で設定する正しい方法は属性を使用する
ことです。.


File: org-ja,  Node: 時刻の仕様,  Next: アジェンダの項目をソートする,  Prev: カテゴリ,  Up: 表示とソート

10.4.2 時刻の仕様
----------------------

Org-modeは時刻の仕様に基づいて、それぞれのアジェンダアイテムをチェックします
。時刻は、例えば、`<2005-05-10 Tue 19:00>'のように、アジェンダの中に含まれ
ているものをトリガーとしたタイムスタンプの一部です。時間の幅は２つのタイムス
タンプで指定され、例えば`<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>'の
ように記載されます。

そのエントリー自身の見出しの中で、時刻（時間）はプレーンなテキストとして（
`12:45'や`8:30-1pm')のように表示されます。もしもアジェンダがEmacsのダイアリ
ー(*note
毎週／毎日のアジェンダ::)と一体化されていたときは、ダイアリーのエントリー
の中で指定した時間は、同様に認識されます。

アジェンダの表示のために、Org-modeは時間を引き出し、前置引数の一部として標準
的な24時間のフォーマットでそれを表示します。前の段落に書かれた時間の例は、ア
ジェンダの中で結局以下のように表示されます。

         8:30-13:00 Arthur Dent lies in front of the bulldozer
        12:45...... Ford Prefect arrives and takes Arthur to the pub
        19:00...... The Vogon reads his poem
        20:30-22:15 Marvin escorts the Hitchhikers to the bridge

もしもアジェンダが一日モードであるならば、あるいは今日を表示しているならば、
時間設定されたエントリーは、次のような時間のグリッドに埋め込まれます。

         8:00...... ------------------
         8:30-13:00 Arthur Dent lies in front of the bulldozer
        10:00...... ------------------
        12:00...... ------------------
        12:45...... Ford Prefect arrives and takes Arthur to the pub
        14:00...... ------------------
        16:00...... ------------------
        18:00...... ------------------
        19:00...... The Vogon reads his poem
        20:00...... ------------------
        20:30-22:15 Marvin escorts the Hitchhikers to the bridge

時間のグリッドは、`org-agenda-use-time-grid'変数で表示したりしなかったさせる
ことができます。そしてまた`org-agenda-time-grid'で設定をすることができます。


File: org-ja,  Node: アジェンダの項目をソートする,  Prev: 時刻の仕様,  Up: 表示とソート

10.4.3 アジェンダの項目をソートする
-------------------------------------------------

ビューに書き出される前に、各アイテムは並び替えが行われます。この並び替えはビ
ューのタイプによって決まります。
   * 一日／一週間のアジェンダでは、それぞれの日の各アイテムは順番に並びます
     。デフォルトの順番は、明示的に日付と時刻の指定を含んでいるアイテムを、
     最初に集めます。これらのアイテムは、その日の_スケジュール_に応じて、リ
     ストの最初から順番に表示されます。その次に、各アイテムは
     `org-agenda-files'によって決められた順番に、カテゴリーごとにグループ分
     けされます。それぞれのカテゴリーの中で、各アイテムは優先順位
     (*note
     プロパティ::)に従って並び替えられます。優先順位は基本的な優先順位で構
     成されます（優先順位`A'ならば2000、`B'ならば1000、`C'ならば0として）。
     さらに、予定あるいはデッドラインを過ぎているアイテムのウエイトが追加さ
     れます。

   *
     TODOリストでは、各アイテムはカテゴリーの順番に並び替えられますが、各カ
     テゴリーの中では、優先順位(*note
     プロパティ::)によって並び替えられます。優先
     順位は、優先順位の記号に従って並べ替えられます。さらに、アイテムが実行
     する日あるいは予約した日にどれだけ近いかということも考慮されます。

   *
     タグでの一致については、項目は並び替えは行われず、アジェンダファイルの
     中で一致した項目が発見された順番に従って表示されるのみです。

並び替えは、`org-agenda-sorting-strategy'変数でカスタマイズすることができま
す。そして、並び替えはそのエントリーの工数の見積りに基づく評価も含まれます。


File: org-ja,  Node: アジェンダのコマンド,  Next: カスタムアジェンダビュー,  Prev: 表示とソート,  Up: アジェンダビュー

10.5 Commands in the agenda buffer
==================================

アジェンダバッファでのエントリーは、その項目が作成されたOrg-modeファイルと日
記ファイルの間でリンクされます。アジェンダバッファでは編集することはできませ
んが、コマンドを使って、そのエントリーがある場所を表示したり、ジャンプして、
アジェンダバッファから「遠隔的に」Org-modeファイルを編集することができます。
この方法で、すべての情報は１度書き込めばよく、あなたがアジェンダとノートのフ
ァイルが別の情報になるというリスクを避けることができます。

いくつかのコマンドはアジェンダの行上でマウスをクリックすることで実行されます
。それ以外のコマンドは、必要とされる行の中にカーソルが置かれている必要があり
ます。

Motion
......

`n     (`org-agenda-next-line')'
     　次の行へ(<up>及び`C-p'と同じ)。

`p     (`org-agenda-previous-line')'
     　次の行へ(<down>及び`C-n'と同じ)。

View/Go to Org file
...................

     　

`<SPC>  or  mouse-3     (`org-agenda-show-and-scroll-up')'
     　
     そのアイテムのオリジナルの場所を別のウインドウで表示する。前置引数を使
     うことで、見出しだけでなく、アウトライン上にエントリー全体を明確に表示
     する。

`L     (`org-agenda-recenter')'
     　オリジナルの場所を表示し、ウインドウの センターに再配置する。

`<TAB>  or  mouse-2     (`org-agenda-goto')'
     　別のウインドウ でそのアイテムのオリジナルの場所に移動する。

`<RET>     (`org-agenda-switch-to')'
     　そのアイテムのオリジナルの場所に移動し、
     他のウインドウは削除する。

`F     (`org-agenda-follow-mode')'
     Followモードをトグルする。Followモードではアジェンダバッファ上でカーソ
     ルを動かすと、Org-modeファイルの中で、別のウインドウ上で対応する場所を
     表示する。新しいアジェンダバッファの中でこのモードの初期設定値は、
     `org-agenda-start-with-follow-mode'変数で設定することができる。

`C-c C-x b     (`org-agenda-tree-to-indirect-buffer')'
     　間接的なバッファの中で
     カレントアイテムのサブツリー全体を表示する。数値付きの前置引数Nをつける
     と、第N階層まで階層を上がり、そのツリーを取得する。もしもNがマイナスな
     らば、多くの階層まで上がる。`C-u'という前置引数を付けた場合は、既に使
     われた間接的バッファは消去されない。

`C-c C-o     (`org-agenda-open-link')'
     　エントリーの中にあるリンクをフォローす
     る。この機能は、参照されているOrg-modeのノードに属しているテキストの中
     に含まれているいくつかのリンクの中から選択するという機能を提供する。も
     しもリンクが1つしかない場合は、選択画面を表示せずに、そこにリンクを貼る。

Change display
..............

`o'
     他のウインドウを削除します。

`v d  or short  d     (`org-aganda-day-view')'
`v w  or short  w     (`org-aganda-day-view')'
`v m     (`org-agenda-month-view')'
`v y     (`org-agenda-month-year')'
`v SPC     (`org-agenda-reset-view')'
     日／週／月／年のビューを切り替えます。日または週にビューを切り替えたと
     きは、この設定は、それに続くアジェンダの更新ついてのデフォルトの設定と
     なります。月および年のビューは、作成するために時間を要するので、デフォ
     ルトとはしていません。数字の付いた前置引数をつけると、その年、ISOの週
     、月、年の指定した日に直接ジャンプします。例えば`32
     d'と書いたときは2 月1日、`9
     w'と書いたらISOの週番号が9を指します。日、週あるいは月のビュ
     ーを設定したときは、1年は同様に前置引数の中でコード化されます。例えば
     、`200712
     w'と書いたときは2007年の第12週にジャンプするでしょう。もしも
     そのような年の指定を、1桁もしくは2桁の数字で行いたいたときは、1938年か
     ら2037年の間に位置づけられます。`v
     <SPC>'によって、`org-agenda-span'で
     の設定をリセットすることができます。

`f     (`org-agenda-later')'
     　時間を前の日 付の表示へと遡ります。

`.     (`org-agenda-goto-today')'
     　今日へ移動します。

`j     (`org-agenda-goto-date')'
     　日付の選択画面でその日に移動します。

`J     (`org-agenda-clock-goto')'
     　アジェンダバッファの中で現在時間を計測中の タスクに移動します。

`D     (`org-agenda-toggle-diary')'
     　日記のエントリーに含 めるかどうかトグルします。参照*note
     毎週／毎日のアジェンダ::.

`v l  or short  l     (`org-agenda-log-mode')'
     Logbook modeにするかどうかをトグルします。Logbook
     modeの中では、ログの 取得中に(変数
     `org-log-done')DONEと印が付けられたエントリーが、その日の時刻を持って
     いるエントリーとして、アジェンダの中に表示されます。
     `org-agenda-log-mode-items'変数を用いてlogモードに含まれるエントリーの
     タイプを設定することができます。`C-u'という前置引数をつけて呼び出すと
     、状態の変化を含め、すべてのおこりうるlogbookのエントリーを表示できる
     でしょう。`C-u
     C-u'という2つの前置引数をつけて呼び出すと、ログの情報の
     みが表示され、それ以外は表示されません。`v L'は、`C-u v
     l'と等価です。

`v [  or short  [     (`org-agenda-manipulate-query-add')'
     　現在のビューに、不活性のタイ
     ムスタンプを含めます。週／日のアジェンダとタイムラインビューのみです。

`v a     (`org-agenda-archives-mode')'
`v A     (`org-agenda-archives-mode 'files')'
     　
     Archivesモードをトグルします。Archivesモードでは、`ARCHIVED'と印された
     ツリーもまたアジェンダを作成するときにスキャンされます。大文字の`A'を
     使用したときは、全てのアーカイブファイルを含みます。archives
     modeから出るためには、再度`v a'を押してください。

`v R  or short  R     (`org-agenda-clockreport-mode')'
     Clockreportモードをトグルします。Clockreportモードでは、日／週のアジェ
     ンダは、時間軸のための時刻のついた表を表示し、カレントのアジェンダビュ
     ーでカバーされる範囲をファイルします。新しいアジェンダバッファの中で、
     このモードの初期設定は、`org-agenda-start-with-clockreport-mode'変数で
     設定することができます。このモードをトグル(すなわち `C-u
     R')している時に、前置引数を使用することで、アジェンダフィルター
     (1)によって隠されているエントリーからの情報を表示しないでしょう。

`v E  or short  E     (`org-agenda-entry-text-mode')'
     entry text modeをトグルします。entry text
     modeでは、アジェンダ行によって参照されているOrg-modeのアウトラインのノ
     ードから、多数の行が、その行の下に表示されるでしょう。最大の行数は、
     `org-agenda-entry-text-maxlines'変数で指定します。数値付きの前置引数を
     付けて、このコマンドを呼び出すと、前置引数の値の数によって、即座に修正
     されます。

`G     (`org-agenda-toggle-time-grid')'
     時間のグリッドの表示をトグルします。`org-agenda-use-time-grid'と
     `org-agenda-time-grid'変数を参照してください。

`r     (`org-agenda-rodo')'
     　ア
     ジェンダバッファを再構築する。例えば、`S-<left>'と`S-<right>'を使って
     、アイテムのタイムスタンプを改修したあと、その変更を反映するために。そ
     のバッファがグローバルなTODOリストの場合は、指定したTODOキーワードを選
     択できるリストを作成するために、前置引数を解釈します。

`g     (`org-agenda-rodo')'
     　カレントのEmacsのセッションにおいて、すべての
     Org-modeのバッファを保存します。あわせてIDの場所も。

`C-c C-x C-c     (`org-agenda-columns')'
     アジェンダバッファの中でカラムビュー(*note
     カラムビュー::)を作成します。カラ
     ムビューのフォーマットは、その時点のエントリーから作成され、あるいは(
     もしも、その時点でエントリーが存在しないなら)、アジェンダビューの最初
     のエントリーから作成されます。そのエントリーのためのフォーマットが何で
     あれ、(プロパティから、`#+COLUMNS'という行から、あるいは
     `org-columns-default-format'変数のデフォルトから作成された)オリジナル
     のバッファに存在しているエントリーのフォーマットがアジェンダで使用されます。

`C-c C-x >     (`org-agenda-remove-restriction-lock')'
     　もしもファイルまたはサ
     ブツリーをその時点で制限しているならば、アジェンダをロックする制限を取
     り除きます。 (*note アジェンダファイル::).

Secondary filtering and query editing
.....................................

`/     (`org-agenda-filter-by-tag')'
     タグおよび（または）工数の見積りに対して、カレントのアジェンダビューに
     フィルターをかけます。これとカスタムなアジェンダコマンドとの間の差異は
     、このフィルターが非常に早いということです。このため、あなたは、アジェ
     ンダ（注１）を再表示することなく、異なるフィルターの間を素早く切り替え
     ることができます。(2)

     タグ選択の文字を入力しましょう。<SPC>はタグの全てを意味しています。入
     力部分で<TAB>を押すと、選択するタグの補完機能を使用できます(すべてのタ
     グに選択用の文字が指定されているとはかぎりません)。そして、そのコマン
     ドは、このタグを含んでいないか継承していないエントリーを全て隠します。
     前置引数をつけて呼び出した場合は、そのタグを持っているエントリーを削除
     さえしてしまいます。入力部で2番目の`/'はフィルターを終了し、隠されてい
     るエントリーを再度出現させます。もしも最初に入力したキーが、`+'または
     `-'ならば、前のフィルターは、選択された新たなタグの要求あるいは禁止に
     応じて、幅を狭くします。`/'の後に、`+'あるいは`-'を入力する代わりに、
     `\' コマンドを即座に使用することもできます。

     工数見積のフィルターをかけるために、予め認められている汎用的な工数を設
     定すべきです。例えば
          (setq org-global-properties
              '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
     あなたは、`<'、`>'および`='のひとつの操作を最初に入力することで、工数
     のためのフィルターをかけることができます。それから、あらかじめ認められ
     た値のリストの中で、工数見積りのインデックスの数字を入力します。そこで
     は`0'は１０番目の値を意味します。フィルターは選択された値よりも、以下
     、イコール、以上であるかによって限定されます。もしも0-9のキーがタグへ
     のアクセスキーとして使用されていないならば、単純にあなたは操作コマンド
     を利用することなく、直接インデックスとなる数字を入力するだけです。この
     場合`<'が仮定されます。操作のアプリケーションのために、定義された工数
     がないエントリーでは、`org-sort-agenda-noeffort-is-high'変数の値に従っ
     て取り扱われます。工数の定義のないタスクにフィルターをかけるには、`?'
     を操作の値として入力します。

     Org-modeはまた、コンテクストに対応したタグのフィルターを自動的にサポー
     トしています。もしも、`org-agenda-auto-exclude-function'変数の値が、ユ
     ーザーが定義した機能に設定されているときは、その機能によって、どのよう
     なタグがアジェンダから自動的に排除されるかを決定します。一度この機能が
     設定されると、それによって、`/'コマンドは、`RET'
     をサブのオプションキーとして受け付け、自動的に排除ロジックを走らせます
     。例えば、いってみれば、ネットワークへのアクセスを必要とするタスクを定
     義するために`Net'というタグ、街での用事のために`Errand'というタグ、電
     話を掛けなければならないときに`Call'というタグを使用しているとします。
     あなたは、インターネットを利用できるかどうか、仕事時間外にあるかどうか
     、このような状況に基づいて、これらのタグを自動的に排除することができる
     のです。

          (defun org-my-auto-exclude-function (tag)
            (and (cond
                  ((string= tag "Net")
                   (/= 0 (call-process "/sbin/ping" nil nil nil
                                       "-c1" "-q" "-t1" "mail.gnu.org")))
                  ((or (string= tag "Errand") (string= tag "Call"))
                   (let ((hour (nth 2 (decode-time))))
                     (or (< hour 8) (> hour 21)))))
                 (concat "-" tag)))

          (setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)

`\     (`org-agenda-filter-by-tag-refine')'
     追加の条件によってカレントのアジェ
     ンダフィルターをナローイングします。前置引数を用いてコマンドを呼び出し
     たときは、まさにタグがついているエントリー、あるいは工数の基準にまさに
     合致するエントリーを削除する。`/'コマンドのあとの最初のキーとして、
     `+'あるいは`-'を押すことで同様の効果を達成することができる。

`[ ] { }'

    in search view
          新しい検索の単語(`['と`]')、あるいは新しい正規表現(`{'と`}')をクエリ
          文字列に追加する。開いた角括弧／大括弧は、`+'という接頭辞のついたポジ
          ティブな検索用語を追加する。この検索用語は、必ずそのエントリーに発生／
          合致しなければならないことを示す。閉じた角括弧／大括弧は、ネガティブな
          検索用語を追加し、それは、選択されているエントリーの中で、絶対に発生／
          合致しないということである。

Remote editing
..............

`0-9'
     Digit argument.

`C-_     (`org-agenda-undo')'
     　外部の編集コマンドでの変更を元に戻す。この変更はアジ
     ェンダバッファと外部のバッファの両方を元に戻す。

`t     (`org-agenda-todo')'
     　アイテ
     ムのTODOのステータスを変更する。アジェンダファイルでもオリジナルのOrgファイ
     ルでも有効である。

`C-S-<right>     (`org-agenda-todo-nextset')'

`C-S-<left>     (`org-agenda-todo-previousset')'
     　次／前のTODOキーワードのセットへと 切り替える。

`C-k     (`org-agenda-kill')'
     オリジナルのOrgファイルの中で、そのアイテムが属しているサブツリー全体と共に
     、カレントのアジェンダアイテムを削除する。もしも外部ファイルの削除するテキス
     トが１行以上ならば、削除を行うには、ユーザーが指定する必要がある。
     `org-agenda-confirm-kill'変数を参照のこと。

`C-c C-w     (`org-agenda-refile')'
     　その 時点でそのエントリーを差し替える。

`C-c C-x C-a  or short  a     (`org-agenda-archive-default-with-confirmation')'
     `org-archive-default-command'に設定されたデフォルトのアーカイブコマンドを使
     用して、その時点でエントリーに対応したサブツリーをアーカイブする。`a'キーを
     使用したときは、承認が必要である。

`C-c C-x a     (`org-agenda-toggle-archive-tag')'
     　カレントの見出しのためのARCHIVEタグをトグルする。

`C-c C-x A     (`org-agenda-archive-to-archive-sibling')'
     　カレントエントリーに対応
     したサブツリーを、_アーカイブファイル_に移動する。

`C-c C-x C-s  or short  $     (`org-agenda-archive')'
     　カレントの見出しに対応したサブツリーをア
     ーカイブする。これは、設定されたアーカイブの場所に、多くの場合それは異なるフ
     ァイルであるが、エントリーを移動することを意味している。

`T     (`org-agenda-show-tags')'
     カレントアイテムと関連づけられたすべてのタグを表示する。もしも、あなたたが
     `org-agenda-show-inherited-tags'機能を停止しているにもかかわらず、依然として
     、たびたび見出しのすべてのタグを確認したいというときに役に立つ。

`:     (`org-agenda-set-tags')'
     　カレントの見出しにタグを設定する。もしもアジェンダ
     の中にアクティブなリージョンがあるときは、そのリージョンの中ですべての見出し
     用としてタグを変更する。

`,'
     カレントアイテムに優先順位を設定する。(`org-agenda-priority')　Org-modeは優
     先順位を表す文字を指示します。もしも、<SPC>を使って返答すると、優先順位のク
     ッキーがそのエントリーから取り除かれる。

`P     (`org-agenda-show-priority')'
     　カレン トアイテムの優先順位の重み付けを表示する。

`+  or  S-<up>     (`org-agenda-priority-up')'
     　カレントアイテムの優先順位を高くする。優先順位はオリジナルのバッファで変更
     される。しかしアジェンダ上では並び替えの更新は行われない。このためには、`r'
     キーを使用する。

`-  or  S-<down>     (`org-agenda-priority-down')'
     　カレントアイテムの優先順位を低くする。

`z  or  C-c C-z     (`org-agenda-add-note')'
     そのエントリーにのノートを追加する。このノートは記録され、ノートが置かれてい
     る状態を変更した同じ場所にファイルされる。`org-log-into-drawer'によって、こ
     れは引き出しの中に入る。

`C-c C-a     (`org-attach')'
     　すべてのコマンドの選択画面は、 付属するものに関連づけられる。

`C-c C-s     (`org-agenda-schedule')'
     　このアイテムを
     予約する。前置引数をつけると、予約のタイムスタンプが削除される。

`C-c C-d     (`org-agenda-deadline')'
     　このアイテムにデッドラインを設定する。前置引
     数をつけるとデッドラインが削除される。

`k     (`org-agenda-action')'
     　カーソルの置か
     れた日付に選択されたアイテムの日付を設定するための、アジェンダのアクション。
     このコマンドはカレンダーでも動作する！コマンドは追加されたキーで入力する。
          m   その地点でアクションのためにエントリーにマークする。複数のエントリーに対
          しても可能である。
              Org-modeでは次を伴う`C-c C-x C-k'.
          d   その時点の日付でマークされたエントリーのデッドラインを設定する。
          s   その時点の日付でマークされたエントリーを予約する。
          r   デフォルトの日付としてカーソルの日付とともに`org-capture'を呼び出す。
     アジェンダを更新した後に、`r'を押すと、コマンドの効果を確認できる。

`S-<right>     (`org-agenda-do-date-later')'
     　カレント行に関連づけられたタイムスタン
     プを１日先に変更する。数値付きの前置引数をつけると、その数字の日数分だけ先に
     変更する。例えば、`3 6 5
     S-<right>'と入力すると１年先に変更される。`C-u'とい
     う前置引数をつけると、１時間ずつ時間を変更する。もしもあなたが、同じコマンド
     を即座に繰り返したいときは、前置変数を付けなくても１時間単位で変化し続けるで
     しょう。二重の`C-u
     C-u'という前置引数をつけると、同様に分単位で変更される。
     オリジナルのOrg-modeファイルの中でタイムスタンプは変更されるが、その変更はア
     ジェンダバッファには直接は反映されない。バッファを更新するには、`r'または
     `g'を使用する。

`S-<left>     (`org-agenda-do-date-earlier')'
     　カレント行のに関連づけ られたタイムスタンプを1日過去に変更する。

`>     (`org-agenda-date-prompt')'
     　カレン
     ト行に関連づけられたタイムスタンプを変更する。`>'キーが選択される。というの
     は、私のキーボード上では`S-.'と同じだからである。

`I     (`org-agenda-clock-in')'
     　カ
     レントアイテムの時計をスタートする。もしもすでに時計が動いているのならば、ま
     ずそれが停止する。

`O     (`org-agenda-clock-out')'
     　すでにスタートした時計を停止する 。

`X     (`org-agenda-clock-cancel')'
     　カレントで動いている時計をキャンセルする。

`J     (`org-agenda-clock-goto')'
     　別のウインドウの中の動いている時計にジャンプする 。

Bulk remote editing selected entries
....................................

`m     (`org-agenda-bulk-mark')'
     　大量のアクションについて、その時点でエントリーにマ
     ークをつける。前置引数を付けると、多くの連続したエントリーにマークをつける。

`U     (`org-agenda-bulk-remove-all-marks')'
     　大量のアクションのマークを取り除く。

`U     (`org-agenda-bulk-remove-all-marks')'
     　大量のアクションのためにマークがつけら
     れたエントリーのマークを取り除く。

`B     (`org-agenda-bulk-action')'
     　大量のアクショ
     ン。アジェンダの中ですべてのマークをつかられたエントリーについて実行する。こ
     の機能では、適用されるアクションを選択するために、別のキーを入力する。`B'に
     前置引数をつけると、`s'や`d'のコマンドをパスして、これらの特別なタイムスタン
     プをまとめて取り除く。
          r  １つのリフィル上のターゲットに入力しすべてのエントリーを移動する。そのエン
          トリーは
             アジェンダ上には表示されなくなる。再表示(`g')によって再度表示される。
          $  選択されているエントリーをすべてアーカイブする。
          A  エントリーをアーカイブし、それぞれを所定のアーカイブ先に移動する。
          t  TODOの状態を変更する。これはTODOキーワード1文字を入力し、そして
             選択されたエントリーすべての状態を変更する。それはブロックしているのを無視
          し
             ログのノートを抑え込んで（タイムスタンプは別です）。
          +  選択されたエントリーのすべてにタグを付加する。
          -  選択されたエントリーのすべてから、タグのひとつを削除する。
          s  すべてのアイテムに新しい日付で予約する。すでに予約がついていれば、日数分だ
          け
             日付を更新する。入力欄でプラスを２つつけて何かの数字を最初に打つことで。
             例えば、`++8d'とか`++2w'のように。
          S  N日を指定して、それぞれをリスケジュールする。Nは入力欄で指定する。前置引数

             (`C-u B S')をつけることで、平日のみに指定できる。
          d  指定した日をデッドラインとして設定する。

Calendar commands
.................

`c     (`org-agenda-goto-calendar')'
     　Emacsのカレンダーを開き、アジェンダのカーソル
     の置かれている日付に移動します。

`c     (`org-calendar-goto-agenda')'
     　すでにカレンダ
     ーの中にあるときは、カーソルの置かれている日付で計算し、Org-modeのアジェンダ
     を表示します。

`i     (`org-agenda-diary-entry')'
     カーソルの置かれている日付および（ブロックエントリーでは）マークされた日付を
     使って、新しいエントリーを日記に書き込みます。この機能ではEmacsの日記ファイ
     ル(3)に追加することになります。ある意味では、カレンダーの
     `i'コマンドと似た機能です。日記ファイルは別のウインドウにポップアップし、そ
     こでエントリーを書き加えることができます。

     もしもOrg-modeファイルに`org-agenda-diary-file'
     を指定したならば、Org-modeではそのファイルの中に（Org-modeの構文を使って）日
     記の代わりに、エントリーを作成することができます。ほとんどのエントリーは、日
     付を元にしたアウトラインのツリーの中に記述されており、あとで過去の月／年の中
     から予定をアーカイブするのを簡単にします。そのツリーは、`DATE_TREE'属性か、
     最上位のエントリーとして、年という属性を持ったエントリーのもとに構築されてい
     ます。Emacsでエントリーのテキストを入力するようプロンプトが表示されるでしょ
     う。もしもあなたがそれを指示するならば、さらなる連携なく、
     `org-agenda-diary-file'にそのエントリーを作成することになるでしょう。テキス
     トを入力することなく、その入力欄で直接<RET>を入力したら、そのターゲットとな
     るファイルがその場でのエントリーを終了させ、別のウインドウが表示されるでしょ
     う。`k r'コマンドを参照してください。

`M     (`org-agenda-phases-of-moon')'
     　その日を 中心として3ヶ月間の月齢を表示する。

`S     (`org-agenda-sunrise-sunset')'
     　日の出と日
     の入りを表示する。地理上の場所によって、カレンダーの変数が設定される。Emacs
     のcalendarの章を参照のこと。

`C     (`org-agenda-convert-date')'
     　カーソルの置かれて
     いる日付によって、多くの他の文化的・歴史的なカレンダーに変換する。

`H     (`org-agenda-holidays')'
     　カーソルのある日付を中心に3ヶ月間の祝祭日を表示する 。

`M-x org-export-icalendar-combine-agenda-files'
     すべてのアジェンダファイルからエントリーを含んだiCalendar形式のファイルにエ
     クスポートする。これはグローバルに利用できるコマンドで、そしてまたアジェンダ
     メニューの中で利用できるコマンドです。

Exporting to a file
...................

`C-x C-w     (`org-write-agenda')'
     アジェンダビューを1つのファイルに書き出します。選択したファイル名の拡張子に
     従って、そのビューは、HTML
     (拡張子が`.html'または`.htm')、Postscript (拡張子`.ps')、PDF
     (拡張子`.pdf')、そしてプレーンテキスト(その他の拡張子）などにエクスポートさ
     れます。`C-u'という前置引数を用いてコマンドを呼び出したならば、即座に新しく
     作成されたファイルが開きます。エクスポートの間に使用されている`ps-print'およ
     び`htmlize'のためのオプションを設定するために、
     `org-agenda-exporter-settings'変数を使用します。

Quit and Exit
.............

     　

`q     (`org-agenda-quit')'
     　アジェンダを終了し、アジェンダバッファ を削除しますｓ。

`x     (`org-agenda-exit')'
     　アジェンダを終了し、アジェンダバッファとアジェンダを編
     集するためにEmacsで読み込まれたすべてのバッファを削除する。Org-modeファイル
     を読み込むためにユーザーによって作成されたバッファは削除されない。

   ---------- Footnotes ----------

   (1)
ここではタグフィルターだけが有効です。工数のフィルターは無視されます 。

   (2) カスタムコマンドによって、オプションとして
`org-agenda-filter-preset'変数と結びつけることで、フィルターを事前にセ
ットすることができます。このフィルターは、ビューに適用されます。そして
、リフレッシュや２番目のフィルターを通して、基本的なフィルターとして存
続します。このフィルターは、アジェンダのブロックの中で、アジェンダビュ
ー全体のグローバルなプロパティです。この設定を行うためには、個別のブロ
ックのセクションではなく、グローバルオプションのセクションで行います。

   (3)
`org-agenda-include-diary'が設定されているときは、このファイルはアジェン
ダ用に解析されます。


File: org-ja,  Node: カスタムアジェンダビュー,  Next: アジェンダビューの出力,  Prev: アジェンダのコマンド,  Up: アジェンダビュー

10.6 カスタムアジェンダビュー
=========================================

カスタムアジェンダコマンドは２つの目的を提供する。ひとつはTODOとタグの検索を
使用して、保存と素早く頻繁にアクセスするため。もうひとつは、特別に合成したア
ジェンダバッファを作成するため。カスタムなアジェンダコマンドはデフォルトのコ
マンドと同様に、コマンド選択画面ディスパッチャー(*note
アジェンダのコマンド選択::) を通して利用できる。

* Menu:

* 検索式の保存::       一度入力し、何度も使う
* ブロックアジェンダ::  必要な事項をひとつのバッファに集める
* 設定オプション::    ルールを変更する


File: org-ja,  Node: 検索式の保存,  Next: ブロックアジェンダ,  Prev: カスタムアジェンダビュー,  Up: カスタムアジェンダビュー

10.6.1 検索式の保存
-------------------------

カスタム検索の最初のアプリケーションは、よく使われる検索式のためのキーボード
ショートカットを定義することです。それはアジェンダバッファの作成、またはツリ
ーの抽出（後者は言うまでもなくカレントバッファのみをカバーする）のどちらに対
してでも。 カスタムコマンドは、`org-agenda-custom-commands'変数で設定されます。あなたは
この変数をカスタマイズできます。例えば、`C-c a
C'というように。またあなたは
`.emacs'にEmacsのLispを記述して直接設定することもできます。以下に述べる例は
すべての適正な検索タイプを含んでいます。

     (setq org-agenda-custom-commands
           '(("w" todo "WAITING")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("h" . "HOME+Name tags searches") ; description for "h" prefix
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))

それぞれのエントリーの頭文字は、コマンドにアクセスするために、コマンド選択画
面を呼び出す`C-c
a'というコマンドの後に、入力しなければならないキーを定義し
ます。通常、これは1文字をあてますが、もしもあなたが似たようなコマンドをたく
さん持っていたら、あなたは2文字の組合せで定義することができます。その場合、
いくつかの組合せでは最初の文字が同じものとなり、前置引数(1).と同じように提供されます。2番目のパラメーターは検
索の種類を示し、マッチさせるために使われる文字列や正規表現がそれに続きます。
上の例ではそれゆえ以下のように定義します。

`C-c a w'
     TODOのキーワードとして、`WAITING'となっているTODOエントリーのためのグ
     ローバルな検索として。す。

`C-c a W'
     同じような検索であるが、カレントバッファにのみ適用され、ツリーの抽出と
     して検索結果を表示する。

`C-c a u'
     `:urgent:'ではなく`:boss:'というタグがつけられた見出しのための、グロー
     バルなタグ検索を行う。

`C-c a v'
     `C-c a
     u'と同じ検索を行うが、TODOアイテムである見出しに対してのみ検索
     を行うという制限がある。

`C-c a U'
     `C-c a
     u'と同じ検索を行うが、カレントバッファに対してのみ検索を行い、
     結果をツリーの抽出として表示する。

`C-c a f'
     すべてのエントリーのうちで`FIXME'という言葉を含んでいるものを検索して
     ツリーの抽出を行う（くどいかもしれませんが、カレントバッファだけが対象
     です）。

`C-c a h'
     HOMEというタグ検索のためのコマンドの前置引数として、そこでは、タグ検索
     の追加として、一つの名前(Lisa、Peter、またはKim)を選択するために、あな
     たはさらに(`l'、`p'、または`k')というキーを追加入力する必要があります
     。

   ---------- Footnotes ----------

   (1) あなたは前置引数と
説明をつけて、コンソールのセルを挿入することで、前置引数のキーのための説明を
表示することができます。


File: org-ja,  Node: ブロックアジェンダ,  Next: 設定オプション,  Prev: 検索式の保存,  Up: カスタムアジェンダビュー

10.6.2 ブロックアジェンダ
----------------------------------

もう一つの可能性とは、アジェンダビューの構築です。そのビューは、_様々な_コマ
ンドの結果で構成されており、それぞれのコマンドはアジェンダバッファの中の１つ
のブロックを作成します。利用できるコマンドは（`C-c a
a'を実行して作成された
）一日または週間アジェンダのための`agenda'、（`C-c a
t'を実行して作成された
）グローバルなtodoリストのための`alltodo'、そして上で議論してきた`todo'、
`tags'、`tags-todo'などの検索コマンドに含まれています。２つの例を挙げます。

     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden")))
             ("o" "Agenda and Office-related tasks"
              ((agenda "")
               (tags-todo "work")
               (tags "office")))))

これによって、家で精を出さなければならない用事に対するマルチブロックのビュー
を作成するために、`C-c a
h'を定義します。アジェンダバッファには結果として、
その週の、`home'というタグが含まれているすべてのTODOアイテムと、`garden'とい
うタグがついたすべての行のためのアジェンダを含むことになります。最後に、
`C-c a
o'というコマンドで、同様に、オフィスの作業についてのビューを得ること
ができます。


File: org-ja,  Node: 設定オプション,  Prev: ブロックアジェンダ,  Up: カスタムアジェンダビュー

10.6.3 Setting options for custom commands
------------------------------------------

Org-modeはたくさんのアジェンダの構築や表示について調整する変数を含んでいます
。グローバルな変数では、カスタムコマンドも含めて、アジェンダの全てのコマンド
の動作を定義することができます。しかしながら、もしもあるひとつのカスタムビュ
ーについて、いくつかの設定を変更したいならば、それも可能です。オプションの設
定は変数名のリストに書き込むことが必要で、`org-agenda-custom-commands'の中に
、正しい位置に値を書き込む必要があります。例えば。

     (setq org-agenda-custom-commands
           '(("w" todo "WAITING"
              ((org-agenda-sorting-strategy '(priority-down))
               (org-agenda-prefix-format "  Mixed: ")))
             ("U" tags-tree "+boss-urgent"
              ((org-show-following-heading nil)
               (org-show-hierarchy-above nil)))
             ("N" search ""
              ((org-agenda-files '("~org/notes.org"))
               (org-agenda-text-search-extra-files nil)))))

こう書き込むことによって、`C-c a
w'というコマンドは、優先順位によってのみ収
集したエントリーを並べ替えるでしょう。そのエントリーのカテゴリを設定する変わ
りに、例えば` Mixed:
'という文字をprefixの形で書くことで変更することができま す。`C-c a
U'というタグでツリーを抽出するコマンドは、この結果、超コンパクト
となるでしょう。なぜならば、検索に合致した項目の上の階層の見出しも、合致した
項目の見出しもどちらも表示されないからです。`C-c a
N'というコマンドは、１つ
のファイルに制限されたテキスト検索を実行します。

   ブロックアジェンダを作成するコマンドセットのために、
`org-agenda-custom-commands'ではオプションの設定用に２つの別の場所を用意して
います。その設定の中にたったひとつのコマンドに有効なオプションを付け加えるこ
とも、その設定の中にすべてのコマンドに有効なオプションを付け加えることもでき
ます。前者のオプションは１つのコマンドエントリーを付け加える。後者のオプショ
ンは、コマンドエントリーのリストを書き込むことが必要です。ブロックアジェンダ
の例に戻ると(*note ブロックアジェンダ::)、`C-c a
h'というコマンドで、並べ替えの順
序を優先順位の降順`priority-down'に変更することができますし、その中で「
GARDEN」というタグのついたものについては反対の順序、すなわち優先順位の昇順
`priority-up'に並べ替えることができるでしょう。このことは以下のように記述で
きます。

     (setq org-agenda-custom-commands
           '(("h" "Agenda and Home-related tasks"
              ((agenda)
               (tags-todo "home")
               (tags "garden"
                     ((org-agenda-sorting-strategy '(priority-up)))))
              ((org-agenda-sorting-strategy '(priority-down))))
             ("o" "Agenda and Office-related tasks"
              ((agenda)
               (tags-todo "work")
               (tags "office")))))

おわかりだと思いますが、変数とカッコで囲んでいる設定はやや複雑なところがあり
ます。わかりにくいときは、カスタマイズのインターフェースとしてこの変数を設定
してください。これはカスタマイズの構造を完全にサポートしています。注意しなけ
ればならないのは、このインターフェースでオプションを設定するときに、_変数_は
、Lispによる表現をとっているということです。そのため、もしもその変数が１つの
文字ならば、あなた自身でその変数の値に「”（ダブルクォート）」で囲む必要があ
るということです。


File: org-ja,  Node: アジェンダビューの出力,  Next: アジェンダのカラム表示,  Prev: カスタムアジェンダビュー,  Up: アジェンダビュー

10.7 アジェンダビューの出力
======================================

もしもあなたが自分のコンピュータから離れているときは、いくつかのアジェンダの
バージョンを印刷して持ち歩くことは大変役に立ちます。Org-modeはカスタムアジェ
ンダビューをプレーンなテキスト、HTML(1)、Postscript、PDF(2)、iCalenderファイルとしてエキスポートすることができます。もしも、ときどき
このようなことを実行するのならばコマンドを使用しましょう。

`C-x C-w     (`org-write-agenda')'
     アジェンダビューを１つのファイルに書き出します。選択したファイル名の拡
     張子により、そのビューはHTML（拡張子が`.html'または`.htm'）、
     Postscript（拡張子が`.ps'）、iCalendar（拡張子が`.ics'）、あるいはプレ
     ーンなテキスト（何かほかの拡張子）としてエクスポートされます。エクスポ
     ートの間に、`ps-print'のため、および`htmlize'のためにオプションを設定
     するには、`org-agenda-exporter-settings'変数を使用します。例えば

          (setq org-agenda-exporter-settings
                '((ps-number-of-columns 2)
                  (ps-landscape-mode t)
                  (org-agenda-add-entry-text-maxlines 5)
                  (htmlize-output-type 'css)))

もしも、あなたがアジェンダビューをたびたびエクスポートする必要があるのならば
、アウトプットのファイルの名前(3)のリストに、いくつかのカスタムなアジェンダのコマンドを
関連づけることができます。ここに一つの例があります。最初のものはアジェンダと
グローバルなTODOリストに対するカスタムなコマンドを定義しており、それらをエク
スポートするたくさんのファイルと一緒になっています。それから２つのブロックア
ジェンダコマンドを定義し、同様にそれらのためのファイル名を指定しています。フ
ァイル名は、現在作業しているディレクトリに対して相対パスにすることも絶対パス
にすることもできます。

     (setq org-agenda-custom-commands
           '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
             ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
             ("h" "Agenda and Home-related tasks"
              ((agenda "")
               (tags-todo "home")
               (tags "garden"))
              nil
              ("~/views/home.html"))
             ("o" "Agenda and Office-related tasks"
              ((agenda)
               (tags-todo "work")
               (tags "office"))
              nil
              ("~/views/office.ps" "~/calendars/office.ics"))))

ファイル名の拡張子がエクスポートのタイプを決定します。もしも拡張子が`.html'
ならば、Org-modeは`htmlize.el'パッケージを使用し、バッファをHTMLに変換し、そ
のファイル名で保存します。もしも拡張子が`.ps'ならば、
`ps-print-buffer-with-faces'がPostscriptの出力をするために使用されます。もし
も拡張子が`.ics'ならば、iCalendarのエクスポートは、アジェンダを構成している
すべてのファイルにわたってエクスポートを実行し、現在アジェンダの中ではリスト
化されたエントリーのエクスポートに限定されます。ほかの拡張子がついた場合は、
プレーンなASCIIテキストファイルが作成されます。

エクスポートファイルは、非常に負荷が高いので、これらのコマンドの一つを相互に
影響するように使用している時は、出力されません。そのかわり、1ステップで_すべ
て_の指定されたファイルを出力する特別なコマンドが用意されています。

`C-c a e     (`org-store-agenda-views')'
     　アジェンダに関連するエクスポートファ
     イル名を持つすべてのアジェンダビューをエクスポートします。

あなたは、エクスポートコマンドのためのオプションの設定をするために。カスタム
アジェンダコマンドのオプションのセクションを使用することができます。例えば、

     (setq org-agenda-custom-commands
           '(("X" agenda ""
              ((ps-number-of-columns 2)
               (ps-landscape-mode t)
               (org-agenda-prefix-format " [ ] ")
               (org-agenda-with-colors nil)
               (org-agenda-remove-tags t))
              ("theagenda.ps"))))

このコマンドは、Postscriptのエクスポートのために、２つのオプションを設定しま
す。横長のフォーマットで２段のプリントを作成するためです。出力されたページは
、２つにカットして、紙のアジェンダとして使えるようになります。もうひとつの設
定は、行頭のカテゴリーとスケジューリング情報を省き、その代わりにチェックのつ
いてないチェックボックスの項目となるようにアジェンダを修正します。私たちは各
行をコンパクトに表示するためにタグを省略したり、白黒プリンタのためにカラーを
使わない用にすることもできます。`org-agenda-exporter-settings'の中で指定する
設定もできますが、`org-agenda-custom-commands'での設定が優先します。

コマンドラインで次のような設定を使用することができます。
     emacs -f org-batch-store-agenda-views -kill
   また、いくつかのパラメーター(4)を修正する必要があります。
     emacs -eval '(org-batch-store-agenda-views                      \
                   org-agenda-span month                             \
                   org-agenda-start-day "2007-11-01"                 \
                   org-agenda-include-diary nil                      \
                   org-agenda-files (quote ("~/org/project.org")))'  \
           -kill
どちらも`~/org/project.org'のファイルを対象として、日記のエントリーは除かれ
、30日以内に限定したアジェンダビューを作成します。

あなたは、他のプログラムで将来の進行過程を認める方法で、アジェンダの情報を絞
り込むことができます。詳細は*note
アジェンダ情報の抽出::,のノートの情報を参照して ください。

   ---------- Footnotes ----------

   (1) あなたはHrvoje Niksic氏の`htmlize.el'を
インストールする必要があります。

   (2) PDFの出力を作成するために
は、Ghostscriptの`ps2pdf'ユーティリティがシステムにインストールされている必
要があります。pdfファイルを選択するとポストスクリプトファイルも作成されます
。

   (3) もしもあなたが週間アジェンダやグローバルな
TODOリストなどのような標準的なビューを保存したいならば、ファイル名を指定する
ことができるようにするために、それらのビューのためにカスタムなコマンドを定義
する必要があります。

   (4) 引用の方法はあなたの使用しているシステムに依存
します。事例用のFAQを確認してください。


File: org-ja,  Node: アジェンダのカラム表示,  Prev: アジェンダビューの出力,  Up: アジェンダビュー

10.8 Using column view in the agenda
====================================

カラムビュー(*note
カラムビュー::)は、Org-modeファイルの階層構造の中に組み込まれて
いる属性を見たり編集したりするために通常は使われます。エントリーがある評価基
準で収集されているアジェンダから、カラムビューを使用することは大変便利です。

`C-c C-x C-c     (`org-agenda-columns')'
     　アジェンダの中でカラムビューに切り替 えます。

この属性がどのようなものか理解するために、アジェンダのエントリーはもはや適切
なアウトラインの環境ではなくなることを理解することが重要です。これによって以
下のようなことが生じます。

  1. Org-modeでは、どの`COLUMNS'のフォーマットを使用するか、決定する必要が
     あります。アジェンダの中のエントリーは、異なるファイルから集められると
     いうことと、ファイルが異なると`COLUMNS'のフォーマットも異なるというこ
     とから、このことは些細な問題であるとはいえないのです。Org-modeは最初に
     、`org-overriding-columns-format'変数がカレントで設定されているかどう
     か、またそこからフォーマットを取り出すことができるかどうかチェックしま
     す。一方、アジェンダの最初のアイテムに関連したフォーマットを使用するか
     、もしもそのアイテムが特別なフォーマット（属性もしくはファイルの中で定
     義された）を持たないならば、`org-columns-default-format'を使用します。

  2. もしも、どれかカラムに要約形式(*note
     カラム・アトリビュート::)が定義されてい
     るならば、アジェンダでカラムビューに切り替えるときに、すべての関連する
     アジェンダファイルを確認して、この属性の計算の更新を確実に行います。こ
     のことは、特別な`CLOCKSUM'の属性が真であると設定されているということで
     す。Org-modeはアジェンダの中で表示された値を合計するでしょう。一日／週
     間アジェンダの中で、合計は1日をカバーしています。他のビューでは、ブロ
     ック全体をカバーするのです。アジェンダでは同じエントリーを_２度_表示し
     たり（例えばスケジュールと期限というように）、同じ階層（例えば_親_と
     _子_）から_２つ_のエントリーを表示したりするかもしれない、ということを
     理解することは重要なことです。これらの場合、アジェンダの中での要約は、
     いくつかの値が二重にカウントされるという間違った結果を導く可能性があります。

  3.
     アジェンダの中のカラムビューが、`CLOCKSUM'を表示するときは、このアイテ
     ムのためにいつでも時間計測全体に対応します。そのため1日/週間アジェンダ
     において、カラムビューでリスト化された時間合計は、カレントのビューの外
     側の時間から発生することになるかもしれません。この機能によって、あるタ
     スクについて、計画された総工数を1つのカラムにリストにして、その値を比
     較することができるので、優位性を持ちます。この機能はアジェンダのカラム
     ビューにおける重要なアプリケーションのひとつです。もしもあなたが表示さ
     れている期間の中の作業時間についての情報を得たいならば、clock
     table mode（`R'をアジェンダの中で入力する）を使用してください。


File: org-ja,  Node: マークアップ,  Next: エクスポート,  Prev: アジェンダビュー,  Up: Top

11 リッチエクスポートのためのマークアップ
************************************************************

Org-modeの文書をエクスポートする時、エクスポート機能は文書の構造をできるだけ
正確に反映しようとします。HTMLやLaTeX、DocBook、その他のリッチフォーマット等
のエクスポートの対象について、Org-modeは文書をリッチエクスポートに変換するル
ールを持ちます。このセクションはOrg-modeのバッファで使われるマークアップのル
ールについて説明します。

* Menu:

* 構造化されたマークアップの要素::  エクスポートでわかる基本的な構造
* 画像とテーブル::    テーブルと画像は含まれているだろう
* リテラルの例::       特別なフォーマットのためのソースコードの例
* ファイルの挿入::    文書に別のファイルを添付する
* エントリのインデックス::  インデックスを作る
* マクロ置換::          複雑なアウトプットを作成するためにマクロを使用する
* LaTeXの組み込み::     LaTeXはorg-modeの文書では自在に使用することができる


File: org-ja,  Node: 構造化されたマークアップの要素,  Next: 画像とテーブル,  Prev: マークアップ,  Up: マークアップ

11.1 構造化されたマークアップの要素
==================================================

* Menu:

* ドキュメントタイトル::  どこからタイトルが取り出されるか
* 見出しとセクション::  文書の構造はエクスポートの設定で確認できる
* 目次::                   コンテンツのテーブルの条件と場所
* 冒頭のテキスト::    最初の見出しより前に書かれた文
* リスト::                リスト
* パラグラフ::          パラグラフ
* フットノートのマークアップ::  脚注
* 強調と等幅::          太字、イタリック、その他
* 水平線のルール::    線を作る
* コメント行::          何がエクスポートされないか


File: org-ja,  Node: ドキュメントタイトル,  Next: 見出しとセクション,  Prev: 構造化されたマークアップの要素,  Up: 構造化されたマークアップの要素

ドキュメントタイトル
------------------------------

エクスポートされた文書のタイトルは専用の行で設定されます。

     #+TITLE: これは文書のタイトルです。

もしこの行が存在しなければ、タイトルはバッファ中の最初の空でない、コメントで
ない行を用います。もしまだ何も存在していない、またはあなたが最初の見出しより
前のテキストをエクスポートをしないよう設定していたら、タイトルは拡張子無しの
ファイル名となります。

もしあなたがリージョンでマークしたサブツリーのみをエクスポートしているなら、
サブツリーの見出しは文書のタイトルとなるでしょう。もしサブツリーが
`EXPORT_TITLE'プロパティを持っているなら、そのプロパティの値が優先して用いら
れるでしょう。


File: org-ja,  Node: 見出しとセクション,  Next: 目次,  Prev: ドキュメントタイトル,  Up: 構造化されたマークアップの要素

見出しとセクション
---------------------------

*note ドキュメントの構造::で説明されているような文書のアウトライン構造は
エクスポートされた文書のセクションの定義の基準を形成しています。しかしながら
、アウトライン構造はまた(例えば)タスクのリストとしても使われているので、最初
の3アウトラインレベルのみ見出しとして使われます。

     #+OPTIONS: H:4


File: org-ja,  Node: 目次,  Next: 冒頭のテキスト,  Prev: 見出しとセクション,  Up: 構造化されたマークアップの要素

目次
------

目次は通常ファイルの最初の見出しの前に直接挿入されます。もしあなたが異なる場
所に目次を挿入したいのなら、その場所に`[TABLE-OF-CONTENTS]'文字列を書いてく
ださい。目次の深さはデフォルトでは見出しのレベルの数と同じですが、
`org-export-with-toc'変数を設定するか、ファイルに以下のように書くことによっ
て、あなたはこれより小さな値に変更することも、目次を完全に表示させないように
することも可能です。

     #+OPTIONS: toc:2          (目次に表示するレベルを2までとする)
     #+OPTIONS: toc:nil        (目次を表示しない)


File: org-ja,  Node: 冒頭のテキスト,  Next: リスト,  Prev: 目次,  Up: 構造化されたマークアップの要素

最初の見出しより前のテキスト
------------------------------------------

Org-modeは通常最初の見出しの前にテキストをエクスポートし、最初の行を文書のタ
イトルにします。テキストは完全にマークアップされているでしょう。もしあなたが
HTMLやLaTeX、DocBookのような<リテラルを含めたい場合、独立したエクスポート機
構のセクションで説明されている特別な構造を使います。

多くの人々は内部リンクの設定のためとそのために異なる方法でエクスポートされた
最初の見出しの前のテキストを制御する最初の見出しの前に空白を使うことを好みま
す。あなたは`orgexport-skip-text-before-1st-heading'変数を`t'にすることで設
定することができます。ファイル中に設定する場合、あなたは`#+OPTIONS:
skip:t' とすることで同等の設定を行うことができます。

もし、あなたがまだ最初の見出しの前にテキストを置きたいのであれば、`#+TEXT'構
造を使います:

     #+OPTIONS: skip:t
     #+TEXT: このテキストは*最初の*見出しの前に置かれます
     #+TEXT: [TABLE-OF-CONTENTS]
     #+TEXT: このテキストは目次と最初の見出しの間に置かれます


File: org-ja,  Node: リスト,  Next: パラグラフ,  Prev: 冒頭のテキスト,  Up: 構造化されたマークアップの要素

リスト
---------

*note
エントリー中の階層構造::で説明されているプレーンリストは、バックエンドのリス
トに変換されます。多くのバックケンドがサポートしているのは記号付きリスト、番
号付きリスト、見出し付きリストです。


File: org-ja,  Node: パラグラフ,  Next: フットノートのマークアップ,  Prev: リスト,  Up: 構造化されたマークアップの要素

段落、改行、引用
------------------------

段落は最低1つの空白行で区切られます。もしあなたが強制的に段落の中で改行しな
いなら、`\\'を行の末尾に書いてください。

リージョンで改行を保つためには、しかしそうでなければ通常のフォーマットが使わ
れるなら、あなたはフォーマット技法として使われるこの構文を使うことができます
。

     #+BEGIN_VERSE
      Great clouds overhead
      Tiny black birds rise and fall
      Snow covers Emacs

          -- AlexSchroeder
     #+END_VERSE

別の文書から一節を引用する時、段落の左右の余白を空けることが慣習となっていま
す。あなたは以下を用いることで引用をOrg-modeの文書に含めることができます:

     #+BEGIN_QUOTE
     Everything should be made as simple as possible,
     but not any simpler -- Albert Einstein
     #+END_QUOTE

   もしあなたがテキストを中央寄せにしたいなら、以下を使うことができます:
     #+BEGIN_CENTER
     Everything should be made as simple as possible, \\
     but not any simpler
     #+END_CENTER


File: org-ja,  Node: フットノートのマークアップ,  Next: 強調と等幅,  Prev: パラグラフ,  Up: 構造化されたマークアップの要素

フットノートのマークアップ
---------------------------------------

脚注は*note
脚注::で説明されたように定義されていて、全てのバックエンドにエクスポー
トされます。Org-modeは同じノートに対しての複数の参照と異なるバックエンドをサ
ポートします。


File: org-ja,  Node: 強調と等幅,  Next: 水平線のルール,  Prev: フットノートのマークアップ,  Up: 構造化されたマークアップの要素

強調と等幅
---------------

あなたは*bold*と/italic/、_underlined_、`=code='、`~verbatim~'、そして必要な
ら`+strile-through+'を単語に適用することができます。codeとverbatim文字列の中
のテキストはOrg-modeの明確な構文ではありません;
それはverbatimにエクスポートされます。


File: org-ja,  Node: 水平線のルール,  Next: コメント行,  Prev: 強調と等幅,  Up: 構造化されたマークアップの要素

水平線のルール
---------------------

少なくとも5文字のダッシュ文字のみで行成される線は水平線(HTMLでは`<hr/>'、
LaTeXでは`\hrule')にエクスポートされます。


File: org-ja,  Node: コメント行,  Prev: 水平線のルール,  Up: 構造化されたマークアップの要素

コメント行
---------------

行頭の文字が`#'から始まる行はコメントとして扱われ、エクスポートされません。
もしあなたがコメント行をインデントしたいのであれば、`#+'から行を開始してくだ
さい。`COMMENT'ワードを持つサブツリーは、サブツリー全体がエクスポートされま
せん。最後に、`#+BEGIN_COMMENT'から`END_COMMENT'で囲まれた範囲はエクスポート
されません。

`C-c ;'
     エントリー先頭のCOMMENTキーワードをトグルします。


File: org-ja,  Node: 画像とテーブル,  Next: リテラルの例,  Prev: 構造化されたマークアップの要素,  Up: マークアップ

11.2 画像と表
=================

Org-modeネイティブなテーブル(*note
テーブル::)と`table.el'パッケージを用いたテーブ
ルの両方が適切にエクスポートされます。Org-modeの表では、最初の水平線の前の行
が表のヘッダ行となります。あなたはキャプションと相互参照の指定を表の直前に、
参照のための`\ref{tab:basic-data}'オブジェクトをテキストのどこかに書くこと
ができます。

     #+CAPTION: これは次の表(またはリンク)のキャプションです
     #+LABEL:   tbl:basic-data
        | ... | ...|
        |-----|----|

多くのバックエンド(HTML、LaTeX、DocBook)はエクスポートされた文書の中に直接画
像を挿入することができます。もし、例えば、`[[./img/a.jpg]]'のような説明部分
を持たない画像ファイルへのリンクがあるなら、Org-modeは画像の挿入を行います。
もしあなたが画像のキャプションや内部相互参照のラベルを定義したいなら、以下の
ように`#+CAPTION'と`#+LABEL'をリンクの前に書きます:

     #+CAPTION: これは次の画像(または表)のリンクのキャプションです。
     #+LABEL:   fig:SED-HR4049
     [[./img/a.jpg]]

あなたは画像に対する追加要素を定義するかもしれません。これはバックエンドの仕
様なので、さらに情報が必要なら独立したバックエンドについてのセクションを見て
ください。

   *Note 画像リンクの議論: リンクの扱い.


File: org-ja,  Node: リテラルの例,  Next: ファイルの挿入,  Prev: 画像とテーブル,  Up: マークアップ

11.3 リテラルの例
=======================

あなたはマークアップに依存しないリテラルの例を含めることができます。そのよう
な例に等幅のタイプセットがあり、それはソースコードやそれに似た例向きです。

     #+BEGIN_EXAMPLE
     テキストファイルからの例。
     #+END_EXAMPLE

そのようなブロックはインデントされたテキストをうまく整列させるためと、特にプ
レーンリスト構造(*Note
エントリー中の階層構造::.)のためにインデントされるでしょう
。小さな例を使う時、それを簡単にするために、あなたはコロンとそれに続く空白か
らなる例の行を使うことができる。それらはコロンの前に空白を追加することもでき
ます。

     ここに例を書きます
        : テキストファイルからの例

もし例がソースコードなら、もしくはEmacsでフォントロックによりマークアップさ
れたテキストなら、あなたはEmacsバッファ(1)を要塞化す
るように要請することができます。あなたが例に色付けするために使うメジャーモー
ドの名前を指定することが必要な時、`src'ブロックを使います:

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_SRC

`example'と`src'スニペットでは、あなたは`BEGIN'の行の最後に`-n'を追加するこ
とで、例の行番号を表示することができます。もしあなたが`+n'とすると、前のスニ
ペットから現在のものに番号が引き継がれます。リテラルの例で、Org-modeは
`(ref:name)'をラベルとして解釈し、`[[(name)]]'のような特別なリンクによりそこ
を参照することができます(i.e.
参照名は1つの括弧に囲まれています)。HTMLでは、対応するコード行をマウスオーバ
ーすると自動的にハイライト表示になり、少しクールです。

   また、ソースコード(2)からラベルを
消去するかどうかの切り替えのために`-r'を追加することもできます。`-n'で切り替
えると、リンクされるそれらのリファレンスはコードリスティングの行番号によって
ラベルを付けられ、そうでなければ括弧無しのラベルにリンクされます。

     #+BEGIN_SRC emacs-lisp -n -r
     (save-excursion                  (ref:sc)
        (goto-char (point-min))       (ref:jump)
     #+END_SRC
     In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
     jumps to point-min.

   もし、ラベルの構文が言語の構文と衝突した場合、`-l'を使うことで
`#+BEGIN_SRC pascal -n -r -l
"((%s))"'のようにフォーマットを変更できます。
`org-coderef-label-format'変数を見てください。

   HTMLはエクスポート時にテキストエリア,*Note
HTMLエクスポートでのテキストエリア::.と することができます

`C-c ''
     カーソル位置のソースコード例をそのネイティブモードで編集します。これは
     ソースコードを一時バッファに表示し、切り替えることで働きます。あなたは
     `C-c ''をもう一度押すことで編集を終了します(3)。
     編集されたバージョンはOrg-modeバッファ上の古いバージョンを置き換えます
     。固定幅のリージョンは簡単にASCIIでイラストを書くための
     `artist-mode'(4)を使うことで編集されます。空行でこのコマ
     ンドを使うことで、新しい固定幅のリージョンを作成します。

`C-c l'
     `C-c ''によって作成した一時バッファでのソースコード例の編集中に
     `org-store-link'の呼び出しはラベルを指示します。現在のバッファがユニー
     クであることを確認し、現在の行の最後に`(ref:label)'のように適切にフォ
     ーマットされたものが挿入されます。ラベルは`(label)'のようなリンクを記
     憶し、`C-c C-l'検索する。

   ---------- Footnotes ----------

   (1) HTMLバックエンドに対しては、この作業
は自動的に行われます(Org-modeと一緒に配布されている`htmlize.el'のバージョン
1.34が必要です)。LaTeXの要塞化されたコードの塊はリスティングか、 minted
(http://coe.google.com/p/minted)パッケージによってアーカイブされま
す。リスティングを使うには、`org-export-latex-listings'変数をオンにし、LaTeX
のヘッダにリスティングパッケージが含まれているようにします(例 :
`org-export-latex-packages-alist'の設定とを使います)。色付きの出力を含む
設定のオプションについて、リスティングのドキュメントを見てください。mintedを
使うには、pygemnts
(http://pygemnts.org)プログタムをインストールする必要が
あり、`org-export-latex-minted'を追加で設定し、LaTeXのヘッダーにmitedパッケ
ージが含まれていることと`-shell-escape'オプションが`pdflatex'に引き継がれて
いる(`org-latex-to-pdf-process'を見てください)ことを確認します。

   (2) Org-modeの例で説明するのに便利なリンクに行番号を使う間、
`-k'を`-n -r'に追加することでソースコードのラベルを維持します。

   (3) 終了時、Org-modeによってア
ウトラインの見出しや特別なコメントと間違えられないようにするために、
`*'か`#'から始まる行はカンマが銭湯に追加されます。

   (4) `org-edit-fixed-width-region-mode'変数により、異なるモー
ドを選択することもできます。


File: org-ja,  Node: ファイルの挿入,  Next: エントリのインデックス,  Prev: リテラルの例,  Up: マークアップ

11.4 ファイルの挿入
==========================

エクスポート中、あなたは別のファイルの内容をインクルードすることができます。
例えば、`.emacs'をインクルードするなら、あなたは次のようにします:

     #+INCLUDE: "~/.emacs" src emacs-lisp
   2つ目のオプションは(e.g.
`quote'や`example'、`src')のようなマークアップで、3つ目はマークアップが`src'
ならコンテンツの言語を表します。マークアップはオプションです;
もし与えられなければ、Org-modeフォーマットのテキストと仮定される。インクルー
ドの行は最初の行とそれに続く行のプレフィクスの指定のための追加キーワードパラ
メーターの`:prefix1'と`:prefix'を、Org-modeのコンテンツを指定したレベル下げ
るための`:minilevel'を、同様に選択したマークアップ固有のオプションを持ちます
。例えば、ファイルをインクルードするには:

     #+INCLUDE: "~/snippets/xx" :prefix1 "   + " :prefix "     "

`:line'パラメーターを使うことで、ファイルの指定した範囲の行のみをインクルー
ドすることができます。範囲外の行はインクルードされません。範囲の開始と、また
は終了は明らかにデフォルトを使いません。

     #+INCLUDE: "~/.emacs" :lines "5-10"   Include lines 5 to 10, 10 excluded
     #+INCLUDE: "~/.emacs" :lines "-10"    Include lines 1 to 10, 10 excluded
     #+INCLUDE: "~/.emacs" :lines "10-"    Include lines from 10 to EOF

`C-c ''
     ポイント位置のインクルードされたファイルに移動します。


File: org-ja,  Node: エントリのインデックス,  Next: マクロ置換,  Prev: ファイルの挿入,  Up: マークアップ

11.5 エントリのインデックス
======================================

あなたは公開した文書のインデックスに用いるエントリーを規定することができます
。これは`#+INDEX'から始まる行により設定します。感嘆符を含むエントリーはサブ
アイテムを作るでしょう。さらなる情報を見るには*note
インデックスの生成::を参照して ください。

     * Curriculum Vitae
     #+INDEX: CV
     #+INDEX: Application!CV


File: org-ja,  Node: マクロ置換,  Next: LaTeXの組み込み,  Prev: エントリのインデックス,  Up: マークアップ

11.6 マクロ置換
====================

あなたは次のようにしてテキストスニペットを定義することができます。

     #+MACRO: name   replacement text $1, $2 are arguments

これは
`{{{name(arg1,arg2)}}}'と書くことでドキュメントのどこからも(コードの例
からも)参照されます。マクロの定義に加えて、`{{{title}}}'、
`{{{author}}}'などは`#+TITLE:'や`#+AUTHOR:'や他の似たような行によりセ
ットされる情報を参照します。また、`{{{date(FORMAT)}}}'と
`{{{modification-time(FORMAT)}}}'は現在の日付とファイルがエクスポー
トされて変更された時刻をそれぞれ参照します。FORMATは`format-time-string'で
認識した文字列をフォーマットします。

マクロ展開はエクスポート中に行われ、一部の人々は複雑なHTMLコードの構築に用い
る。


File: org-ja,  Node: LaTeXの組み込み,  Prev: マクロ置換,  Up: マークアップ

11.7 Embedded LaTeX
===================

プレーンなASCIIはほとんどの場合ノートをとるのに十分です。例外は数学の記号や
時々出てくる数式を必要とする科学に関するノートのようなものです。
LaTeX(1)は科学に関する文書の組版に広く使われています。多くのacademicsはLaTeXのソ
ースコードの読み書きに使われていて、すぐに多くのエクスポートバックエンドに対
応できるため、Org-modeはLaTeXコードのファイルへの組込みをサポートしています
。

* Menu:

* 特殊記号::             ギリシャ文字や他の記号
* 下付き文字と上付き文字::  テキストを上付き／下付きにする簡単な構文
* LaTeXのコード片::     複雑な数式を簡単に作成する
* LaTeXコード片のプレビュー::  このスニペットは何と似ているか
* CDLaTeXモード::         数式の入力をスピードアップする

   ---------- Footnotes ----------

   (1)
LaTeXはドナルド・クヌースのTeXシステムを基としたマクロシステムです。
"LaTeX"で説明される多くの機能はTeXからのものですが、違いはそれほどありませ
ん


File: org-ja,  Node: 特殊記号,  Next: 下付き文字と上付き文字,  Prev: LaTeXの組み込み,  Up: LaTeXの組み込み

11.7.1 特殊記号
-------------------

あなたはLaTeXマクロをギリシャ文字を表す`\alpha'や矢印を表す`\to'のような特殊
記号の挿入に使うことができます。これらのマクロは補完が可能で、`\'まで入力し
、その後に何文字か入力して`M-<TAB>'を押すことで補完が可能です。LaTeXのコード
とは違い、Org-modeは数学の区切り文字を囲まないようなマクロも使うことができま
す。以下に例を挙げます:

     Angles are written as Geek letters \alpha, \beta and \gamma.

エクスポート時、これらのシンボルはエクスポート先のネイティブフォーマットに変
換されます。HTMLでは`\alpha'のような文字列は`&alpha;'にエクスポートされ、
LaTeXでは`$\alpha$'となります。同様に、`\nbsp'はHTMLでは`&nbsp;'に、LaTeXで
は`~'となります。もしあなたが記号を単語の中に含めたいのであれば、次のように
します: `\Aacute{}stor'。

非常に多くのエンティティが提供されていて、HTMLとLaTeXからその名前を引き継い
でいます;完全なリストは`org-entities'変数を見てください。`\-'はシャイなハイ
フンとして扱われていて、`--'や`---'、`...'は異なる長さのハイフンかドットの集
合を作成するための全て特殊コマンドに変換されます。

   もしあなたがUTF-8文字でエンティティを表示したいのなら、以下のコマンド
(1):

`C-c C-x \'
     エンティティのUTF-8での表示をトグルします。これはバッファの内容を変更
     せず、UTF-8の文字を表示するためにオーバレイを用いています。

   ---------- Footnotes ----------

   (1) あなたは `org-pretty-entities'変数または`#+STARTUP'オプション
`entitiespretty'にデフォルトを設定することができます


File: org-ja,  Node: 下付き文字と上付き文字,  Next: LaTeXのコード片,  Prev: 特殊記号,  Up: LaTeXの組み込み

11.7.2 下付き文字と上付き文字
----------------------------------------

LaTeXと同じように、`^'と`_'が下付き文字と上付き文字を示しています。さらに、
それらはmath-modeにの区切り文字に組込まずに使うことができます。ASCIIテキスト
の可読性の向上のため、複数文字の下付き文字と上付き文字を波括弧で囲む必要はあ
りません(囲んでもかまいませんが)。例

     The mass of the sun is M_sun = 1.989 x 10^30 kg.  The radius of
     the sun is R_{sun} = 6.96 x 10^8 m.

上付きテキスト、下付きテキストの説明を避けるため、あなたはバックスラッシュを
つけた`^'と`_'を引用できます:
`\^'と`\_'です。異なる文脈でしばしば使われるアンダーラインのテキストを書くな
ら、常にこれらの下付き文字として解釈するOrg-modeの慣習はあなたのやり方で得る
ことができます。この慣習を変更するには`org-export-with-sb-superscripts'変数
を設定するか、ファイルに次のように書いてください。

     #+OPTIONS: ^:{}

この設定を有効にした場合、`a_b'は下付き文字として解釈されず、`a_{b}'とする
ことで解釈されます。

`C-c C-x \'
     さらにUTF-8のエンティティを見るため、このコマンドは下付き文字と上付き
     文字をWYSISYMで形成する。


File: org-ja,  Node: LaTeXのコード片,  Next: LaTeXコード片のプレビュー,  Prev: 下付き文字と上付き文字,  Up: LaTeXの組み込み

11.7.3 LaTeXの断片的なコード
------------------------------------

シンボルと上付き、下付き、完全な式を越えることが必要です。Org-modeはLaTeXの
数式を含むことができ、各エクスポート先への変換もサポートしています。LaTeXに
エクスポートするとき、コードは明らかに残っています。HTMLへエクスポートすると
き、Org-modeは数式(1)の処理と描画のために MathJax library
(http://www.mathjax.org) (*note
HTMLエクスポートでの数式フォーマット::)を呼び出します。最後に、数式表現はブ
ラウザかDocBook文書で描画可能な画像(2)へと処理されます。

LaTeXのコード片は、特別なマークは全く必要ありません。以下のコード片はLaTeXの
ソースコードとして知られています:
   *
     あらゆる種類の環境(3)。唯一必要なことは`\begin'文は空白のみがある行に表示さ
     れることです。

   *
     通常のLaTeXの数学の区切り文字内部のテキスト。流通仕様との衝突を避ける
     ために、囲まれたテキストに最大2つの改行が含まれている場合、`$'文字は数
     学区切り文字のみとして認識され、`$'文字がの間に空白がない、そして

例：

     \begin{equation}                          % arbitrary environments,
     x=\sqrt{b}                                % even tables, figures
     \end{equation}                            % etc

     If $a^2=b$ and \( b=2 \), then the solution must be
     either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

もしあなたが他の目的にASCIIの区切り文字が必要なら、LaTeXコンバータに邪魔され
えることを望まない文字を除外するために`org-format-latex-options'オプションを
設定することができます。

LaTeXの処理は`org-export-with-LaTeX-fragments'変数を設定することができます。
デフォルトの設定は`t'で、HTMLには`MathJax'を用い、DocBookとASCII、LaTeXでは
処理しません。あなたはこの変数をファイルの冒頭部分に書くことで設定することも
できます:

     #+OPTIONS: LaTeX:t          Do the right thing automatically (MathJax)
     #+OPTIONS: LaTeX:dvipng     Force using dvipng images
     #+OPTIONS: LaTeX:nil        Do not process LaTeX fragments at all
     #+OPTIONS: LaTeX:verbatim   Verbatim export, for jsMath or so

   ---------- Footnotes ----------

   (1)

   (2) これを行うには、あなたのシステムにLaTeX
をインストールする必要があります。そしてまた、
`http://sourceforge.net/projects/dvipng/'で入手できる`dvipng'プログラムも必
要です。

   (3) `MathJax'が使われている時、`MathJax'によって認識さ
れている環境が処理されます。`dvipng'を画像の生成に用いる時、LaTeX環境
が扱われます。


File: org-ja,  Node: LaTeXコード片のプレビュー,  Next: CDLaTeXモード,  Prev: LaTeXのコード片,  Up: LaTeXの組み込み

11.7.4 LaTeXコード片のプレビュー
------------------------------------------

もしあなたが`dvipng'をインストールしているのであれば、LaTeXのコード片は出力
された組版において画像として処理されます:

`C-c C-x C-l'
     ポイント位置のLaTeXコード片の画像プレビューの提供とソースコード上のオ
     ーバレイ。もしポイント位置にコード片がないのであれば、現在のエントリ(2
     つの見出しの間)の全てのコード片を処理します。前置引数を付けて呼ばれた
     時は、サブツリー全体を処理します。前置引数を2つ付けて呼ばれた時、また
     はカーソルが最初の見出しの前にある時は、バッファ全体を処理します。

`C-c C-c'
     オーバレイされたプレビュー画像を消去します。

プレビューの外観を変更するために、あなたは`org-format-latex-optins'変数をカ
スタマイズすることができます。とりわけ、`:scale'(そしてHTMLへのエクスポート
では`:html-scale')プロパティは画像のプレビューサイズの調整に使われます。


File: org-ja,  Node: CDLaTeXモード,  Prev: LaTeXコード片のプレビュー,  Up: LaTeXの組み込み

11.7.5 CDLaTeXを数学の入力に使う
-----------------------------------------

CDLaTeXモードは環境や数学テンプレートの挿入をスピードアップするためにAUCTeXに
似たメジャーモードであるLaTeXモードと併用して通常使われるマイナーモードです
。Org-modeでは、あなたはCDLaTeXモードのいくつかの機能を使用できます。あなたは
`http://www.astro.uva.nl/~dominik/Tools/cdlatex'から`cdlatex.el'と
`texmathp.el'(最近AUCTeXに追加されました)をインストールする必要があります。
Org-mode中ではCDLaTeXモード自身は使わないでください、代わりにOrg-modeに一部で
ある、より軽量なバージョンの`org-cdlatex-mode'を使ってください。 `M-x
org-cdlatex-mode'をカレントバッファで実行して有効にするか、全ての
Org-modeファイルで有効するために次の設定を行います:

     (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

このモードが有効である時、以下の機能が提供されます(詳細はCDLaTeXモードのドキ
ュメントを参照してください)::
   * `C-c {'による環境テンプレートの挿入。

   * カーソルがLaTeXのコード片(1)の
     中にある場合、<TAB>キーはテンプレートの展開を行います。例えば、<TAB>は
     `fr'を`\frac{}{}'に展開しカーソルを最初の括弧に移動します。もう一
     度<TAB>を押すと2つ目の括弧にカーソルが移動します。コード片の外だと、
     <TAB>は行の先頭にある環境の略語を展開します。例えば、もしあなたが行頭
     に`equ'と書いていて<TAB>を押すと、この略語は`equation'環境に展開されま
     す。全ての略語を見るには、`M-x
     cdlatex-command-help'をタイプしてくださ い。

   * LaTeXコード片の中で`_'と`^'を押すと、それらの文字が括弧のペアと一緒に
     挿入されます。もしあなたが<TAB>を括弧から抜け出すために使うなら、また
     括弧が1文字の文字かマクロのみを囲っているなら、それらは再び消去されま
     す(`cdlatex-simplify-sub-super-script'変数に依存します)。

   * LaTeXのコード片以外の文字に続いて`TAB'を押すと、数学のマクロが挿入され
     ます。もしあなたがバッククォートを押して1.5秒以上待つと、ヘルプウィン
     ドウがポップアップします。

   * 別の文字に続いてシングルクォート`''を押すと、強調やフォントでポイント
     前のシンボルが変更されます。もしシングルクォートを入力した後1.5秒以上
     待つと、ヘルプウィンドウがポップアップします。文字の変更はLaTeXコード
     片の中でのみ働きます;
     それ以外ではクォートは通常通りの働きをします。

   ---------- Footnotes ----------

   (1) カーソルがコード片の中にあるときにOrg-modeは
テストを行うためのメソッドを持ちます。詳細は
`org-inside-LaTeX-fragment-p'関数のドキュメントを参照してください。


File: org-ja,  Node: エクスポート,  Next: 公開,  Prev: マークアップ,  Up: Top

12 エクスポート
*********************

org-modeのドキュメントは様々なフォーマットにエクスポートすることができます。
ノートを共有し印刷するには
ASCII形式でエクスポートすることでOrgファイルの読みやすく、シンプルなものが得
られます。
HTMLのエクスポートではノートをウェブに公開できるようになりますし,
XOXOフォーマットは他の様々なアプリケーションでやりとりするうえで確かな基礎と
なります。 LaTeX
のエクスポートでは、org-modeとその構造化された編集機能を使って、容易に
LaTeX
のファイルを出力することができます。DocBookのエクスポートでは、Orgファイルを
DocBookのツールを使った様々なフォーマットに変換することが可能です。プロジェ
クトの管理では、TaskJuggler形式のエクスポートを使って、ガントリソースチャー
トを作成することができます。デッドラインや予約のような時間と関連のあるエント
リーをiCalのようなデスクトップカレンダーに取り込むために
org-modeはiCalendar形式で抽出することもできます。現在、Org-modeはエクスポー
トのみをサポートしており、他の異なるフォーマットからインポートすることはでき
ません。

   org-modeは、 `transient-mark-mode' がオンの時(Emacs
23ではデフォルト)、は選択したリージョンをエクスポートをすることができます。

* Menu:

* 選択エクスポート::  タグを使ってツリーを選択したり排除したりする
* エクスポートオプション::  ファイル毎のエクスポート設定
* エクスポート用コマンド選択画面::  どのようにエクスポートのコマンドにアクセ
スするか
* ASCII/Latin-1/UTF-8エクスポート::  文字コードの変換を伴う通常のファイルへ
のエクスポート
* HTMLのエクスポート::  HTMLへのエクスポート
* LaTeXとPDFエクスポート::  LaTeXへのエクスポート、そしてPDFへ変換のプロセス
* DocBookエクスポート::  DocBookへのエクスポート
* TaskJugglerエクスポート::  TaskJugglerへのエクスポート
* Freemindエクスポート::  Freemindのマインドマップへのへエクスポート
* XOXOエクスポート::   XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート


File: org-ja,  Node: 選択エクスポート,  Next: エクスポートオプション,  Prev: エクスポート,  Up: エクスポート

12.1 選択エクスポート
=============================

エクスポートしたいドキュメントのある部分を選択、または除外する時にタグを使う
ことができます。 その挙動は、 `org-export-select-tags' と
`org-export-exclude-tags' の二つの変数により決まります。

   org-modeはまず始めに _select_ タグがバッファにないかチェックします。
あった 場合は,
タグがない全てのツリーは除外されます。もし選択したツリーがサブツリーだった場
合、それより上の階層はエクスポートされるものとして選択されますが,
それより下の階層は選択されません。

もし、選択されたタグがなかった場合,
バッファにある全ての内容がエクスポートさ
れるものとして選択されるでしょう。

最後に,  _exclude_
タグでマークされていない全てのサブツリーはエクスポートバ
ッファから除かれるでしょう。


File: org-ja,  Node: エクスポートオプション,  Next: エクスポート用コマンド選択画面,  Prev: 選択エクスポート,  Up: エクスポート

12.2 エクスポートオプション
======================================

エクスポートする際にはバッファにある特別な行が読みこまれます。
その行には追
加的な情報が含まれており、ファイルの中でどこにでも書くことができます。
`C-c C-e t'
と入力することで、バッファにそのような行をセットで挿入することが
できます。それぞれの行で `#+' と入力した後に `M-<TAB>'
による補完を行ない、 (*note 補完::)
キーワードが正しいか、確認してみると良いでしょう。エクスポートと関連のない、
バッファ内の設定の概要については *note バッファ内での変数制御::
を参照してください。特に、 `#+SETUPFILE'
を使うことによって含めることができる別のファイルの中でよく使われる(エクスポ
ートの)オプションを指定できることに注意してください

`C-c C-e t     (`org-insert-export-options-template')'
     エクスポートオプションのテンプレートを挿入します。下の例を見てください。

     #+TITLE:       表示されるタイトル (デフォルトはバッファ名)
     #+AUTHOR:      著者 (デフォルトは `user-full-name' の値)
     #+DATE:         `format-time-string' で解釈される固定された日付の文字列
     #+EMAIL:       彼/彼女のメールアドレス(デフォルトは `user-mail-address' の値
     )
     #+DESCRIPTION: ページの説明, e.g. XHTMLのメタタグで使われる。
     #+KEYWORDS:    ページのキーワード, e.g. XHTMLのメタタグで使われる。
     #+LANGUAGE:    HTMLで指定される言語
      e.g. `en' (`org-export-default-language')
     #+TEXT:        冒頭に挿入される説明的な文章
     #+TEXT:        複数の行に書くことができます。
     #+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
     #+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
                    これらを確認するか, `org-export-allow-BIND' を設定すること
     #+LINK_UP:     出力したページにおける ``up'' のリンク先
     #+LINK_HOME:   出力したページにおける ``home'' のリンク先
     #+LATEX_HEADER: LaTeXのヘッダーで使われる \usepackage{xyz} のような余分な
     行
     #+EXPORT_SELECT_TAGS:   エクスポートするツリーを示すタグ
     #+EXPORT_EXCLUDE_TAGS:  エクスポートから除外するツリーを示すタグ
     #+XSLT:        FOファイルを生成するのにDocBookのエクスポート機能が使うXSLTの
     スタイルシート

OPTIONS行は 以下のようなエクスポートの設定を示すコンパクトな式です。
(1)
     H:         エクスポートする見出しの階層数
     num:       セクション番号の有無
     toc:       目次の有無, または階層数の上限 (整数)
     \n:        改行を維持するかどうか (うまく動作しない)
     @:         HTMLの引用タグの有無
     ::         固定幅の段落の有無
     |:         表の有無
     ^:         上付き、下付き文字を示す TeX のようなシンタックスの有無
                 "^:{}" は `a_{b}' 解釈されるが、
                簡潔な `a_b' はそのままとなるでしょう。
     -:         特別な文字列を変換するかどうか
     f:         this[1] のような脚注を用いるかどうか
     todo:      TODOキーワードを出力した文字列に含めるかどうか
     pri:       クッキーを優先するかどうか
     tags:      タグの有無, `not-in-toc' となるかもしれません。
     <:         DEADLINESのような時間/日付の有無
     *:         強調テキストの有無(太字, イタリック, アンダーライン)
     TeX:       テキスト中のシンプルな TeX マクロの有無
     LaTeX:      LaTeX 出力の設定  デフォルトは `auto'
     skip:      最初見出しの前にある文章をスキップするかどうか
     author:    著者の名前/e-mailを出力するかどうか
     email:     著者のe-mailを出力するかどうか
     creator:   作者を出力するかどうか
     timestamp: 作成した日付を出力するかどうか
     d:         drawerを出力するかどうか
   これらのオプションはHTML、 LaTeX の両方のエクスポートに影響します。
`TeX' と  `LaTeX' のオプションを除き LaTeX
のエクスポートをするのに、それぞれ `t' 、または  `nil' となります。

   `org-export-html-pre/postamble' を `t'
とするとHTMLにエクスポートする時に `author' 、 `email' 及び `creator'
の値は上書きされるでしょう。 代わりに
`org-export-html-pre/postamble-format' が用いられます。

   このようなオプションの初期値は変数のセットで与えられます。
そのような変数は 、OPTIONSのキーと公開するキーにも対応しています。
(*note プロジェクトのリスト::), `org-export-plist-vars'
の定数を見てください。

   エクスポートのコマンドを呼びだす前に、 `C-c @'
で選択した単一のサブツリーを エクスポートする時、そのサブツリーは、
`EXPORT_FILE_NAME' 、 `EXPORT_TITLE' 、 `EXPORT_TEXT' 、
`EXPORT_AUTHOR' 、 `EXPORT_DATE' 、 そして `EXPORT_OPTIONS'
プロパティでエクスポートの設定を無視することができます。

   ---------- Footnotes ----------

   (1) もし、このように多くのオプションを設定したい時は,
それぞれオプション行を作 りことができます。


File: org-ja,  Node: エクスポート用コマンド選択画面,  Next: ASCII/Latin-1/UTF-8エクスポート,  Prev: エクスポートオプション,  Up: エクスポート

12.3 エクスポート用コマンド選択画面
==================================================

全てのエクスポートコマンドはエクスポートコマンド選択画面から選ぶことができま
す。
コマンド選択画面では、コマンドを特定するための追加的なキーの入力を促されます
。通常、ファイルの全ての内容がエクスポートされますが、もしアクティブなリージ
ョンに一つのアウトラインツリーが含まれていた場合,
まず、見出しがドキュメントのタイトルとして扱われ、サブツリーがエクスポートさ
れます。

`C-c C-e     (`org-export')'
     エクスポート、または公開のコマンド選択画面です。エクスポート、または公
     開のコマンドを起動するのに必要なキーがヘルプウィンドウに表示されます。
     前置引数として、入力すると、直接エクスポート機能となります。二重の前置
     引数 `C-u C-u'
     を入力することで、コマンドは別のEmacsプロセスにおいてバックグラウンド
     で実行されます。(1).

`C-c C-e v     (`org-export-visible')'
     `C-c C-e' のように動作しますが、
     今見えている文章だけがエクスポートされます。 (i.e.
     アウトライン表示により、隠されていない文章 ).

`C-u C-u C-c C-e     (`org-export')'
     エクスポート機能が呼ばれますが、 `org-export-run-in-background'
     の設定 と逆の挙動となります。 i.e.
     動いていないバックグラウンドプロセスを呼びだしたり,
     現在のEmacsのプロ セスで強制的に実行したりします。

   ---------- Footnotes ----------

   (1) このような挙動をデフォルトにするには、
`org-export-run-in-background'変数を設定してください .


File: org-ja,  Node: ASCII/Latin-1/UTF-8エクスポート,  Next: HTMLのエクスポート,  Prev: エクスポート用コマンド選択画面,  Up: エクスポート

12.4 ASCII/Latin-1/UTF-8エクスポート
==========================================

ASCII形式へのエクスポートは、org-modeのファイルをASCIIのみが含まれる、シンプ
ルで読みやすい形に書き出します。Latin-1及びUTF-8でのエクスポートでは特殊な文
字やシンボルをそれらのエンコードで出力します。

`C-c C-e a     (`org-export-as-ascii')'
     ASCII形式のファイルをエクスポートします。 Orgファイルを
     `myfile.org' だとすると、ASCII形式のファイルは `myfile.txt'
     となるでしょう。 そのファイルは警告なしに上書きされます。
     もしアクティブなリージョン (1) があった場合,
     そのリージョンのみがエクスポートされます。
     選択したリージョンが一つの ツリー
     (2)を含んでいた場合、そのツリーの見出しがドキュメントのタイトルとなるで
     しょう. 見出しがあるか、または `EXPORT_FILE_NAME'
     プロパティを継承していた場合、 エクスポートする際に
     はその名前が使われるでしょう。

`C-c C-e A     (`org-export-as-ascii-to-buffer')'
     一時的なバッファに出力し、フ ァイルを作成しません。

`C-c C-e n     (`org-export-as-latin1')'
`C-c C-e N     (`org-export-as-latin1-to-buffer')'
     上に示したコマンドのような動作をしますが,
     Latin-1でエンコーディングされたものが出力されます。

`C-c C-e u     (`org-export-as-utf8')'
`C-c C-e U     (`org-export-as-utf8-to-buffer')'
     上に示したコマンドのような動 作をしますが,
     UTF-8でエンコーディングされたものが出力されます。

`C-c C-e v a/n/u'
     文書の中で、バッファで表示されている部分だけを出力する。

   エクスポートされたものでは、
最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層はアイテムのリストとしてエクスポートされます。
この違いを異な る階層に変えたい場合は、
前置引数で、その階層を指定します。  例えば、

     C-1 C-c C-e a

は
最初の階層のみを見出しとし、それ以外はアイテムとなります。見出しがアイテ
ムに変更された時、
見出し後の文章のインデントは、アイテムの下にうまく調和するように変更されます
。
この変更は、最初の本文が全体のインデントを示しているという仮定のもとで実行さ
れます。これよりも大きなインデントは、最初の文章との相対的なレイアウトを維持
するように調整されます。最初の行より少ないインデントであれば,
左寄せします。

次の見出しの前にあるリンクは脚注のような形でエクスポートされます。その脚注は
、次の見出しの前に項目名とリンクがエクスポートされます。詳しい内容と他のオプ
ションについては、変数 `org-export-ascii-links-to-notes'
を見てください。

   ---------- Footnotes ----------

   (1) `transient-mark-mode' が有効である必要があります。

   (2) 現在のサブツリーを選択するには、 `C-c @' と入力してください。


File: org-ja,  Node: HTMLのエクスポート,  Next: LaTeXとPDFエクスポート,  Prev: ASCII/Latin-1/UTF-8エクスポート,  Up: エクスポート

12.5 HTMLのエクスポート
==============================

org-modeには多くのHTMLのフォーマットに対応したHTML (XHTML 1.0
準拠)エクスポ ート機能があります。それは、John Gruberが開発した
_markdown_ 言語に似ていますが、org-modeではさらにテーブルも
サポートしています。

* Menu:

* HTMLエクスポートコマンド::  HTMLへのエクスポートをどうやって起動するか
* HTMLタグの引用符::   Org-modeにHTMLを直接書き込む
* HTMLエクスポートでのリンク::  リンクはどのように解釈されフォーマットされる
か
* HTMLエクスポートでのテーブル::  テーブルのフォーマットをどのように修正する
か
* HTMLエクスポートでの画像::  HTMLの出力にどのように図形を挿入するか
* HTMLエクスポートでの数式フォーマット::  web上でも美しい数式
* HTMLエクスポートでのテキストエリア::  例示を表現するための別の方法
* CSSサポート::          出力の見栄えを変更する
* JavaScriptサポート::   webブラウザ上で説明や折りたたみを表示する


File: org-ja,  Node: HTMLエクスポートコマンド,  Next: HTMLタグの引用符,  Prev: HTMLのエクスポート,  Up: HTMLのエクスポート

12.5.1 HTMLエクスポートのコマンド
--------------------------------------------

`C-c C-e h     (`org-export-as-html')'
     HTMLファイル`myfile.html'をエクスポートします。Orgファイル`myfile.org'
     をエクスポートすると、ASCII形式のファイルは`myfile.html'となるでしょう
     。
     そのファイルは警告なしに上書きされます。もしアクティブなリージョン
     (1) があった場合, そ のリージョンのみがエクスポートされます。
     選択したリージョンが一つのツリー (2)を含ん
     でいた場合、そのツリーの見出しがドキュメントのタイトルとなるでしょう.
     見出しがあるか、または `EXPORT_FILE_NAME'
     プロパティを継承していた場合、 エクスポートする際に
     はその名前が使われるでしょう。

`C-c C-e b     (`org-export-as-html-and-open')'
     HTMLファイルをエクスポートし、 そのファイルをブラウザで開きます。

`C-c C-e H     (`org-export-as-html-to-buffer')'
     一時的なバッファに出力し、フ ァイルを作成しません。

`C-c C-e R     (`org-export-region-as-html')'
     アクティブなリージョンを一時的なバッファに出力します。前置引数があると
     ヘッダーとフッターを出力せずに、リージョンのHTMLのみを出力します。これ
     はカットアンドペーストで編集する際に便利です。

`C-c C-e v h/b/H/R'
     文書の中で、バッファで表示されている部分だけを出力する。

`M-x org-export-region-as-html'
     org-modeの記法が使われているという前提でリージョンをHTMLに変換します。
     これはどのバッファでも起動するグローバルなコマンドです。

`M-x org-replace-region-by-HTML'
     org-modeの記法が使われているという前提でアクティブなリージョンをHTMLに
     変換します。

   エクスポートされたものでは、
最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層はアイテムのリストとしてエクスポートされます。
この違いを異な る階層に変えたい場合は、
前置引数で、その階層を指定します。  例えば、

     C-2 C-c C-e b

この場合２番目のレベルまでを見出しとして取り扱い、それ以外は項目として取り扱
います。

   ---------- Footnotes ----------

   (1) `transient-mark-mode' が有効である必要があります。

   (2) 現在のサブツリーを選択するには、 `C-c @' と入力してください。


File: org-ja,  Node: HTMLタグの引用符,  Next: HTMLエクスポートでのリンク,  Prev: HTMLエクスポートコマンド,  Up: HTMLのエクスポート

12.5.2 HTMLタグの引用符
-----------------------------

HTMLにエクスポートする際、プレーンな`<' and `>'は常に
`&lt;'と`&gt;'に変換されます。もし単純なHTMLタグをそのまま含めたい時は
, `@<b>bold
text@</b>'のようにma`@'でマークします。これは単純なHTMLタグでしか動作
しませんので注意してください。
エクスポートするファイルにさらに広範囲なHTMLをそのままコピーするには次のよう
なブロックが使えます。

     #+HTML: エクスポートするHTMLコード

or

     マーカー間の全ての行は文字どおり出力されます。


File: org-ja,  Node: HTMLエクスポートでのリンク,  Next: HTMLエクスポートでのテーブル,  Prev: HTMLタグの引用符,  Up: HTMLのエクスポート

12.5.3 HTMLエクスポートでのリンク
--------------------------------------------

内部リンク(*note 内部リンク::)
エクスポートされHTMLでも同様に動作します。これには、ラジオターゲット
(*note
ラジオターゲット::)により生成された自動リンクも含まれます。もしターゲットと
なるファイルが公開されるOrgファイルを示す同じ相対パス上にあっても、リンクは
外部リンクとして動作するでしょう。他の`.org'ファイルへのリンクは、HTMLにエク
スポートされたものにも同じ相対パスでリンクされたファイルがある、という前提で
、リンクに変換されます。
`id:'リンクはファイル間で特定のエントリーにジャンプするのに使われます。リン
クするファイル、公開ディレクトリでの公開に関する情報については、 *note
ファイルリンク付きの公開::参照してください。

リンクの属性を記述したい時は、特別な`#+ATTR_HTML'行を用いることができます。
この行は、`<a>'タグや`<img>'タグを追加する属性を定義するために使われます。以
下の例では、リンクに`title'と`style'の属性を設定しています。

     #+ATTR_HTML: title="The Org-mode homepage" style="color:red;"
     [[http://orgmode.org]]


File: org-ja,  Node: HTMLエクスポートでのテーブル,  Next: HTMLエクスポートでの画像,  Prev: HTMLエクスポートでのリンク,  Up: HTMLのエクスポート

12.5.4 テーブル
-------------------

org-modeの表は、`org-export-html-table-tag'で定義されているテーブルのタグを
使ってHTMLにエクスポートされます。
デフォルトの設定では、セルの罫線とフレームがない状態でテーブルが出力されます
。 個々のテーブルでその設定を変えたい場合は,
次のような行をテーブルの前に記述してください。

     #+CAPTION: これはセルの周囲に線が引かれた表です。
     #+ATTR_HTML: border="2" rules="all" frame="all"


File: org-ja,  Node: HTMLエクスポートでの画像,  Next: HTMLエクスポートでの数式フォーマット,  Prev: HTMLエクスポートでのテーブル,  Up: HTMLのエクスポート

12.5.5 HTMLエクスポートでの画像
-----------------------------------------

HTMLのエクスポートではOrgファイルにリンクがある画像をインライン表示すること
ができます。
その画像はリンクされているクリック可能な部分として扱われます。
デフォルトでは、(1),
リンクにdescriptionがなければ、画像はインライン表示されます。 つまり、
`[[file:myimg.jpg]]'はインライン表示されますが、 `[[file:myimg.jpg][the
image]]'はが画像にリンクされる`the image'というテキス
トリンクが作られます。
descriptionの部分が`file:'リンクか画像を示す`http:'のURLの場合,
画像はインラインに表示され、画像がクリックされると活性化されます。例えば、リ
ンク先に高解像度の画像があるサムネイルを追加したい場合、次のように書くと良い
でしょう。

     [[file:highres.jpg][file:thumb.jpg]]

   インライン画像に属性を追加したい場合は、`#+ATTR_HTML'を使います。
次の例では、テキストでの見やすさとアクセスのしやすさを考慮して`alt'属性と
`title'属性を指定して、alignを右にしています。

     #+CAPTION: A black cat stalking a spider
     #+ATTR_HTML: alt="cat/spider image" title="Action!" align="right"
     [[./img/a.jpg]]

`http'のアドレスも使うことができます。

   ---------- Footnotes ----------

   (1) ただし、`org-export-html-inline-images'を確認してください。


File: org-ja,  Node: HTMLエクスポートでの数式フォーマット,  Next: HTMLエクスポートでのテキストエリア,  Prev: HTMLエクスポートでの画像,  Up: HTMLのエクスポート

12.5.6 HTMLエクスポートでの数式フォーマット
-----------------------------------------------------------

LaTeXの数学用スニペット(*note
LaTeXのコード片::)は二つの異なる方法でHTMLに表示され
る。デフォルトではorg-modeをインストールすると、すぐに MathJax system
(http://www.mathjax.org)が使えるようになっています。
`http://orgmode.org'は`MathJax'がOrg-modeユーザー、小さなアプリケーション、
そしてテストにとって便利だと考えているからです。
もし特定のページで、あるいは常に`MathJax'を使うのであれば、私達のサーバでの読
みこみを減らすためにMathJaxをあなたのサーバにインストール(1)
してください。
`MathJax'について設定するには、`org-export-html-mathjax-options'を使うか、バ
ッファに次のような行を挿入してください。

     #+MATHJAX: align:"left" mathml:t path:"/MathJax/MathJax.js"

この行の各パラメーターの意味の知るために、ドキュメント文字列の変数
`org-export-html-mathjax-options'を見てください。

望むのであれば、LaTeXを小さな画像に変換してブラウザ上のページに挿入すること
もできます。MathJaxが有用である前には、これがorg-modeでのデフォルトの方法で
した。この方法を用いるには、あなたのシステムで`dvipng'プログラムが利用できる
状態である必要があります。この方法は以下のような行を追加することでも有効にな
ります。

     #+OPTIONS: LaTeX:dvipng

   ---------- Footnotes ----------

   (1) インストール方法に ついては、MathJaxのウェブサイトにあります。
`http://www.mathjax.org/resources/docs/?installation.html'を参照してください
。


File: org-ja,  Node: HTMLエクスポートでのテキストエリア,  Next: CSSサポート,  Prev: HTMLエクスポートでの数式フォーマット,  Up: HTMLのエクスポート

12.5.7 HTMLエクスポートでのテキストエリア
--------------------------------------------------------

コードサンプルをHTMLにして公開する方法として、テキストエリアを使う方法があり
ます。何かのアプリケーションに貼りつける前であれば、そのコードサンプルは編集
することができます。`example'ブロックか`src'ブロックに`-t'スイッチが付加され
ることでテキストエリアに変換されます。
このスイッチを使うことで、シンタックス、ラベルのハイライト、行番号に関するオ
プションが無効になります。
`-h'と`-w'を使うことがあるかもしれません。それらのスイッチはテキストエリアの
高さと幅を特定するもので、デフォルトでは高さがexampleブロックの行数で幅は80
となります。設定は、例えば以下のようになります。

     #+BEGIN_EXAMPLE -t -w 40
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_EXAMPLE


File: org-ja,  Node: CSSサポート,  Next: JavaScriptサポート,  Prev: HTMLエクスポートでのテキストエリア,  Up: HTMLのエクスポート

12.5.8 CSSサポート
----------------------

エクスポートするファイルには、スタイルに関する情報を含めることができます。
HTMLエクスポート機能には、文章のパーツを適切に表示するために次に示す特別な
CSSクラス(1)があります。見出しやテーブルなど
の標準的なクラスに加えて、それら特別なCSSクラスも変更することができます。
     p.author            著者の情報、email含む
     p.date              公開日
     p.creator           作成情報, org-modeのバージョン
     .title              文章のタイトル
     .todo               DONEとなっていないTODOキーワード
     .done               DONEキーワード、DONEと扱われる全てのキーワードが対象
     .WAITING            各TODOキーワードはその名前のクラス名も用いることができる
     .timestamp          タイムスタンプ
     .timestamp-kwd      SCHEDULED等のタイムスタンプに関連するキーワード
     .timestamp-wrapper  SCHEDULED等のキーワードとタイムスタンプ全体
     .tag                見出し中のタグ
     ._HOME              各タグはその名前のクラス名も用いることができる("@"は"_"
     に置き換えられる)
     .target             リンクのターゲット
     .linenr             コード中の行番号
     .code-highlighted   参照されコード行のハイライト
     div.outline-N       深さレベルNのdiv要素(見出しとテキスト)
     div.outline-text-N  深さレベルNのテキスト部分のdiv要素
     .section-number-N   深さレベルNの見出しの番号。各レベルで異なる
     div.figure          インライン画像のフォーマット方法
     pre.src             ソースコードブロックのフォーマット方法
     pre.example         例示ブロック
     p.verse             verseブロック
     div.footnotes       脚注の見出し
     p.footnote          脚注定義の文章、脚注を含む
     .footref            脚注の参照番号(常に<sup>となる)
     .footnum            脚注定義中の番号(常に<sup>となる)

エクスポートされたファイルは、基礎的な方法で定義されたコンパクトなスタイル
(2)が含まれています。この設定は上書きされるかもしれませんし、
`org-export-html-style'
(Org-wideの設定に使われます)や`org-export-html-style-extra'
(ファイルごとの設定のような詳細な設定に使われます。)を使って追加されるかもし
れません。後者の変数をファイルごとに設定するには、次のように行ないます。

     #+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css" />

長いスタイルの定義には複数行で記述することもできます。外部ファイルを参照せず
に`<style>' `</style>'セクションに直接記述してください。

   サブツリーにスタイルを追加するには, ツリーにクラスを適用する
`:HTML_CONTAINER_CLASS:' プロパティを
使います。個々の見出しにCSSスタイルを適用するには、`:CUSTOM_ID:'プロパティで
指定されるIDを使うことができます。

   ---------- Footnotes ----------

   (1) TODOキーワードやタグにCSSが適用されるとコンフリクトを起こします。
`org-export-html-todo-kwd-class-prefix'と`org-export-html-tag-class-prefix'
を使って、それらをユニークにしてください。

   (2)
このスタイルは`org-export-html-style-default'で定義されており、変更できませ
ん。
この初期設定を無効にするには`org-export-html-style-include-default'を修
正してください。


File: org-ja,  Node: JavaScriptサポート,  Prev: CSSサポート,  Up: HTMLのエクスポート

12.5.9 ウェブページの表示に関するJavaScriptのサポート
-----------------------------------------------------------------------

Sebastian
Roseは、org-modeが生成したHTMLファイルに関するウェブエクスペリエンスを拡張す
るためにデザインされたJavascriptプログラムを書きました。このプログラムを使う
ことで、異なる二つの方法で大きなファイルを見ることができます。一つめは_Info_
のようなモードで、それぞれの章は別々に表示され、`n'キーと`p'キーで操作できま
す。(他のキーでも操作できます。利用できるキーの概要を知るには、`?'を入力して
ください。)。二つめは、org-modeがEmacsで提供するような折りたたまれたスタイル
です。
このスクリプトは、`http://orgmode.org/org-info.js'で利用できます。ドキュメン
トについては、`http://orgmode.org/worg/code/org-info-js/'にあります。このス
クリプトは私達のサイトでホスティングしていますが、何度も使う場合は、
`orgmode.org'にあるものを使わずにあなたのサーバにコピーしたものを使う方を選
択するかもしれせん。

このスクリプトを使うには、`org-jsinfo.el'がロードされているか、確認する必要
があります。デフォルトでは、ロードされるようになっていますが、 `M-x
customize-variable <RET> org-modules <RET>'と入力して、確かにロードされ
ている確認してください。このプログラムを使えるようにするには、次のような行を
Orgファイルに追加するだけです。

     #+INFOJS_OPT: view:info toc:nil

ファイル中にこの行が見つかると、HTMLのヘッダーは自動的にこのスクリプトを起動
させるのに必要なコードを自動的に追加します。以上のような行を使うと、次のよう
なオプションを設定できます。

     path:    スクリプトのパス。デフォルトでは、`http://orgmode.org/org-info.js'
              を使うようになっていますが、ローカルにコピーしたものを使いたい場合は

              `../scripts/org-info.js'のようなパスを使ってください。
     view:    ウェブサイトを最初に開いた時の表示。可能な値は次のとおり:
              info      一つのページに一つのセクションが表示されるInfoのようなイン
     ターフェイス
              overview  最初はトップレベルのみが表示される折りたたみインターフェイ
     ス
              content   全ての見出しが見える状態の折りたたみインターフェイス
              showall   全ての見出しと文章が見える状態の折りたたみインターフェイス

     sdepth:  infoや折りたたみモードで独立して表示されるセクションの
              最大の見出しレベル。デフォルトでは`org-export-headline-levels'
              (= `#+OPTIONS'の中の`H'スイッチ)の値が使われる。
              もし、`org-export-headline-levels'の値より小さかった場合、
              info/折りたたみ のセクションは小見出しまで含まれます。
     toc:     目次表示の有無
              `nil'としても、`i'を入力することで目次は表示されます。
     tdepth:  目次の深さ。デフォルトでは、`org-export-headline-levels'
              `org-export-with-toc'の値が用いられます。
     ftoc:    CSSによって、目次の場所を指定するかどうか。
              「yes」の場合は、セクションとして表示されなくなります。
     ltoc:    それぞれのセクションにショートコンテンツを設置するかどうか。
              セクションの冒頭にショートコンテンツを設置する場合は値を`above'とし
     ます。
     mouse:   マウスを見出しの上に移動させた時にハイライトさせます。
              `underline' (default)か、`#cccccc'のように背景色が指定できます。
     buttons: ビューの変更をトグルさせるボタンを様々なところに設置するかどうか。
              `nil'の場合は、(デフォルト)、ボタンが一つだけ表示されます。
   `org-infojs-options'を変更することで、これらのオプションの初期値を変更するこ
とができます。このスクリプトを常にページに適用させたい場合は、
`org-export-html-use-infojs'を変更してください。


File: org-ja,  Node: LaTeXとPDFエクスポート,  Next: DocBookエクスポート,  Prev: HTMLのエクスポート,  Up: エクスポート

12.6 LaTeXとPDFのエクスポート
=====================================

org-modeには、Bastien
Guerryによって書かれたLaTeXのエクスポート機能があります。追加的な処理と合わ
せて、(1),このバックエンドはPDF
の出力にも使われています。LaTeXの出力は、リンクと相互参照の実装に`hyperref'
を使っているので、出力されたPDFファイルは完全にリンクされているでしょう。セ
クションの階層に合わせて正しく出力されるためには、orgファイルは適切に構造化
されていないといけないので注意してください。

* Menu:

* LaTeX/PDFエクスポートコマンド::  どのキーでどのコマンドが起動するのか
* ヘッダーと章立て::  ファイル構造を出力するための準備
* LaTeXコードの引用::  LaTeXコードの統合
* LaTeXエクスポートでのテーブル::  LaTeXに表をエクスポートする際のオプション
* LaTeXエクスポートでの画像::  LaTeXの出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える

   ---------- Footnotes ----------

   (1)
デフォルトのLaTeX出力は、pdftexまたはlatexにより出力されるよう設計さ
れています。それには、xetexや恐らくluatexと互換性のないパッケージが含まれて
います。`org-export-latex-default-packages-alist'や
`org-export-latex-packages-alist'を参照してください。


File: org-ja,  Node: LaTeX/PDFエクスポートコマンド,  Next: ヘッダーと章立て,  Prev: LaTeXとPDFエクスポート,  Up: LaTeXとPDFエクスポート

12.6.1 LaTeXエクスポートのコマンド
---------------------------------------------

`C-c C-e l     (`org-export-as-latex')'
     LaTeXファイル`myfile.tex'を出力します。Orgファイルに対して`myfile.org'
     、ASCIIファイルは`myfile.tex'となるでしょう。そのファイルは警告なしに
     上書きされます。アクティブなリージョン(1)があれば、そのリージョンのみが出力されるでしょう。
     選択したリージョンが一つのツリー(2)であった場合、ツリーの見出しがタイトルに
     なります。ツリーの見出しのエントリーが`EXPORT_FILE_NAME'プロパティを継
     承、または持っている場合、エクスポートされる際には、その名前が使われる
     でしょう。

`C-c C-e L     (`org-export-as-latex-to-buffer')'
     一時バッファに出力 します。ファイルを作りません。

`C-c C-e v l/L'
     文書の中で、バッファで表示されている部分だけを出力する。

`M-x org-export-region-as-latex'
     Org-modeの記法が使われているという前提でリージョンをLaTeXに変換します
     。これはどのバッファでも起動するグローバルなコマンドです。

`M-x org-replace-region-by-latex'
     アクティブなリージョンを(Org-modeの記法が使われている前提で)LaTeXコー
     ドに置き変えます。

`C-c C-e p     (`org-export-as-pdf')'
     LaTeXに出力し、PDFにも 変換します。

`C-c C-e d     (`org-export-as-pdf-and-open')'
     LaTeXに出力し、PDF
     にも変換します。その際出力されたPDFファイルを開きます。

   エクスポートされたものでは、
最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層は概要のリストとしてエクスポートされます。エクスポート機能では
、`org-latex-low-levels'を変更することで、この設定を無視、または変更すること
ができます。

   この違いを異なる階層で変えたい場合は、
前置引数で、その階層を指定します。 例 えば、

     C-2 C-c C-e l

この場合２番目のレベルまでを見出しとして取り扱い、それ以外は項目として取り扱
います。

   ---------- Footnotes ----------

   (1) `transient-mark-mode'が有効であ る必要があります。

   (2) 現在のサブツリーを選択するには、 `C-c @'を入力してください。


File: org-ja,  Node: ヘッダーと章立て,  Next: LaTeXコードの引用,  Prev: LaTeX/PDFエクスポートコマンド,  Up: LaTeXとPDFエクスポート

12.6.2 見出しと構造の分割
----------------------------------

デフォルトでは、LaTeXの出力には`article'クラスが使われます。

クラスは`org-export-latex-default-class'の値を変更することで、全体的に変更す
ることもできますし、ファイル中に`org-export-latex-default-class'のようなオプ
ションを追加することで、局所的に変更することもできます。`:LaTeX_CLASS:'プロ
パティを使えば、エクスポートするリージョンにそのツリー(サブツリー)のみが含ま
れていた場合にクラスを指定できます。クラスは、`org-export-latex-classes'にリ
ストアップされてます。 この変数は、各クラス(1)の見出しテンプレート
を定義し、各クラスの構造の分割について定義します。クラス自体についても定義さ
れます。`#+LaTeX_CLASS_OPTIONS'、または`LaTeX_CLASS_OPTIONS'プロパティは
`\documentclass'マクロのオプションを指定します。見出しに
`#+LATEX_HEADER:
\usepackage{xyz}'を追加して同様のことをすることもできます
。詳しい情報については、`org-export-latex-classes'のドキュメント文字列を参照
してください。

   ---------- Footnotes ----------

   (1) `org-export-latex-default-packages-alist'と
`org-export-latex-packages-alist'が接合されたものです。


File: org-ja,  Node: LaTeXコードの引用,  Next: LaTeXエクスポートでのテーブル,  Prev: ヘッダーと章立て,  Up: LaTeXとPDFエクスポート

12.6.3 LaTeXコードの引用
------------------------------

*note
LaTeXの組み込み::で記述された埋め込まれたLaTeXは、LaTeXに正しく挿入されます
。図の相互参照を生成するために、`\ref{LABEL}'のようなシンプルなマクロが含
まれます。さらに、次のような行を追加することで、LaTeXエクスポートの際に表示
だけしてほしい特別なコードを追加することができます。

     #+LaTeX: エクスポートする際に文字のまま、出力されるLaTeX code

or

     #+BEGIN_LaTeX
     マーカの間にある全ての行は文字がそのまま出力されます。
     #+END_LaTeX


File: org-ja,  Node: LaTeXエクスポートでのテーブル,  Next: LaTeXエクスポートでの画像,  Prev: LaTeXコードの引用,  Up: LaTeXとPDFエクスポート

12.6.4 LaTeX エクスポートにおけるテーブル
-------------------------------------------------------

LaTeXで表を出力する際に、番号と表題を指定することができます (*note
画像とテーブル::)、`ATTR_LaTeX'行を使うことで、表に関する`longtable'環境を
呼び出すこともできます。複数のページにまたがる表や、デフォルトの表の環境を
`table'から`table*'にするため、またはデフォルトの内部tabular環境を`tabularx'
や`tabulary'にしたい時にも`ATTR_LaTeX'行は使われます。つまり、文字の配置や
(`tabularx'や`tabulary'を使って)幅を次のようにして設定できます。:

     #+CAPTION: A long table
     #+LABEL: tbl:long
     #+ATTR_LaTeX: longtable align=l|lp{3cm}r|l
     | ..... | ..... |
     | ..... | ..... |

   `tabulary'を使って、複数のセルにまたがる表を指定することもできます。

     #+CAPTION: A wide table with tabulary
     #+LABEL: tbl:wide
     #+ATTR_LaTeX: table* tabulary width=\textwidth
     | ..... | ..... |
     | ..... | ..... |


File: org-ja,  Node: LaTeXエクスポートでの画像,  Next: Beamerクラスのエクスポート,  Prev: LaTeXエクスポートでのテーブル,  Up: LaTeXとPDFエクスポート

12.6.5 LaTeXエクスポートにおける画像
------------------------------------------------

`[[file:img.jpg]]' や `[[./img.jpg]]'
のように説明文にリンクされていない画 像は、 LaTeX
の処理によりPDFの中に挿入されます。 Org-modeは、画像を挿入するのに
`\includegraphics' マクロを使います。もし、*note
画像とテーブル::で説明されているように図の表題や番号
を特定したいのならば、その図を `figure'
環境で囲むとfloat要素になります。 `\includegraphics'
マクロのオプション引数として使われている様々なオプションを特定するには
`#+ATTR_LaTeX:' を使います。 `figure'
環境のオプションの配置を変更するには、 `placement=[h!]' のように属
性に追加します。

   画像のまわりに文字を回りこませたいのであれば、`#+ATTR_LaTeX:' の行に
`wrap'
を追加すると、画像がページの左半分にきます。微調整するには、`wrapfigure'
環 境に引数として、 `placement'
フィールドを追加します。画像のサイズを変更する時は、互換性のある
`\includegraphics' と `wrapfigure'
を使わなければいけないので注意してください。

     #+CAPTION:    The black-body emission of the disk around HR 4049
     #+LABEL:      fig:SED-HR4049
     #+ATTR_LaTeX: width=5cm,angle=90
     [[./img/sed-hr4049.pdf]]

     #+ATTR_LaTeX: width=0.38\textwidth wrap placement={r}{0.4\textwidth}
     [[./img/hst.png]]

   もし、このような番号を参照する必要があれば,  LaTeX に
`\ref{fig:SED-HR4049}' と記述してください。


File: org-ja,  Node: Beamerクラスのエクスポート,  Prev: LaTeXエクスポートでの画像,  Up: LaTeXとPDFエクスポート

12.6.6 Beamerクラスのエクスポート
-------------------------------------------

LaTeXの一種である `beamer'
は、LaTeXとpdf処理により高品質なプレゼンテーション資料を提供します。Org-mode
はOrg-modeのファイルやツリーを `beamer'
のプレゼンテーション資料に変換するのに特別なサポートをします。

   カレントバッファ ( `#+LaTeX_CLASS: beamer' がセットされている)
かサブツリー  ( `LaTeX_CLASS' 属性がセットされている)のLaTeXクラスが
`beamer'
ならば、特別なエクスポートモードがファイルやツリーをbeamerのプレゼンテーショ
ン資料にします。原則的にはあまり深くないネストのツリーなら何でもプレゼンテー
ション資料にします。デフォルトでは、トップレベルのエントリー
(または、選択したサブツリーの最初のレベル)
がフレームに変換され、そのレベル
の下のアウトライン構造が箇条書きされたリストになります。 変数
`org-beamer-frame-level'
は異なるレベルに設定でき、その時フレームより上の構造はプレゼンテーションの構
造の区切りになります。

   バッファでの便利なテンプレートに関する設定や属性は  `M-x
org-insert-beamer-options-template'
によってバッファに挿入されます。その他については、カラムビューのフォーマット
にインストールされます。カラムビューはbeamerで使う特別な属性を編集するのに便
利だからです。

次のような属性を使ってプレゼンテーションの構造を変えることができます。:

`BEAMER_env'
     このエントリーをフォーマットする環境を指定します。有効な環境が変数
     `org-beamer-environments-default' に定義されていて、さらに
     `org-beamer-environments-extra'
     に追加して定義することができます。もし、この属性がセットされていれば、
     それを可視化するため、そのエントリーには `:B_environment:'
     タグがあるはずです。このタグは字句的な意味はなく、視
     覚的に補助するためにあります。

`BEAMER_envargs'
     `[t]' 、 `[<+->]' や `<2-3>'
     のようなbeamerに特有な引数は、この環境で 使われます。もし
     `BEAMER_col' 属性がセットされていると、 `columns'
     環境のオプション引数 として、 `C[t]'
     が追加されたことを意味します。 `c[t]' や `c<2->' は `column'
     環境にオプションとして設定されたことを意味します。

`BEAMER_col'
     この列が始まるときの列の幅です。もしこの属性がセットされていると、その
     エントリーには `:BMCOL:'
     属性が現れます。このタグも視覚的な補助のためにあります。もし、これが整
     数だった場合、 `\textwidth' の割合とみなされます。 もしくは、
     `3cm' のような場合、特定の単位を使ったとみなされます。まず
     、フレームの中のそのような属性は列に囲まれた `columns'
     環境で始まります。 `BEAMER_col'
     属性が0か1、または自動的にフレームの最後となるエントリーでは、その環境
     は閉じられます。

`BEAMER_extra'
     その環境が始まった後に挿入される追加的なコマンドです。例えば、フレーム
     を作った時に変遷を特定します。

もし、verbatim環境を使ったソースコードが含まれていると、フレームは自動的に
`fragile' を受けとります。 `beamer' 特有のコードは `#+BEAMER:'
を使うことで挿入され、 `#+BEGIN_beamer...#+end_beamer'
ブロックは,他のエクスポートのものと似ていま すが、 `#+LaTeX:'
はプレゼンテーション資料にも含まれるという点で異なります。

   `BEAMER_env' 属性があるノードの `note' や `noteNH'
の値はbeamerのnotesとして処理されます。例えば、 `\note{...}'
のように囲ま れます。
前者は、ノートのテキストの一部分として見出しが含まれ、後者は、ノードの見出し
は無視されます。ノートの生成を簡単にするには、実は `BEAMER_env'
属性を作るかわりに、 _tag_ (または `:B_note:' や `:B_noteNH:')
でマークするだけで十分です。

編集作業のサポートを得るには次のオプションを追加して、マイナーモードの
`org-beamer-mode' を有効にします。

     #+STARTUP: beamer

`C-c C-b     (`org-beamer-select-environment')'
     `org-beamer-mode' でこのキーバインドを使うことでbeamerの環境や
     `BEAMER_col' 属性を素早く 選択することができます。

カラムビューはノードにおける環境及び重要なパラメーターをセットするうえで、優
れたやり方です。
カラムのフォーマットがこの特別な目的のためにセットされている確認してください
。 コマンド `M-x org-insert-beamer-options-template'
はそのようなフォーマッ トを定義します。

次の例は、beamerへのエクスポートを意図した簡単なOrg-modeの文書の例です。

     #+LaTeX_CLASS: beamer
     #+TITLE: プレゼンテーション資料の例
     #+AUTHOR: Carsten Dominik
     #+LaTeX_CLASS_OPTIONS: [presentation]
     #+BEAMER_FRAME_LEVEL: 2
     #+BEAMER_HEADER_EXTRA: \usetheme{Madrid}\usecolortheme{default}
     #+COLUMNS: %35ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Args) %4BEAMER_col(Col) %8BEAMER_extra(Ex)

     * これは最初の構造的な章です。

     ** フレーム 1 \\ サブタイトル
     ***  Eric Fraga へありがとう
                                       :BMCOL:B_block:
         :PROPERTIES:
         :BEAMER_env: block
         :BEAMER_envargs: C[t]
         :BEAMER_col: 0.5
         :END:
         Org-modeでの最初のbeamerの設定
     *** みんなへありがとう
                                             :BMCOL:B_block:
         :PROPERTIES:
         :BEAMER_col: 0.5
         :BEAMER_env: block
         :BEAMER_envargs: <2->
         :END:
         議論への寄与してくれたみんなへ
     **** これは、beamerのnoteとして処理される。                   :B_note:
     ** Frame 2 \\ 使わないカラム
     *** リクエスト                                                   :B_block:
         この部分を試してみてください!
         :PROPERTIES:
         :BEAMER_env: block
         :END:

   さらに詳しく知りたい場合は、Worgの文書を見てください。


File: org-ja,  Node: DocBookエクスポート,  Next: TaskJugglerエクスポート,  Prev: LaTeXとPDFエクスポート,  Up: エクスポート

12.7 DocBookエクスポート
==============================

Org-modeは、Baoqiu
Cuiによって作成されたDocBookへのエクスポート機能があります。Org-modeのファイ
ルはDocBookのフォーマットで出力され、さらにDocBookのツールやスタイルシートを
使ってPDF、HTMLやmanなど他のフォーマットに出力することができます。

   現在、DocBookのエクスポート機能はDocBook V5.0をサポートしています。

* Menu:

* DocBookエクスポートコマンド::  DocBookエクスポートの起動方法
* DocBookコードの引用::  DocBookコードをOrgファイルに取りこむ
* 章の繰り返し::       DocBookで繰り返し使われるセクション
* DocBookエクスポートでのテーブル::  表はHTMLのテーブルとして出力される
* DocBookエクスポートでの画像::  DocBookの出力に図を挿入する方法
* 特殊文字::             特殊文字の処理方法


File: org-ja,  Node: DocBookエクスポートコマンド,  Next: DocBookコードの引用,  Prev: DocBookエクスポート,  Up: DocBookエクスポート

12.7.1 DocBookエクスポートコマンド
--------------------------------------------

`C-c C-e D     (`org-export-as-docbook')'
     DocBookファイルを出力します。Org-modeのファイル `myfile.org' は
     DocBook XMLファイルの `myfile.xml'
     となります。ファイルは警告なしに上書きされます。アクティ
     ブリージョン (1)
     がある場合は、リージョンのみが出力されます。選択したリージョンが単一の
     ツリー (2) だった 場合は,
     そのツリーの見出しが文書のタイトルになります。そのツリーの見出
     しがある、または継承されている場合や、 `EXPORT_FILE_NAME'
     属性がある場合は、その名前がエクスポートに使われま す。

`C-c C-e V     (`org-export-as-docbook-pdf-and-open')'
     DocBookファイルが出力され、PDF処理を経て出力されたPDFファイルが開きます。

     DovBookファイルにエクスポートしてPDFに出力するには、XSLT処理系とXSL-FO
     処理系を環境にインストールしておく必要があるので注意してください。変数
     `org-export-docbook-xslt-proc-command' と
     `org-export-docbook-xsl-fo-proc-command'を確認してください。

     変数 `org-export-docbook-xslt-proc-command'
     でスタイルシートを表わす引 数 `%s'
     はユーザーによってセットされる変数
     `org-export-docbook-xslt-stylesheet'
     の値で置き換えられます。Org-modeファイルに  `#+XSLT:'
     を追加することで 、グローバルな設定を封じることができます。

`C-c C-e v D'
     文書の見えている部分だけを出力します。

   ---------- Footnotes ----------

   (1) `transient-mark-mode' を有効にしている必要があります。

   (2) 現在のツリーを選択するには `C-c @' を使ってください。


File: org-ja,  Node: DocBookコードの引用,  Next: 章の繰り返し,  Prev: DocBookエクスポートコマンド,  Up: DocBookエクスポート

12.7.2 DocBookコードの引用
--------------------------------

次のようなブロックを使えば、Org-modeのファイルでDocBookのコードを引用したり
、文章をそのままDocBookのファイルにコピーすることができます。

     #+DOCBOOK: エクスポートするDocBookコードの文字列

or

     #+BEGIN_DOCBOOK
     これらのマーカの間の行はDocBookエクスポート機能により文字がそのまま出力され
     ます。
     #+END_DOCBOOK

例えば、DocBookの警告文を含めるには次のような文章を使います。この警告文によ
り、Org-modeのファイルにDocBookコードをのせる時に、文章の文脈に注意を払うで
しょう。DocBookコードを正しく引用しないと、DocBook
XMLファイルを正確に出力できないかもしれせん。

     #+BEGIN_DOCBOOK
     <warning>
       <para>Org-modeファイルの中でDocBook XMLコードを引用する際、何をしているか
       知っておく必要があります。注意が足りないと、DocBookのエクスポート機能によ
     り
       正しくないDocBook XMLが出力されるかもしれません。</para>
     </warning>
     #+END_DOCBOOK


File: org-ja,  Node: 章の繰り返し,  Next: DocBookエクスポートでのテーブル,  Prev: DocBookコードの引用,  Up: DocBookエクスポート

12.7.3 章の繰り返し
-------------------------

DocBookのエクスポート機能は、DocBookの `article'
要素を使ってOrg-modeのファイルをarticlesとして出力します。再帰的なsections、
例えば `section' 要素が出力されたarticlesの中で使われます。
Org-modeのファイルのトップレベルの見出しは、トップレベルのsectionsとして出力
され、低いレベルの見出しはネストしたsectionsとして出力されます。Org-modeのフ
ァイルの全体構造は、完全に出力されます。見出しにネストされたレベルはどれだけ
あっても構いません。

   再帰的なセクションを使えば、 出力されたDocBookコードを他の `book' や
`set'
のようなドキュメントタイプに移植したり、再利用したりするのが用意になります。


File: org-ja,  Node: DocBookエクスポートでのテーブル,  Next: DocBookエクスポートでの画像,  Prev: 章の繰り返し,  Up: DocBookエクスポート

12.7.4 DocBookエクスポートでのテーブル
--------------------------------------------------

Org-modeの表はHTMLの表を出力します。HTMLの表はDocBook
V4.3からサポートされて います。

   テーブルに表題がなかった場合、 `informaltable' 要素によってinformal
tableが出力されます。表題があれば、`table'
要素により、テーブルが出力されま す。


File: org-ja,  Node: DocBookエクスポートでの画像,  Next: 特殊文字,  Prev: DocBookエクスポートでのテーブル,  Up: DocBookエクスポート

12.7.5 DocBookエクスポートでの画像
--------------------------------------------

`[[file:img.jpg]]' や `[[./img.jpg]]'
のように説明文にリンクされていない画 像は、 `mediaobject'
タグが使われてDocBookに出力されます。 各 `mediaobject'
要素には、`imagedata' 要素を囲む
`imageobject'要素が含まれます。もし、*note
画像とテーブル::で説明されているように 図の表題を特定するならば、
`caption' 要素を  `mediaobject' の中に追加します。番号も特定する場合は、
`mediaobject' 要素の中に  `xml:id' 属性が出力されます。`figure'
環境のオプションの配置を変更するには、 `placement=[h!]'
のように属性に追加し ます。

   画像の属性には `imagedata' 要素がサポートされ、 `align' や `width'
のような属性が二つの方法で特定されます。一つ目は変数
`org-export-docbook-default-image-attributes'
を設定する方法です。二つ目は `#+ATTR_DOCBOOK:' 行を使う方法です。変数
`org-export-docbook-default-image-attributes'
で特定される属性は出力元のOrg-modeファイルに含まれる全ての画像に適用されます
(ただし、 `#+ATTR_DOCBOOK:'
行で画像の属性が上書きされている場合は除きます。)。

   `#+ATTR_DOCBOOK:'
行は、追加的な画像の属性の指定や個々の画像にデフォルトの画
像の属性を上書きするのに使います。もし、 `#+ATTR_DOCBOOK:' と 変数
`org-export-docbook-default-image-attributes'
に同じ属性が現れた場合、前者の値が優先的に使われます。次の例は画像の属性に関
する設定例です。

     #+CAPTION:    Org-modeのロゴ
     #+LABEL:      unicorn-svg
     #+ATTR_DOCBOOK: scalefit="1" width="100%" depth="100%"
     [[./img/org-mode-unicorn.svg]]

   デフォルトでDocBookのエクスポート機能は、 `jpeg', `jpg', `png',
`gif', そして `svg' のような画像のタイプを認識します。変数
`org-export-docbook-inline-image-extensions'
を設定することで、DocBookがサポートしている画像のタイプを追加することができ
ます。


File: org-ja,  Node: 特殊文字,  Prev: DocBookエクスポートでの画像,  Up: DocBookエクスポート

12.7.6 DocBook出力における特殊文字
--------------------------------------------

`\alpha', `\Gamma', そして `\Zeta' のような TeX
ライクなシンタックスで記述された特殊文字列は、DocBookのエクスポート機能でサ
ポートされています。 そのような文字列は、変数 `org-entities'
に格納されているリストにもとづき、`&alpha;', `&Gamma;', そし て
`&Zeta;' のように XML
エンティティとして記述されます。対応するエンティティが含まれるDocBookファイ
ルが出力されると、特殊文字列が認識されます。

   変数 `org-export-docbook-doctype'
を設定することで必要なエンティティを含める ことができます。例えば、 変数
`org-export-docbook-doctype'
に次のような値を設定することで、XHTMLエンティティに含まれる全ての特殊文字列
が認識されます。

     "<!DOCTYPE article [
     <!ENTITY % xhtml1-symbol PUBLIC
     \"-//W3C//ENTITIES Symbol for HTML//EN//XML\"
     \"http://www.w3.org/2003/entities/2007/xhtml1-symbol.ent\"
     >
     %xhtml1-symbol;
     ]>
     "


File: org-ja,  Node: TaskJugglerエクスポート,  Next: Freemindエクスポート,  Prev: DocBookエクスポート,  Up: エクスポート

12.8 TaskJugglerエクスポート
==================================

TaskJuggler (http://www.taskjuggler.org/)はプロジェクト管理ツールです。
プロジェクトのアウトラインと設定して制限をもとにプロジェクトのタイムラインと
リソースの割り当てを計算して最適化されたスケジュールを提供します。

TaskJugglerのエクスポート機能は、例えばHTMLやLaTeXのような他のエクスポート機
能とは少し違い、ドキュメントのノード全てを出力しませんし、ドキュメントのノー
ドの序列に従って出力することもしません。

代わりに、TaskJugglerのエクスポート機能はタスクが定義されているツリーか、こ
のプロジェクトのリソースとして任意に定義されたツリーを探します。そして、それ
らツリーと全てのノードの中で定義された属性をもとにTaskJugglerファイルを作成
します。

12.8.1 TaskJugglerのエクスポートコマンド
---------------------------------------------------

`C-c C-e j     (`org-export-as-taskjuggler')'
     TaskJugglerファイルを出力します 。

`C-c C-e J     (`org-export-as-taskjuggler-and-open')'
     TaskJugglerファイルを出力し、TaskJugglerUIでファイルを開きます。

12.8.2 タスク
----------------

いつものようにOrg-modeでタスクを作ります。各タスクにプロパティを使ってエフォ
ートを指定します (カラムビューを使うと簡単です。)。 最終的には、Peter
Jonesが作成した
`http://www.contextualdevelopment.com/static/artifacts/articles/2008/project-planning/project-planning.org'の例と似たものになっているはずです。次に、タスクのトップノードを`:taskjuggler_project:'というタグでマークします
(または変数`org-export-taskjuggler-project-tag'をカスタマイズします)。これで
プロジェクトの計画を`C-c C-e
J'で出力する準備ができました。出力されれば、
TaskJugglerUIでガントチャートが開くはずです。

12.8.3 リソース
-------------------

次に特定のタスクにリソースを割り当てることができます。階層的にリソースをまと
めることもできます。トップノードのタグは`:taskjuggler_resource:'になります
(または`org-export-taskjuggler-resource-tag'をカスタマイズします。)。識別子
(`resource_id')をリソースに割り当てることもできます(標準的なOrg-modeのプロパ
ティについては, *note
プロパティの表記法::)。また、エクスポート機能は自動で識別子を生成することが
できます。(識別子はユニークであればよいので、エクスポート機能は見出しの最初
の単語を抽出します。詳しくは`org-taskjuggler-get-unique-id'のドキュメントを
読んでください)。識別子を使ってリソースをタスクに再配置することができます。
`allocate'属性がタスクで再び実行されます。カラムビューか、タスク上で
`C-c C-x p allocate <RET> <resource_id>
<RET>'と入力することで実行されます。

再配置が実行されると、再びTaskJugglerに出力してリソースの再配置グラフを確認
することができます。そのグラフでは、各人がいつ何のタスクをこなしているかがわ
かります。

12.8.4 属性の出力
----------------------

エクスポート機能はTODOの状態に関する情報も考慮されています。例えば、タスクが
「DONE」とマークされると、それに対応して、TaskJugglerの属性も
(`complete
100')となります。タスクリソースやタスクノード上のうTaskJugglerで
使われる`limits', `vacation', `shift', `booking', `efficiency',
`journalentry', `rate'のようなリソースの属性や`account', `start',
`note', `duration', `end', `journalentry', `milestone', `reference',
`responsible', `scheduling'などのタスクの属性も、出力されます。

12.8.5 依存状態
-------------------

エクスポート機能はタスクで`ORDERED' 属性 (*note
TODO間の関係::)、`BLOCKER' 属性  (see
`org-depend.el')、そして選択的に`depends'属性で表される依存状態を操作するこ
とができます。`BLOCKER'
属性も`depends'属性も`previous-sibling'のように扱えますし、プロジェクトの他
のタスクで定義された識別子への参照
(`task_id')として扱うこともできます。`BLOCKER'属性と`depends'属性は、カンマ
やスペースで分けることで複数の依存状態として定義できます。依存状態の属性は、
単純に追加することで任意の属性を追加することができます。これまでの例は次のよ
うに記述できます。

     * Preparation
       :PROPERTIES:
       :task_id:  準備
       :ORDERED:  t
       :END:
     * 練習の材料
       :PROPERTIES:
       :task_id:  training_material
       :ORDERED:  t
       :END:
     ** マークアップのガイドライン
        :PROPERTIES:
        :Effort:   2.0
        :END:
     ** ワークフローのガイドライン
        :PROPERTIES:
        :Effort:   2.0
        :END:
     * プレゼンテーション
       :PROPERTIES:
       :Effort:   2.0
       :BLOCKER:  training_material { gapduration 1d } preparation
       :END:

12.8.6 レポート
-------------------

TaskJugglerは多くのレポートを作成できます。(例えば gantt chart, resource
allocationなど)。TaskJugglerファイルにあるプロジェクトでどのレポートを作成す
るか定義することができます。エクスポート機能は自動的にデフォルトのレポートを
ファイルに挿入します。それらは、`org-export-taskjuggler-default-reports'で定
義されています。カスタマイズ機能を使って、他の様々なオプションを変更すること
ができます。ほかのオプションについて知りたい時は `M-x customize-group
<RET> org-export-taskjuggler <RET>'と入力した確認してく ださい。

   さらに詳しい情報や例を見たい時は、
`http://orgmode.org/worg/org-tutorials/org-taskjuggler.html'で
Org-taskjugglerチュートリアルを見てください。


File: org-ja,  Node: Freemindエクスポート,  Next: XOXOエクスポート,  Prev: TaskJugglerエクスポート,  Up: エクスポート

12.9 Freemindエクスポート
===============================

Freemindのエクスポート機能はLennart Borgmanによって作成されました。

`C-c C-e m     (`org-export-as-freemind')'
     Freemindのマインドマップファイル `myfile.mm' を出力します。


File: org-ja,  Node: XOXOエクスポート,  Next: iCalendarエクスポート,  Prev: Freemindエクスポート,  Up: エクスポート

12.10 XOXOエクスポート
============================

Org-modeにはXOXOスタイルで出力するエクスポート機能があります。現在、このエク
スポート機能は一般的なアウトライン構造を扱うだけで、Org-modeの特徴を解釈しま
せん。

`C-c C-e x     (`org-export-as-xoxo')'
     XOXOファイルを `myfile.html'として出力します。

`C-c C-e v x'
     見えている部分だけを出力 します。


File: org-ja,  Node: iCalendarエクスポート,  Prev: XOXOエクスポート,  Up: エクスポート

12.11 iCalendarエクスポート
=================================

Org-modeユーザーには、プロジェクトの進行を記録している人もいますが、中にはま
だ誕生日や予約のために標準的なカレンダーアプリケーションを好む人もいます。こ
のような場合、カレンダーアプリケーションでOrg-modeのファイルにあるデッドライ
ンとタイムスタンプのある項目が表示されると便利です。Org-modeはカレンダーの情
報を標準的なiCalendarに出力することができます。もしTODOアイテムも出力したい
ならば、変数`org-icalendar-include-todo'を調整しま。タイムスタンプはVEVENTと
して出力され、TODOアイテムはVTODOとして出力されます。TODOアイテムでないデッ
ドラインもイベントが生成されます。デッドラインとTODOアイテムの予定日はTODOア
イテム(1)の開始日と期日として扱われます
。カテゴリーには、見出しで定義されたタグやファイルやツリーのカテゴリー
(2)が使われます。アラームを設定する方法については、変数
`org-icalendar-alarm-time'を参照してください。

標準のiCalendar形式はそれぞれのエントリーにグローバルでユニークな識別子(UID)
が必要となります。Org-modeではエクスポートする際にこの識別子を作成します。変
数`org-icalendar-store-UID'が設定されていると、UIDはエントリーの
`:ID:'属性に保存され、次にこのエントリーを使うときに再度利用されます。一つの
項目が複数のiCalendar形式の項目(タイムスタンプ、デッドライン、スケジューリン
グされたアイテムやTODOアイテム)となるので,
エントリーの中のトリガーによって、Org-modeはUIDにプレフィックスをつけます。
このようにして、UIDはユニークな値となりますが、同期処理では全て異なるエント
リーから作られたエントリーとみなされるでしょう。

`C-c C-e i     (`org-export-icalendar-this-file')'
     現在のファイルからiCalendar形式のエントリーを作成し、拡張子`.ics'をつ
     けて同じディレクトリに保存します。

`C-c C-e I     (`org-export-icalendar-all-agenda-files')'
     `C-c C-e
     i'に似ていますが、`org-agenda-files'で指定された全てのファイ
     ルで実行されます。それぞれのファイルでiCalendar形式のファイルが作成さ
     れます。

`C-c C-e c     (`org-export-icalendar-combine-agenda-files')'
     `org-agenda-files'で指定されたファイルから単一のiCalendar形式のファイ
     ルを生成し、`org-combined-agenda-icalendar-file'で指定されたファイルに
     出力します。

   エクスポート機能はエントリーがSUMMARY、DESCRIPTIONそしてLOCATION属性
(3)を持っていた場合、それを継承します。なかっ
た場合はSUMMARY属性は見出しから抽出され、DESCRIPTION属性はその内容
(`org-icalendar-include-body'で制限されます。)から抽出されます。

このカレンダーを読んだり更新したりするのにベストな方法は、使うカレンダーアプ
リケーション次第です。FAQではこの問題についてカバーしています。

   ---------- Footnotes ----------

   (1) 詳しくは変数`org-icalendar-use-deadline'と
`org-icalendar-use-scheduled'を見てください。

   (2)
継承したタグやTODOの状態を追加するには変数`org-icalendar-categories'をカス
タマイズしてください。

   (3)
`org-use-property-inheritance'を設定した場合、それに応じてLOCATION属性は高
い階層からその値が継承されます。


File: org-ja,  Node: 公開,  Next: ソースコードとの連携,  Prev: エクスポート,  Up: Top

13 公開
*********

Org-modeは連結されたOrg-modeのファイルから成る_projects_の自動的なHTMLへの変
換設定をあなたに許可します。あなたはまた、エクスポートしたHTMLページと画像や
ソースコードのような関係する添付ファイルの自動的なアップロードをOrg-modeに設
定できます。

あなたはまた、Org-modeからPDFへ変換することもでき、さらに、サーバ上で両方の
ファイルを利用できるようにHTMLとPDFへの変換を組み合わせることも可能です。

   公開はDavid O'TooleによってOrg-modeに寄与されました。

* Menu:

* 設定::                   プロジェクトの定義
* ファイルのアップロード::  ファイルをサーバにアップロードする方法
* 設定例::                プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド


File: org-ja,  Node: 設定,  Next: ファイルのアップロード,  Prev: 公開,  Up: 公開

13.1 設定
===========

公開はファイルの指定、公開先、プロジェクトのその他多くのプロパティの重要な設
定を必要とします。

* Menu:

* プロジェクトのリスト::  主な設定用の変数
* ソースと公開先::    ここからそこまで
* ファイルの選択::    どのファイルがプロジェクトの一部なのか
* 公開アクション::    公開を行う関数の設定
* 公開オプション::    HTML/LaTeXエクスポートの調整
* ファイルリンク付きの公開::  どのリンクを公開した後も有効にしておくか
* サイトマップ::       全てのページリストの生成
* インデックスの生成::  ページを超えたインデックス


File: org-ja,  Node: プロジェクトのリスト,  Next: ソースと公開先,  Prev: 設定,  Up: 設定

13.1.1 `org-publishing-alist'変数
-----------------------------------

公開は`org-publish-project-alist'というある変数の値により設定されます。リス
トの各要素が1つのプロジェクトの設定で、2種類の設定方法について以下に示します
:

        ("project-name" :property value :property value ...)
          i.e. a well-formed property list with alternating keys and values
     or
        ("project-name" :components ("project-name" "project-name" ...))

どちらの場合もプロパティと値の指定によって設定されます。プロジェクトは公開さ
れるファイルのセットと、それらが公開される時に使用する設定を定義します。上記
の2番目の形式を取る場合、`:components'プロパティの個々のメンバは異なる公開設
定を持つファイルをまとめたサブプロジェクトとして扱われます。あなたが"メタプ
ロジェクト"を公開する時、全てのコンポーネントは特定の順序で公開されます。


File: org-ja,  Node: ソースと公開先,  Next: ファイルの選択,  Prev: プロジェクトのリスト,  Up: 設定

13.1.2 ファイルの送り元と送り先
-------------------------------------------

多くの<プロパティは任意に選択でき、しかし多くは常にセットされているべきです
。特に、Org-modeはソースファイルをどこで探すか、またファイルの公開先を知る必
要があります。

`:base-directory'      公開するソースファイルを含むディレクトリ
`:publishing-directory'アウトプットファイルのあるディレクトリは公開されます。あなたはEmacs`tramp'
                       パッケージの構文のファイル名を使ってウェブサーバに直接公開することができます
                       。もしくは、ローカルディレクトリに公開したり、あなたのウェブサイト
                       (*note
                       ファイルのアップロード::)にアップロードするための拡張ツールを使うことができ
                       ます。
`:preparation-function'公開プロセスの開始前に呼ばれる関数または関数のリストです(例えば、公開のため
                       のファイルの更新に使う`make'を実行します)。`project-plist'変数であるプロジェ
                       クトのプロパティリストはこの呼び出しにスコープされます。
`:completion-function' 公開プロセスが完了した後に呼ばれる関数または関数のリストです(例えば、出力し
                       たファイルの権限を変更します)。`project-plist'変数であるプロジェクトのプロパ
                       ティリストはこの呼び出しにスコープされます。


File: org-ja,  Node: ファイルの選択,  Next: 公開アクション,  Prev: ソースと公開先,  Up: 設定

13.1.3 ファイルの選択
----------------------------

デフォルトでは、ベースディレクトリの中の拡張子が`.org'である全てのファイルは
プロジェクトの一部であるとみなされます。これはプロパティの設定により変更する
ことができます:
`:base-extension'  ソースファイルの拡張子(.を除きます!)です。これは実際は正規表現です。もしあ
                   なたが`:base-directory'の中の全てのファイルを取得したいのであれば、`any'シン
                   ボルをセットします。
`:exclude'         そのファイルの拡張子が選択されていたとしても、公開したくないファイル名にマ
                   ッチする正規表現。
`:include'         `:base-extension'と`:exclude'にかかわらずインクルードするファイルのリスト。
`:recursive'       nilでなければ、ベースディレクトリから再帰的に公開するファイルをチェックしま
                   す。


File: org-ja,  Node: 公開アクション,  Next: 公開オプション,  Prev: ファイルの選択,  Up: 設定

13.1.4 公開アクション
----------------------------

公開は、ファイルを宛先ディレクトリにコピーし、場合によっては変換することです
。デフォルトの変換はOrg-modeファイルからHTMLファイルへのエクスポートで、これ
はHTMLエクスポーター(*note HTMLのエクスポート::)を呼び出す
`org-publish-org-to-html'によって行われます。しかしあなたはまた、
`org-publish-org-to-pdf'を用いたPDFファイルのようなコンテンツも公開すること
ができます。もしあなたがアーカイブされた、コメントされた、除外タグがついたツ
リーを消去したOrg-modeファイル自身を公開したいのであれば、
`org-publish-org-to-org'を使い、`:plain-source'パラメーターと/または
`:htmlized-source'をセットします。これは公開ディレクトリ(1)に`file.org'と`file.org.html'を作り
ます。画像のようなその他のファイル公開ディレクトリにコピーされる必要がありま
す;
このために、あなたは`org-publish-attachment'を使うことができます。Org-modeで
ないファイルのために、あなたは常に公開用の関数を指定する必要があります:

`:publishing-function' ファイルの公開を実行する関数です。これは、順番に呼び出される関数のリストに
                       することもできます。
`:plain-source'        nilでなければ、プレーンソースを公開します。
`:htmlized-source'     nilでなければ、HTMLに変換されたソースを公開します。

   関数には3つの引数を渡す必要があります:
最低でも`:publishing-directory'プロパティを含むプロパティリスト、公開される
ファイル名、出力ファイルの公開ディレクトリへのパスです。それは指定されたファ
イルを取り、(もしあれば)必要な変換を行い、出力をコピー先ディレクトリに置きま
す。

   ---------- Footnotes ----------

   (1) もしソースと公開デ
ィレクトリが同じであれば、`file-source.org'と`file-source.org.html'です。こ
のようなセットアップでは、プロジェクトが公開される次回、新しいOrg-modeファイ
ルとみなされるソースファイルが公開されるのを防ぐためにあなたは
`:exclude
\"-source\\\\.org\"'を`org-publish-alist'中のプロジェクトの定義に
追加する必要があることに注意しください。


File: org-ja,  Node: 公開オプション,  Next: ファイルリンク付きの公開,  Prev: 公開アクション,  Up: 設定

13.1.5 HTML/LaTeXエクスポート機能のオプション
-----------------------------------------------------------

プロパティリストはHTMLとLaTeXエクスポート機能の多くのエクスポートオプション
をセットするために使うことができます。多くの場合、これらのプロパティは
Org-mode中のユーザ変数と対応します。下のテーブルはそれらが所属する変数と同様
なプロパティのリストです。各変数の詳細については、ドキュメントを参照してくだ
さい。

`:link-up'              `org-export-html-link-up'
`:link-home'            `org-export-html-link-home'
`:language'             `org-export-default-language'
`:customtime'           `org-display-custom-times'
`:headline-levels'      `org-export-headline-levels'
`:section-numbers'      `org-export-with-section-numbers'
`:section-number-format'`org-export-section-number-format'
`:table-of-contents'    `org-export-with-toc'
`:preserve-breaks'      `org-export-preserve-breaks'
`:archived-trees'       `org-export-with-archived-trees'
`:emphasize'            `org-export-with-emphasize'
`:sub-superscript'      `org-export-with-sub-superscripts'
`:special-strings'      `org-export-with-special-strings'
`:footnotes'            `org-export-with-footnotes'
`:drawers'              `org-export-with-drawers'
`:tags'                 `org-export-with-tags'
`:todo-keywords'        `org-export-with-todo-keywords'
`:priority'             `org-export-with-priority'
`:TeX-macros'           `org-export-with-TeX-macros'
`:LaTeX-fragments'      `org-export-with-LaTeX-fragments'
`:latex-listings'       `org-export-latex-listings'
`:skip-before-1st-heading'`org-export-skip-text-before-1st-heading'
`:fixed-width'          `org-export-with-fixed-width'
`:timestamps'           `org-export-with-timestamps'
`:author'               `user-full-name'
`:email'                `user-mail-address' : `addr;addr;..'
`:author-info'          `org-export-author-info'
`:email-info'           `org-export-email-info'
`:creator-info'         `org-export-creator-info'
`:tables'               `org-export-with-tables'
`:table-auto-headline'  `org-export-highlight-first-table-line'
`:style-include-default'`org-export-html-style-include-default'
`:style-include-scripts'`org-export-html-style-include-scripts'
`:style'                `org-export-html-style'
`:style-extra'          `org-export-html-style-extra'
`:convert-org-links'    `org-export-html-link-org-files-as-html'
`:inline-images'        `org-export-html-inline-images'
`:html-extension'       `org-export-html-extension'
`:html-preamble'        `org-export-html-preamble'
`:html-postamble'       `org-export-html-postamble'
`:xml-declaration'      `org-export-html-xml-declaration'
`:html-table-tag'       `org-export-html-table-tag'
`:expand-quoted-html'   `org-export-html-expand'
`:timestamp'            `org-export-html-with-timestamp'
`:publishing-directory' `org-export-publishing-directory'
`:select-tags'          `org-export-select-tags'
`:exclude-tags'         `org-export-exclude-tags'
`:latex-image-options'  `org-export-latex-image-default-option'

`org-export-with-*'変数の大部分はLaTeXエクスポートで`nil'と`t'のそれぞれで
`:TeX-macros'と`:LaTeX-fragments'オプションを除きHTMLとLaTeXエクスポート機能
の両方で同じ効果を持ちます。このオプションのリストをチェックするには
`org-export-plist-vars'を見てください。

プロパティが`org-publish-project-alist'中の値で与えられた時、その設定は公開
時に対応するユーザー変数を上書きします。オプションをファイル (*note
エクスポートオプション::)内でセットしても、全て上書きされます。


File: org-ja,  Node: ファイルリンク付きの公開,  Next: サイトマップ,  Prev: 公開オプション,  Up: 設定

13.1.6 公開ファイル間のリンク
----------------------------------------

あるOrg-modeファイルから別のファイルへのリンクを作成する方法として、あなたは
`[[file:foo.org][The foo]]'、もしくはより単純な `file:foo.org.'(*note
ハイパーリンク::)のような形式を使うことができます。公開する
とき、このリンクは`foo.html'へのリンクとなります。この方法では、あなたはあな
たの\"Org-modeウェブ\"プロジェクトのページとHTMLへ公開するときにリンクを連結
することができます。もしあなたがOrg-modeのソースファイルを公開したりそこへの
リンクを作成したいのであれば、`file:'リンクは対応する`html'ファイルにリンク
が変換されるため、`file:'リンクの代わりに`http:'リンクを使います。

あなたはまた、画像のような関連するファイルへのリンクを作成することができます
。あなたが関連するファイル名に慎重になっているとき、そしてあなたが関連するフ
ァイルをアップロードするOrg-modeの設定をするとき、これらのリンクも働きます。
使い方の例は、*note 複雑な例::を参照してください。

時々、公開されるOrg-modeファイルはあなたの製品環境内でのみ有効で、公開する場
所では有効でないなリンクを含むことができます。この場合、次のプロパティを使い
ます。

`:link-validation-function'   有効にする関数

このプロパティはリンクの有効性をチェックする関数を定義します。この関数はファ
イル名と製品環境内で解釈できるファイル名に関連するディレクトリ2つの引数を持
ちます。もしこの関数が`nil'を返すなら、HTMLジェネレータはHTMLファイルにリン
クを除き説明のみ挿入します。この関数へのオプションとして、
`org-publish-project-alist'中のプロジェクトの一部であるファイルが与えられて
いるなチェックする`org-publish-validate-link'があります。


File: org-ja,  Node: サイトマップ,  Next: インデックスの生成,  Prev: ファイルリンク付きの公開,  Up: 設定

13.1.7 サイトマップの生成
----------------------------------

以下のプロパティはプロジェクトのファイルのマップの公開を制御するために使うこ
とができます。

`:auto-sitemap'           nilでないとき、`org-publish-current-project'もしくは`org-publish-all'の実行
                          中にサイトマップを公開します。
`:sitemap-filename'       出力するサイトマップのファイル名です。デフォルトでは
                          `sitemap.org'(`sitemap.html'になります)です。
`:sitemap-title'          サイトマップページのタイトルです。デフォルトはファイル名です。
`:sitemap-function'       サイトマップの生成に使うプラグイン関数です。デフォルトでは
                          `org-publish-org-sitemap'で、プロジェクト中の全てのファイルへのリンクのプレ
                          ーンリストを生成します。
`:sitemap-sort-folders'   フォルダがサイトマップに表示される位置です。先頭か最後にそれぞれフォルダを
                          表示するため、これに`first'(デフォルト)か`last'をセットしてください。
`:sitemap-sort-files'     サイトマップ中でのファイルのソート方法です。`alphabetically'(デフォルト)、
                          `chronologically'または`anti-chronologically'をセットします。
                          `chronologically'はファイルを日付の古い順番にソートし、
                          `anti-chronologically'は新しい順番にソートします。`alphabetically'はファイル
                          をアルファベット順にソートします。ファイルの日付は`org-publish-find-dat'によ
                          り検索します。
`:sitemap-ignore-case'    ソート時に大文字と小文字を区別するかどうかです。デフォルトでは`nil'です。
`:sitemap-file-entry-format'このオプションでサイトマップのエントリがサイトマップでフォーマットされてい
                          るか知ることができます。これはエスケープシークエンスを含むフォーマット文字列
                          です:
                          `%t'はファイルのタイトル、`%a'はファイルの著者、`%d'はファイルの日付を表しま
                          す。日付は`org-publish-find-date'関数により検索され、
                          `org-publish-sitemap-date-format'によりフォーマットされます。デフォルトは
                          `%t'です。
`:sitemap-date-format'    エントリの日付をどのようにフォーマットするかを決める`format-time-string'関
                          数用のフォーマット文字列です。このプロパティはデフォルトでは`%Y-%m-%d'である
                          `rog-publish-sitemap-date-format'を迂回します.


File: org-ja,  Node: インデックスの生成,  Prev: サイトマップ,  Up: 設定

13.1.8 インデックスの生成
----------------------------------

Org-modeは公開するプロジェクトのファイルを跨ぐインデックスを生成することがで
きます。

`:makeindex'       nilでないとき、`theindex.org'ファイルにインデックスを作成し、
                   `theindex.html'に公開します。

`:makeindex'を設定したプロジェクトの最初の公開のとき、ファイルは作成されます
。ファイルは`#+include:
\"theindex.inc\"'ステートメントのみを含みます。あな
たはタイトルやスタイル情報等をステートメントの周囲に追加することができます。


File: org-ja,  Node: ファイルのアップロード,  Next: 設定例,  Prev: 設定,  Up: 公開

13.2 ファイルのアップロード
======================================

Trampに深く頼っているOrg-modeの組込みの公開機能を使うことは望ましくなく、
`rsync'や`unison'のようなサードパーティの同期ツールを人々は活用しています。
Trampは非常に便利で協力ですが、複数のファイルを送る場合効率的でない場合があ
り、ヘビーに使う環境下での問題の原因として知られています。

専用の同期ユーティリティはいくつかのアドバンテージを提供します。タイムスタン
プの比較に加えて、コンテンツや権限、属性のチェックも行います。そういうわけで
、あなたのWEBページをローカルディレクトリ(場合によるとOrg-modeファイルの場所
で)に公開し、そして`unison'や`rsync'をリモートホストとの同期に使うために選ぶ
ことができます。

Unisonはファイルを信頼できるリモートの公開先に転送する設定を行うことができる
ので、プロジェクトの公開についての定義を非常にシンプルにすることができます。
`org-publish'を用いるあなたのOrg-modeファイルの処理と同期ツールの設定により
、正しい場所で全てのファイルをシンプルに保ちます。このシナリオでは、`jpg'や
`css'、`gif'のようなファイルの添付については、サードパーティの同期ツールがそ
れらを同期するため、設定する必要がありません。

   ローカルディレクトリの公開はリモートへの公開に比べると高速で、
全てのプロジェクトをより簡単に再公開できます。もしあなたが
`org-publish-use-timestamp-flag'を`nil'に設定しているのであれば、変更が加え
られた`#+INCLUDE'でインクルードしたたソースファイルのような外部ファイルの再
公開で恩恵を受けます。Org-modeにおけるタイムスタンプのメカニズムはファイルに
変更が加えられたかどうか検出できるほどスマートではありません。


File: org-ja,  Node: 設定例,  Next: 公開の開始,  Prev: ファイルのアップロード,  Up: 公開

13.3 設定例
==============

私達は2つの設定の例を以下に示します。1つ目の設定はOrg-modeファイルのみのシン
プルなプロジェクトの公開です。2つ目の設定は複数のコンポーネントを持つプロジ
ェクトで、少し複雑な例です。

* Menu:

* 簡単な例::             1コンポーネントでの公開
* 複雑な例::             複数コンポーネントでの公開


File: org-ja,  Node: 簡単な例,  Next: 複雑な例,  Prev: 設定例,  Up: 設定例

13.3.1 例：シンプルな公開用の設定
----------------------------------------------

この例はOrg-modeファイルのセットをローカルマシンの`public_html'にディレクト
リ公開します。

     (setq org-publish-project-alist
           '(("org"
              :base-directory "~/org/"
              :publishing-directory "~/public_html"
              :section-numbers nil
              :table-of-contents nil
              :style "<link rel=\"stylesheet\"
                     href=\"../other/mystyle.css\"
                     type=\"text/css\"/>")))


File: org-ja,  Node: 複雑な例,  Prev: 簡単な例,  Up: 設定例

13.3.2 例：複雑な公開用の設定
----------------------------------------

この少し複雑な例はHTMLに変換されたorg-modeファイル、画像ファイル、Emacs
Lispのソースコード、スタイルシートなどを含む全てのウェブサイトを公開します。
公開ディレクトリはリモートと除外されたプライベートなファイルです。

リンクが保持されていることを保証するには、ウェブサーバ上のディレクトリ構造の
再現、ファイルの相対パスの使用を慎重にするべきです。例えば、もしあなたの
Org-modeファイルが`~/org'に、公開する画像が`~/image'にあるとすると、あなたは
画像のリンクを以下のようにします。
     file:../images/myimage.png
ウェブサーバ上では、画像への相対パスは同じにするべきです。あなたは\"images\"
フォルダをウェブサーバ上の正しい一に置き、画像をそこに公開することでこれを達
成することができます。

     (setq org-publish-project-alist
           '(("orgfiles"
               :base-directory "~/org/"
               :base-extension "org"
               :publishing-directory "/ssh:user@host:~/html/notebook/"
               :publishing-function org-publish-org-to-html
               :exclude "PrivatePage.org"   ;; regexp
               :headline-levels 3
               :section-numbers nil
               :table-of-contents nil
               :style "<link rel=\"stylesheet\"
                       href=\"../other/mystyle.css\" type=\"text/css\"/>"
               :html-preamble t)

              ("images"
               :base-directory "~/images/"
               :base-extension "jpg\\|gif\\|png"
               :publishing-directory "/ssh:user@host:~/html/images/"
               :publishing-function org-publish-attachment)

              ("other"
               :base-directory "~/other/"
               :base-extension "css\\|el"
               :publishing-directory "/ssh:user@host:~/html/other/"
               :publishing-function org-publish-attachment)
              ("website" :components ("orgfiles" "images" "other"))))


File: org-ja,  Node: 公開の開始,  Prev: 設定例,  Up: 公開

13.4 公開の開始
====================

一度適切に設定すると、Org-modeは以下のコマンドを使うことで公開することができ
ます。

`C-c C-e X     (`org-publish')'
     プロンプトでプロジェクトを指定し、プロジェクト
     の全てのファイルを公開します。

`C-c C-e P     (`org-publish-current-project')'
     現在のファイルを含むプロジェク トを公開します。

`C-c C-e F     (`org-publish-current-file')'
     現在のファイルのみ公開します。

`c-c C-e E     (`org-publish-all')'
     全てのプロジェクトを公開します。

Org-modeはファイルが変更された時を記録するためにタイムスタンプを使います。上
記の関数は通常変更されたファイルのみを公開します。あなたはこれを上書きし、上
記コマンドに前置引数を付けて実行するか`org-publish-use-timestamps-flag'変数
をカスタマイズすることで全てのファイルを強制的に公開できます。もし、ファイル
が`#+SETUPFILE:'や`#+INCLUDE:'を用いて他のファイルをインクルードしているなら
特別必要です。


File: org-ja,  Node: ソースコードとの連携,  Next: その他,  Prev: 公開,  Up: Top

14 ソースコードとの連携
*********************************

`src'ブロックを使う事でOrg-modeの文書にソースコードを含めることができます。
例えば

     #+BEGIN_SRC emacs-lisp
       (defun org-xor (a b)
          "Exclusive or."
          (if a (not b) b))
     #+END_SRC

Org-modeでは生のソースコードと連携する幾つかの機能を用意してます。その機能に
は、コードブロックをそのメジャーモードで編集する機能、コードブロックを評価す
る機能、コードブロックをソースコードへと変換する機能(文芸的プログラミングで
は"tangling"と知られている機能)、そしてコードブロックとその結果を幾つかのフ
ォーマットに沿ってエクスポートする機能が含まれます。この機能はもともと
Org-bablelと名付けられ、Eric SchultとDan
Davidsonによって開発されました。

以下のセクションでは、Org-modeでコードブロックを取り扱う機能について説明しま
す。

* Menu:

* コードブロックの構造::  コードブロックシンタックスについて
* ソースコードの編集::  言語のメジャーモードを用いた編集
* コードブロックのエクスポート::  コード(と/または)結果のエクスポート
* ソースコードの抽出::  ソースコードのみのファイルの作成
* コードブロックの評価::  Org-modeバッファ中の評価結果の場所
* Babelライブラリ::     有用なコードブロックのライブラリを読む、そして貢献す
る
* 言語::                   コードブロックがサポートする言語一覧
* ヘッダー引数::       コードブロックの機能的な設定
* 評価の結果::          評価の結果を操作する方法
* Nowebでの参照の構文::  Org-modeでの文芸的プログラミング
* キーバインドと便利関数::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す


File: org-ja,  Node: コードブロックの構造,  Next: ソースコードの編集,  Prev: ソースコードとの連携,  Up: ソースコードとの連携

14.1 コードブロックの構造
===================================

コードブロックの構造は以下の通りです:

     #+srcname: <name>
     #+begin_src <language> <switches> <header arguments>
       <body>
     #+end_src

スイッチとヘッダー引数は省略可能です。次のように、コードを文章にインラインで
埋め込むこともできます。

     src_<language>{<body>}

   もしくは

     src_<language>[<header arguments>]{<body>}

`<name>'
     この「name」はコードブロックと関連付けられています。これは、Org-modeの
     ファイル内でテーブルに名前を付ける`#+tblname'行と似ています。コードブ
     ロックの名前を参照することで、そのファイル内の別の場所にあるコードブロ
     ックや別のファイルの別の場所にあるコードブロック、またはOrg-modeのテー
     ブルの計算式(*note
     スプレッドシート::を見て下さい)にあるコードブロックから評
     価することが可能となります。

`<language>'
     ブロック内にあるコードの言語です。

`<switches>'
     コードブロックのエクスポートを管理する省略可能なスイッチです
     (*note リテラルの例::を参照してください)

`<header arguments>'
     コードブロックの評価、コードブロックのエクスポート、そしてコードブロッ
     クからのソースコードの抽出において、省略可能なヘッダー引数が多くの側面
     を管理します。*note
     ヘッダー引数::セクションを見て下さい。プロパティを使うこ
     とで、バッファ毎もしくはサブツリー毎にヘッダー引数を設定できます。

`<body>'
     ソースコードです。


File: org-ja,  Node: ソースコードの編集,  Next: コードブロックのエクスポート,  Prev: コードブロックの構造,  Up: ソースコードとの連携

14.2 ソースコードの編集
================================

現在のコードブロックを編集するには`C-c
''を使ってください。コードブロックの
本文を含んだ編集バッファが、その言語のメジャーモードで新たに開かれます。この
バッファを保存すると、Org-modeのバッファへ新しい内容を上書きします。終了させ
るには再度`C-c ''を使って下さい。

編集バッファにて`org-src-mode'のマイナーモードが起動します。編集バッファの振
る舞いを設定するために、以下の変数が使えます。さらなる設定オプションについて
は、カスタマイズのグループ`org-edit-structure'も見て下さい。

`org-src-lang-modes'
     `<lang>-mode'と名付けられたメジャーモードがEmacsに存在する場合、そのメ
     ジャーモードで編集バッファを開きます。ここで`<lang>'とは、コードブロッ
     クのヘッダー行で指名された言語のことです。存在するメジャーモードに任意
     の言語名を割り当てるために、この変数を使えます。

`org-src-window-setup'
     編集バッファを新規作成する時に、Emacsのウィンドウが再配置される方法を
     管理します。

`org-src-preserve-indentation'
     ホワイトスペース(空白)のインデントが非常に重要であるPythonなどの言語を
     tangling(コード本文を抽出)するときに、この変数は特に役に立ちます。

`org-src-ask-before-returning-to-edit-buffer'
     デフォルトでは、既に開いてある編集バッファへと戻る前に、Org-modeが確認
     のプロンプトを出します。確認のプロンプトを出さずにバッファを変更するに
     は、この変数をnilに設定してください。

_Org-mode_バッファ内にもかかわらず、記述した言語をメジャーモードの配色で表示
したい場合には、変数`org-src-fontify-natively'を設定してください。


File: org-ja,  Node: コードブロックのエクスポート,  Next: ソースコードの抽出,  Prev: ソースコードの編集,  Up: ソースコードとの連携

14.3 コードブロックのエクスポート
===============================================

コードブロックの_内容_、コードブロックを評価した_結果_、_いずれでもないもの_
、もしくは内容と結果_両方_をエクスポートできます。ほとんどの言語では、デフォ
ルトの設定ではコードブロックの内容をエクスポートします。しかし、ある言語(例
えば
`ditaa')では、デフォルトの設定でコードブロックを評価した結果をエクスポートし
ます。コードブロックの本文をエクスポートするには、*note
リテラルの例::を参照してく ださい。

ヘッダー引数`:exports'を設定することで、エクスポート時の振る舞いを指定できま
す:

ヘッダー引数:
...................

`:exports code'
     ほとんどの言語でのデフォルトの設定です。*note
     リテラルの例::で述べたように、 コードブロックの本文が出力されます。

`:exports results'
     エクスポートするために、コードブロックが評価され、その結果がOrg-modeの
     バッファに出力されます。バッファ内に以前評価した結果があればその結果を
     更新し、もし以前に評価した結果が無ければ直ちに今回の評価結果をコードブ
     ロックの後に追記します。コードブロックの本文はエクスポートされません。

`:exports both'
     コードブロックとその結果の両方がエクスポートされます。

`:exports none'
     コードブロックとその結果のいずれもエクスポートされません。

   エクスポートの間、コードブロックの評価を抑止することも可能です。変数
`org-export-babel-evaluate'を`nil'と設定することで、エクスポートのプロセスの
一部としてのコードブロックの評価を抑止できます。例えばwikiのマークアップ言語
としてOrg-modeを使う場合など、信頼できない可能性があるOrg-modeが自動的にエク
スポートされる場合には、この設定が役立ちます。


File: org-ja,  Node: ソースコードの抽出,  Next: コードブロックの評価,  Prev: コードブロックのエクスポート,  Up: ソースコードとの連携

14.4 ソースコードの抽出
================================

ソースブロックからコードを抽出して純粋なソースコードファイルを作成することを
、"tangling"といいます。この用語は文芸的プログラミングのコミュニティで使わ
れている専門用語です。コードブロックを"tangling"する間、変数と"noweb"ス
タイルの参照点(*note Nowebでの参照の構文::を参照)との両方を展開できる
`org-babel-expand-src-block'を使ってコードブロックの本文を展開します。

ヘッダー引数
..................

`:tangle no'
     デフォルトの設定です。コードブロックは、tangleされたアウトプットには含
     まれません。

`:tangle yes'
     tangleされたアウトプットにコードブロックが含まれます。アウトプットされ
     るファイルの名前は、orgファイルの拡張子`.org'をブロックに記述した言語
     の拡張子名に置換したものです。

`:tangle filename'
     `filename'へのtangleされたアウトプットにはコードブロックを含みます。

関数
......

`org-babel-tangle'
     現在のファイルをtangleします。キーバインドは`C-c C-v t'です。

`org-babel-tangle-file'
     tangleするファイルを選びます。キーバインドは`C-c C-v f'です。

フック
.........

`org-babel-post-tangle-hook'
     関数`org-babel-tangle'によってtangleされたコードファイルの中から、この
     hookが実行されます。tangleされたコードファイルの後処理、編集もしくは評
     価を、実用例として含められます。


File: org-ja,  Node: コードブロックの評価,  Next: Babelライブラリ,  Prev: ソースコードの抽出,  Up: ソースコードとの連携

14.5 コードブロックの評価
===================================

コードブロックを評価し(1)、その結果をOrg-modeバッファに表示することが可能です。デフォルトでは
、`emacs-lisp'のコードブロックだけを評価しますが、多くの言語での評価のサポー
トがあります。サポートされている言語のリストは、*note
言語::で見ることができます。 コードブロックを定義する構文について*note
コードブロックの構造::を参照してください 。

コードブロックを評価する方法は多くあります。一番簡単な方法は、コードブロック
(2)にて`C-c C-c'もしくは`C-c C-v e'を
と入力することです。これが関数`org-babel-execute-src-block'をコール、コード
ブロックを評価し、その結果をOrg-modeバッファに挿入します。

Org-modeのバッファ内、もしくはOrg-modeのテーブル内のどこからでも、名前付きの
コードブロックを評価することも可能です。現在のOrg-modeバッファや"Library
of Babel"(*note
Babelライブラリ::にあるコードブロックを離れた場所から実行するには
、`#+call'行
(もしくは同義語として`#+function'行や`#+lob'行)が使えます。これらの行は、以
下の構文を使います。

     #+call: <name>(<arguments>) <header arguments>
     #+function: <name>(<arguments>) <header arguments>
     #+lob: <name>(<arguments>) <header arguments>

`<name>'
     評価されるコードブロックの名前です。

`<arguments>'
     この場所に記述された引数をコードブロックへと渡します。通常の関数呼び出
     しの構文を使って呼び出されたコードブロック内では、これらの引数はヘッダ
     ー引数`:var'と関係しています。例えば、`double'と名付けられたもともとの
     コードブロックではヘッダー引数が`:var
     n=2'と書かれている場合、そのコー
     ドブロックへ数値の4を渡すには、call行を`#+call:
     double(n=4)'と記述しま す。

`<header arguments>'
     関数呼び出しの後にヘッダー引数をセットできます。ヘッダー引数の詳細につ
     いては*note ヘッダー引数::を参照してください。

   上の`<header arguments>'という部分に記述された全てのヘッダー引数は、
`#+call:'行の評価に適用されます。しかし、時には、コードブロックへ渡すヘッダ
ー引数を指定することが好ましい場合もあります。

   これには、以下の選択可能な拡張された構文を使えます。

     #+call: <name>[<block header arguments>](<arguments>) <header arguments>

   角括弧([])で囲まれた`<block header
arguments>'部分に置かれたヘッダー引数がど
のようなものであっても、名前付きコードブロックの評価に適用されます。
`#+call:'行へとヘッダー引数を渡す例については、*note
関数実行時のヘッダー引数::を 参照してください。

   ---------- Footnotes ----------

   (1) コードを評価するときはいつでも、そのコードが害をなす
可能性があります。Org-modeは、ユーザーから明示的な確認をできたときのみにコー
ドを評価する安全装置をいくつも用意しています。これらの安全装置については(加
えて、それらを無効化する方法についても)、*note
コード評価の安全性::を参照してくだ さい。

   (2)
変数`org-babel-no-eval-on-ctrl-c-ctrl-c'を設定することで、キーバインド
`C-c C-c'からコードの評価を除去できます。


File: org-ja,  Node: Babelライブラリ,  Next: 言語,  Prev: コードブロックの評価,  Up: ソースコードとの連携

14.6 Babelライブラリ
=========================

"Library of
Babel"は、どのOrg-modeのファイルからも呼び出せるコードブロック
のライブラリです。
そのライブラリは、Org-modeの`contrib'ディレクトリのOrg-modeファイルに格納さ
れています。Org-modeのユーザーは、一般的に有用だと考えられる関数をそのライブ
ラリ内に置くことができます。

   "Library of
Babel"で定義されたコードブロックは、あたかも現在のOrg-modeバッファで処理さ
れるかのように、リモートで呼び出せます(リモートでコードブロックを評価する構
文についての情報は、*note コードブロックの評価::を参照してください)。

どんなOrg-modeファイルに記述されたコードブロックでも、`org-babel-lob-ingest'
を使って"Library of Babel"の関数へロードできます。キーバインドは`C-c
C-v i'です。


File: org-ja,  Node: 言語,  Next: ヘッダー引数,  Prev: Babelライブラリ,  Up: ソースコードとの連携

14.7 言語
===========

コードブロックでは、以下の言語を使えます。

言語                 識別子                 言語             識別子
Asymptote            asymptote              Emacs Calc       calc
C                    C                      C++              C++
Clojure              clojure                CSS              css
ditaa                ditaa                  Graphviz         dot
Emacs Lisp           emacs-lisp             gnuplot          gnuplot
Haskell              haskell                Javascript       js
LaTeX                latex                  Ledger           ledger
Lisp                 lisp                   MATLAB           matlab
Mscgen               mscgen                 Objective Caml   ocaml
Octave               octave                 Org-mode         org
Oz                   oz                     Perl             perl
Plantuml             plantuml               Python           python
R                    R                      Ruby             ruby
Sass                 sass                   Scheme           scheme
GNU Screen           screen                 shell            sh
SQL                  sql                    SQLite           sqlite

   言語特有の文書が存在する場合があります。文書が存在する場合、それは
`http://orgmode.org/worg/org-contrib/babel/languages'にて見つけられます。

どの言語を評価するかの管理には、関数`org-babel-load-languages'を使います(デ
フォルトでは`emacs-lisp'のみを評価可能です)。
この変数を設定するには、カスタマイズのインターフェースを使うか、以下のコード
をemacsの設定ファイルに追加します。

     次のコードでは、`emacs-lisp'を評価させないように設定し、`R'のコードブロック
     を評価させるように設定しています。

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . nil)
        (R . t)))

上記方法に加えて、`require'関数を使って関連するelispファイルをロードすること
でも、言語のサポートを有効にできます.

     以下は、`clojure'コードブロックの評価を有効にしています。

     (require 'ob-clojure)


File: org-ja,  Node: ヘッダー引数,  Next: 評価の結果,  Prev: 言語,  Up: ソースコードとの連携

14.8 ヘッダー引数
=======================

ヘッダー引数を通してコードブロックの機能を設定できます。このセクションではヘ
ッダー引数の使い方を概説した後に、各ヘッダー引数の詳細について説明します。

* Menu:

* ヘッダー引数の利用::  ヘッダー引数を設定するための別の方法
* ヘッダー引数の指定::  ヘッダー引数のリスト


File: org-ja,  Node: ヘッダー引数の利用,  Next: ヘッダー引数の指定,  Prev: ヘッダー引数,  Up: ヘッダー引数

14.8.1 ヘッダー引数の利用
----------------------------------

ヘッダー引数の値は6通りの方法で設定できます。以下の説明で、後に説明されるも
のほど、個別の設定として優先されます。

* Menu:

* システム全体のヘッダー引数::  全体的な初期値を設定する
* 各言語のヘッダー引数::  言語ごとに初期値を設定する
* バッファ全体のヘッダー引数::  特定のバッファで初期値を設定する
* Orgプロパティでのヘッダー引数::  ヘッダーまたはバッファに初期値を設定する
* コードブック指定のヘッダー引数::  値を設定するうえで最も一般的な方法
* 関数実行時のヘッダー引数::  最も細かいレベル


File: org-ja,  Node: システム全体のヘッダー引数,  Next: 各言語のヘッダー引数,  Prev: ヘッダー引数の利用,  Up: ヘッダー引数の利用

システム全体のヘッダー引数
.......................................

変数`org-babel-default-header-args'をカスタマイズすることで、システム全体に
わたるヘッダー引数の値を指定できます。

     :session    => "none"
     :results    => "replace"
     :exports    => "code"
     :cache      => "no"
     :noweb      => "no"

例えば、次の例ではヘッダー引数`:noweb'の初期値を`yes'と設定できます。この設
定は、ソースコードブロックを評価する時にデフォルトの設定として`:noweb'の参照
記号を展開します。

     (setq org-babel-default-header-args
     (cons '(:noweb . "yes")
     (assq-delete-all :noweb org-babel-default-header-args)))


File: org-ja,  Node: 各言語のヘッダー引数,  Next: バッファ全体のヘッダー引数,  Prev: システム全体のヘッダー引数,  Up: ヘッダー引数の利用

各言語のヘッダー引数
..............................

それぞれの言語用にデフォルトのヘッダー引数を定義できます。オンライン
`http://orgmode.org/worg/org-contrib/babel'で閲覧可能な言語特有の文書を見て
下さい。


File: org-ja,  Node: バッファ全体のヘッダー引数,  Next: Orgプロパティでのヘッダー引数,  Prev: 各言語のヘッダー引数,  Up: ヘッダー引数の利用

バッファ全体のヘッダー引数
.......................................

Org-modeファイルにある特別な行を使って、バッファ全体にわたるヘッダー引数を設
定できます。その行では、キーワード`#BABEL:'に続いて、普通のヘッダー引数の構
文を使って指定された一連のヘッダー引数があります。

次の例は、`session'を`*R*'と設定し、バッファ内にあるコードブロック毎の
`results'を`silent'と指定しています。この設定により、全ての(コードブロックが
)同一のセッションで実行されること、そして、結果はそのバッファに挿入されない
ことを確かにしています。

     #+BABEL: :session *R* :results silent


File: org-ja,  Node: Orgプロパティでのヘッダー引数,  Next: コードブック指定のヘッダー引数,  Prev: バッファ全体のヘッダー引数,  Up: ヘッダー引数の利用

Orgプロパティでのヘッダー引数
..........................................

ヘッダー引数はOrg-modeのプロパティから読み出すこともできます (*note
プロパティの表記法::を見て下さい)。プロパティはバッファ全体もしくは見出しご
との単位で設定できます。例えば、バッファ内の全コードブロックのヘッダー引数を
設定するには、以下のようにします。

     #+property: tangle yes

デフォルトのヘッダー引数を設定するためにプロパティを使う場合、プロパティは継
承(関係)に沿って参照されます。したがって、以下の見出しに属するサブツリー内の
全てのコードブロックでは、ヘッダー引数`:cache'の値はデフォルトで`yes'となり
ます:

     * アウトラインの見出し
     :PROPERTIES:
     :cache:    yes
     :END:

このように設定されたプロパティは、`org-babel-default-header-args'に設定され
たプロパティを上書きします。Org-modeドキュメント内のプロパティを設定する関数
`org-set-property'を使うのが便利です。キーバインドは`C-c C-x p'です。


File: org-ja,  Node: コードブック指定のヘッダー引数,  Next: 関数実行時のヘッダー引数,  Prev: Orgプロパティでのヘッダー引数,  Up: ヘッダー引数の利用

コードブック指定のヘッダー引数
.............................................

コードブロックのレベルでヘッダー引数に値を割り当てる方法が最も一般的です。
`#+begin_src'行の一部として、ヘッダー引数とその値とを並べることによって設定
されます。このように設定されたプロパティは変数
`org-babel-default-header-args'とプロパティとして設定されたヘッダー引数との
両方を上書きします。以下に示す例では、実行結果をバッファに挿入しないように、
ヘッダー引数`:results'を`silent'と設定し、加えてHTMLやLaTeXへのエクスポート
時にコードブロックの本文だけが保存されるように、ヘッダー引数`:exports'を
`code'と設定しています。

     #+source: factorial
     #+begin_src haskell :results silent :exports code :var n=0
     fac 0 = 1
     fac n = n * fac (n-1)
     #+end_src
同様に、インラインのコードブロックにヘッダー引数を設定することも可能です:

     src_haskell[:exports both]{fac 5}

コードブロックのヘッダー引数を複数行にわたって記述できます。=#+header:=もし
くは=#+headers:=の行を、コードブロックの前に記述するか、名前付きコードブロッ
クの名前とコード本文との間に記述します。

   名前を付けていないコードブロックに複数行のヘッダー引数を設定します:
      #+headers: :var data1=1
      #+begin_src emacs-lisp :var data2=2
        (message "data1:%S, data2:%S" data1 data2)
      #+end_src

      #+results:
      : data1:1, data2:2

   名前を付けたコードブロックに複数行のヘッダー引数を設定します:
        #+source: named-block
        #+header: :var data=2
        #+begin_src emacs-lisp
          (message "data:%S" data)
        #+end_src

        #+results: named-block
        : data:2


File: org-ja,  Node: 関数実行時のヘッダー引数,  Prev: コードブック指定のヘッダー引数,  Up: ヘッダー引数の利用

関数実行時のヘッダー引数
....................................

一番個別のレベルにおいて、Babelライブラリのためのヘッダー引数もしくは関数の
呼び出し行は、下に示す2つの例のように設定できます。`#call:'行の構造について
の更なる情報は、*note コードブロックの評価::を参照してください。

   以下は、ヘッダー引数`:exports
results'を`#+call:'行の評価に適用します。
     #+call: factorial(n=5) :exports results

   以下は、ヘッダー引数`:session
special'をコードブロック`factorial'の評価に適 用します。
     #+call: factorial[:session special](n=5)


File: org-ja,  Node: ヘッダー引数の指定,  Prev: ヘッダー引数の利用,  Up: ヘッダー引数

14.8.2 ヘッダー引数の指定
----------------------------------

以下のヘッダー引数が定義されています:

* Menu:

* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* tangle::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレク
トリの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をト
グルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する


File: org-ja,  Node: var,  Next: results,  Prev: ヘッダー引数の指定,  Up: ヘッダー引数の指定

14.8.2.1 `:var'
...............

ヘッダー引数`:var'はコードブロックへ引数を渡すために使われます。コードブロッ
クに含まれている引数を受け取る方法は、言語によって異なります;これらは、言語
固有の文書にて説明されています。しかし、引数を指定する構文はすべての言語で共
通です。引数に渡される値は、定数(リテラル値)、Org-modeのテーブルとliteral
exampleブロックからの値、他のコードブロックの結果、あるいはEmacs
Lispのコー ドです。--Emacs Lispについては、以下の見出し"Emacs Lisp
evaluation of variables"を見て下さ い。

   これらの値は配列のようにインデックス化できます--以下の見出し
"indexable variable values"を見て下さい。

ヘッダー引数`:var'を使ってコードブロックへ引数を渡すには、以下の構文を使いま
す。

     :var name=assign

   ここで、`assign'は以下のフォームのどれかをとることができます。

   * 定数(リテラル値)
     文字列(例:`"string"')、もしくは数字(例:`9')のどちらかです。

   * 参照 テーブルの名前:

          #+tblname: example-table
          | 1 |
          | 2 |
          | 3 |
          | 4 |

          #+source: table-length
          #+begin_src emacs-lisp :var table=example-table
          (length table)
          #+end_src

          #+results: table-length
          : 4

     `#+srcname:'(訳者注:`#+source:'と同一のもの)で割り当てられたコードブロ
     ックの名前で、後ろに括弧「()」が続きます。

          #+begin_src emacs-lisp :var length=table-length()
          (* 2 length)
          #+end_src

          #+results:
          : 8

     加えて、`:var'により参照されるコードブロックへと引数を渡すことも可能で
     す。コードブロック名に続く括弧「()」内の引数が渡されます:

          #+source: double
          #+begin_src emacs-lisp :var input=8
          (* 2 input)
          #+end_src

          #+results: double
          : 16

          #+source: squared
          #+begin_src emacs-lisp :var input=double(input=1)
          (* input input)
          #+end_src

          #+results: squared
          : 4

Alternate argument syntax(引数を指定する別の構文)
............................................................

コードブロックの`#+source:'行を利用するという方法でも引数を指定できます。も
しかすると、こちらの方法がより自然かもしれません。以下の例のように、引数はソ
ースの名前に続く括弧「()」の内に、カンマ「,」で分離された形でひとまとめにさ
れています。

     #+source: double(input=0, x=2)
     #+begin_src emacs-lisp
     (* 2 (+ input x))
     #+end_src

Indexable variable values(インデックス化可能な変数の値)
.....................................................................

変数の"indexing"インデックス化によって割り当てられた変数の一部分を参照でき
ます。インデックス(添え字)は0から始まります。インデックスが負の値の場合、そ
れは要素の最後から逆順に数え上げたものです。インデックスが「`,'」で分割され
ているとき、後続する部分のそれぞれが、次に深いネスティング(入れ子構造)にイン
デックス化するか、値の次元にインデックス化します。`:hlines'、`:colnames'、そ
して`:rownames'のようなヘッダー引数と関連する他のテーブルが変更される_前に_
、このインデックス化が行われることに注意して下さい。次の例では、テーブル
`example-table'1行目の最後のセルを変数`data'に割り当てています:

     #+results: example-table
     | 1 | a |
     | 2 | b |
     | 3 | c |
     | 4 | d |

     #+begin_src emacs-lisp :var data=example-table[0,-1]
       data
     #+end_src

     #+results:
     : a

`:'で区切られた2つの整数を使うことで、変数の範囲(行や列?)を参照できます。こ
の場合、包括的な範囲を参照します。例えば、以下では`example-table'の中央3行を
`data'に割り当てています。

     #+results: example-table
     | 1 | a |
     | 2 | b |
     | 3 | c |
     | 4 | d |
     | 5 | 3 |

     #+begin_src emacs-lisp :var data=example-table[1:3]
       data
     #+end_src

     #+results:
     | 2 | b |
     | 3 | c |
     | 4 | d |

加えて、インデックスが空の場合もしくは単一文字`*'の場合のどちらでも、全ての
範囲すなわち`0:-1'を意味していると解釈されます。次の例では、1列目すべてが参
照されます。

     #+results: example-table
     | 1 | a |
     | 2 | b |
     | 3 | c |
     | 4 | d |

     #+begin_src emacs-lisp :var data=example-table[,0]
       data
     #+end_src

     #+results:
     | 1 | 2 | 3 | 4 |

コードブロックの結果をテーブルの様にインデックス化できます。どんな次元数でも
インデックス化できます。以下の例に示すように、次元はそれぞれカンマで分割され
ます。

     #+source: 3D
     #+begin_src emacs-lisp
       '(((1  2  3)  (4  5  6)  (7  8  9))
         ((10 11 12) (13 14 15) (16 17 18))
         ((19 20 21) (22 23 24) (25 26 27)))
     #+end_src

     #+begin_src emacs-lisp :var data=3D[1,,1]
       data
     #+end_src

     #+results:
     | 11 | 14 | 17 |

Emacs Lisp evaluation of variables(Emacs Lispによる変数の評価)
......................................................................

変数の値を初期化するときにEmacs Lispのコードを使えます。変数の値が `(',
`[', `'' もしくは ``'で始まる場合、変数はEmacs
Lispとして評価され、その評価結果を変数の値として代入されます。次の例では、こ
の評価を使ってOrg-modのファイル名を確かにコードブロックへ渡しています--元の
Org-file内でヘッダー引数が間違いなく評価されるということに注意して下さい。コ
ードブロックで評価する場合そのような保証はありません。

     #+begin_src sh :var file-name=(buffer-file-name) :exports both
       wc -w $file
     #+end_src

   テーブルやリストから読み出された値はEmacs
Lispとして評価されないことに注意し て下さい。以下はその例です。

     #+results: table
     | (a b c) |

     #+headers: :var data=table[0,0]
     #+begin_src perl
       $data
     #+end_src

     #+results:
     : (a b c)


File: org-ja,  Node: results,  Next: file,  Prev: var,  Up: ヘッダー引数の指定

14.8.2.2 `:results'
...................

ヘッダー引数`:results'には3つのクラスがあります。コードブロックでは、クラス
毎に1個のオプションだけを付与できます。

   *
     ヘッダー引数collectionは、コードブロックからどのように結果を集めかを指
     定します。

   *
     ヘッダー引数typeはコードブロックがどのタイプの結果を返すかを指定します
     --これは、Org-modeのバッファへ結果を挿入する方法に影響します。

   *
     ヘッダー引数handlingはコードブロックの評価の結果をどのように扱うかを指
     定します。

Collection
..........

以下のオプションは、コードブロックから結果を収める方法を指定します。どちらか
のオプションしか指定できません。

   * `value'
     デフォルトの設定です。コードブロックの最終行の値が結果になります。この
     ヘッダー引数はfunctional
     modeで評価します。このタイプの返り値を使う場合、Pythonなどの言語では、
     ソースコードブロックの本文で`return'文が必要なことに注意して下さい。
     例えば、`:results value'のように記述します。

   * `output'
     コードブロックで実行される間に標準出力(STDOUT)へと出力されたもの全てを
     収集して結果とします。このヘッダー引数はscripting
     modeで評価します。例えば、`:results output'のように記述します。

Type
....

以下のオプションは相互に排他的で、コードブロックの結果のタイプを返します。デ
フォルトでは、結果の値によって、テーブルかスカラーのどちらかが結果として挿入
されます。

   * `table', `vector'
     結果は、Org-modeのテーブルとして解釈されます。単一の値が返された場合、
     結果は1行1列のテーブルへと変換されます。例えば、`:results value
     table' のように記述します。

   * `list'
     結果は、Org-modeのリストとして解釈されます。単一のスカラー値が返された
     場合、結果は1要素からなるリストへと変換されます。

   * `scalar', `verbatim'
     結果は文字通りに評価されます--結果はテーブルへと変換されません。結果
     は引用されたテキストとしてOrg-modeのバッファに挿入されます。例えば、
     `:results value verbatim'と記述します。

   * `file'
     結果はファイルへのパスとして解釈され、ファイルのリンクとしてOrg-modeの
     バッファに挿入されます。例えば、`:results value
     file'のように記述しま す。

   * `raw', `org'
     結果は加工されていないOrg-modeのコードとして解釈され、そのバッファに直
     接挿入されます。結果がテーブルのように見えるときは、Org-modeのように整
     形します。例えば、`:results value raw'のように記述します。

   * `html'
     結果はHTMLであると見なされて、`begin_html'ブロックに囲まれます。例えば
     、`:results value html'のように記述します。

   * `latex'
     結果はLaTeXと見なされて、`begin_latex'ブロックに囲まれます。例えば、
     `:results value latex'のように記述します。

   * `code'
     結果は構文解析可能なコードと見なされて、コードブロックに囲まれます。例
     えば、`:results value code'のように記述します。

   * `pp'
     結果は装飾されたコードに変換されて、コードブロックに囲まれます。このオ
     プションは、現在、Emacs Lisp,
     PythonとRubyをサポートしています。例えば、`:results value
     pp'のように 記述します。

   * `wrap'
     結果は`begin_result'ブロックに囲まれます。結果の展開方法(extend?名詞形
     を見つけられず)が分かっていて自動的に削除されるか置換されるような、
     `raw'もしくは`org'構文の結果を挿入する時にこのオプションを使うと便利で
     す。

Handling
........

以下のresultのオプションは、結果が1度集められた後に何が起こるかを示していま
す。

   * `silent'
     結果はミニバッファに表示されますが、Org-modeのバッファには挿入されませ
     ん。例えば、`:results output silent'と記述します。

   * `replace'
     デフォルトの設定です。どんな結果でも存在していれば削除し、新しい結果を
     Org-modeのバッファのその場所に挿入します。例えば、 `:results
     output replace'と記述します。

   * `append'
     コードブロックの結果が以前から存在する場合、現在存在する結果の最後に新
     しい結果を付け加えます。結果が存在しない場合は、`replace'のように新し
     い結果を挿入します。

   * `prepend'
     もしコードブロックの結果が既に存在する場合、現在存在する結果の先頭に新
     しい結果を追加します。結果が存在しない場合は、`replace'のように新しい
     結果を挿入します。


File: org-ja,  Node: file,  Next: dir,  Prev: results,  Up: ヘッダー引数の指定

14.8.2.3 `:file'
................

コードブロックの結果を保存する外部ファイルを指定するために、ヘッダー引数
`:file'を使います。コードブロックの評価の後に、そのファイルへのOrg-modeスタ
イルのリンク`[[file:]]'(*note
リンクのフォーマット::を参照)が、Org-modeのバッファ に挿入されます。R,
gnuplot,
dotやditaaなどの言語では、ヘッダー引数`:file'を扱う特別な機能が用意されてい
ます。その機能とは、指定されたファイルへアウトプットを保存するために、必要な
定型のコードでコードブロックの本文を囲むというものです。これは、コードブロッ
クの画像出力を特定のファイルに保存する場合に、しばしば役立ちます。

`:file'に対する引数は、ファイルのパスを示す文字列、もしくは、次の2つの文字列
からなるリスト、のどちらかでなくてはなりません。2つの文字列からなるリストと
は、第1要素はファイルのパス、第2要素はそのリンクの説明から構成されます。


File: org-ja,  Node: dir,  Next: exports,  Prev: file,  Up: ヘッダー引数の指定

14.8.2.4 `:dir'とリモートでの実行
..........................................

ヘッダー引数`:file'がアウトプットするファイルのパスを指定する一方で、`:dir'
はコードブロックを実行する間のデフォルトのディレクトリを指定します。指定され
ない場合、現在のバッファに関連するディレクトリが使われます。つまり、
`:dir path'を一時的に与えることは、`M-x cd
path'でカレントディレクトリを変え
るだけで`:dir'を設定しない場合と同じ効果を持ちます。水面下では、`:dir'が
Emacsの変数`default-directory'を変更しているだけなのです。

   `:dir'を使う場合、アウトプットするファイルを相対パス(例 `:file
myfile.jpg'も しくは`:file
results/myfile.jpg')で与えなければなりません。その場合、与えた
パスはデフォルトディレクトリに対する相対パスとして解釈されます。

つまり、ホームディレクトリ内の`Work'フォルダでプロット(グラフを描画)したい場
合、次のように使えます。

     #+begin_src R :file myplot.png :dir ~/Work
     matplot(matrix(rnorm(100), 10), type="l")
     #+end_src

リモートでの実行
........................

trampのファイル構文を使う事でリモートマシン上のディレクトリを指定できます。
その場合、リモートマシン上でコードが評価されます。1つの例です。

     #+begin_src R :file plot.png :dir /dand@yakuba.princeton.edu:
     plot(1:10, main=system("hostname", intern=TRUE))
     #+end_src

従来通りローカルのOrg-modeのバッファにテキストの結果が返されますが、リモート
マシン上のリモートディレクトリを基準とした相対パスにファイルのアウトプットが
作成されます。リモートのファイルへのOrg-modeのリンクが生成されます。

従って、上の例では、リモートマシン上にグラフが生成され、Org-modeバッファには
次の形式のリンクが挿入されます。

     [[file:/scp:dand@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]

trampのおかげで、`:dir'がEmacsの変数`default-directory'の値をセットした後す
ぐに、この機能を使えます。これらの機能を正しく動かすためには、XEmacsや
version23より前のGNU
Emacsを使っている人はtrampを別にインストールする必要があるかもしれません。

更なるポイント
.....................

   *
     もし`:session'と並行して`:dir'が使われるとき、新規セッションを開始する
     場合には開始ディレクトリを予想して決定します。しかし、すでにセッション
     が存在する場合には、現バージョンでは、そのセッションと関連したディレク
     トリを変更しません。

   * `:exports results'や`:exports
     both'を使ってファイルをエクスポートする
     間、通常は`:dir'を使ってファイルを生成するべきではありません。理由は以
     下の通りです。2つのマシンでエクスポートされた結果の移植性を維持するた
     めに、エクスポート時にバッファへと挿入されるリンクは
     `default-directory'に対して展開 *されていません*
     。それゆえ、もし`:dir'を使って`default directory'を変
     えてしまうと、リンクで意図していない場所にファイルが作られるという恐れ
     があります。


File: org-ja,  Node: exports,  Next: tangle,  Prev: dir,  Up: ヘッダー引数の指定

14.8.2.5 `:exports'
...................

ヘッダー引数`:exports'は、Org-modeファイルのHTMLエクスポートやLaTeXエクスポ
ートに、何を含めるかを指定します。

   * `code'
     デフォルトの設定です。コードの本文がエクスポートされるファイルに含まれ
     ます。例えば、`:exports code'のように記述します。

   * `results'
     コードの評価結果がエクスポートされるファイルに含まれます。例えば、
     `:exports results'のように記述します。

   * `both'
     コードと結果の両方がエクスポートされるファイルに含まれます。例えば、
     `:exports both'のように記述します。

   * `none' エクスポートされるファイルには何も含まれません。例えば、
     `:exports none'のように記述します。


File: org-ja,  Node: tangle,  Next: mkdirp,  Prev: exports,  Up: ヘッダー引数の指定

14.8.2.6 `:tangle'
..................

ヘッダー引数`:tangle'は、ソースコードファイルを抽出したファイルにコードブロ
ックを含めるか否かを指定します。

   * `tangle'
     コードブロックは、Org-modeのファイルのbasename(拡張子を取り除いた名前)
     にちなんだソースコードファイルにエクスポートされます。例えば、
     `:tangle yes'のように記述します。

   * `no'
     デフォルトの設定です。コードブロックはソースコードファイルにエクスポー
     トされません。例えば、`:tangle no'のように記述します。

   * other
     ヘッダー引数`:tangle'に渡された何か他の文字列を、ブロックをエクスポー
     トするファイルのbasenameと解釈します。例えば、`:tangle
     basename'のよう に記述します。


File: org-ja,  Node: mkdirp,  Next: comments,  Prev: tangle,  Up: ヘッダー引数の指定

14.8.2.7 `:mkdirp'
..................

抽出(tangle)されたファイルの親ディレクトリが無いときに、ヘッダー引数
`:mkdirp'を使って親ディレクトリを作成できます。ディレクトリ作成を許可するに
はこのヘッダー引数を`yes'と設定し、ディレクトリ作成を禁止するには`no'と設定
します。


File: org-ja,  Node: comments,  Next: no-expand,  Prev: mkdirp,  Up: ヘッダー引数の指定

14.8.2.8 `:comments'
....................

デフォルトの設定では、コードブロックをソースコードへと抽出するときに、コード
ブロック本文に既に存在するコメントだけを挿入します。抽出されたコードファイル
に追加のコメントを挿入するには、ヘッダー引数`:comments'を以下のように設定し
ます。

   * `no'
     デフォルトの設定です。抽出(tangle)する間に、コメントは追加挿入されません。

   * `link'
     コードブロックは、コードが抽出された元のOrg-modeファイルへ戻るポインタ
     を含むコメントに囲まれます。

   * `yes' "link"と同じ意味です。これは後方互換性を保持するためです。

   * `org' Org-modeのファイルからのテキストをコメントとして含みます。

     抽出されたコードに先行する文脈からテキストが選ばれます。テキストは、状
     況に応じて、一番近い見出しもしくはソースブロックに限定されます。

   * `both' コメントのオプションの"link"と"org"との両方を有効にします。

   * `noweb'
     コメントのオプション"link"を有効にし、nowebの参照記号をコードブロッ
     ク本文に展開し、それをリンクのコメントで囲みます。


File: org-ja,  Node: no-expand,  Next: session,  Prev: comments,  Up: ヘッダー引数の指定

14.8.2.9 `:no-expand'
.....................

デフォルトの設定では、抽出の際に関数`org-babel-expand-src-block'によってコー
ドブロックが展開されます。これには、`:var'を使って変数を割り当てる(*note
var::を参 照してください)効果に加えて、"noweb"の参照記号(*note
Nowebでの参照の構文::を参照
してください)をそのターゲットで置き換える効果があります。この動作を無効にす
るためにヘッダー引数`:no-expand'を使います。


File: org-ja,  Node: session,  Next: noweb,  Prev: no-expand,  Up: ヘッダー引数の指定

14.8.2.10 `:session'
....................

ヘッダー引数`:session'は、読み取られた言語のにセッションを開始します。セッシ
ョンでは、状態は保存されます。

   デフォルトでは、セッションは開始されません。

ヘッダー引数`:session'に渡された文字列が、セッション名になります。これにより
、読み取られた言語のそれぞれについて並列セッションを実行可能です。


File: org-ja,  Node: noweb,  Next: cache,  Prev: session,  Up: ヘッダー引数の指定

14.8.2.11 `:noweb'
..................

ヘッダー引数`:noweb'はコードブロック内における"noweb"スタイル (*note
Nowebでの参照の構文::を参照のこと)の参照記号を展開する方法について管理して
います。このヘッダー引数は次の3つ`yes'、`no'もしくは
`tangle'から1つを選ぶことができます。

   * `yes'
     そのブロックが評価、抽出、エクスポートされる前に、コードブロックの本文
     にある全ての"noweb"構文の参照記号が展開されます。

   * `no'
     デフォルトの設定です。コードブロックの評価では"noweb"構文のアクショ
     ンはありません。しかし、抽出の間にnoweb参照記号は展開されます。

   * `tangle'
     ブロックを抽出する前に、コードブロックの本文にある全ての"noweb"構文
     の参照記号は展開されますが、ブロックが評価されるときやエクスポートされ
     るときは"noweb"の参照記号は展開されません。

Nowebの行頭部分
....................

現在、Nowebの挿入機能は、`<<reference>>'の行頭部分の後ろで実行されます。この
振る舞いは次の例で説明されます。nowwebの参照記号`<<example>>'がSQLのコメント
の構文の後で見つかったため、nowebの参照記号を展開して、それぞれの行をコメン
トとして挿入します。

   このコードブロックは:

     -- <<example>>

   次のように展開されます:

     -- これは
     -- exampleの複数行の本文です

次の事に注意して下さい。改行を含まないnowebのテキスト置換ではこの変化の影響
を受けません。したがって、インラインのnowebの参照記号を使う事も可能です。


File: org-ja,  Node: cache,  Next: sep,  Prev: noweb,  Up: ヘッダー引数の指定

14.8.2.12 `:cache'
..................

ヘッダー引数`:cache'はコードブロックの評価結果をバッファ内に保存するか(=キャ
ッシュするか)を管理します。これにより、変化していないコードブロックを再度評
価することを避けられます。このヘッダー引数は:`yes'あるいは`no'のどちらかの値
をとります。

   * `no'
     デフォルトの設定です。実行結果をバッファに保存せず、呼び出される度にコ
     ードブロックを評価します。

   * `yes'
     コードブロックが実行される度に、そのコードとブロックに渡された引数とか
     らなるSHA1ハッシュ値を生成します。このハッシュ値は`#+results:'行に格納
     され、後のコードブロックの実行時にチェックされます。前回評価した時から
     コードブロックに変化が無い場合、そのコードブロックは改めて評価されません。

コードブロックの引数である変数の値が変化した場合でも、コードブロックのキャッ
シュは変化として検知します。この場合、キャッシュは無効となり、そのコードブロ
ックは再度実行されます。次の例では、`random'の結果が前回実行時から変化しない
限り、`caller'は実行されません。

      #+srcname: random
      #+begin_src R :cache yes
      runif(1)
      #+end_src

      #+results[a2a72cd647ad44515fab62e144796432793d68e1]: random
      0.4659510825295

      #+srcname: caller
      #+begin_src emacs-lisp :var x=random :cache yes
      x
      #+end_src

      #+results[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
      0.254227238707244


File: org-ja,  Node: sep,  Next: hlines,  Prev: cache,  Up: ヘッダー引数の指定

14.8.2.13 `:sep'
................

Org-modeから外部のファイルへ表形式の結果を書き出す時に、ヘッダー引数`:sep'を
使って区切り文字のを管理できます。この機能は、次のどちらかの場合に使用できま
す。まずは、コードブロック上で`C-c C-o'にキーバインドされた関数
`org-open-at-point'を呼び出して、表形式で書かれたコードブロックの結果を開く
場合です。もう1つは、コードブロックの結果を外部ファイルのヘッダー引数へ出力
する場合です(*note file::を参照してください。)。

デフォルトでは、`:sep'が設定されていない場合、出力されるテーブルはタブで区切
られています。


File: org-ja,  Node: hlines,  Next: colnames,  Prev: sep,  Up: ヘッダー引数の指定

14.8.2.14 `:hlines'
...................

テーブルは頻繁に1本以上の水平な線、すなわちhlines(訳者注:_h_orizontal
_lines_)を使って表現されます。コードブロックの引数`:hlines'の値として`yes'も
しくは `no'を使えます。デフォルトでは`no'と設定されています。

   * `no'
     入力されたテーブルから水平な線を取り除きます。ほとんどの言語ではこれが
     望ましい設定です。なぜなら`hline'の記号を定義されていない変数と見なさ
     れて、エラーとなるからです。`:hlines
     no'と設定するか、デフォルトの設定
     値を使う場合、次のように出力されます。

          #+tblname: many-cols
          | a | b | c |
          |---+---+---|
          | d | e | f |
          |---+---+---|
          | g | h | i |

          #+source: echo-table
          #+begin_src python :var tab=many-cols
            return tab
          #+end_src

          #+results: echo-table
          | a | b | c |
          | d | e | f |
          | g | h | i |

   * `yes' テーブル内の水平な線を残したままにします。`:hlines
     yes'と設定すると以 下のようになります。

          #+tblname: many-cols
          | a | b | c |
          |---+---+---|
          | d | e | f |
          |---+---+---|
          | g | h | i |

          #+source: echo-table
          #+begin_src python :var tab=many-cols :hlines yes
            return tab
          #+end_src

          #+results: echo-table
          | a | b | c |
          |---+---+---|
          | d | e | f |
          |---+---+---|
          | g | h | i |


File: org-ja,  Node: colnames,  Next: rownames,  Prev: hlines,  Up: ヘッダー引数の指定

14.8.2.15 `:colnames'
.....................

ヘッダー引数`:colnames'は、`yes'と`no'そして宣言していない場合の`nil'を値と
して持てます。デフォルトでは`nil'に設定されています。

   * `nil'
     (2行目が水平な線であることから)入力されたテーブルに列の名前があるよう
     に考えられる場合には、列の名前を取り除いてから処理を行い、その結果に対
     して改めて列の名前を付け加えます。

          #+tblname: less-cols
          | a |
          |---|
          | b |
          | c |

          #+srcname: echo-table-again
          #+begin_src python :var tab=less-cols
            return [[val + '*' for val in row] for row in tab]
          #+end_src

          #+results: echo-table-again
          | a  |
          |----|
          | b* |
          | c* |

     variable indexing (*Note Indexable variable values:
     var.)を使ってテーブル
     をインデックス化する前に、テーブルの列の名前が取り除かれていないことに
     注意してください。

   * `no' 列の名前に関する前処理は行われません。

   * `yes'
     テーブルが列の名前を持っている「ように見えない」場合でも(すなわち
     2行目が水平な線でない場合でも)、`nil'を設定されたように、列の名前を除
     外し、改めて結果の列に名前を付け加えます。


File: org-ja,  Node: rownames,  Next: shebang,  Prev: colnames,  Up: ヘッダー引数の指定

14.8.2.16 `:rownames'
.....................

ヘッダー引数`:rownames'は`yes'もしくは`no'を値として持つ事ができ、デフォルト
では`no'と設定されています。

   * `no' 行に関する前処理を行いません。

   * `yes'
     前処理としてテーブルの1列目を取り除き、処理結果に列の名前を付け加えます。

          #+tblname: with-rownames
          | one | 1 | 2 | 3 | 4 |  5 |
          | two | 6 | 7 | 8 | 9 | 10 |

          #+srcname: echo-table-once-again
          #+begin_src python :var tab=with-rownames :rownames yes
            return [[val + 10 for val in row] for row in tab]
          #+end_src

          #+results: echo-table-once-again
          | one | 11 | 12 | 13 | 14 | 15 |
          | two | 16 | 17 | 18 | 19 | 20 |

     variable indexing (*Note Indexable variable values:
     var.)を使ってテーブル
     をインデックス化する前に、テーブルの行の名前が取り除かれていないことに
     注意してください。



File: org-ja,  Node: shebang,  Next: eval,  Prev: rownames,  Up: ヘッダー引数の指定

14.8.2.17 `:shebang'
....................

ヘッダー引数`:shebang'に文字列の値(例えば `:shebang
"#!/bin/bash"')を設定す
ることで、コードブロックを抽出した全てのファイルの1行目にその文字列を挿入し
、抽出されたファイルのパーミッションを実行可能と設定します。


File: org-ja,  Node: eval,  Prev: shebang,  Up: ヘッダー引数の指定

14.8.2.18 `:eval'
.................

ヘッダー引数`:eval'を使って、特定のコードブロックの評価を制限できます。
`:eval'は"never"と"query"の2つの値をとれます。`:eval never'はコードブロ
ックが評価されないことを確かにします。
これは危険なコードブロックを評価する ことを防ぐのに便利です。`:eval
query'と設定すると、変数
`org-confirm-babel-evaluate'の値に関係なく、コードブロックを実行する度に確認
のダイアログがでます。


File: org-ja,  Node: 評価の結果,  Next: Nowebでの参照の構文,  Prev: ヘッダー引数,  Up: ソースコードとの連携

14.9 評価の結果
====================

結果の取り扱われ方は、セッションが呼び出されたかに依存することに加えて、
`:results value'もしくは`:results output'が使われているかに依存します。
(table
possibilies:の意味が分からない)次のテーブルでは全ての場合を表形式にまとめま
した。ヘッダー引数resultsが取り得る完全なリストは、*note
results::を見て下さい。

                    Non-session              Session
`:results value'    最後の式の値             最後の式の値
`:results output'   STDOUTの内容             インタプリタの出力をつなげたもの

   以下に注意すること:`:results value'と設定することで、適切な場合は、
`:session'とnon-sessionの両方の結果はテーブル(文字列もしくは数字からなる1次
元もしくは2次元のベクトル)の形でOrg-modeに返されます。

14.9.1 Non-session
------------------

14.9.1.1 `:results value'
.........................

デフォルトの設定です。外部の言語で書かれた関数定義のコードを囲むことと、内部
でその関数を評価することによってその値が得られます。それゆえ、コードはその関
数の本文であるかのように書かなければなりません。特に、Pythonは`return'文が存
在しない限り自動的に関数から返り値を返しませんので、Pythonでは多くの場合に
`return'文が必要なことに注意してください。

コンテクストを評価する4つの方法の中で、これは関数定義にコードが自動的に囲ま
れるただ一つの方法です。

14.9.1.2 `:results output'
..........................

外部プロセスとしてのインタープリタにコードが渡され、標準出力ストリームの内容
がテキストとして返されます。(いくつかの言語ではエラー出力のストリームも含ま
れます; これは今後の課題です。)

14.9.2 Session
--------------

14.9.2.1 `:results value'
.........................

Emacsのインタラクティブな下位プロセスとして実行しているインタープリタにコー
ドが渡されます。返される結果は、そのインタープリタが最後に評価した結果です。
(これは言語固有の方法で得られています:PythonやRubyでの変数`_'の値であり、Rで
の`.Last.value'の値です)。

14.9.2.2 `:results output'
..........................

Emacsのインタラクティブな下位プロセスとして実行しているインタープリタにコー
ドが渡されます。返される結果は、そのインタープリタからの一連の(テキストの)ア
ウトプットを結合したものです。もし外部プロセスとして実行しているインタラクテ
ィブでないインタープリタに同じコードが送られるなら、`STDOUT'へと送られるであ
ろうものと全く同じである必要は無いことに注意して下さい。例えば、次の2つのブ
ロックを比べて下さい:

     #+begin_src python :results output
      print "hello"
      2
      print "bye"
     #+end_src

     #+resname:
     : hello
     : bye

   non-sessionモードでは、`2'はプリントされず、表示されません。
     #+begin_src python :results output :session
      print "hello"
      2
      print "bye"
     #+end_src

     #+resname:
     : hello
     : 2
     : bye

しかし`:session'モードでは、インタラクティブなインタープリタは入力`2'を受け
取り、その値`2'を表示します。(実際には、ここでは他のprint文は不要です)。


File: org-ja,  Node: Nowebでの参照の構文,  Next: キーバインドと便利関数,  Prev: 評価の結果,  Up: ソースコードとの連携

14.10 Nowebでの参照の構文
================================

"noweb"
(`http://www.cs.tufts.edu/~nr/noweb/'を参照のこと)による文芸的プログラミング
のシステムは、名付けられたコードブロックがよく知られたNowebの構文を使って参
照されることを許しています:

     <<code-block-name>>

コードブロックが抽出されるか評価されるとき、"noweb"参照記号を展開するかし
ないかは、ヘッダー引数`:noweb'の値に依存します。もし`:noweb
yes'なら、Noweb の参照記号が展開されてから評価が行われます。もし`:noweb
no'なら、デフォルト
の設定ですが、参照記号は展開されずに評価が行われます。

   注意:ある言語内で正しいコードが破壊されないように、デフォルトの値を
`:noweb
no'と設定しています。例えばRubyでは、`<<arg>>'が構文的に有効な構成要
素です。もしあなたが使っている言語で`<<arg>>'が構文的に有効な構成要素でない
場合に、デフォルトの値を検討してください。


File: org-ja,  Node: キーバインドと便利関数,  Next: バッチ処理,  Prev: Nowebでの参照の構文,  Up: ソースコードとの連携

14.11 キーバインドと便利関数
=======================================

多くの一般のOrg-modeのキー操作が、コンテクストに応じて再定義されています。

   コードブロックの中では、以下のキーバインドが有効になっています。

`C-c C-c'          `org-babel-execute-src-block'
`C-c C-o'          `org-babel-open-src-block-result'
`C-<up>'           `org-babel-load-in-session'
`M-<down>'         `org-babel-pop-to-session'

   Org-modeのバッファ内では、以下のキーバインドが有効になっています。

`C-c C-v a'   もしくは   `C-c    `org-babel-sha1-hash'
C-v C-a'
`C-c C-v b'   もしくは   `C-c    `org-babel-execute-buffer'
C-v C-b'
`C-c C-v f'   もしくは   `C-c    `org-babel-tangle-file'
C-v C-f'
`C-c C-v g'                      `org-babel-goto-named-source-block'
`C-c C-v h'                      `org-babel-describe-bindings'
`C-c C-v l'   もしくは   `C-c    `org-babel-lob-ingest'
C-v C-l'
`C-c C-v p'   もしくは   `C-c    `org-babel-expand-src-block'
C-v C-p'
`C-c C-v s'   もしくは   `C-c    `org-babel-execute-subtree'
C-v C-s'
`C-c C-v t'   もしくは   `C-c    `org-babel-tangle'
C-v C-t'
`C-c C-v z'   もしくは   `C-c    `org-babel-switch-to-session'
C-v C-z'


File: org-ja,  Node: バッチ処理,  Prev: キーバインドと便利関数,  Up: ソースコードとの連携

14.12 バッチ処理
=====================

コマンドラインから関数を呼び出すことができます。このシェルスクリプトは、引数
のそれぞれに対して`org-babel-tangle'を呼び出します。

   あなたのシステムに合わせてパスを設定するように注意してください。

     #!/bin/sh
     # -*- mode: shell-script -*-
     #
     # org-mode でファイルを抽出する
     #
     DIR=`pwd`
     FILES=""
     ORGINSTALL="~/src/org/lisp/org-install.el"

     # tangleする必要があるそれぞれの引数をクォーテーションで囲む
     for i in $@; do
         FILES="$FILES \"$i\""
     done

     emacs -Q --batch -l $ORGINSTALL \
     --eval "(progn
     (add-to-list 'load-path (expand-file-name \"~/src/org/lisp/\"))
     (add-to-list 'load-path (expand-file-name \"~/src/org/contrib/lisp/\"))
     (require 'org)(require 'org-exp)(require 'ob)(require 'ob-tangle)
     (mapc (lambda (file)
            (find-file (expand-file-name file \"$DIR\"))
            (org-babel-tangle)
            (kill-buffer)) '($FILES)))" 2>&1 |grep tangled


File: org-ja,  Node: その他,  Next: ハッキング,  Prev: ソースコードとの連携,  Up: Top

15 その他
************

* Menu:

* 補完::                   M-TABはあなたが何を必要としているか知っています
* 簡単なテンプレート::  構造的な要素の素早い挿入
* スピードキー::       見出しの開始位置で使うの電撃的なコマンド
* コード評価の安全性::  Org-modeのファイルはインラインのコードを評価する
* カスタマイズ::       Org-modeをユーザーの好みに合わせる
* バッファ内での変数制御::  「#+KEYWORDS」の概要
* 「C-c C-c」キーはとても忙しい::  わからなかったら「C-c
                                                C-c」
* アウトラインの「*」を取り除く::  アウトラインの「*」の並びを取り除く
* TTYキー::                Org-modeをtty端末で使う
* 連携::                   Emacsの他のパッケージ


File: org-ja,  Node: 補完,  Next: 簡単なテンプレート,  Prev: その他,  Up: その他

15.1 補完
===========

Emacsは補完無しではEmacsとはいえません、そしてorg-modeはそれが意味をなすたび
に使用します。もしあなたがiswitchb-
かido-のようなインタフェースを補完のプロンプトとして好むのであれば、あなたは
`org-completion-use-iswitchb'や`org-completion-use-ido'変数のいずれかを設定
することで指定することができます。

Org-modeはバッファ中の補完をサポートします。この種類の補完はミニバッファを活
用します。あなたは簡単に数文字をバッファに入力し、補完キーを補完するテキスト
の右側で押します。

`M-<TAB>'
     ポイント位置での補完
        * 見出しの先頭では、TODOキーワードを補完します。

        *
          `\'の後では、エクスポート機能によりサポートされるTeXのシンボルを補完し
          ます。

        * `*'の後では、`[[*find this
          headline]]'のようにリンクを検索できるように
          、カレントバッファで見出しを補完します。

        *
          見出し中の`:'の後では、タグを補完します。タグのリストは`org-tag-alist'
          変数(*note
          タグの設定::より、もしかすると、バッファ中の`#+TAGS'オプションで
          も設定されているかもしれません。)から与えられるか、カレントバッファで
          使われている全てのタグから動的に生成されます。

        *
          見出しの外にある`:'の後では、プロパティキーを補完します。キーのリスト
          は現在のバッファで使われている全てのキーから動的に構築されます。

        * `['の後では、リンクの省略記法を補完します(*note
          リンクの省略記法::)。

        * `+'の後では、Org-mode向けのファイル固有の設定としてセットする
          `TYP_TODO'や`OPTIONS'のようなスペシャルキーワードを補完します。オプシ
          ョンキーワードが既に補完されているなら、`M-<TAB>'を再び押すことでこの
          キーワードの設定の例を挿入します。

        * `#+STARTUP:
          'の後の行の中では、STARTUPキーワードを補完します、すなわち
          、はこの行では正しいキーです。

        * 他の場所では、Ispellを用いた辞書補完が行われます。


File: org-ja,  Node: 簡単なテンプレート,  Next: スピードキー,  Prev: 補完,  Up: その他

15.2 簡単なテンプレート
================================

Org-modeは僅かなキーストロークのみによる空の構造の(`#+BEGIN_SRC'や
`#+END_SRC'のような)要素の挿入をサポートします。これはネイティブなテンプレー
ト拡張機構を通じて得られるものです。ここで留意すべきこととして、Emacsは例え
ば`yasnippet'のような同じように使うことができるいくつかの他のテンプレート機
構を持ちます。

構造要素の挿入には、`<'をタイプし、続いてテンプレートセレクタと`<TAB>'をタイ
プします。補完は上記のキーストロークが単独で行に入力されている場合のみ働きま
す。

   以下のテンプレートセレクタが現在サポートされています。

`s'     `#+begin_src     ... #+end_src'
`e'     `#+begin_example ... #+end_example'
`q'     `#+begin_quote   ... #+end_quote'
`v'     `#+begin_verse   ... #+end_verse'
`c'     `#+begin_center  ... #+end_center'
`l'     `#+begin_latex   ... #+end_latex'
`L'     `#+latex:'
`h'     `#+begin_html    ... #+end_html'
`H'     `#+html:'
`a'     `#+begin_ascii   ... #+end_ascii'
`A'     `#+ascii:'
`i'     `#+include:' line

例えば、空の行で"<e"と入力し、その後TABを入力すると、EXAMPLEテンプレートが補
完されます。

あなたは`org-structure-template-list'変数をカスタマイズすることで追加のテン
プレートをインストールすることができます。詳細は変数のdocstringを参照してく
ださい。


File: org-ja,  Node: スピードキー,  Next: コード評価の安全性,  Prev: 簡単なテンプレート,  Up: その他

15.3 スピードキー
=======================

最初のアスタリスクの前のように、カーソルが見出しの先頭にある時、シングルキー
はコマンドを実行できるようになっています。`org-use-speed-commands'変数を設定
することでこの機能を有効にします。あらかじめ定義されているコマンドのリストを
挙げます。そして、`org-speed-commans-user'変数にコマンドを追加することもでき
ます。Speed
keysは操作や他のコマンドを使うスピードを上げるだけではなく、TTYやキーボード
に限界があるモバイル端末上で実行できない、または簡単に実行できないキーに割り
当てられたコマンドを実行するための別の可能性を提供します。

コマンドが実行可能かどうかを見るには、機能を有効にして見出しの先頭にカーソル
を置いて`?'を押します。


File: org-ja,  Node: コード評価の安全性,  Next: カスタマイズ,  Prev: スピードキー,  Up: その他

15.4 コードの評価とセキュリティの問題
=====================================================

Org-modeは評価を含むコードのスニペットを使って作業をするためのツールを提供し
ます。

あなたのマシン上でコードが動くことは常にセキュリティのリスクをもたらします。
目的のため、またはアクシデントによって良くないコードや悪意のあるコードは実行
されます。Org-modeはあなたが明確に実行の許可を与える場合のみそのようなコード
を評価するデフォルトの設定を持っていて、そしてカジュアルなユーザーに対しては
これらの機能は予防措置として保つべきです。

そのようなコードを通常用いる人々のために、確認用のプロンプトが表示され、そし
てあなたはそれをオフにするかもしれません。これを行うことは可能ですが、あなた
はリスクとかかわることを承知しなくてはなりません。

   コードの評価は以下に挙げる状況を引き起こします:

ソースコードブロック
     ソースコードブロックはエクスポート中かブロック中で`C-c
     C-c'を押した時
     に評価されます。ここで最も重要な事はコードスニペットを含むOrg-modeのフ
     ァイルがある意味で、実行可能なファイルに似ているということです。それで
     、あたはそれらに対応し正しいソースのみをEmacsにロードすべきです-
     あなたがコンピュータ上にインストールしたプログラムのように。

     デフォルトのセキュリティ装置を切る変数をカスタマイズする前にあなたがし
     ていることを確かめてください。

      -- User Option: org-confirm-babel-evaluate
          t(これがデフォルトです)の時、ユーザーはコードブロックを評価する前に毎
          回確認されます。nilの時、ユーザは確認されません。関数をセットすると、
          それは2つの引数(言語とコードブロックの本体)を伴って呼ばれ、tを返せば尋
          ね、nilならば尋ねません。

     例えば、これは"ditaa"コード(安全性は考慮されています)を確認無しで実行
     する方法です:
          (defun my-org-confirm-babel-evaluate (lang body)
            (not (string= lang "ditaa")))  ; don't ask for ditaa
          (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

以下の`shell'と`elisp'はリンクしています。
     Org-modeはコードを直接評価できる2つのリンクタイプ(*note
     外部リンク::)を持っ
     ています。実行されるコードが見えないため、これらのリンクは問題がありえます。

      -- User Option: org-confirm-shell-link-function
          シェルへのリンクを実行するための問い合わせを行う関数。

      -- User Option: org-confirm-elisp-link-function
          Emacs Lispへのリンクを実行するための問い合わせを行う関数。

表中の式
     表中の式(*note スプレッドシート::)はcalcインタプリタでもEmacs
     Lispインタプリ タでも実行できるコードです。


File: org-ja,  Node: カスタマイズ,  Next: バッファ内での変数制御,  Prev: コード評価の安全性,  Up: その他

15.5 カスタマイズ
=======================

Org-modeをカスタマイズするために使われる変数は180以上あります。マニュアルの
圧縮のため、私はここで変数の説明はしません。変数のカスタマイズの構造化された
概要は`M-x org-customize'で見ることができます。もしくは、
`Org->Customization'から`Browse Org
Group'を選択してください。多くの設定はバ
ッファに特別な行を書くこと(*note
バッファ内での変数制御::)でそのファイル中で有効に することができます。


File: org-ja,  Node: バッファ内での変数制御,  Next: 「C-c C-c」キーはとても忙しい,  Prev: カスタマイズ,  Up: その他

15.6 バッファ中での設定の要約
=========================================

Org-modeはファイル単位で設定を定義するために、バッファ内の特別な行を使用しま
す。これらの行は`#+'に続くキーワードとコロン、そして設定を定義する語句ででき
ています。いくつかの設定用語句は同じ行に書くことも、分けて書くこともできます
。これらの設定はマニュアルを通じて説明されており、ここには要約を載せています
。バッファ中の行を編集した後は、カーソル位置の変更をすぐに反映するために
`C-c
C-c'を押しれください。そうでなければ、新しいEmacsのセッションでファイル
を再び開いた時のみ反映されます。

`#+ARCHIVE: %s_done::'
     この行はこの行はアジェンダファイルのアーカイブ場所を設定します。次の
     `#+ARCHIVE'行まで、もしくはファイルの末尾までの全ての行で適用されます
     。最初の行はまた、それより前の全てのエントリにも適用されます。関係する
     変数は`org-archive-location'です。

`#+CATEGORY:'
     この行はアジェンダファイルのカテゴリを設定します。カテゴリは次の
     `#+CATEGORY'行か、ファイル末尾までの全ての行で適用されます。また、それ
     より前の全ての行にも適用されます。

`#+COLUMNS: %25ITEM .....'
     カラムビューのデフォルトフォーマットを設定します。`COLUMNS'プロパティ
     が適用されていない箇所でカラムビューが呼ばれた場合、このフォーマットが
     適用されます。

`#+CONSTANTS: name1=value1 ...'
     テーブル式の中で使われる定数として、ファイルローカルな値を設定します。
     この行はローカル変数`org-table-formula-constants-local'を設定します。
     グローバルバージョンは`org-table-formula-constants'です。

`#+FILETAGS: :tag1:tag2:tag3:'
     ファイル中のエントリトップレベルエントリを含めたエントリが引き継ぐタグ
     を設定します。

`#+DRAWERS: NAME1 .....'
     ファイルローカルな引き出しのセットを設定します。関係するグローバル変数
     が`org-drawers'です。

`#+LINK:  linkword replace'
     これらの行初はリンクの省略記法を指定します。*Note
     リンクの省略記法::.  関係する変数は`org-link-abbrev-alist'です。

`#+PRIORITIES: highest lowest default'
     これらの行は優先順位の上限と初期値を設定します。3つ全てが、AからZまで
     の文字か、0から9までの数字のどれかでなくてはいけません。最も高い優先順
     位は最も低い優先順位より低いASCIIの数値を持つ必要があります。

`#+PROPERTY: Property_Name Value'
     この行は現在のバッファ中のエントリがデフォルトで引き継ぐ値を設定します
     。与えられたプロパティの値を指定するのに、最も便利です。

`#+SETUPFILE: file'
     この行はバッファ内の設定を持つファイルを定義します。通常は、これは完全
     に無視されます。バッファのオプションの設定行をパースされた時のみ、バッ
     ファにそれらが含まれていればこのファイルのコンテンツはパースされます。
     特に、ファイルは内部設定の別のOrg-modeファイルとすることができます。カ
     ーソルをこの行に置き、`C-c
     ''を押すことであなたはこのファイルを開くこ とができます。

`#+STARTUP:'
     この行はOrg-modeのファイルが開かれた時にに使われるオプションを設定します。

     最初のオプションセットはアウトラインツリーの初期表示を設定します。グロ
     ーバルなデフォルトの設定に関係する変数は`org-startup-folded'で、初期値
     は`t'で、それはすなわち`overview'です。
          overview         トップレベルの見出しのみ
          content          全ての見出し
          showall          全てのエントリを畳み込まない
          showeverything   コンテンツの引き出しも表示する

     動的な仮想インデントは変数`org-startup-idented'(1)によって制御されます。
          indent     start with `org-indent-mode' turned on
          noindent   start with `org-indent-mode' turned off

     それから、開いたファイルの表を整列させつオプションがあります。これはフ
     ァイルがナローされた表を含む時に役に立ちます。関係する変数は
     `org-startup-align-all-tables'で、デフォルトでは`nil'です。
          align      align all tables
          noalign    don't align tables on startup

     ファイルを開いたとき、インライン画像は自動的に表示されます。関係する変
     数は`org-startup-with-inine-images'で、ファイルを開いた際の遅延を避け
     るためにデフォルトでは`nil'になっています。
          inlineimages   show inline images
          noinlineimages don't show inline images on startup

     TODOアイテムの完了と再開のログを取ることとその感覚はこれらのオプション
     によって設定することが可能です(変数`org-log-done'と
     `org-log-note-clock-out'、`org-log-repeat'を参照してください)。
          logdone            アイテムにDONEマークがついたとき、タイムスタンプを記
          録します
          lognotedone        ノートにDONEマークがついたとき、タイムスタンプを記録
          します
          nologdone          アイテムにDONEマークがついたとき、タイムスタンプを記
          録しません
          logrepeat          アイテムが再開されたとき、時刻を記録します
          lognoterepeat      アイテムが再開されたとき、ノートをを記録します
          nologrepeat        アイテムが再開されたとき、記録を行わいません
          lognoteclock-out   時間測定が終了したとき、ノートを記録します
          nolognoteclock-out 時間測定が終了したとき、ノートを記録しません
          logreschedule      スケジューリングが変わったとき、タイムスタンプを記録
          します
          lognotereschedule  スケジューリングが変わったとき、ノートを記録します
          nologreschedule    スケジューリングが変わったとき、記録しません
          logredeadline      デッドラインが変更されたとき、タイムスタンプを記録し
          ます
          lognoteredeadline  デッドラインが変更されたとき、ノートを記録します
          nologredeadline    デッドラインが変更されたとき、記録しません
          logrefile          リファイル時にタイムスタンプを記録します
          lognoterefile      リファイル時にノートを記録します
          nologrefile        リファイル時に記録しません
     ここは、インデントされたアウトラインの見出しを隠すオプションです。関係
     する変数は`org-hide-leading-stars'と`org-odd-levels-only'で、デフォル
     トの設定は両方とも`nil'(`showstars'と`oddeven')を意味します。
          hidestars  全てのヘッドラインの「*」を見えなくします
          showstars  全てのヘッドラインの「*」を見えるようにします
          indent     virtual indentation according to outline level
          noindent   アウトラインのレベルに一致する仮想インデントを行いません
          odd        奇数のアウトラインレベル(1、3……)のみ
          oddeven    全てのアウトラインレベル
     タイムスタンプ(`org-put-time-stamp-overlays'と
     `org-time-stamp-overlay-formats'変数)のカスタムフォーマットオーバレイ
     を切り替えます、
          customtime カスタマイズされたタイムフォーマットで覆います
     以下のオプションは表計算(`constants-unit-system'変数)に影響を与えます。
          constcgs   `constants.el' should use the c-g-s unit system
          constSI    `constants.el' should use the SI unit system
     脚注の設定を行うには、以下のキーワードを使います。関係する変数は
     `org-footnote-define-inline'と`org-footnote-auto-label'、
     `org-footnote-auto-adjust'です。
          fninline    脚注のインラインを定義します
          fnnoinline  分割されたセクションでの脚注を定義します
          fnlocal     最初の言及元の近くの脚注を定義しますが、インラインではあり
          ません
          fnprompt    脚注ラベルのプロンプト
          fnauto      `[fn:1]'のようなラベルを自動的に作成します(これがデフォルト
          です)
          fnconfirm   編集と確認用の自動ラベルを用意します
          fnplain     `[1]'のようなラベルを自動的に作成します
          fnadjust    自動的に脚注の番号を振り直し、ソートします
          nofnadjust  自動的に番号の振り直しとソートを行いません
     開始時にブロックを見えなくするには、これらのキーワードを使います。関連
     する変数は`org-hide-block-startup'です。
          hideblocks   開始時に全ての開始/終了ブロックを見えなくします
          nohideblocks 開始時にブロックを見えなくしません
     UTF-8の文字の表示は変数`org-pretty-entities'と以下のキーワードにより制
     御されます。
          entitiespretty  可能な時、UTF-8の文字を表示します
          entitiesplain   空白にします

`#+TAGS:  TAG1(c1) TAG2(c2)'
     これらの行はファイル中の正しいタグと関連する_fast tag
     selection_キーを 指定します。関連する変数は`org-tag-alist'です。

`#+TBLFM:'
     この行には行上にある表の数式が含まれます。

`#+TITLE:, #+AUTHOR:, #+EMAIL:, #+LANGUAGE:, #+TEXT:, #+DATE:,'
`#+OPTIONS:, #+BIND:, #+XSLT:,'
`#+DESCRIPTION:, #+KEYWORDS:,'
`#+LATEX_HEADER:, #+STYLE:, #+LINK_UP:, #+LINK_HOME:,'
`#+EXPORT_SELECT_TAGS:, #+EXPORT_EXCLUDE_TAGS:'
     これらの行はエクスポートするファイルの設定を提供します。詳細については
     *note エクスポートオプション::を参照してください。

`#+TODO:    #+SEQ_TODO:   #+TYP_TODO:'
     これらの行は現在のファイルでのTODOキーワードとそれらの説明をセットしま
     す。関連する変数は`org-todo-keywords'です。

   ---------- Footnotes ----------

   (1) Emacs22とOrg-mode6.29 が必要です


File: org-ja,  Node: 「C-c C-c」キーはとても忙しい,  Next: アウトラインの「*」を取り除く,  Prev: バッファ内での変数制御,  Up: その他

15.7 「C-c C-c」キーはとても忙しい
=============================================

Org-modeでは`C-c
C-c'キーは多くの目的を持っていて、それはこのマニュアルの中
のあちこちに分かれて書かれています。このキーの具体的な機能として、見出しに
_タグ_を追加するものがあります(*note
タグ::)。他の多くの状況では、_"ここを見て、
見たものに応じて更新する"_というようなものを意味します。これは、異なる文脈
でそれが何を意味するかの概要です。

   -
     ツリーの抽出か時間表示からバッファ中のハイライトがあるなら、それらのハ
     イライトを消去します。

   -
     カーソルが特別な行である`#+KEYWORD'行上にあるなら、このトリガーはバッ
     ファをこの行でスキャンし情報を更新します。

   -
     カーソルが表の中にあるなら、表を再調整します。もし自動テーブルエディタ
     がオフになっていても、このコマンドは同じように働きます。

   - カーソルが`#+TBLFM'行にあるなら、全ての表に式を再適用します。

   -
     カレントバッファがキャプチャバッファの場合、ノートを閉じファイルします
     。接頭辞引数を付けると相互作用せずにデフォルトの場所にファイルします。

   -
     カーソルが`<<<target>>>'上にあるなら、ラジオターゲットとバッファ中の関
     係するリンクを更新します。

   -
     カーソルがプロパティ行かプロパティ引き出しの開始か終了行にあるなら、プ
     ロパティコマンドを提供します。

   -
     カーソルが脚注参照上にあるなら、関係する定義部に行きます。反対も同様です。

   - カーソルが統計データクッキー上にあるなら、それを更新します。

   -
     カーソルがチェックボックス付きのプレーンリスト上にあるなら、チェックボ
     ックスのステータスをトグルします。

   - カーソルが数字付きリスト上にあるなら、順序を整理しなおします。

   -
     カーソルは。動的なブロックの`#+BEGIN'行上にあるなら、ブロックを更新し
     ます。


File: org-ja,  Node: アウトラインの「*」を取り除く,  Next: TTYキー,  Prev: 「C-c C-c」キーはとても忙しい,  Up: その他

15.8 より見やすいアウトラインビュー
==================================================

多くの人々はOrg-modeの見出しについている「*」の数が増えたときや見出しの下の
テキストがインデントされていないことを不快に感じます。アウトラインの見出しが
本当のセクションの見出しの場所で_本のように_文書を書く時、これは問題ではあり
ませんが、さらに_正しい位置のリスト_アウトライン中では、インデント構造はより
見やすくなります。

     * Top level headline             |    * Top level headline
     ** Second level                  |      * Second level
     *** 3rd level                    |        * 3rd level
     some text                        |          some text
     *** 3rd level                    |        * 3rd level
     more text                        |          more text
     * Another top level headline     |    * Another top level headline

もしあなたが少なくともEmacs23.2(1)とOrg-modeのバージョン6.29を使っているのなら、この主のビューは
`org-indent-mode'を使って表示する時間を動的に実現できます。このマイナーモー
ドでは、全ての行は必要なスペース(2)が前について表示され
ます。見出しはまた追加の「*」が前に置かれていて、それで1レベルにつき
2(3)スペースシフトし
てインデントします。全ての見出しの「*」の最後の1個だけは`org-hide'フェイス
(4)を使うことで見えなくなり ます -
これについてのさらなる情報は`2.'を見てください。あなたは`org-indent-mode'を
有効にするか`org-startup-indented'変数で全てのファイルについて設定するか、フ
ァイル毎に独立して設定することができます。

     #+STARTUP: indent

もしあなたがEmacs/Org-modeの古いバージョンでも同じような効果を得たいのであれ
ば、またはもしあなたがプレーンテキストの見た目がEmacsでの表示と同様になるよ
うにスペース文字でインデントしたいのであれば、Org-modeは以下の方法であなたを
サポートします:

  1. _見出しの下のテキストのインデント_
     以下のように、あなたは各見出しの下のテキストを見出しと同じ位置にインデント
     できます。

          *** 3rd level
              more text, now indented

     Org-modeは段落詰め、行の折り返し、構造の編集、適切なインデントの保存と
     適合と同時にこれをサポートします。

  2. _先頭の「*」を隠す_
     あなたは先頭の「*」を非表示にするという方法で変更することができます。
     これを行うグローバルな方法は、`org-hide-leading-stars'変数を設定するか
     、以下のようにファイル毎に設定するかです。

          #+STARTUP: hidestars
          #+STARTUP: showstars

     「*」を隠した状態だと、ツリーはこうなります:

          * Top level headline
           * Second level
            * 3rd level
            ...

     先頭の「*」は本当に空白スペースに置き換えられたわけではなく、それらは
     文字色を背景色にする`org-hide'フェイスによって見えているだけです。もし
     あなたが白か黒の背景色を使っていないのであれば、あなたはこのフェイスを
     必要な効果が得られるようにカスタマイズする必要があるでしょう。別の方法
     として、このフォントは余分な「*」が色を用いて、例えば、白い背景色の上
     に`gray90'を使うことで目に見えなくするというものがあります。

  3. あなたが全ての偶数レベルをスキップし、1、3、5といった奇数レベルのみを
     使い、効果的にある見出しレベルから次(5)に行くために2つの「*」を追加するのであれば、物事は
     より見やすくなります。この方法で、私達はこのセクションの冒頭で見られる
     アウトラインビューを得ます。構造の編集とこの慣例を正しく操作するエクス
     ポートコマンドを作成すうために、`org-odd-levels-only'変数を設定するか
     、各ファイルに以下のような行を追加します。

          #+STARTUP: odd
          #+STARTUP: oddeven

     あなたは`M-x org-convert-to-odd-levels
     RET'によりOrg-modeのファイルを1
     レベル1スターから1レベル2スターに変換することができます。逆の操作は。
     `M-x org-convert-to-oddeven-levels'です。

   ---------- Footnotes ----------

   (1) Emacs23.1は`org-indent-mode'がクラッシュしま す

   (2) `org-indent-mode'は`visual-line-mode'(また
は純粋に`word-wrap'をセットします)が(見出しを含めた)長い行を正しいインデント
でラップするように`wrap-prefix'プロパティをセットします

   (3) `org-indent-indentation-per-level'変数を参照してください

   (4)
`org-indent-mode'を有効にすると、`org-hide-leading-stars'に`t'が、
`org-adapt-indentation-hige'に`nil'がセットされます

   (5) あなたがプロパティの検索やリファ
イルの対象のためにレベルを指定する必要がある時、`LEVEL=2'は3つの「*」
などにも対応します


File: org-ja,  Node: TTYキー,  Next: 連携,  Prev: アウトラインの「*」を取り除く,  Up: その他

15.9 Org-modeをtty端末で使う
==================================

Org-modeはとても多くのコマンドを用意しているため、デフォルトではOrg-modeのコ
アコマンドの多くは、例えばカーソルキー(<left>、<right>、<up>、<down>)や<TAB>
、<RET>、とりわけ<Meta>や<Shift>といったモディファイヤキーと一緒に使われるキ
ーなど、通常tty端末では扱えないキーにバインドされています。特別なキーが利用
できない時にtty端末上でこれらのコマンドにアクセスするには、以下の別バインデ
ィングを用いることができます。下記のtty端末バインディングはおそらく扱いにく
いでしょう;
カスタマイズしたバインディングの方が以下のいくつかのものよりよいことに気づく
かもしれません。

デフォルト  代替 1         スピードキー代替 2
`S-<TAB>'   `C-u <TAB>'    `C'
`M-<left>'  `C-c C-x l'    `l'     `<Esc> <left>'
`M-S-<left>'`C-c C-x L'    `L'
`M-<right>' `C-c C-x r'    `r'     `<Esc>
                                   <right>'
`M-S-<right>'`C-c C-x R'    `R'
`M-<up>'    `C-c C-x u'    ` '     `<Esc> <up>'
`M-S-<up>'  `C-c C-x U'    `U'
`M-<down>'  `C-c C-x d'    ` '     `<Esc> <down>'
`M-S-<down>'`C-c C-x D'    `D'
`S-<RET>'   `C-c C-x c'    ` '
`M-<RET>'   `C-c C-x m'    ` '     `<Esc> <RET>'
`M-S-<RET>' `C-c C-x M'    ` '
`S-<left>'  `C-c <left>'   ` '
`S-<right>' `C-c <right>'  ` '
`S-<up>'    `C-c <up>'     ` '
`S-<down>'  `C-c <down>'   ` '
`C-S-<left>'`C-c C-x       ` '
            <left>'
`C-S-<right>'`C-c C-x       ` '
            <right>'


File: org-ja,  Node: 連携,  Prev: TTYキー,  Up: その他

15.10 他のパッケージとの関係
=======================================

Org-modeはGNU
Emacsの世界に生きていて、他のコードと様々な方法で連携します。

* Menu:

* 協調::                   Orgと連携するパッケージ
* 衝突::                   衝突を起こすパッケージ


File: org-ja,  Node: 協調,  Next: 衝突,  Prev: 連携,  Up: 連携

15.10.1 Org-modeと強調して動くパッケージ
----------------------------------------------------

`calc.el' by Dave Gillespie
     Org-modeはテーブル(*note
     スプレッドシート::)中の表計算関数の実装にCalcパッケ
     ージを使います。Org-modeはCalcが適切にインストールされている場合、設定
     中に自動で読み込まれる`calc-eval'関数を探し、Calcが利用できることを確
     認します。Emacs22現在で、CalcはEmacsに最初から組込まれています。2つの
     パッケージの連携の別の方法はCalcを組込み計算に使うことです。 *Note
     Embedded Mode: (Calc)Embedded Mode.

`constants.el' by Carsten Dominik
     テーブル関数中(*note
     スプレッドシート::)で、自然定数や単位に名前を使うことが
     できるようになります。あなたが自分で`org-table-formula-constants'変数
     に定数を定義する代わりに、多くの定数や単位を定義している`constants'パ
     ッケージをインストールすることで、あなたは`Mega'に`M'のような表現を使
     うことができるようになります。このパッケージのバージョン2.0が必要で、
     `http://www.astro.uva.nl/~dominik/Tools'から利用できます。Org-modeは設
     定中に自動で読み込まれる`constants-get'関数をチェックします。
     `constants.el'のインストール説明を参照してください。

`cdlatex.el' by Carsten Dominik
     Org-modeはLaTeXフラグメントをOrg-modeファイルに効率的に入力するために
     CDLaTeXパッケージを活用できます。*note
     CDLaTeXモード::を参照してください。

`imenu.el' by Ake Stenhoff and Lars Lindberg
     Imenuはファイル中のアイテムのインデックスへのアクセスメニューを提供し
     ます。Org-modeはImenuをサポートします--インデックスを得るために、あな
     たは以下のようにする必要があります:
          (add-hook 'org-mode-hook
                    (lambda () (imenu-add-to-menubar "Imenu")))
     デフォルトではインデックスは2レベルの深さです--あなたは
     `org-imenu-depth'オプションを用いることで深さを変更できます。

`remember.el' by John Wiegley
     Org-modeはこのパッケージをキャプチャに使用します、しかし、もはやそうで
     はありません。

`speedbar.el' by Eric M. Ludlam
     Speedbarはファイルとファイル中のインデックスを表示するためのスペシャル
     フレームを作成するパッケージです。Org-modeはSpeedbarをサポートし、
     SpeedbarからOrg-modeファイルへ直接繋げます。Speedbarフレームで`<'コマ
     ンドを使うことでファイルまたはサブツリーへのアジェンダコマンドの範囲を
     制限します。

`table.el' by Takaaki Ota
     自動的な行の折り返し、列、行の広がり、調整を伴う複雑なASCIIテーブルはOta
     Takaaki(`http://sourceforge.net/projects/table'、もしくはEmacs22に含ま
     れています)によるEmacsのテーブルパッケージを用いることで作成可能です。
     Org-modはこれらのテーブルを認識し、適切にセクスポートします。Org-mode
     の別の機能による干渉のために、あなたは不幸にもこれらのテーブルをバッフ
     ァ中で直接編集することができません。代わりに、あなたはこのテーブルの編
     集のためにソースコードスニペットに似た`C-c
     ''コマンドを使う必要があり ます。

    `C-c '     (`org-edit-special')'
          `table.el'のテーブルを編集します。カーソルがtable.elのテーブル上の時動
          作します。

    `C-c ~     (`org-table-create-with-table.el')'
          `table.el'のテーブルを挿入します。ポイント位置が既にテーブルなら、この
          コマンドは`table.el'のフォーマットとOrg-modeのフォーマットで相互変換し
          ます。これが可能なことと制限については、`org-convert-table'コマンドの
          ドキュメントを参照してください。
     `table.el'はEmacs22以降のEmacsでは内蔵されています。

`footnote.el' by Steven L. Baur
     Org-modeはこのパッケージが提供する数字の脚注を認識します。しかしながら、
     Org-modeは自身の脚注(*note
     脚注::)もサポートしているため、`footnote.el'を使う必要
     はありません。


File: org-ja,  Node: 衝突,  Prev: 協調,  Up: 連携

15.10.2 Org-modeとの衝突に繋がるパッケージ
-------------------------------------------------------

     Emacs23では、Shiftキーと組み合わせたカーソルの動きを開始するかリージョ
     ンを広げるための`shift-selection-mode'がデフォルトで有効になっています
     。カーソルがそのような位置にある場合、Org-modeでのタイムスタンプ、TODO
     キーワード、プライオリティ、アイテムbulletタイプの変更と`S-<cursor>'コ
     マンドは衝突します。デフォルトでは、`S-<cursor>'コマンドは特別なコンテ
     クスト以外では何も起きませんが、`org-support-shift-select'変数をカスタ
     マイズすることができます。Org-modeはスペシャルコマンドが適用される特別
     なコンテクストの外で(i)使用することによりShift選択を提供しようとし、ま
     た(ii)アクティブなリージョンを拡張することによっても特別なコンテクスト
     を通してカーソルが移動します。

`CUA.el' by Kim. F. Storm
     リージョンの選択と拡張について、Org-modeでのキーバインディングは
     (`pc-select-mode'や`s-region-mode'と同様に)CUAモードで使われる
     `S-<cursor>'と衝突します。実際、前の段落を見れば分かりますが、Emacs23
     は`shift-selection-mode'の形でこのビルトインを持ちますます。あなたが
     Emacs23を使っているのであれば、まず間違いなくこの目的のための別のパッ
     ケージは使いたくないでしょう。しかし、Org-modeでの作業中に別のパッケー
     ジにこれらのキーを渡すことを選ぶのであれば、
     `org-replace-disputed-keys'変数を設定してください。設定したとき、
     Org-modeはOrg-modeファイルとアジェンダバッファ(日付の選択を除きます)中
     で以下のキーバインディングを変えるでしょう。

          S-UP      =>  M-p             S-DOWN     =>  M-n
          S-LEFT    =>  M--             S-RIGHT    =>  M-+
          C-S-LEFT  =>  M-S--           C-S-RIGHT  =>  M-S-+

     はい、残念ながら覚えることがより困難です。もしあなたが他の代わりのキー
     を持ちたいのであえれば、`org-disputed-keys'変数を見てください。

`yasnippet.el'
     Org-modeはTABキー(`"\t"'の代わりに。`[tab]'をバインドします)をバインド
     するこのキーでYASnippetsのアクセスを優先します。以下のコードはこの問題
     を修正します:

          (add-hook 'org-mode-hook
                    (lambda ()
                      (org-set-local 'yas/trigger-key [tab])
                      (define-key yas/keymap [tab] 'yas/next-field-group)))

     yasnippetの最新のバージョンはOrg-modeと相性がよくありません。上記のコ
     ードが衝突を修正しないなら、以下の関数を定義してください:

          (defun yas/org-very-safe-expand ()
                 (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

     それから、Org-modeに実行すべき新しい関数を教えてくさい:

          (add-hook 'org-mode-hook
                    (lambda ()
                        (make-variable-buffer-local 'yas/trigger-key)
                        (setq yas/trigger-key [tab])
                        (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                        (define-key yas/keymap [tab] 'yas/next-field)))

`windmove.el' by Hovav Shacham
     このパッケージも、`S-<cursor>'キーを使用し。そしてCUAモードが適用され
     ている状態の段落で全てが書かれます。もし、Org-modeが`S-<cursor>'上に特
     別な関数を持たない場所であなたがwindmove関数を有効にしたいのであれば、
     設定に以下を追加します:

          ;; Make windmove work in org-mode:
          (add-hook 'org-shiftup-final-hook 'windmove-up)
          (add-hook 'org-shiftleft-final-hook 'windmove-left)
          (add-hook 'org-shiftdown-final-hook 'windmove-down)
          (add-hook 'org-shiftright-final-hook 'windmove-right)

`viper.el' by Michael Kifer
     Viperは`C-c
     /'を使い、それ故にOrg-modeの`org-sparse-tree'コマンドに対
     応しているキーを使えないようにします。あなたはこのコマンドに別のキーを
     割り当てるか、`viper-vi-global-user-map'でキーを上書きする必要がありま
     す:

          (define-key viper-vi-global-user-map "C-c /" 'org-sparse-tree)



File: org-ja,  Node: ハッキング,  Next: MobileOrg,  Prev: その他,  Up: Top

Appendix A ハッキング
**************************

この付録では、ユーザーがOrg-modeの機能を拡張できる幾つかの特徴を紹介します。

* Menu:

* フック::                Orgの内部にアクセスするのはどれ？
* アドオンパッケージ::  利用できるエクステンション
* ハイパーリンクのタイプの追加::  新しいリンクタイプの作成
* 状況依存のコマンド::  機能的なコマンドの追加方法
* 任意の構文によるテーブル::  LaTeXのためのOrgtblと他のプログラム
* ダイナミックブロック::  自動的にブロック内に挿入する
* 特別なアジェンダビュー::  カスタマイズされたビュー
* アジェンダ情報の抽出::  アジェンダ情報の後処理
* プロパティAPIを使う::  項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング


File: org-ja,  Node: フック,  Next: アドオンパッケージ,  Prev: ハッキング,  Up: ハッキング

A.1 フック
=============

Org-modeには、機能を追加するためのフック変数が数多くあります。ハッキングに関
するこの付録では、それらの使い方を説明します。全フックの完全なリストと説明文
は Worg project によって維持管理されており、
`http://orgmode.org/worg/org-configs/org-hooks.php'にて見つけられます。


File: org-ja,  Node: アドオンパッケージ,  Next: ハイパーリンクのタイプの追加,  Prev: フック,  Up: ハッキング

A.2 アドオンパッケージ
===============================

様々な人によって膨大な数のアドオンパッケージが書かれました。これらのパッケー
ジはEmacsの一部ではありませんが、投稿されたパッケージとして独自のリリースで
配布されており、Org-modeのホームページ
`http://orgmode.org'にて入手できます。投稿されたパッケージのリストとその説明
文は Worg project によって
`http://orgmode.org/worg/org-contrib/'にて維持管理されています。


File: org-ja,  Node: ハイパーリンクのタイプの追加,  Next: 状況依存のコマンド,  Prev: アドオンパッケージ,  Up: ハッキング

A.3 ハイパーリンクのタイプの追加
==============================================

Org-modeにはビルトインのハイパーリンク形式が多数用意されています (*note
ハイパーリンク::)。新しいタイプのリンクを追加したい場合、Orgは追加するため
のインターフェスを用意します。例となるファイル
`org-man.el'を見て下さい。これは
UnixのmanページをEmacsで表示するために、`[[man:printf][printfのmanページ]]'
というリンクを生成するサポートを作成します:

     ;;; org-man.el - Org-modeでmanページのリンクをサポートする

     (require 'org)

     (org-add-link-type "man" 'org-man-open)
     (add-hook 'org-store-link-functions 'org-man-store-link)

     (defcustom org-man-command 'man
       "manのページを表示するためのEmacsのコマンド。"
       :group 'org-link
       :type '(choice (const man) (const woman)))

     (defun org-man-open (path)
       "パス(PATH)にあるmanpageを開きます。
     パスはコマンドmanに渡せる内容でなければなりません。"
       (funcall org-man-command path))

     (defun org-man-store-link ()
       "manページへのリンクを保存します。"
       (when (memq major-mode '(Man-mode woman-mode))
         ;; これはmanページなので、リンクを作成します。
         (let* ((page (org-man-get-page-name))
                (link (concat "man:" page))
                (description (format "Manpage for %s" page)))
           (org-store-link-props
            :type "man"
            :link link
            :description description))))

     (defun org-man-get-page-name ()
       "バッファ名からページ名を抽出します。"
       ;; `Man-mode' と `woman-mode' の両方で動作します。
       (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
           (match-string 1 (buffer-name))
         (error "このmanページへのリンクを作成できません")))

     (provide 'org-man)

     ;;; org-man.el ends here

以下を`.emacs'に加えて、この新しいタイプのリンクを有効にします。

     (require 'org-man)

そのファイルを一つずつ順番に検討して、何をするのか見てみましょう。
  1. `(require 'org)'を実行して`org.el'が読み込まれたことを確認します。

  2.
     次の行では`org-add-link-type'を呼び出して、新しいタイプのリンクを接頭
     辞 `man'
     で定義します。またこの呼び出しでは、そのようなリンクを辿るために呼び出
     される関数の名前も含まれています。

  3. 次の行では、manページを表示したバッファ内にて有用なリンクを`C-c
     l'で保
     存できるように、関数を`org-store-link-functions'に追加します。

ファイルの残りは必要な変数と関数を定義しています。最初に、manページの表示に
どのEmacsのコマンドを使うかを決める変数のカスタマイズがあります。2つのオプシ
ョン、`man' と `woman'
があります。次に、リンクを辿る関数が定義されています。リンクのパ
スは引数として渡されます --
この場合、リンクのパスは単にmanコマンドのトピックです。この関数はmanページの
表示に`org-man-command'の値を呼び出します。

   最後に、関数`org-man-store-link'が定義されています。`C-c
l'でリンクを保存す
る時に、リンクを作成するためにこの関数が呼び出されます。関数は、このバッファ
のタイプでリンク作成がサポートされているかどうかを最初に判断します;
変数`major-mode'の値をチェックして判断します。サポートされていない場合、関数
は終了して、`nil'の値を返します。サポートされている場合、バッファ名からmanの
トピックを取得して、文字列 `man:'
の後に繋げることで、リンクを生成します。次に、コマンド`org-store-link-props'
を呼び出して、`:type'と`:link'プロパティを設定します。任意で`:descriptiion'
プロパティを設定できます。これは、後に`C-c
C-l'でOrg-modeのバッファにリンク
が挿入される時のリンクの説明のデフォルト値を用意します。

   新しいタイプのリンクを正しく設定できると、`C-c
C-l'でリンクを挿入するときの 特別な機能(例えば
補完機能)のサポートを実装する関数`org-PREFIX-complete-link'を定義できます。
そのような関数は引数をとらず、接頭辞がついたリンク全体を返します。


File: org-ja,  Node: 状況依存のコマンド,  Next: 任意の構文によるテーブル,  Prev: ハイパーリンクのタイプの追加,  Up: ハッキング

A.4 状況依存のコマンド
===============================

Org-modeでは、文脈に依存して動作が変わるコマンドが幾つかあります。最も重要な
例は`C-c C-c'（*note 「C-c
C-c」キーはとても忙しい::）です。また、`M-cursor' と  `M-S-cursor'
キーもこの性質を持っています。

アドオンにとって特別な文脈を検知し、文脈に沿って適切に実行する関数を準備する
ことによって、アドオンはこの機能を活用できます。ここに例として Dan
Davisonの
`org-R.el'があります。このファイルは`R'プログラミング言語(1)に基づいてコマンドを実行できます。このパッケージでは、特
別な文脈とは`#+R:' や `#+RR:'で始まる行のことです。

     (defun org-R-apply-maybe ()
       "org-Rの文脈なら検知して、Rのコマンドを実行します。"
       (if (save-excursion
             (beginning-of-line 1)
             (looking-at "#\\+RR?:"))
           (progn (call-interactively 'org-R-apply)
                  t) ;; 処置したと信号を送ります
         nil)) ;; 処置しなかったと信号を送ります

     (add-hook 'org-ctrl-c-ctrl-c-hook 'org-R-apply-maybe)

関数は最初にそのような行にカーソルがあるのかをチェックします。そうである場合
、`org-R-apply'が呼び出されて関数は処置したと信号を送るために`t'を返し、そし
て`C-c
C-c'は他の文脈を探すことを止めます。もし関数がそこですべきことが無い
と分かった場合は、他の同じような関数が試せるように`nil'を返します。

   ---------- Footnotes ----------

   (1) `org-R.el'は *note
ソースコードとの連携::で説明されたOrg-modeの機能によって置き換えられ、現在使
われておりません。


File: org-ja,  Node: 任意の構文によるテーブル,  Next: ダイナミックブロック,  Prev: 状況依存のコマンド,  Up: ハッキング

A.5 任意のシンタックスによる表やリスト
=======================================================

Orgtblモードを任意のバッファでマイナーモードとして使えるため、LaTeXのような
特定言語のテーブルでモードを動作させる機能の要望がよく出されます。しかし、通
常の方法でこれを実装するのは極めて難しく、結局悪夢のような設定となってしまい
、Orgtblモードのテーブルエディタによって得られる単純さのほとんどを失ってしま
うでしょう。

この付録では、別の方法を説明します。Orgtblモード本来のフォーマットでテーブル
を保ち(もとのテーブル)、その表を正しいシンタックスへと変換するカスタム関数を
使い、(目的のテーブルを)正しい場所に配置します。これはユーザーに変換する関数
を書く負担をかけますが、まさにフレキシブルな方法が可能となります。

Bastienはリストに対して同じ機能をOrgstructモードに加えました。リストを編集し
たり構造化するOrg-modeの機能を使うには、`orgstruct-mode'をオンにして、そこで
当該リストを別のフォーマット(HTML, LaTeX もしくは
Texinfo)へとエクスポートしてください。

* Menu:

* ラジオテーブル::    ラジオテーブルの送受信
* LaTeXの例::              少しずつ、チュートリアルのようなものを
* 変換関数::             コピーと修正
* ラジオリスト::       リストでも同じように


File: org-ja,  Node: ラジオテーブル,  Next: LaTeXの例,  Prev: 任意の構文によるテーブル,  Up: 任意の構文によるテーブル

A.5.1 ラジオテーブル
---------------------------

ターゲットテーブルの場所を定義するには、Orgtblモードが見つけ出せるマジックワ
ード含んだ2行のコメントを最初にカレントモード内で作成します。Orgtblモードは
その2行の間に変換されたテーブルを挿入します。前に何が在ったかは考慮せずに置
き換えます。例えば:

     /* BEGIN RECEIVE ORGTBL table_name */
     /* END RECEIVE ORGTBL table_name */

ソーステーブル(元のテーブル)のすぐ上に、変換する方法と挿入する場所をOrgtblモ
ードに知らせる特別な行を付け加えます。例えば:
     #+ORGTBL: SEND table_name translation_function arguments....

`table_name'はそのテーブルの参照名で、それは変換結果を挿入する行でも使われま
す。`translation_function'は変換するLispの関数です。加えて、その行の最後では
、(keyとvalueを交互においた)引数のリストを含むことができます。引数はプロパテ
ィのリストとして解釈するために、変換する関数(translation
function)に渡されます。変換する関数(translation
function)が呼び出される前に、いくつかの基本的なパラメーターは既に認識され、
影響を受けています。

`:skip N'
     テーブルの最初のN行を飛ばして読み進みます。このパラメーターは、行を分
     ける横線をカウントします。

`:skipcols (n1 n2 ...)'
     飛ばすべき列のリストです。もしもテーブルに計算用にマークされた列がある
     場合、同じようにに自動的に無視されます。列を除去した_後で_変換する関数
     がテーブルを見るので、そこには更に列があったとは知る由もないことに注意
     して下さい。

残る1つの問題は、ファイルの通常動作を妨げずに、バッファ内のソーステーブルを
保つ方法です。例えば、C言語のファイルやLaTeXファイルを編集している場合です。
いくつかの方法があります:

   *
     その言語でサポートされたブロックコメント内にテーブルを設置できます。例
     えばCモードの場合、テーブルを`/*'と`*/'の行で括れます。

   *
     時には、TeXの`\bye'やLaTeXの`\end{document}'のような、ある種の終了文
     の後にテーブルを書けることがあります。

   *
     単純に、ファイルを編集したいときはテーブルを一行一行コメントにし、テー
     ブルを編集したいときはコメントを外すこともできます。これは退屈そうに聞
     こえますが--コマンド`M-x
     orgtbl-toggle-comment'を使えばコメントのオン
     オフを簡単にできます。キーバインドを設定すると特に便利です。


File: org-ja,  Node: LaTeXの例,  Next: 変換関数,  Prev: ラジオテーブル,  Up: 任意の構文によるテーブル

A.5.2 LaTeXでのラジオテーブルの例
--------------------------------------------

LaTeXでソーステーブルを囲む最良の方法は、`comment.sty'で提供される`comment'
環境を使うことです。文書のヘッダーに`\usepackage{comment}'と書くことで有効
になります。Orgtblモードで`M-x
orgtbl-insert-radio-table'とすると、テーブル
のスケルトンを挿入できます(1)。
テーブル名を確認されますので、`salesfigures'と入力します。
そして以下のテン プレートを得ました:

     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex
     | | |
     \end{comment}

`#+ORGTBL:
SEND'の行は、関数`orgtbl-to-latex'を使ってテーブルをLaTeXへ変換し
、`salesfigures'の名前で受け取る場所に設置するようにと、Orgtblモードに指示し
ています。これからテーブルに記入します--スプレッドシートの機能を自由に使っ
てください(2):

     % BEGIN RECEIVE ORGTBL salesfigures
     % END RECEIVE ORGTBL salesfigures
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex
     | 月  | 日数 | 販売数 | 一日あたり |
     |-----+------+--------+------------|
     | 1月 |   23 |     55 |        2.4 |
     | 2月 |   21 |     16 |        0.8 |
     | 3月 |   22 |    278 |       12.6 |
     #+TBLFM: $4=$3/$2;%.1f
     % $ (font-lock 色分けをうまく動作させるための余分なドル記号、脚注参照)
     \end{comment}

入力し終わり、テーブルの中で`C-c
C-c'と押下すると、目印となる2行の間に変換さ れたテーブルが挿入されます。

さて、列の文字揃えを制御したいなどの理由から、テーブルのヘッダーを書きたいと
します。この場合は次のことを確認します。テーブルを変換する関数がソーステーブ
ルの最初の2行を飛ばすことと、接合部として動作すること、すなわち
ターゲットテーブルのヘッダーとフッターを生成しないことです:

     \begin{tabular}{lrrr}
     月 & \multicolumn{1}{c}{日数} & 販売数 & 一日あたり \\
     % BEGIN RECEIVE ORGTBL salesfigures
     1月 & 23 & 55 & 2.4 \\
     2月 & 21 & 16 & 0.8 \\
     3月 & 22 & 278 & 12.6 \\
     % END RECEIVE ORGTBL salesfigures
     \end{tabular}
     %
     \begin{comment}
     #+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2
     | 月  | 日数 | 販売数 | 1日あたり |
     |-----+------+--------+-----------|
     | 1月 |   23 |     55 |       2.4 |
     | 2月 |   21 |     16 |       0.8 |
     | 3月 |   22 |    278 |      12.6 |
     #+TBLFM: $4=$3/$2;%.1f
     \end{comment}

LaTeXへ変換する関数`orgtbl-to-latex'は既にOrgtblモードの一部です。`tabular'
環境を使ってテーブルをタイプセットし、横線に`\hline'で印を付けます。加えて、
以下のパラメーターを解釈します(*note 変換関数::も参照してください):

`:splice nil/t'
     tのとき、tabular環境で囲まずに、テーブルの本文だけを返します。デフォル
     トではnilです。

`:fmt fmt'
     各フィールドを囲むのに使われるフォーマットで、`%s'にはフィールドの元の
     値が入っています。例えばドルマークで囲む場合には、`:fmt
     "$%s$"'と書け
     ます。また、列の番号とフォーマットというプロパティのリストにもなります
     。例えば`:fmt (2 "$%s$" 4
     "%s\\%%")'と書けます。文字列の変わりに、1つ
     の引数を持つ関数を使えます;
     その関数は書式設定された文字列を返します。

`:efmt efmt'
     指数表記で数値を出力する時に使います。仮数部と指数部を挿入するため、こ
     の形式では`%s'が2回出現します。例えば`"%s\\times10^{%s}"'。デフォル
     トでは`"%s\\,(%s)"'です。これも列数と書式設定のリスト、例えば
     `:efmt (2 "$%s\\times10^{%s}$" 4 "$%s\\cdot10^{%s}$")'となり得ます
     。値に`efmt'が適用された後に、`fmt'も適用されます。`fmt'と同様に、文字
     列の代わりに引数2つの関数を使えます。

   ---------- Footnotes ----------

   (1) デフォルトでは、LaTeX, HTMLと Texinfoの場合だけ動
作します。他のモードのテンプレートをインストールするには、変数
`orgtbl-radio-tables'を編集して下さい。

   (2) `#+TBLFM'行に奇数個のドル記号(dollar character, $)が在る場合、
LaTeXモードの色分けで問題が生じるかも知れません。この問題を解決するには、例
で示すように`comment'環境内に行を追加してドル記号の表現を調整してください。
AUCTeXをfont-latexライブラリと使っている場合のはるかに優れた解決法は、変数
`LaTeX-verbatim-environments'に`comment'環境追加することです。


File: org-ja,  Node: 変換関数,  Next: ラジオリスト,  Prev: LaTeXの例,  Up: 任意の構文によるテーブル

A.5.3 変換関数
------------------

Orgtblモードには幾つかの組み込み変換関数があります: `orgtbl-to-csv'
(カンマ 区切り), `orgtbl-to-tsv' (タブ区切り)  `orgtbl-to-latex',
`orgtbl-to-html' そして
`orgtbl-to-texinfo'です。`orgtbl-to-html'(1)を除いた、これ
ら全ての関数は包括的な変換関数`orgtbl-to-generic'を使います。例えば、
`orgtbl-to-latex'それ自体はとても短い関数で`tabular'環境の列の定義を計算した
り、幾つかのフィールドセパレータや行セパレータを定義してそれから処理を包括的
な変換関数へと渡しています。ここに完全なコードがあります:

     (defun orgtbl-to-latex (table params)
       "OrgtblモードのテーブルをLaTeXに変換します。"
       (let* ((alignment (mapconcat (lambda (x) (if x "r" "l"))
                                    org-table-last-alignment ""))
              (params2
               (list
                :tstart (concat "\\begin{tabular}{" alignment "}")
                :tend "\\end{tabular}"
                :lstart "" :lend " \\\\" :sep " & "
                :efmt "%s\\,(%s)" :hline "\\hline")))
         (orgtbl-to-generic table (org-combine-plists params2 params))))

ご覧のように、関数に渡されたプロパティ(変数PARAMS)が、関数の中で新しく定義
されたプロパティ(変数PARAMS2)と結合されています。関数に渡されたもの(すなわ
ち`ORGTBL SEND'行でセットされたプロパティ)が優先されます。よって、もし
LaTeX
変換関数を使いたけれども、行の最後はデフォルトの`\\'の代わりに`\\[2mm]'とし
たいなら、デフォルトの設定をこのように上書きできます

     #+ORGTBL: SEND test orgtbl-to-latex :lend " \\\\[2mm]"

新しい言語に対して、LaTeX変換関数とのアナロジーから自分で変換関数を書くか、
もしくは、包括的な変換関数を直接使うこともできます。例えば、もしある言語では
、テーブルが始まるときは`!BTBL!'、終わるときには`!ETBL!'、そしてテーブル行は
`!BL!'で始まり、`!EL!'で終わり、フィールドセパレータはタブだとしたら、このよ
うに(1行だけで!)包括的な変換関数を呼び出すことができます:

     #+ORGTBL: SEND test orgtbl-to-generic :tstart "!BTBL!" :tend "!ETBL!"
                                   :lstart "!BL! " :lend " !EL!" :sep "\t"

関数によって理解されるパラメーターの完全なリストのために、関数
`orgtbl-to-generic'の説明文をチェックしてください。そして、それらの1つずつを
`orgtbl-to-latex'、`orgtbl-to-texinfo'や、包括的な変換関数を使った何か他の関
数に渡せることを覚えて下さい。

もちろん包括的な変換関数では行えない複雑な事を処理する全く新しい関数を書くこ
ともできます。変換関数は2つの引数を持ちます。1つ目の引数はテーブル、行のリス
ト、それぞれの行のシンボルコード`hline'
もしくはフィールドのリストです。2つめの引数はプロパティリストで、
`#+ORGTBL:
SEND'行で指定された全てのパラメーターを含みます。関数は書式設定さ
れたテーブルを含む1つの文字列を返します。もし一般に有用な変換関数を書いた場
合、他の人があなたの仕事から恩恵に預かれるように、どうか
<emacs-orgmode@gnu.org>に投稿して下さい。

   ---------- Footnotes ----------

   (1) HTMLの変換関数は、HTMLをエクスポー
トする時にテーブルを作るコードと全く同じものを使っています。


File: org-ja,  Node: ラジオリスト,  Prev: 変換関数,  Up: 任意の構文によるテーブル

A.5.4 ラジオリスト
------------------------

ラジオリストを送受信する方法は、ラジオテーブル(*note
ラジオテーブル::)を送受信する
方法と全く同じです。ラジオテーブル(ラジオリストのtypo?)に関しては、関数
`org-list-insert-radio-list'を呼び出して、HTMLモード、LaTeXモードそして
Texinfoモードにラジオリストを挿入できます。

   ここではラジオテーブルとの違いを説明します:

   - Orgstructモードが有効でなければなりません。

   - `ORGTBL'の代わりに、キーワード`ORGLST'を使います。

   - 現在利用できるラジオリストの変換関数は、パラメーターをとりません。

   - リストの1つ目の項目で`C-c C-c'と押すと、動作します。

   これはLaTeXの例です。LaTeXファイルに以下が書いてあるとします:

     % BEGIN RECEIVE ORGLST to-buy
     % END RECEIVE ORGLST to-buy
     \begin{comment}
     #+ORGLST: SEND to-buy org-list-to-latex
     - 新しい家
     - 新しいコンピュータ
       + 新しいキーボード
       + 新しいマウス
     - 新しい生活
     \end{comment}

   `新しい家'の上で`C-c
C-c'とタイプすると、LaTeXに変換されたリストが目印の2行
の間に挿入されます。


File: org-ja,  Node: ダイナミックブロック,  Next: 特別なアジェンダビュー,  Prev: 任意の構文によるテーブル,  Up: ハッキング

A.6 ダイナミックブロック
==================================

Org-modeの文書は_動的なブロック_を含むことができます。これらのブロックはユー
ザーが書いた関数によって更新される印のついた領域です。そのようなブロックの良
い例は、`C-c C-x C-r'(*note
作業に費やした時間の計測::)というコマンドで挿入した時
計のテーブル(クロックテーブル)です。

動的なブロックは、そのブロックに名前を指定し、そしてそのブロックの内容を実行
する機能のためのパラメーターを指定する「BEGIN-END」構造によって囲まれている
必要があります。

     #+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...

     #+END:

   動的なブロックを更新するには以下のコマンドを使用します。

`C-c C-x C-u     (`org-dblock-update')'
     その場所での動的なブロックを更新します 。

`C-u C-c C-x C-u'
     現在のファイルの全ての動的なブロックを更新します。

動的なブロックを更新するということは、すべての「BEGIN」と「END」の間のテキス
トを取り除き、「BEGIN」の行に書かれているパラメーターを解析し、それからその
ブロックのための特定の書き出し用の関数を呼び出して新しい内容を書き込むことを
意味します。もしもその書き出し用の関数の中で元の中身を使いたい場合は、追加の
パラメーターである`:content'を使えます。

   `myblock'という名前のブロックに対する書き出し用の関数は
`org-dblock-write:myblock'です。BEGINの行にて与えられるパラメーターのプロパ
ティリストを単一パラメータとして受け取ります。ブロックの一例として、ブロック
を更新する関数が最後に実行されたのはいつかを記録します:

     #+BEGIN: block-update-time :format "on %m/%d/%Y at %H:%M"

     #+END:

対応するブロックへの書き出し用の関数は、このようになっています:

     (defun org-dblock-write:block-update-time (params)
        (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
          (insert "ブロックの最終更新日時は: "
                  (format-time-string fmt (current-time)))))

もしもすべての動的なブロックが常に最新のものに更新されるようにしたいならば、
関数`org-update-all-dblocks'をフック、例えば変数`before-save-hook'に追加しま
す。`org-update-all-dblocks'は`org-mode'内ではないバッファの中では何もしない
ように書かれています。

`org-narrow-to-block'を使って、(他のブロックの様に)現在のバッファを現在の動
的なブロックへとナローイングできます。


File: org-ja,  Node: 特別なアジェンダビュー,  Next: アジェンダ情報の抽出,  Prev: ダイナミックブロック,  Up: ハッキング

A.7 特別なアジェンダビュー
=====================================

Org-modeでは、以下のアジェンダビューによって選択されたものを絞り込む特別なフ
ック関数を用意しています: `todo', `alltodo', `tags', `tags-todo',
`tags-tree'。検索でマッチする度に、実際にアジェンダビューでマッチしたかを確
認したり、もしマッチしなければどれくらい飛ばすのかを、関数で指定できます。全
てのアジェンダビューに適用されるようにグローバルな条件を設定でき、それは変数
`org-agenda-skip-function-global'に格納されます。通常は、変数
`org-agenda-skip-function'を使って、このような定義を特定のカスタムサーチに適
用します。

プロジェクトのツリーのどこかにWAITINGというタグを含むプロジェクトのリストを
作成する場合を考えてみましょう。ツリーの見出しには、プロジェクトを定義する
TODOのキーワード「PROJECT」でマークされているとします。この場合、キーワード
のPROJECTでTODOを検索し、プロジェクトのサブツリーにWAITINGのタグが無ければ検
索でマッチしてもスキップしたいとします。

これを達成するには、サブツリーをタグで検索する関数を書かなければなりません。
もしそのタグが見つかったら、そのマッチはスキップされるべきではないと示すため
に、その関数は`nil'を返さなければなりません。もしそのようなタグが無ければ、
そこから検索し続けるということを示すために、そのサブツリーの終端の場所を返さ
なくてはなりません。

     (defun my-skip-unless-waiting ()
       "waitingでないツリーをスキップします"
       (let ((subtree-end (save-excursion (org-end-of-subtree t))))
         (if (re-search-forward ":waiting:" subtree-end t)
             nil          ; タグが見つかったので、スキップしません
           subtree-end))) ; タグが見つからないので、サブツリーの最後から検索を再
     開します

今からこの関数をアジェンダのカスタムコマンドで使えます。例えばこうなります:

     (org-add-agenda-custom-command
      '("b" todo "PROJECT"
        ((org-agenda-skip-function 'my-skip-unless-waiting)
         (org-agenda-overriding-header "waiting (待ち)状態のプロジェクト: "))))

関数`org-agenda-overriding-header'を使って、アジェンダビューで意味のある見出
しに変更したことにも注意して下さい。

カスタム検索を作成するには、あるレベルの制限を設けた検索を基づくのが一般的な
方法です。自作の検索関数で全てのエントリーを検索したい場合は、単に
`LEVEL>0'(1)を検索し た後に、必要なエントリを選択してください。

変数`org-agenda-skip-function'にLispフォームを渡すこともできます。具体的に言
うと、例えばこのように関数`org-agenda-skip-entry-if'と関数
`org-agenda-skip-subtree-if'とを使えます:

`'(org-agenda-skip-entry-if 'scheduled)'
     現在のエントリがスケジューリングされている場合、それをスキップします。

`'(org-agenda-skip-entry-if 'notscheduled)'
     現在のエントリがスケジューリングされていない場合、それをスキップします。

`'(org-agenda-skip-entry-if 'deadline)'
     現在のエントリがデッドラインを設定されている場合、それをスキップします。

`'(org-agenda-skip-entry-if 'scheduled 'deadline)'
     現在のエントリがデッドラインを設定されているかもしくはスケジューリング
     されている場合、それをスキップします

`'(org-agenda-skip-entry-if 'todo '("TODO" "WAITING"))'
     現在のエントリのTODOのキーワードがTODOもしくはWAITINGの場合、それをス
     キップします。

`'(org-agenda-skip-entry-if 'todo 'done)'
     現在のエントリのTODOのキーワードがDONEとマークされている場合、それをス
     キップします。

`'(org-agenda-skip-entry-if 'timestamp)'
     現在のエントリが何かしらのタイムスタンプを持っている場合、それをスキッ
     プします。タイムスタンプはデッドラインかスケジューリングが考えられます。

`'(org-agenda-skip-entry 'regexp "regular expression")'
     現在のエントリの中で正規表現「regular
     expression」にマッチした場合、そ れをスキップします。

`'(org-agenda-skip-entry 'notregexp "regular expression")'
     現在のエントリの中で正規表現「regular
     expression」にマッチしない場合、 それをスキップします。

`'(org-agenda-skip-subtree-if 'regexp "regular expression")'
     2つ上と同じですが、サブツリー全体をチェックしてスキップします。

従って特別な関数を定義しなかったとしても、WAITINGがあるプロジェクトの検索を
このように書くこともできました:

     (org-add-agenda-custom-command
      '("b" todo "PROJECT"
        ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                     'regexp ":waiting:"))
         (org-agenda-overriding-header "waiting (待ち)状態のプロジェクト: "))))

   ---------- Footnotes ----------

   (1) `org-odd-levels-only'を使用している場合、level numberは階層構造の
レベルと対応していて、スター「*」の数ではないことに注意して下さい。


File: org-ja,  Node: アジェンダ情報の抽出,  Next: プロパティAPIを使う,  Prev: 特別なアジェンダビュー,  Up: ハッキング

A.8 アジェンダ情報の抽出
==================================

Org-modeは、コマンドラインからEmacsのバッチモードでアジェンダの情報にアクセ
スするコマンドを用意しています。
この抽出された情報はプリンタに直接送ることも可能ですし、更にデータを処理させ
るプログラムに読み込ませることも可能です。1つ目のコマンドは関数
`org-batch-agenda'であり、アジェンダビューを作成し、それをASCIIテキストとし
てSTDOUTへと送ります。コマンドはパラメーターとして1つの文字列をとります。文
字列の長さが1のとき、`org-agenda-custom-commands'にあなたが設定したコマンド
の1つが使われます。基本的に、`C-c
a'の後にはどんなキーも使えます。例えば、現
在のTODOリストを直接印刷するなら、このように使えます

     emacs -batch -l ~/.emacs -eval '(org-batch-agenda "t")' | lpr

パラメーターが2文字以上の文字列の場合、tags/TODOの検索に使われます。例えば、
地元でのショッピングリスト(`shop'というタグが付いていて、`NewYork'というタグ
を含んでいない全てのアイテム)を印刷するには、このように使えます

     emacs -batch -l ~/.emacs                                      \
           -eval '(org-batch-agenda "+shop-NewYork")' | lpr

このように、その場でパラメーターを変えることもできます:

     emacs -batch -l ~/.emacs                                      \
        -eval '(org-batch-agenda "a"                               \
                 org-agenda-span month                             \
                 org-agenda-include-diary nil                      \
                 org-agenda-files (quote ("~/org/project.org")))'  \
        | lpr

これは30日のアジェンダを作成します。情報は、Org-modeのファイル
`~/org/projects.org'だけに制限され、~/diary(日誌)ファイルでさえ含まれません
。

もっと洗練された方法でアジェンダのデータを処理したい場合は、アジェンダのアイ
テム毎に値をカンマで区切られたリストを作成する`org-batch-agenda-csv'というコ
マンドを使えます。アウトプットの各行にはカンマで区切られたいろいろなフィール
ドがあります。行内のフィールドは以下の通りです:

     category     アイテムのカテゴリーです
     head         TODOキーワード、TAGSそしてPRIORITYを除いた見出しです
     type         アジェンダのタイプは、以下が考えられます
                     todo               TODO検索で選ばれた
                     tagsmatch          tags検索で選ばれた
                     diary              diaryからインポートされた
                     deadline           デッドラインを設定された
                     scheduled          スケジューリングされた
                     timestamp          タイムスタンプで選ばれたアポイントメント
                     closed             その日付にcloseされたエントリ
                     upcoming-deadline  デッドラインが近づいていると警告している
                     past-scheduled     その日付より前にスケジューリングされたアイ
     テム, 原文:forwarded scheduled item.
                     block              エントリが日付のブロックを持っていて日付を
     含む
     todo         もしあれば、TODOのキーワード
     tags         継承したものも含めた全てのtags。コロンで区切られている。
     date         2007-2-14のような基準日
     time         15:00-16:50のような時間
     extra        追加のプラニング情報の文字列
     priority-l   もし与えられていれば優先順位の文字
     priority-n   計算された数字の優先度

タイムスタンプ(すなわちデッドラインを設定された/スケジューリングされた)がそ
のアイテムのセクションをleadする場合にのみTimeもしくはdateが与えられます。

このようなCSVリストは後処理のスクリプトでとても使いやすいです。例のPerlプロ
グラムは、Emacs/Org-modeからTODOリストを取得して、前にチェックボックスを挿入
して、全てのアイテムを出力します。

     #!/usr/bin/perl

     # 実行するEmacsのコマンドを定義します
     $cmd = "emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \"t\")'";

     # 実行してアウトプットを取得します
     $agenda = qx{$cmd 2>/dev/null};

     # 全ての行についてループします
     foreach $line (split(/\n/,$agenda)) {
       # それぞれの値を取得します
       ($category,$head,$type,$todo,$tags,$date,$time,$extra,
        $priority_l,$priority_n) = split(/,/,$line);
       # 処理して出力します
       print "[ ] $head\n";
     }


File: org-ja,  Node: プロパティAPIを使う,  Next: マッピングAPIを使う,  Prev: アジェンダ情報の抽出,  Up: ハッキング

A.9 プロパティAPIを使う
===============================

プロパティを扱うために使用できる関数を説明します。

 -- Function: org-entry-properties &optional pom which
     ポイントかマーカー(point-or-marker
     POM)の位置でのエントリのプロパティを全て 取得します。
     これには、TODOキーワード, tags, デッドラインのtime文字列,
     スケジューリングのtime文字列, 計測のtime文字 列,
     エントリ内で更に定義されているプロパティが含まれます。返り値は連想リストです
     。プロパティのキーが何度も使われた場合は、キーは複数回出現します。
     POMはnilとなり得ます。その場合は現在のエントリが使われます。WHICHがnilもし
     くは`all'の場合、全てのプロパティを取得します。WHICHが`special'もしくは
     `standard'の場合、部分集合(subclass)を取得します。

 -- Function: org-entry-get pom property &optional inherit
     ポイントかマーカー(point-or-marker
     POM)の位置でのエントリーのプロパティ  PROPERTY
     の値を取得します。デフォルトでは、そのエントリーで局所的に定義されたプロパテ
     ィのみを調べます。もしINHERITがnon-nilかつエントリーがプロパティを持っていな
     い場合、階層のより高いレベルをチェックします。もしINHERITがシンボル
     `selective'である場合、継承を使います。また、継承を使うのは、継承のためのプ
     ロパティを`org-use-property-inheritance'の設定が選んだときに限ります。

 -- Function: org-entry-delete pom property
     ポイントかマーカー(point-or-marker
     POM)の位置のエントリーからプロパティ PROPERTYを削除します。

 -- Function: org-entry-put pom property value
     ポイントかマーカー(point-or-marker
     POM)の位置のエントリにプロパティPROPERTY の値VALUEをセットします。

 -- Function: org-buffer-property-keys &optional include-specials
     カレントバッファにある全てのプロパティのキーを取得します。

 -- Function: org-insert-property-drawer
     ポイントの位置にプロパティの引き出し(drawer)を挿入します。

 -- Function: org-entry-put-multivalued-property pom property &rest
          values
     ポイントかマーカー(point-or-marker
     POM)のプロパティPROPERTYを値VALUESにセットします。値VALUESは文字列のリストで
     なければなりません。それらはスペースを区切り文字として連結されます。

 -- Function: org-entry-get-multivalued-property pom property
     プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、文字列の
     リストを返します。

 -- Function: org-entry-add-to-multivalued-property pom property value
     プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、このリス
     トの中に値VALUEがあることを確認します。

 -- Function: org-entry-remove-from-multivalued-property pom property
          value
     プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、このリス
     トの中に値VALUEが_ない_ことを確認します。

 -- Function: org-entry-member-in-multivalued-property pom property
          value
     プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、このリス
     トの中に値VALUEがあるかをチェックします。

 -- User Option: org-property-allowed-value-functions
     特定のプロパティに許可された値を提供する関数へのフックです。その関数はプロパ
     ティの名前を単一の引数として受け取り、許可された値の単純なリストを返します。
     `:ETC'がその値の1つである場合、その値を補完の候補として使いますが、他の値も
     入力することができます。もし関数がプロパティと関係無い場合には、関数は`nil'
     を返します。


File: org-ja,  Node: マッピングAPIを使う,  Prev: プロパティAPIを使う,  Up: ハッキング

A.10 マッピングAPIを使う
================================

Org-modeは一定の基準を満たす全てのエントリーを探すために、洗練されたマッピン
グ機能を持っています。アジェンダビューを作成するために内部でこの機能を使われ
ていますが、エントリのそれぞれもしくは選択されたエントリに対して任意の関数を
実行するためにAPIも使われます。

 -- Function: org-map-entries func &optional match scope &rest skip
     範囲SCOPEの内でMATCHにマッチして選択された各見出しで関数FUNCを呼び出します。

     FUNCは関数かLispのフォームです。関数は引数なしですが、見出しの始まりと終わり
     のカーソル位置とともに呼び出されます。関数への全ての返り値は、リストとして集
     められて返されます。

     save-excursionフォームの中でFUNCを呼び出されるので、ポイントを保存する必要が
     ありません。評価の後に、カーソルは(処理しているエントリの)行末に移動し、検索
     を続行します。ある条件では、この方法では希望する結果を得られないかも知れませ
     ん。例えば、もし現在の(サブ)ツリーを削除した(例えば
     アーカイブした)場合、次のエントリをスキップすることを意味します。そのような
     場合、変数`org-map-continue-from'に希望するバッファポジションをFUNCに設定さ
     せることで、どこから検索を続けるべきかというポジションを指定できます。

     アジェンダビューに使われるとき、MATCHはtags/property/todoにマッチします。繰
     り返しの間、このクエリにマッチする見出しだけが考慮されます。もしMATCHがnilか
     tの場合、繰り返しで全ての見出しがチェックされます。

     SCOPEはこのコマンドのスコープ(対象とする範囲)を決定します。以下のどれかにな
     り得ます:

          nil     カレントバッファ、 制限があればそれに従う
          tree    現在位置のエントリから始まるサブツリー
          file    カレントバッファ、制限なしで
          file-with-archives
                  カレントバッファ、関連したアーカイブも含む
          agenda  全てのアジェンダファイル
          agenda-with-archives
                  全てのアジェンダフィル、関連したアーカイブファイルも含む
          (file1 file2 ...)
                  ファイルがリスト形式の場合、リスト内の全てのファイルをスキャンします
     残りの引数は、スキャナー(読み取る関数?)のスキップ機能の設定として取り扱われ
     ます。以下のアイテムをとることができます。

          archive   アーカイブタグ(archive tag)があるツリーをスキップします
          comment   キーワードCOMMENTがあるツリーをスキップします
          function or Lisp form
                    `org-agenda-skip-function'の値として使われます。
                    関数であればいつもtを返します、
                    FUNCはは呼び出されません、
                    関数がポイントを置いたままにした位置から検索は続きます

マッピングルーティーンへと与えられる関数はどのような動作もできます。エントリ
に関する情報を更に集めるためにプロパティAPI(*note
プロパティAPIを使う::)を使えます
し、もしくはエントリのメタデータを変更するために使えます。
便利な幾つかの関数を紹介します:

 -- Function: org-todo &optional arg
     エントリのTODO状態を変更します。引数ARGが取り得る多くの値については、関数の
     ドキュメント文字列を見て下さい。

 -- Function: org-priority &optional action
     エントリのプライオリティを変更します。ACTIONが取り得る値についてはこの関数の
     ドキュメント文字列を見て下さい。

 -- Function: org-toggle-tag tag &optional onoff
     現在のエントリのタグTAGをトグルします。`on'か`off'のいずれかを設定するという
     ことは、タグをトグルするのではなく、onかoffのどちらかであることを確かにしま
     す。

 -- Function: org-promote
     現在のエントリを一階層上に引き上げます。

 -- Function: org-demote
     現在のエントリを一階層下へ引き下げます。

これは、現在のファイルの中でTODO`TOMORROW'を持つ全てエントリを、キーワード
`UPCOMIND'をつけたTODOのエントリへと変化させる簡単な例です。

     (org-map-entries
        '(org-todo "UPCOMING")
        "+TOMORROW" 'file 'archive 'comment)

以下の例では、全てのアジェンダファイルに渡って、TODOのキーワードに`WAITING'
があるエントリの数をカウントします。

     (length (org-map-entries t "/+WAITING" 'agenda))


File: org-ja,  Node: MobileOrg,  Next: 歴史と謝辞,  Prev: ハッキング,  Up: Top

Appendix B MobileOrg
********************

MobileOrg (http://mobileorg.ncogni.to/) はRichard
Morelandよって開発されたiPhone/iPod Touch
シリーズの携帯端末のためのアプリケーションです。MobileOrgは「リアル」のコン
ピュータ上にあるOrg-modeシステムのために、オフラインのビューとキャプチャによ
るサポートを提供します。その機能によって、実際のエントリーがどのように変化し
たかについて記録することができます。AndroidのユーザーはMatt
Jonesよって作成された MobileOrg Android
(http://wiki.github.com/matburt/mobileorg-android/)のアプ
リをチェックしてください。

この付録では、MobileOrgで表示されるフォーマットの中でアジェンダビューを作成
し、キャプチャされたノートとMobileOrgで変更を、メインのシステムに統合してい
くために、Org-modeのサポートについて説明します。

MobileOrgの中でタグやTODOの状態を変更するためには、あなたは、例え、ひとつひ
とつのファイルが、一部しか使っていないとしても、全ての重要なタグやTODOキーワ
ードを網羅するように`org-todo-keywords'と`org-tags-alist'変数のカスタマイズ
を設定しなければなりません。MobileOrgは、同様にインバッファの設定で状態やタ
グを提供しますが、これらの変数の中で設定されているものについてのみ、TODOの状
態についての設定 (*note ファイル毎のキーワード::) や相互に排他的な タグ
(*note タグの設定::) についての装 備状況を理解してください。

* Menu:

* ディレクトリの設定::  モバイルデバイスとはどこでデータをやりとりすれば良い
ですか？
* ディレクトリへの出力::  Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する


File: org-ja,  Node: ディレクトリの設定,  Next: ディレクトリへの出力,  Prev: MobileOrg,  Up: MobileOrg

B.1 ディレクトリの設定
===============================

MobileOrgはサーバー上のディレクトリを通して、Emacsと相互に連携させる必要があ
ります。もしも公開のサーバーを使用しているなら、そのサーバーにアップロードさ
れるファイルを暗号化したいと考えるかもしれません。この機能はOrg-mode7.02の
MobileOrg 1.5（iPhoneバージョン）で実現していますが、あなたのシステムに
`openssl'
をインストールしておく必要があるでしょう。暗号化するために、MobileOrgにパス
ワードを設定し、Emacs上では、`org-mobile-use-encryption'(1)変数を設定
しておく必要があります。

   無料のDropbox.com
(http://dropbox.com)のアカウント(2)を使い、ディレクトリを作成するのが最も簡単な方法です。
MobileOrgで最初にDropboxに接続したときにDropboxの中にMobileOrgのディレクトリ
が作成されます。そのディレクトリが作成されたあと、次のようにEmacsに書き込み
ます。

     (setq org-mobile-directory "~/Dropbox/MobileOrg")

Org-modeはそのディレクトリの中に、MobileOrg用のファイルを置いたり、そこから
キャプチャされたノートを読み込んだりするコマンドを持っています。

   ---------- Footnotes ----------

   (1) もしもあなたのEmacs
の設定ファイルの中にパスワードを安全に保存したいならば、
`org-mobile-encryption-password'変数を設定すると良いでしょう。その変数の説明
文を読んでください。暗号化は、`.org'
ファイルの内容のみに適用されることに注
意してください。ファイルの名称そのものは、そのまま表示されます。

   (2) もしもDropboxを利用できな
い場合、またはMobileOrgのバージョンがそれをサポートしていない場合には、
webdavサーバが利用できます。詳しい情報を得るには、MobileOrgの説明部と
FAQ entry
(http://orgmode.org/worg/org-faq.html#mobileorg_webdav)をチェック
してください。


File: org-ja,  Node: ディレクトリへの出力,  Next: MobileOrgからpullする,  Prev: ディレクトリの設定,  Up: MobileOrg

B.2 ディレクトリへの出力
==================================

この操作では、`org-mobile-files'の中にリストアップされている全てのファイルを
、`org-mobile-directory'で指定したディレクトリにコピーします。デフォルトでは
このリストにはすべてのアジェンダファイル（`org-agenda-files'に登録されている
）を含んでいます。しかしながら、`org-mobiles-files'をカスタマイズすることで
ファイルを追加できます。ファイル名は、`org-directory'との相対パスで登録され
るので、すべてのファイルがこのディレクトリの中に入ることになります。プッシュ
する操作で、ユーザー(1)によ
って定義されたすべてのカスタマイズされたアジェンダビューを持った
`agendas.org'という特別なOrg-modeファイルを作成します。最後に、Org-modeは全
ての他のファイルへのリンクを含んだ`index.org'というファイルを書き込みます。
MobileOrgは、最初サーバーからこのファイルを読み込み、それから、そこに置かれ
ているすべてのアジェンダファイルとOrg-modeファイルをダウンロードします。ダウ
ンロードのスピードを上げるために、MobileOrgは、どのファイルのチェック記号
(2)が変更されたかど うかを読み取るだけなのです。

   ---------- Footnotes ----------

   (1) アジェンダを作成する際に、Org-modeではすべての参照され
るエントリーにID属性を強制的に付加します。そのため、これらのエントリーは、将
来の行動のために、それらのエントリーにMobileOrgによってフラグを付けたとして
も、ユニークなものとして識別されます。もしも、こんなにも沢山のエントリーにそ
ういう属性値をつけたくない場合は、`org-mobile-force-id-on-agenda-items'変数
を`nil'と設定してください。Org-modeは、各エントリーが十分ユニークであること
を期待したうえで、アウトラインの階層構造に依存することになるでしょう。

   (2) `checksums.dat'というファイルの中に自動的に保存されます。


File: org-ja,  Node: MobileOrgからpullする,  Prev: ディレクトリへの出力,  Up: MobileOrg

B.3 MobileOrgからpullする
=============================

MobileOrgがサーバーと同期する際に、Org-modeのファイルを閲覧するために呼び出
すだけではありません。それによってサーバー上の`mobileorg.org'というファイル
に対して、フラグがつけられたり、変更されたりしたエントリーに対して、キャプチ
ャされたエントリーやポインタを追加します。Org-modeでは、この情報をInBoxファ
イルに統合し、フラッグがつけられたエントリーにポインタを使って操作するという
_pull_の操作機能をもっています。どのように動作するのでしょうか。

  1.
     Org-modeは、`mobileorg.org'(1)の中で発見した全てのエントリーを移動し、
     `org-mobile-inbox-for-pull'変数によって、ポインタが付けられたファイル
     に追加します。記録されたエントリと編集されたイベントは、それぞれInBox
     ファイル中でトップレベルのエントリーとして位置づけられるでしょう。

  2.
     エントリーを移動したあと、Org-modeは、MobileOrgの中で作られた変更を実
     行することを試みます。いくつかの変更は直接、ユーザーの確認無しに適用さ
     れます。例では、タグ、TODOの状態、見出しそして本文に対するすべての変更
     がはっきりと適用されるというものです。将来の行動のために、フラグを付け
     られたエントリーは、`:FLAGGED:'というタグが付けられるでしょう。そのた
     め、再び簡単に見つけることができるでしょう。あるエントリを探したり、変
     更を適用するさいに問題があれば、ポインタのついたエントリーはinboxに残
     され、エラーメッセージの印がつけられるでしょう。あなたはあとでこれらの
     案件を手動で解決する必要があります。

  3.
     Org-modeでは、その際にフラグがつけられたすべてのエントリーとともに、ア
     ジェンダビューを作成できます。そしてユーザーはそれらの項目をやり終えた
     り、必要な行動を実行するでしょう。MobileOrgのエントリーにフラグが付け
     られている間に、ノートが保存されていたら、そのノートは、カーソルがアジ
     ェンダの行の上に置かれた時に、エコーエリア上に表示されるでしょう。
    `?'
          そういう特別なアジェンダの中で、`?'が入力されたときには、別のウインド
          ウでフラグの付けられたノートの全てが表示され、キルリング上に内容がコピ
          ーされます。そして、`? z C-y C-c
          C-c'を使用することで、フラグのつけら
          れたノートを、そのエントリーの通常のノートとして保存することができます
          。`?'を２度続けて入力すると、（プロパティの中に保存されていた）記録さ
          れているフラグの付いたノートと一緒に、`:FLAGGED:'というタグを削除する
          よう指示したことになります。この方法で、あなたはこのフラグの付けられた
          エントリーを意図したプロセスで完了させるという指示をすることになります。

もしも、すべてのフラグのついたエントリーを直接処理することができないならば、
あなたは`C-c a ?'を入力して、アジェンダビュー(2)にいつ
でも戻ることができます。

   ---------- Footnotes ----------

   (1) `mobileorg.org'はこの操作のあとで空になり ます。

   (2) しかしながら、微妙な差があるこ とに注意してください。`M-x
org-mobile-pull <RET>'によって、自動的に作成され
たビューは、最後にpullされて配置されたすべてのファイルを検索することを保証さ
れています。これは、あなたのアジェンダファイルのリストに、現在含まれていない
ファイルも含みます。もしもあなたが、ビューを再作成するために、`C-c a
?'を最
後に使用したならば、カレントのアジェンダファイルのみが検索されます。


File: org-ja,  Node: 歴史と謝辞,  Next: メインインデックス,  Prev: MobileOrg,  Up: Top

Appendix C 歴史と謝辞
**************************

Org-modeは2003年に誕生しました。Emacs
Outlineモードのユーザーインターフェイスに対するフラストレーションから自由に
なるためでした。私（Carsten
Dominik）は、自分のノートとプロジェクトを整理しようと試みていて、Emacs使うこ
とが自然なやり方に思えました。ところが、アウトラインツリーの一部を隠したり表
示したりするだけでも、2〜3個のキーを組み合わせたコマンドを、7種類も覚えなけ
ればならず、これは全く受け入れがたいことでした（訳注：org-modeでは<TAB>だけ
でよい）。また、アウトラインでノートを取るとき、私は絶えずツリーの構造を変更
して、自分の考えや計画に合わせて整理しておきたかったのです。
_Visibility cycling_と_structure
editing_は、当初`outline-magic.el'パッケー
ジに実装されていましたが、すぐにより一般的な`org.el'に移しました。プロジェク
トを計画するための心地良い環境になったので、次の段階は_TODOリスト_、基本的な
_タイムスタンプ_そして_テーブル機能_を追加することでした。これらの機能は、
org-modeが今日も追求している2つの主要なゴールを明らかにしました。すなわち、
現代的で、アウトラインベースの、革新的かつ直感的な編集機能を持ったプレーンテ
キストモードになること。そして、ノートファイルに、プロジェクトプランイングの
機能を直接組み込むことです。

Org-modeをリリースして以来、私や<emacs-orgmode@gnu.org>に送られてくる、文字
通りに何千ものeメールは、バグレポート、フィードバック、新しいアイディア、そ
して時にはパッチやアドオンを絶えず提供してくれます。org-modeを改良するために
手助けしてくれるすべての人に感謝します。org-modeの様々な側面で、改善に多大な
影響を与えた方々のリストをここに記したいと思います。このリストは完全ではない
と思うので、もし書き忘れてしまった方がいればお詫びすると共に、連絡をください
。

   リストを記す前に、何名かについてアルファベット順で特別に紹介します。

Bastien Guerry
     Bastienは、LaTeXエクスポートとプレーンなリストを構文解析する機能を含む
     、org-modeの数多くの拡張機能を実装しました（その多くが、現在はorg-mode
     の中心に組み込まれています）。彼が副管理者としての役割を果たしていた開
     発初期の尽力は、org-modeプロジェクトの成功の中心となりました。また彼は
     Worg（訳注：org-modeのコミュニティサイト。`http://orgmode.org/worg/'）
     を考案し、org-modeのウェブにおける存在の認知を手助けし、orgmode.orgの
     ホスティングコストのスポンサーになりました。

Eric Schulte and Dan Davison
     EricとDanは、共同でorg-babelシステムに構築しました。これによりorg-mode
     を、コードの評価、文芸的プログラミングそして再現可能な研究に対応する、
     他言語環境へと変えました。

John Wiegley
     Johnは、数々の素晴らしいアイディアとパッチを直接的にorg-modeに提供して
     くれました。具体的には、ファイル添付システム（`org-attach.el'）、
     AppleMailとの一体化（`org-mac-message.el'）、TODOリストの階層的な依存
     関係、習慣のトラッキング（`org-habits.el'）そして、暗号化（
     `org-crypt.el'）です。そして実は、org-modeのキャプチャシステムは、彼の
     素晴らしい`remember.el'を拡張したものです。

Sebastian Rose
     Sebastianが居なければ、org-modeのHTML/XHTMLエクスポートは、無知なアマ
     チュアによる痛ましい機能になっていたでしょう。彼はorg-modeの該当部分を
     より高いレベルに押し上げました。また、`org-info.js'の作者でもあります
     。このJavaScriptは、org-modeから生成されたウェブページをinfoのように表
     示したり、単一キーによるナビゲーションでツリーを折り畳むインターフェイ
     スを提供します。

さて！いよいよ貢献してくれた方々のリストに移ります。繰り返しますが、忘れてい
るところがあれば教えてください。

   * Russel Adamsは、引き出しのアイディアを思いつきました。

   * Thomas Baumannは、`org-bbdb.el'と`org-mhe.el'を作成しました

   * Christophe
     Bataillonは、org-modeのウェブサイトで使っている素晴らしいユ
     ニコーンのロゴを作成しました。

   * Alex
     Bochannekは、タイムスタンプの丸め込みのためのパッチを提供しました。

   * Jan Böckerは、`org-docview.el'を作成しました。

   * Brad
     Bozarthは、org-modeのファイルにRSSフィードの情報を引き込む方法を
     示しました。

   * Tom Bretonは、`org-choose.el'を作成しました。

   * Charles
     Caveの提案は、Rememberのためのテンプレートの実装を活性化しまし
     た。現在はCaptureのテンプレートになっています。

   * Pavel
     Chalmovianskyは、時間指定したアイテムについてアジェンダの扱いに
     影響を与えました。

   * Gregory
     Chernovは、テーブルの計算でLisp形式をサポートするパッチを作成
     し、XEmacsとの互換性を改善しました。特に、XEmacsへ`nouline.el'を移植し
     ました。を行ないました。

   * Sacha
     Chuaは、Plannerからのいくつかのリンクコードをコピーすることを提
     案しました。

   * Baoqiu Cuiは、DocBookエクスポートに貢献しました。

   * Eddward
     DeVillaは、チェックボックスの統計を提案し、テストしました。ま
     た、プロパティのアイディアを思いつきました。しかも、そのためのAPIがあ
     ります。

   * Nick Dokosは、いくつもの扱いにくいバグを見つけ出しました。

   * Kees
     Dullemondは、HTMLにあるプロジェクトのリストを直接編集していました
     。そのため、HTMLエクスポートを含む初期の開発の一部をとても活性化しまし
     た。彼は、テーブルの列を狭めたり広げたりする手段を求めました。

   * Thomas S.
     Dyeは、Worgにドキュメントを寄稿し、マニュアルにOrg-babelのド
     キュメントを組み込む手助けをしました。

   * Christian
     Egliは、ドキュメントをTexinfo形式に変換し、アジェンダを呼び
     起こし、HTMLエクスポートにCSSフォーマットのパッチを生成しました。さら
     に、`org-taskjuggler.el'を作成しました。

   * David
     Emeryは、エクスポートされたHTMLのアジェンダでカスタムなCSSをサポ
     ートするパッチを提供しました。

   * Nic Ferrierは、mailcapとXOXOサポートに貢献しました。

   * Miguel A.
     Figueroa-Villanuevaは、階層的なチェックボックスを実装しまし た。

   * John
     Foerchは、隠されたアウトラインツリーで、どうすればインクリメンタ
     ルサーチが検索結果の周辺にコンテクストを表示するようになるかを明らかに
     しました。

   * Raimar Finkenは、`org-git-line.el'を作成しました。

   * Mikael Forniusは、メーリングリストの司会をしています。

   * Austin Frankは、メーリングリストの司会をしています。

   * Eric
     Fragaは、アイディアを出しテストを行ない、BEAMERエクスポートの開発
     を進めました。

   * Barry Giddenは、Network Theory Ltd.
     を通した本の出版のための準備で、マ ニュアルを校正してくれました。

   * Niels
     Giesenは、DONEとしたツリーを自動的にアーカイブするアイディアを提
     供しました。

   * Nicolas
     Goaziouは、プレーンなリストのコードの多くの部分を書き直しまし た。

   * Kai
     Grossjohannは、他のパッケージとのキーバインディングの衝突を指摘し
     ました。

   * Network Theory Ltd. のBrian
     Goughは、org-modeのマニュアルを書籍として 出版しました。

   * Bernt
     Hansenは、タスクの自動リピート、タスクの状態遷移ログ、クロックテ
     ーブルのサポートで、多くの部分を担当しました。彼の明瞭な説明は、Gitの
     バージョン管理システムを採用した時にとても重要でした。

   * Manuel
     Hermenegildoは、いくつものアイディア、小数のバグフィックスとパ
     ッチを提出しました。

   * Phil Jacksonは、`org-irc.el'を作成しました。

   * Scott
     Jaderholmは、フットノート、折り畳んだエントリー間の空行の制御、
     そしてプロパティの列表示を提案しました。

   * Matt Jonesは、MobileOrg Androidを作成しました。

   * Tokuya Kameshimaは、`org-wl.el'と`org-mew.el'を作成しました。

   * Shidai Liu
     ("Leo")は、LaTeXの組み込みを探求し検証しました。また彼は頻繁なフィード
     バックといくつかのパッチを提供しました。

   * Matt
     Lundinは、テーブルの数式と名前付きの非表示アンカーへの参照をテー
     ブルの最終行に置くことを提案しました。

   * David
     Mausは、`org-atom.el'を作成し、org-modeに関するgitのチケットを管
     理しました。またメーリングリストに、有益な返信といくつかのバグフィック
     ス、そしてパッチを多数提出する貢献者でした。

   * Jason F.
     McBrayerは、アジェンダのCSV形式のエクスポートを提案しました。

   * Max Mikhanoshaは、ノートの再配置のアイディアを思いつきました。

   * Dmitri
     Minaevは、ファイルごとに優先順位の制限を設定するパッチを提出し
     ました。

   * Stefan Monnierは、Emacs Lisp
     コンパイラの出力を快適に保つためのパッチ を 提供しました。

   * Richard Morelandは、iPhone向けにMobileOrgを作成しました。

   * Rick
     Moynihanは、一つのファイルで複数のTODOの連なりを扱うことを可能に
     し、アジェンダをサブツリーに素早く制限可能にしました。

   * Todd
     Nealは、INFOファイルとElisp形式へのリンクについてパッチを提供しま
     した。

   * Greg Newmanは、ユニコーンのロゴを現在の形にリフレッシュしました。

   * Tim
     O'Callaghanは、ファイル内リンク、一般的なファイルリンクのための検
     索オプション、そしてタグを提案しました。

   * Osamu
     Okanoは、`orgcard2ref.pl'を作成しました。リファレンスカードのテ
     キスト版を作るためのPerlスクリプトです。

   * Takeshi Okanoは、org-modeのマニュアルと、David
     O'Toole'sのチュートリア ルを日本語に翻訳しました。

   * Oliver Oppitzは、TODOアイテムが複数の状態を持つことを提案しました。

   * Scott
     Ottersonは、他の要素とのリンクに説明文を導入するきっかけを作りま
     した。

   * Pete
     Phillipsは、タグの開発をする際に助力しました。また、頻繁にフィー
     ドバックを提供しました。

   * Martin
     Pohlackは、文字列の挿入をアンドゥのために使いやすい束にするコー
     ドスニペットを提供しました。

   * T.V. Ramanは、バグをレポートして改善を提案しました。

   * Matthias Rempe
     (Oelde)は、アイディアとWindowsサポート、品質制御を提供 しました。

   * Paul
     Rivierは、名前付き注釈の基本的な実装を提供しました。また彼は、し
     ばらくメーリングリストの管理者でした。

   * Kevin
     Rogersは、リモートホストのVMファイルにアクセスするコードを提出し
     ました。

   * Frank Ruellは、`keymapp
     nil'のミステリアスなバグ（`allout.el'との衝突 ）を解消しました。

   * Jason
     Riedyは、拡張パッチによってorgtblテーブルのための送受信の仕組み
     を汎用化しました。

   * Philip
     Rookeは、org-modeのリファレンスカードを作成しました。数多くのフ
     ィードバックを提供し、org-modeの文書化の基準を作成し適用しました。

   * Christian
     Schlauerは、特に、リンクで利用するカギ括弧（<,>）について提
     案しました。

   * Paul Sextonは、`org-ctags.el'を作成しました。

   * VM、BBDB、Gnusへリンクすることの最初のアイディアは、Tom Shannonの
     `organizer-mode.el'によってもたらされました。

   * Ilya
     Shlyakhterは、同一階層内でのアーカイブ、リテラルの例での行番号、
     そして、参照されたコード行のリモートハイライトを提案しました。

   * Stathis
     Siderisは、ASCIIをPNGに変換する`ditaa.jar'を作成しました。現在
     これは、org-modeの`contrib'ディレクトリに格納されています。

   * Daniel
     Sinderは、サブツリーのロックによる内部的なアーカイブ機能のアイ
     ディアを思いつきました。

   * Dale Smithは、リンクの省略記法を提案しました。

   * James TD
     Smithは、便利なカスタマイズと機能のための数多くのパッチを提供
     しました。

   * Adam
     Spiersは、グローバルなリンクコマンドを求めました。これはリンクの
     拡張システムの構築のきっかけとなり、行列のサポートを追加し、さらにマッ
     ピングAPIを提案しました。

   * Ulf
     Stegemannは、特別な記号をHTML、LaTeX、UTF-8、Latin-1、そしてASCII
     に変換するための表を作成しました。

   * Andy
     Stewartは、`org-w3m.el'にコードを提供しました。org-modeのシンタッ
     クスにリンクを変換したHTMLコンテンツをコピーする機能です。

   * David
     O'Tooleは、`org-publish.el'を作成しました。また、マニュアルにお
     ける公開の章のドラフトを執筆しました。

   * Sebastien
     Vaubanは、LaTeXとBEAMERエクスポートについての多くの問題をレ
     ポートしました。また、GNUSのソースコードをハイライトする機能を有効にし
     ました。

   * Stefan
     Vollmarは、神経学のマックスプランク研究所での講演（ビデオ収録さ
     れている）を準備しました。また彼は、HTMLエクスポートのコンセプトインデ
     ックスの生成を思いつきました。

   * Jürgen Vollmerは、HTML出力で目次を生成するコードを提供しました。

   * Samuel
     Walesは、改善のためのフィードバックとバグレポートを提供しました。

   * Chris Wallaceは、`QUOTE'キーワードを改良するパッチを提供しました。

   * David
     Wainbergは、アーカイブと、リンクシステムの改良を提案しました。

   * Carsten
     Wimmerは、いくつかの変更を提案し、GNUSへのリンクに関するバグフ
     ィックスを手助けしました。

   * Roland
     Winklerは、tty端末でorg-modeを動かすためのキーバインドの追加を
     依頼しました。

   * Piotr
     Zielinskiは`org-mouse.el'を作成しました。アジェンダブロックを提
     案し、様々なアイディアをコードスニペットを提供しました。


File: org-ja,  Node: メインインデックス,  Next: キーワードインデックス,  Prev: 歴史と謝辞,  Up: Top

Concept index
*************

 [index ]
* Menu:

* #+ARCHIVE:                             サブツリーを移動する.
                                                              (line  25)
* #+ATTR_DOCBOOK:                        DocBookエクスポートでの画像.
                                                              (line  33)
* #+ATTR_HTML <1>:                       HTMLエクスポートでのテーブル.
                                                              (line  12)
* #+ATTR_HTML <2>:                       HTMLエクスポートでの画像.
                                                              (line  25)
* #+ATTR_HTML:                           HTMLエクスポートでのリンク.
                                                              (line  22)
* #+ATTR_LaTeX <1>:                      LaTeXエクスポートでのテーブル.
                                                              (line  21)
* #+ATTR_LaTeX:                          LaTeXエクスポートでの画像.
                                                              (line  26)
* #+AUTHOR:                              エクスポートオプション.
                                                              (line  22)
* #+BEGIN, clocktable:                   クロックテーブル.    (line  39)
* #+BEGIN, columnview:                   カラム表示の保存.    (line  12)
* #+BEGIN:dynamic block:                 ダイナミックブロック.
                                                              (line  16)
* #+BEGIN_CENTER:                        パラグラフ.          (line  29)
* #+BEGIN_COMMENT:                       コメント行.          (line   6)
* #+BEGIN_DOCBOOK:                       DocBookコードの引用. (line  11)
* #+BEGIN_EXAMPLE:                       リテラルの例.        (line   7)
* #+BEGIN_HTML:                          HTMLタグの引用符.    (line  16)
* #+BEGIN_LaTeX:                         LaTeXコードの引用.   (line  14)
* #+BEGIN_QUOTE:                         パラグラフ.          (line  24)
* #+BEGIN_SRC:                           リテラルの例.        (line  26)
* #+BEGIN_VERSE:                         パラグラフ.          (line  13)
* #+BIND:                                エクスポートオプション.
                                                              (line  22)
* #+CAPTION <1>:                         DocBookエクスポートでの画像.
                                                              (line  33)
* #+CAPTION <2>:                         LaTeXエクスポートでのテーブル.
                                                              (line  13)
* #+CAPTION <3>:                         HTMLエクスポートでのテーブル.
                                                              (line  12)
* #+CAPTION <4>:                         LaTeXエクスポートでの画像.
                                                              (line  26)
* #+CAPTION <5>:                         HTMLエクスポートでの画像.
                                                              (line  25)
* #+CAPTION:                             画像とテーブル.      (line   6)
* #+CATEGORY:                            カテゴリ.            (line   6)
* #+COLUMNS:                             カラム定義の有効範囲.
                                                              (line   8)
* #+CONSTANTS:                           参照.                (line 101)
* #+DATE:                                エクスポートオプション.
                                                              (line  22)
* #+DESCRIPTION:                         エクスポートオプション.
                                                              (line  22)
* #+DOCBOOK:                             DocBookコードの引用. (line   9)
* #+DRAWERS:                             引き出し.            (line   6)
* #+EMAIL:                               エクスポートオプション.
                                                              (line  22)
* #+EXPORT_EXCLUDE_TAGS:                 エクスポートオプション.
                                                              (line  22)
* #+EXPORT_SELECT_TAGS:                  エクスポートオプション.
                                                              (line  22)
* #+FILETAGS:                            タグの継承.          (line  18)
* #+HTML:                                HTMLタグの引用符.    (line  14)
* #+INCLUDE:                             ファイルの挿入.      (line   7)
* #+INFOJS_OPT:                          JavaScriptサポート.  (line  26)
* #+KEYWORDS:                            エクスポートオプション.
                                                              (line  22)
* #+LABEL <1>:                           画像とテーブル.      (line   6)
* #+LABEL <2>:                           LaTeXエクスポートでのテーブル.
                                                              (line  21)
* #+LABEL <3>:                           DocBookエクスポートでの画像.
                                                              (line  33)
* #+LABEL:                               LaTeXエクスポートでの画像.
                                                              (line  26)
* #+LANGUAGE:                            エクスポートオプション.
                                                              (line  22)
* #+LATEX_CLASS:                         ヘッダーと章立て.    (line   8)
* #+LATEX_CLASS_OPTIONS:                 ヘッダーと章立て.    (line   8)
* #+LATEX_HEADER <1>:                    エクスポートオプション.
                                                              (line  22)
* #+LATEX_HEADER:                        ヘッダーと章立て.    (line   8)
* #+LINK:                                リンクの省略記法.    (line  40)
* #+LINK_HOME:                           エクスポートオプション.
                                                              (line  22)
* #+LINK_UP:                             エクスポートオプション.
                                                              (line  22)
* #+LaTeX:                               LaTeXコードの引用.   (line  12)
* #+MACRO:                               マクロ置換.          (line   6)
* #+OPTIONS <1>:                         エクスポートオプション.
                                                              (line  22)
* #+OPTIONS:                             見出しとセクション.  (line  11)
* #+ORGLST:                              ラジオリスト.        (line  24)
* #+ORGTBL:                              ラジオテーブル.      (line  15)
* #+ORGTBL, SEND:                        LaTeXの例.           (line  14)
* #+PLOT:                                Org-Plot.            (line   6)
* #+PRIORITIES:                          プロパティ.          (line  44)
* #+PROPERTY:                            プロパティの表記法.  (line  36)
* #+SEQ_TODO:                            ファイル毎のキーワード.
                                                              (line   6)
* #+SETUPFILE:                           バッファ内での変数制御.
                                                              (line  55)
* #+STARTUP::                            バッファ内での変数制御.
                                                              (line  66)
* #+STYLE:                               CSSサポート.         (line  45)
* #+TAGS:                                タグの設定.          (line  28)
* #+TBLFM:                               フィールドと範囲の数式.
                                                              (line  13)
* #+TBLNAME:                             参照.                (line 122)
* #+TEXT <1>:                            エクスポートオプション.
                                                              (line  22)
* #+TEXT:                                冒頭のテキスト.      (line   6)
* #+TITLE <1>:                           ドキュメントタイトル.
                                                              (line   8)
* #+TITLE:                               エクスポートオプション.
                                                              (line  22)
* #+TODO:                                ファイル毎のキーワード.
                                                              (line   6)
* #+TYP_TODO:                            ファイル毎のキーワード.
                                                              (line   6)
* #+XSLT:                                エクスポートオプション.
                                                              (line  22)
* 1日のアジェンダ:                       毎週／毎日のアジェンダ.
                                                              (line   6)
* 1週間のアジェンダ:                     毎週／毎日のアジェンダ.
                                                              (line   6)
* API、マッピングの:                     マッピングAPIを使う. (line   6)
* ASCII形式へのエクスポート:             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line   6)
* Atom feeds:                            RSSフィード.         (line   6)
* BBDB, anniversaries:                   毎週／毎日のアジェンダ.
                                                              (line  67)
* BBDBリンク:                            外部リンク.          (line   6)
* Baur, Steven L.:                       協調.                (line  73)
* Boolean logic, for tag/property searches: タグとプロパティとのマッチング.
                                                              (line  36)
* C-c C-c、概観:                         「C-c C-c」キーはとても忙しい.
                                                              (line   6)
* CDLaTeX:                               CDLaTeXモード.       (line   6)
* CSS、HTMLエクスポートに関する:         CSSサポート.         (line   6)
* CUA.el:                                衝突.                (line  18)
* Cui, Baoqiu:                           DocBookエクスポート. (line   6)
* DEADLINEキーワード:                    デッドラインとスケジュール.
                                                              (line  10)
* DESCRIPTION属性:                       iCalendarエクスポート.
                                                              (line  44)
* DONEは最終のTODOキーワード:            ファイル毎のキーワード.
                                                              (line  26)
* Dan Davidson:                          ソースコードとの連携.
                                                              (line   6)
* DocBookの再帰的なsection:              章の繰り返し.        (line   6)
* DocBookエクスポート:                   DocBookエクスポート. (line   6)
* DocBookでのインライン画像:             DocBookエクスポートでの画像.
                                                              (line   6)
* DocBook出力における特殊文字:           特殊文字.            (line   6)
* DocBookへの出力におけるテーブル:       DocBookエクスポートでのテーブル.
                                                              (line   6)
* Dominik, Carsten:                      協調.                (line  16)
* ELispリンク:                           外部リンク.          (line   6)
* Eric Schulte:                          ソースコードとの連携.
                                                              (line   6)
* Freemindエクスポート:                  Freemindエクスポート.
                                                              (line   6)
* Gillespie, Dave:                       協調.                (line   6)
* Gnuplotを用いたテーブルのプロット:     Org-Plot.            (line   6)
* Gnusリンク:                            外部リンク.          (line   6)
* Guerry, Bastien:                       LaTeXとPDFエクスポート.
                                                              (line   6)
* HTML、Orgtblモードと:                  変換関数.            (line   6)
* HTMLのエントリ:                        特殊記号.            (line   6)
* HTMLの引用タグ:                        エクスポートオプション.
                                                              (line  46)
* HTMLのエクスポート:                    HTMLのエクスポート.  (line   6)
* HTMLエクスポート、CSS:                 CSSサポート.         (line   6)
* HTMLのインライン画像:                  HTMLエクスポートでの画像.
                                                              (line   6)
* IRCリンク:                             外部リンク.          (line   6)
* Infoリンク:                            外部リンク.          (line   6)
* LOCATION属性:                          iCalendarエクスポート.
                                                              (line  44)
* LaTeX エクスポートにおけるテーブル:    LaTeXエクスポートでのテーブル.
                                                              (line   6)
* LaTeX、Orgtblモードと:                 LaTeXの例.           (line   6)
* LaTeXの解釈:                           LaTeXの組み込み.     (line   6)
* LaTeXクラス:                           ヘッダーと章立て.    (line   6)
* LaTeXの見出し:                         ヘッダーと章立て.    (line   6)
* LaTeXのエントリ:                       特殊記号.            (line   6)
* LaTeXの構造の分割:                     ヘッダーと章立て.    (line   6)
* LaTeXのエクスポート:                   LaTeXとPDFエクスポート.
                                                              (line   6)
* LaTeXの断片的なコード <1>:             エクスポートオプション.
                                                              (line  46)
* LaTeXの断片的なコード:                 LaTeXのコード片.     (line   6)
* LaTeXの中のインライン画像:             LaTeXエクスポートでの画像.
                                                              (line   6)
* LaTeXのコード片、プレビュー:           LaTeXコード片のプレビュー.
                                                              (line   6)
* LaTeXの断片、マークアップのルール:     特殊記号.            (line   6)
* Latin-1でのエクスポート:               ASCII/Latin-1/UTF-8エクスポート.
                                                              (line   6)
* Lisp形式、テーブルの数式として:        Lisp用の数式構文.    (line   6)
* Ludlam, Eric M.:                       協調.                (line  45)
* MH-Eリンク:                            外部リンク.          (line   6)
* MathJax:                               HTMLエクスポートでの数式フォーマット.
                                                              (line   6)
* MobileOrg:                             MobileOrg.           (line   6)
* Org-mode、利用開始:                    アクティベーション.  (line  23)
* Orgstructモード:                       Orgstructモード.     (line   6)
* Orgtblモード <1>:                      任意の構文によるテーブル.
                                                              (line   6)
* Orgtblモード:                          Orgtblモード.        (line   6)
* Ota, Takaaki:                          協調.                (line  52)
* Outline mode:                          アウトライン.        (line   6)
* PDF出力 <1>:                           DocBookエクスポート. (line   6)
* PDF出力:                               LaTeXとPDFエクスポート.
                                                              (line   6)
* RMAILリンク:                           外部リンク.          (line   6)
* RSSフィード:                           RSSフィード.         (line   6)
* Rose, Sebastian:                       JavaScriptサポート.  (line   6)
* SCHEDULEDキーワード:                   デッドラインとスケジュール.
                                                              (line  28)
* SHELLリンク:                           外部リンク.          (line   6)
* STARTUP keyword、constSI:              バッファ内での変数制御.
                                                              (line 130)
* STARTUP keyword、constcgs:             バッファ内での変数制御.
                                                              (line 130)
* STARTUP keyword、customtime:           バッファ内での変数制御.
                                                              (line 128)
* STARTUP keyword、even:                 バッファ内での変数制御.
                                                              (line 119)
* STARTUP keyword、hidestars:            バッファ内での変数制御.
                                                              (line 119)
* STARTUP keyword、odd:                  バッファ内での変数制御.
                                                              (line 119)
* STARTUP keyword、showstars:            バッファ内での変数制御.
                                                              (line 119)
* STARTUPキーワード、<nologrefile:       バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、align:              バッファ内での変数制御.
                                                              (line  82)
* STARTUPキーワード、indent:             バッファ内での変数制御.
                                                              (line  76)
* STARTUPキーワード、logdone:            バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、lognoredeadline:    バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、lognoteclock-out:   バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、lognotedone:        バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、lognoterefile:      バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、lognoterepeat:      バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、lognotereschedule:  バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、logredeadline:      バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、logrefile:          バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、logrepeat:          バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、logschedule:        バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、noalign:            バッファ内での変数制御.
                                                              (line  82)
* STARTUPキーワード、noindent:           バッファ内での変数制御.
                                                              (line  76)
* STARTUPキーワード、nologdone:          バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、nologredeadline:    バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、nologrepeat:        バッファ内での変数制御.
                                                              (line  94)
* STARTUPキーワード、nologreschedule:    バッファ内での変数制御.
                                                              (line  94)
* STATUPキーワード、nolognoteclock-out:  バッファ内での変数制御.
                                                              (line  94)
* SUMMARY属性:                           iCalendarエクスポート.
                                                              (line  44)
* Storm, Kim. F.:                        衝突.                (line  18)
* TODO keyword matching:                 グローバルなTODOリスト.
                                                              (line  16)
* TODO keyword matching, with tags search: タグとプロパティとのマッチング.
                                                              (line  62)
* TODO list, global:                     グローバルなTODOリスト.
                                                              (line   6)
* TODOアイテム:                          TODOアイテム.        (line   6)
* TODO間の関係:                          TODO間の関係.        (line   6)
* TODOワークフロー:                      ワークフローの状態.  (line   6)
* TODOの状態の切り替え:                  TODOの基本.          (line  14)
* TODOキーワードの補完:                  補完.                (line   6)
* TODOキーワードセット:                  キーワードセット.    (line   6)
* TODOキーワードとしてのワークフローの状態: ワークフローの状態.
                                                              (line   6)
* TaskJugglerエクスポート:               TaskJugglerエクスポート.
                                                              (line   6)
* TeXの解釈:                             LaTeXの組み込み.     (line   6)
* TeXマクロ <1>:                         エクスポートオプション.
                                                              (line  46)
* TeXマクロ:                             特殊記号.            (line   6)
* TeXシンボルの補完:                     補完.                (line   6)
* URLリンク:                             外部リンク.          (line   6)
* USENETリンク:                          外部リンク.          (line   6)
* UTF-8でのエクスポート:                 ASCII/Latin-1/UTF-8エクスポート.
                                                              (line   6)
* VMリンク:                              外部リンク.          (line   6)
* WANDERLUSTリンク:                      外部リンク.          (line   6)
* Wiegley, John:                         協調.                (line  41)
* XEmacs:                                インストール.        (line   6)
* XOXOエクスポート:                      XOXOエクスポート.    (line   6)
* activation:                            アクティベーション.  (line   6)
* agenda files, removing buffers:        アジェンダのコマンド.
                                                              (line 505)
* agenda views, custom:                  カスタムアジェンダビュー.
                                                              (line   6)
* agenda, column view:                   アジェンダのカラム表示.
                                                              (line   6)
* agenda, with block views:              ブロックアジェンダ.  (line   6)
* alignment in tables:                   列幅と整列.          (line   6)
* anniversaries, from BBDB:              毎週／毎日のアジェンダ.
                                                              (line  67)
* appointment reminders:                 毎週／毎日のアジェンダ.
                                                              (line 103)
* appt.el:                               毎週／毎日のアジェンダ.
                                                              (line 103)
* archive locations:                     サブツリーを移動する.
                                                              (line  20)
* archiving:                             アーカイブ.          (line   6)
* attachments:                           添付.                (line   6)
* autoload:                              アクティベーション.  (line   6)
* block agenda:                          ブロックアジェンダ.  (line   6)
* blocks, folding:                       ブロック.            (line   6)
* calc.el:                               協調.                (line   6)
* calcパッケージ:                        スプレッドシート.    (line   6)
* calendar commands, from agenda:        アジェンダのコマンド.
                                                              (line 437)
* category:                              カテゴリ.            (line   6)
* category, require for tags/property match: タグとプロパティとのマッチング.
                                                              (line  62)
* cdlatex.el:                            協調.                (line  27)
* children, subtree visibility state:    表示、非表示の切り替え.
                                                              (line  10)
* column view, in agenda:                アジェンダのカラム表示.
                                                              (line   6)
* commands, in agenda buffer:            アジェンダのコマンド.
                                                              (line   6)
* constants.el:                          協調.                (line  16)
* content, STARTUPキーワード <1>:        表示、非表示の切り替え.
                                                              (line  56)
* content, STARTUPキーワード:            バッファ内での変数制御.
                                                              (line  70)
* contents, global visibility state:     表示、非表示の切り替え.
                                                              (line  23)
* copying, of subtrees:                  見出し位置と階層の変更.
                                                              (line   6)
* custom agenda views:                   カスタムアジェンダビュー.
                                                              (line   6)
* cutting, of subtrees:                  見出し位置と階層の変更.
                                                              (line   6)
* cycling, visibility:                   表示、非表示の切り替え.
                                                              (line   6)
* date tree:                             キャプチャの使用.    (line   9)
* demotion, of subtrees:                 見出し位置と階層の変更.
                                                              (line   6)
* diary entries, creating from agenda:   アジェンダのコマンド.
                                                              (line 444)
* display changing, in agenda:           アジェンダのコマンド.
                                                              (line  69)
* document structure:                    ドキュメントの構造.  (line   6)
* drawers:                               引き出し.            (line   6)
* dvipng:                                HTMLエクスポートでの数式フォーマット.
                                                              (line   6)
* editing tables:                        テーブル.            (line   6)
* effort filtering, in agenda:           アジェンダのコマンド.
                                                              (line 183)
* emacsserver:                           プロトコル.          (line   6)
* entitiesplain, STARTUPキーワード:      バッファ内での変数制御.
                                                              (line 152)
* entitiespretty, STARTUPキーワード:     バッファ内での変数制御.
                                                              (line 152)
* external archiving:                    サブツリーを移動する.
                                                              (line   6)
* filtering, by tag and effort, in agenda: アジェンダのコマンド.
                                                              (line 183)
* fnadjust, STARTUPキーワード:           バッファ内での変数制御.
                                                              (line 135)
* fnauto, STARTUPキーワード:             バッファ内での変数制御.
                                                              (line 135)
* fnconfirm, STARTUPキーワード:          バッファ内での変数制御.
                                                              (line 135)
* fninline, STARTUPキーワード:           バッファ内での変数制御.
                                                              (line 135)
* fnlocal, STARTUPキーワード:            バッファ内での変数制御.
                                                              (line 135)
* fnplain, STARTUPキーワード:            バッファ内での変数制御.
                                                              (line 135)
* fnprompt,キーワード:                   バッファ内での変数制御.
                                                              (line 135)
* folded, subtree visibility state:      表示、非表示の切り替え.
                                                              (line  10)
* folding, sparse trees:                 ツリーの抽出.        (line   6)
* footnote.el <1>:                       フットノートのマークアップ.
                                                              (line   6)
* footnote.el:                           協調.                (line  73)
* footnotes <1>:                         脚注.                (line   6)
* footnotes:                             エクスポートオプション.
                                                              (line  46)
* global TODO list:                      グローバルなTODOリスト.
                                                              (line   6)
* global cycling:                        表示、非表示の切り替え.
                                                              (line  23)
* global visibility states:              表示、非表示の切り替え.
                                                              (line  23)
* headline navigation:                   移動.                (line   6)
* headline, promotion and demotion:      見出し位置と階層の変更.
                                                              (line   6)
* headlines:                             ヘッドライン.        (line   6)
* hide text:                             表示、非表示の切り替え.
                                                              (line   6)
* hideblocks, STARTUP keyword <1>:       ブロック.            (line  14)
* hideblocks, STARTUP keyword:           バッファ内での変数制御.
                                                              (line 148)
* iCalendarエクスポート:                 iCalendarエクスポート.
                                                              (line   6)
* iPhone:                                MobileOrg.           (line   6)
* imenu.el:                              協調.                (line  32)
* inlineimages, STARTUP keyword <1>:     リンクの扱い.        (line 134)
* inlineimages, STARTUP keyword:         バッファ内での変数制御.
                                                              (line  88)
* jumping, to headlines:                 移動.                (line   6)
* level, require for tags/property match: タグとプロパティとのマッチング.
                                                              (line  62)
* links, external:                       外部リンク.          (line   6)
* lists, ordered:                        エントリー中の階層構造.
                                                              (line   6)
* lists, plain:                          エントリー中の階層構造.
                                                              (line   6)
* match view:                            タグとプロパティとのマッチング.
                                                              (line   6)
* matching, of properties:               タグとプロパティとのマッチング.
                                                              (line   6)
* matching, of tags:                     タグとプロパティとのマッチング.
                                                              (line   6)
* minor mode for structure editing:      Orgstructモード.     (line   6)
* motion commands in agenda:             アジェンダのコマンド.
                                                              (line  20)
* motion, between headlines:             移動.                (line   6)
* narrow columns in tables:              列幅と整列.          (line   6)
* nofnadjust, STARTUPキーワード:         バッファ内での変数制御.
                                                              (line 135)
* nofninline, STARTUPキーワード:         バッファ内での変数制御.
                                                              (line 135)
* nohideblocks, STARTUP keyword <1>:     バッファ内での変数制御.
                                                              (line 148)
* nohideblocks, STARTUP keyword:         ブロック.            (line  14)
* noinlineimages, STARTUP keyword <1>:   リンクの扱い.        (line 134)
* noinlineimages, STARTUP keyword:       バッファ内での変数制御.
                                                              (line  88)
* occur, command:                        ツリーの抽出.        (line   6)
* options, for custom agenda views:      設定オプション.      (line   6)
* ordered lists:                         エントリー中の階層構造.
                                                              (line   6)
* org-agenda, command:                   毎週／毎日のアジェンダ.
                                                              (line   9)
* org-hide-block-startup:                バッファ内での変数制御.
                                                              (line 147)
* org-list-insert-radio-list:            ラジオリスト.        (line   6)
* org-pretty-entities:                   バッファ内での変数制御.
                                                              (line 151)
* org-publish-project-alist:             プロジェクトのリスト.
                                                              (line   6)
* outline tree:                          ヘッドライン.        (line   6)
* outlines:                              アウトライン.        (line   6)
* overview, STARTUPキーワード <1>:       バッファ内での変数制御.
                                                              (line  70)
* overview, STARTUPキーワード:           表示、非表示の切り替え.
                                                              (line  56)
* overview, global visibility state:     表示、非表示の切り替え.
                                                              (line  23)
* pasting, of subtrees:                  見出し位置と階層の変更.
                                                              (line   6)
* plain lists:                           エントリー中の階層構造.
                                                              (line   6)
* presentation, of agenda items:         表示とソート.        (line   6)
* printing sparse trees:                 ツリーの抽出.        (line  53)
* priorities, of agenda items:           アジェンダの項目をソートする.
                                                              (line   6)
* promotion, of subtrees:                見出し位置と階層の変更.
                                                              (line   6)
* properties:                            プロパティとカラム.  (line   6)
* property, CUSTOM_ID <1>:               リンクの扱い.        (line  20)
* property, CUSTOM_ID:                   内部リンク.          (line   6)
* property, ID <1>:                      カラム表示の保存.    (line  23)
* property, ID <2>:                      iCalendarエクスポート.
                                                              (line  19)
* property, ID:                          リンクの扱い.        (line  20)
* property, LATEX_CLASS:                 ヘッダーと章立て.    (line   8)
* property, LATEX_CLASS_OPTIONS:         ヘッダーと章立て.    (line   8)
* property, VISIBILITY:                  表示、非表示の切り替え.
                                                              (line  67)
* protocols, for external access:        プロトコル.          (line   6)
* proverty, ATTACH_DIR:                  添付.                (line  69)
* proverty, ATTACH_DIR_INTERIT:          添付.                (line  73)
* query editing, in agenda:              アジェンダのコマンド.
                                                              (line 183)
* refiling notes:                        ノートの再配置.      (line   6)
* region, active <1>:                    見出し位置と階層の変更.
                                                              (line 133)
* region, active <2>:                    HTMLエクスポートコマンド.
                                                              (line   6)
* region, active <3>:                    LaTeX/PDFエクスポートコマンド.
                                                              (line   6)
* region, active <4>:                    組み込みのテーブルエディタ.
                                                              (line 158)
* region, active <5>:                    DocBookエクスポートコマンド.
                                                              (line   6)
* region, active:                        ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  10)
* regular expressions, with tags search: タグとプロパティとのマッチング.
                                                              (line  58)
* remember.el:                           協調.                (line  41)
* remote editing, bulk, from agenda:     アジェンダのコマンド.
                                                              (line 397)
* remote editing, from agenda:           アジェンダのコマンド.
                                                              (line 262)
* remote editing, undo:                  アジェンダのコマンド.
                                                              (line 263)
* rsync:                                 ファイルのアップロード.
                                                              (line   6)
* searching, for text:                   検索ビュー.          (line   6)
* shift-selection-mode <1>:              衝突.                (line   6)
* shift-selection-mode:                  エントリー中の階層構造.
                                                              (line 110)
* show all, command:                     表示、非表示の切り替え.
                                                              (line  34)
* show all, global visibility state:     表示、非表示の切り替え.
                                                              (line  23)
* show hidden text:                      表示、非表示の切り替え.
                                                              (line   6)
* showall, STARTUPキーワード <1>:        バッファ内での変数制御.
                                                              (line  70)
* showall, STARTUPキーワード:            表示、非表示の切り替え.
                                                              (line  56)
* showeverything, STARTUPキーワード <1>: 表示、非表示の切り替え.
                                                              (line  56)
* showeverything, STARTUPキーワード:     バッファ内での変数制御.
                                                              (line  70)
* sorting, of agenda items:              アジェンダの項目をソートする.
                                                              (line   6)
* sorting, of subtrees:                  見出し位置と階層の変更.
                                                              (line   6)
* sparse trees:                          ツリーの抽出.        (line   6)
* speed keys:                            スピードキー.        (line   6)
* speedbar.el:                           協調.                (line  45)
* structure editing:                     見出し位置と階層の変更.
                                                              (line   6)
* structure of document:                 ドキュメントの構造.  (line   6)
* sublevels, inclusion into TODO list:   グローバルなTODOリスト.
                                                              (line  35)
* subtree cycling:                       表示、非表示の切り替え.
                                                              (line  10)
* subtree visibility states:             表示、非表示の切り替え.
                                                              (line  10)
* subtree, cut and paste:                見出し位置と階層の変更.
                                                              (line   6)
* subtree, subtree visibility state:     表示、非表示の切り替え.
                                                              (line  10)
* subtrees, cut and paste:               見出し位置と階層の変更.
                                                              (line   6)
* table editor, table.el:                協調.                (line  52)
* table.el:                              協調.                (line  52)
* tables <1>:                            エクスポートオプション.
                                                              (line  46)
* tables:                                テーブル.            (line   6)
* tag filtering, in agenda:              アジェンダのコマンド.
                                                              (line 183)
* tags view:                             タグとプロパティとのマッチング.
                                                              (line   6)
* tangling:                              ソースコードの抽出.  (line   6)
* text search:                           検索ビュー.          (line   6)
* time grid:                             時刻の仕様.          (line  27)
* time-of-day specification:             時刻の仕様.          (line   6)
* timeline, single file:                 タイムライン.        (line   6)
* transient-mark-mode <1>:               DocBookエクスポートコマンド.
                                                              (line   6)
* transient-mark-mode <2>:               LaTeX/PDFエクスポートコマンド.
                                                              (line   6)
* transient-mark-mode <3>:               ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  10)
* transient-mark-mode:                   HTMLエクスポートコマンド.
                                                              (line   6)
* trees, sparse:                         ツリーの抽出.        (line   6)
* trees, visibility:                     表示、非表示の切り替え.
                                                              (line   6)
* tty端末のキーバインディング:           TTYキー.             (line   6)
* undoing remote-editing events:         アジェンダのコマンド.
                                                              (line 263)
* unison:                                ファイルのアップロード.
                                                              (line   6)
* viper.el:                              衝突.                (line  74)
* visibility cycling:                    表示、非表示の切り替え.
                                                              (line   6)
* visibility cycling, drawers:           引き出し.            (line   6)
* visible text, printing:                ツリーの抽出.        (line  53)
* windmove.el:                           衝突.                (line  62)
* yasnippet.el:                          衝突.                (line  37)
* タグ:                                  タグ.                (line   6)
* 公開:                                  公開.                (line   6)
* 感謝:                                  歴史と謝辞.          (line   6)
* 日付:                                  日付や時間.          (line   6)
* 時刻:                                  日付や時間.          (line   6)
* 概要:                                  概要.                (line   6)
* 歴史:                                  歴史と謝辞.          (line   6)
* 目次:                                  エクスポートオプション.
                                                              (line  46)
* 習慣:                                  習慣の追跡.          (line   6)
* 著者:                                  フィードバック.      (line   6)
* 謝辞:                                  歴史と謝辞.          (line   6)
* 補完,リンクの:                         リンクの扱い.        (line  64)
* 画像,インライン:                       リンクの扱い.        (line 134)
* 補完,ファイル名の:                     リンクの扱い.        (line  89)
* フック:                                フック.              (line   6)
* 印刷版:                                概要.                (line  59)
* リンク,次/前を探す:                    リンクの扱い.        (line 153)
* リンク,内部:                           内部リンク.          (line   6)
* リンク,戻る:                           リンクの扱い.        (line 146)
* リンク,扱い:                           リンクの扱い.        (line   6)
* 大括弧,リンクの周辺:                   外部リンク.          (line  60)
* リンク,ラジオターゲット:               ラジオターゲット.    (line   6)
* 画像、HTMLの中でインライン:            HTMLエクスポートでの画像.
                                                              (line   6)
* 画像、LaTeXの中のインライン:           LaTeXエクスポートでの画像.
                                                              (line   6)
* 完了、TODOキーワードの <1>:            ワークフローの状態.  (line  14)
* 完了、TODOキーワードの:                補完.                (line   6)
* 名前をTODOキーワードとして:            タスクの種別.        (line   6)
* 種類をTODOキーワードとして:            タスクの種別.        (line   6)
* 統計、TODOアイテムのための:            タスクの分割.        (line   6)
* 補完、TeXの記号:                       補完.                (line   6)
* 言語、babel:                           言語.                (line   6)
* 構文、noweb:                           Nowebでの参照の構文. (line   6)
* はじめに:                              まえがき.            (line   6)
* 優先順位:                              プロパティ.          (line   6)
* 列の数式:                              列の数式.            (line   6)
* 変換関数:                              変換関数.            (line   6)
* 数学記号:                              特殊記号.            (line   6)
* 時間間隔:                              タイムスタンプ.      (line  41)
* 特殊記号:                              特殊記号.            (line   6)
* 章の番号:                              エクスポートオプション.
                                                              (line  46)
* 範囲参照:                              参照.                (line  63)
* 先頭の「*」を隠す:                     アウトラインの「*」を取り除く.
                                                              (line   6)
* 省略記法,リンクの:                     リンクの省略記法.    (line   6)
* モード、Calc:                          Calc用の数式構文.    (line  13)
* 見出し、LaTeXファイルのための:         ヘッダーと章立て.    (line   6)
* アジェンダ:                            毎週／毎日のアジェンダ.
                                                              (line   6)
* キャプチャ <1>:                        キャプチャ.          (line   6)
* キャプチャ:                            キャプチャ／再配置／アーカイブ.
                                                              (line   6)
* コメント行:                            コメント行.          (line   6)
* タグ、設定:                            タグの設定.          (line   6)
* タグの検索:                            タグの検索.          (line   6)
* タグの継承:                            タグの継承.          (line   6)
* タグの補完:                            補完.                (line   6)
* タグの設定:                            タグの設定.          (line   6)
* ハッキング:                            ハッキング.          (line   6)
* メンテナー:                            フィードバック.      (line   6)
* 上付き文字:                            下付き文字と上付き文字.
                                                              (line   6)
* 下付き文字:                            下付き文字と上付き文字.
                                                              (line   6)
* 内部リンク:                            内部リンク.          (line   6)
* 外部リンク:                            外部リンク.          (line   6)
* 改行の維持:                            エクスポートオプション.
                                                              (line  46)
* 数式の編集:                            数式の編集とデバッグ.
                                                              (line   6)
* 日付の間隔:                            タイムスタンプ.      (line  41)
* 日記の統合:                            毎週／毎日のアジェンダ.
                                                              (line  28)
* 時間の計測:                            作業に費やした時間の計測.
                                                              (line   6)
* 検索ビュー:                            検索ビュー.          (line   6)
* 範囲の数式:                            フィールドと範囲の数式.
                                                              (line   6)
* 表計算機能:                            スプレッドシート.    (line   6)
* ターゲット,ラジオ:                     ラジオターゲット.    (line   6)
* ターゲット,リンクの:                   内部リンク.          (line   6)
* 検索文字列,カスタム:                   カスタム検索.        (line   6)
* プロパティ:CLOCK_MODELINE_TOTAL:       計測コマンド.        (line  17)
* プロパティ:LAST_REPEAT:                計測コマンド.        (line  17)
* テーブル、HTMLの:                      HTMLエクスポートでのテーブル.
                                                              (line   6)
* 依存関係、TODOの状態:                  TODO間の関係.        (line   6)
* フェイス、TODOキーワード:              TODOキーワードのフェイス.
                                                              (line   6)
* 拡張されたTODOキーワード:              TODO拡張.            (line   6)
* よくある質問:                          概要.                (line  55)
* インストール:                          インストール.        (line   6)
* エクスポート:                          エクスポート.        (line   6)
* カスタマイズ:                          カスタマイズ.        (line   6)
* タスクの種別:                          タスクの種別.        (line   6)
* デッドライン:                          タイムスタンプ.      (line   6)
* バグレポート:                          フィードバック.      (line   6)
* マークリング:                          リンクの扱い.        (line 141)
* ラジオリスト:                          ラジオリスト.        (line   6)
* リファレンス:                          参照.                (line   6)
* リモート参照:                          参照.                (line 122)
* リンク、公開:                          ファイルリンク付きの公開.
                                                              (line   6)
* リンクの保存:                          リンクの扱い.        (line  10)
* リンクの挿入:                          リンクの扱い.        (line  64)
* リンクの補完:                          リンクの扱い.        (line  64)
* 名前付き参照:                          参照.                (line 101)
* 固定幅の段落:                          エクスポートオプション.
                                                              (line  46)
* 完了、タグの <1>:                      補完.                (line   6)
* 完了、タグの:                          タグの設定.          (line  10)
* 日付スタンプ <1>:                      日付や時間.          (line   6)
* 日付スタンプ:                          タイムスタンプ.      (line   6)
* 特別な文字列:                          エクスポートオプション.
                                                              (line  46)
* 継承、タグの:                          タグの継承.          (line   6)
* 見出しの階層:                          エクスポートオプション.
                                                              (line  46)
* 計算中の定数:                          参照.                (line 122)
* フォーマット,リンクの:                 リンクのフォーマット.
                                                              (line   6)
* プロパティ（API） <1>:                 プロパティAPIを使う. (line   6)
* プロパティ（API）:                     プロパティAPI.       (line   6)
* プロパティ（ARCHIVE） <1>:             サブツリーを移動する.
                                                              (line  27)
* プロパティ（ARCHIVE）:                 プロパティの継承.    (line  31)
* プロパティ（CATEGORY） <1>:            プロパティの継承.    (line  27)
* プロパティ（CATEGORY）:                カテゴリ.            (line  12)
* プロパティ（COLUMNS） <1>:             バッファ内での変数制御.
                                                              (line  27)
* プロパティ（COLUMNS）:                 プロパティの継承.    (line  19)
* プロパティ、COOKIE_DATA <1>:           チェックボックス.    (line  32)
* プロパティ、COOKIE_DATA:               タスクの分割.        (line  19)
* プロパティ、EXPORT_FILE_NAME <1>:      HTMLエクスポートコマンド.
                                                              (line   7)
* プロパティ、EXPORT_FILE_NAME <2>:      DocBookエクスポートコマンド.
                                                              (line   7)
* プロパティ、EXPORT_FILE_NAME <3>:      ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  11)
* プロパティ、EXPORT_FILE_NAME:          LaTeX/PDFエクスポートコマンド.
                                                              (line   7)
* プロパティ、EXPORT_TITLE:              ドキュメントタイトル.
                                                              (line  15)
* プロパティ、LOG_INTO_DRAWER:           作業の状態変化の追跡.
                                                              (line   6)
* 構造の分割、LaTeXエクスポートのための: ヘッダーと章立て.    (line   6)
* プロパティ、ORDERED <1>:               TODO間の関係.        (line  29)
* プロパティ、ORDERED <2>:               チェックボックス.    (line  46)
* プロパティ、ORDERED <3>:               TODO間の関係.        (line   6)
* プロパティ、ORDERED:                   チェックボックス.    (line  82)
* プロパティ、_ALL:                      プロパティの表記法.  (line  36)
* ライブラリ、babel:                     Babelライブラリ.     (line   6)
* インライン画像:                        リンクの扱い.        (line 134)
* タイムスタンプ <1>:                    タイムスタンプ.      (line   6)
* タイムスタンプ <2>:                    日付や時間.          (line   6)
* タイムスタンプ:                        タイムスタンプ.      (line  16)
* タスク、細分化:                        タスクの分割.        (line   6)
* ハイパーリンク:                        ハイパーリンク.      (line   6)
* ファイルリンク:                        外部リンク.          (line   6)
* フィードバック:                        フィードバック.      (line   6)
* マインドマップ:                        Freemindエクスポート.
                                                              (line   6)
* ラジオテーブル:                        ラジオテーブル.      (line   6)
* リンクをたどる:                        リンクの扱い.        (line 101)
* 動的なブロック:                        ダイナミックブロック.
                                                              (line   6)
* 参照、リモート:                        参照.                (line 122)
* 参照、名前付き:                        参照.                (line 101)
* 参照、範囲指定:                        参照.                (line  63)
* 工数の見積もり:                        工数の見積もり.      (line   6)
* 数式のデバッグ:                        数式の編集とデバッグ.
                                                              (line  96)
* 時間を計測する:                        作業に費やした時間の計測.
                                                              (line   6)
* 時間間隔、時刻:                        タイムスタンプ.      (line   6)
* 時間間隔の評価:                        タイムスタンプの作成.
                                                              (line  62)
* 更新、テーブル:                        テーブルの更新.      (line   6)
* 繰り返しタスク:                        繰り返されるタスク.  (line   6)
* 辞書単語の補完:                        補完.                (line   6)
* 進捗状況の記録:                        進行記録.            (line   6)
* ファイルリンク,検索:                   検索オプション.      (line   6)
* ツリーの抽出、TODO用:                  TODOの基本.          (line  40)
* ソースコード、nowebリファレンス:       Nowebでの参照の構文. (line   6)
* アジェンダビュー:                      アジェンダビュー.    (line   6)
* カレンダーの統合:                      毎週／毎日のアジェンダ.
                                                              (line  28)
* グラフ、テーブル:                      Org-Plot.            (line   6)
* スケジューリング:                      タイムスタンプ.      (line   6)
* タグのための検索:                      タグの検索.          (line   6)
* タスク、繰り返し:                      繰り返されるタスク.  (line   6)
* チェックボックス:                      チェックボックス.    (line   6)
* ファイル名の補完:                      リンクの扱い.        (line  89)
* フィールドの参照:                      参照.                (line  16)
* フィールドの座標:                      参照.                (line  86)
* フィールドの数式:                      フィールドと範囲の数式.
                                                              (line   6)
* フォーマット指定:                      Calc用の数式構文.    (line  13)
* プロジェクト管理:                      TaskJugglerエクスポート.
                                                              (line   6)
* プロパティ、工数:                      工数の見積もり.      (line   6)
* プロパティ、検索:                      プロパティの検索.    (line   6)
* プロパティ、継承:                      プロパティの継承.    (line   6)
* マッチング、タグ:                      タグ.                (line   6)
* ラジオターゲット:                      ラジオターゲット.    (line   6)
* リンクの省略記法:                      リンクの省略記法.    (line   6)
* 列のグルーピング:                      行のグループ.        (line   6)
* 動的なインデント:                      アウトラインの「*」を取り除く.
                                                              (line   6)
* 参照、フィールド:                      参照.                (line  16)
* 座標、フィールド:                      参照.                (line  86)
* 暫定マークモード <1>:                  見出し位置と階層の変更.
                                                              (line 133)
* 暫定マークモード:                      組み込みのテーブルエディタ.
                                                              (line 158)
* 相対時間タイマー:                      相対時間タイマー.    (line   6)
* 補完、辞書の単語:                      補完.                (line   6)
* 見出しのタグ付け:                      タグ.                (line   6)
* コードブロック、 キーバインディング:   キーバインドと便利関数.
                                                              (line   6)
* リンク、出力するHTMLの:                HTMLエクスポートでのリンク.
                                                              (line   6)
* テキストエリア、HTMLの中の:            HTMLエクスポートでのテキストエリア.
                                                              (line   6)
* コードブロック、nowebリファレンス:     Nowebでの参照の構文. (line   6)
* アジェンダ、パイプ:                    アジェンダ情報の抽出.
                                                              (line   6)
* アジェンダファイル:                    アジェンダファイル.  (line   6)
* アドオンパッケージ:                    アドオンパッケージ.  (line   6)
* カスタマイズの変数:                    カスタマイズ.        (line   6)
* カスタム検索文字列:                    カスタム検索.        (line   6)
* シンタックス、数式:                    Calc用の数式構文.    (line   6)
* ソースコード、編集:                    ソースコードの編集.  (line   6)
* ソースコード、言語:                    言語.                (line   6)
* テンプレートの挿入:                    簡単なテンプレート.  (line   6)
* バッファ中での設定:                    バッファ内での変数制御.
                                                              (line   6)
* フィールドの再計算:                    テーブルの更新.      (line   6)
* 休止時間を解決する:                    空き時間の解決.      (line   6)
* 強調されたテキスト:                    エクスポートオプション.
                                                              (line  46)
* 抽出、ソースコード:                    ソースコードの抽出.  (line   6)
* 数式、テーブル内部:                    組み込みのテーブルエディタ.
                                                              (line 158)
* 検索、プロパティの:                    プロパティの検索.    (line   6)
* 継承、プロパティの:                    プロパティの継承.    (line   6)
* 評価、ソースコード:                    コードブロックの評価.
                                                              (line   6)
* プロパティのためのAPI <1>:             プロパティAPI.       (line   6)
* プロパティのためのAPI:                 プロパティAPIを使う. (line   6)
* 特別なプロパティ（CLOCKSUM） <1>:      スペシャルプロパティ.
                                                              (line  13)
* 特別なプロパティ（CLOCKSUM）:          アジェンダのカラム表示.
                                                              (line  28)
* チェックボックスとTODO依存関係:        TODO間の関係.        (line  42)
* キーワードオプション:                  ファイル毎のキーワード.
                                                              (line   6)
* コードブロック、構造:                  コードブロックの構造.
                                                              (line   6)
* コードブロック、編集:                  ソースコードの編集.  (line   6)
* コードブロック、言語:                  言語.                (line   6)
* スペシャルキーワード:                  バッファ内での変数制御.
                                                              (line   6)
* タイムスタンプ、作成:                  タイムスタンプの作成.
                                                              (line   6)
* タイムスタンプの作成:                  タイムスタンプの作成.
                                                              (line   6)
* テーブルの中での計算 <1>:              スプレッドシート.    (line   6)
* テーブルの中での計算:                  組み込みのテーブルエディタ.
                                                              (line 158)
* リスト、他のモードで:                  任意の構文によるテーブル.
                                                              (line   6)
* リンクのフォーマット:                  リンクのフォーマット.
                                                              (line   6)
* 休止、解決、空き時間:                  空き時間の解決.      (line   6)
* 列、フィールドの座標:                  参照.                (line  86)
* 名前、列やフィールド:                  参照.                (line 122)
* 数式（テーブルの列）:                  列の数式.            (line   6)
* 時間順に並べたビュー:                  タイムライン.        (line   6)
* 編集、テーブルの数式:                  数式の編集とデバッグ.
                                                              (line   6)
* 行、フィールドの座標:                  参照.                (line  86)
* 補完、プロパティキー:                  補完.                (line   6)
* 評価、コードブロック:                  コードブロックの評価.
                                                              (line   6)
* 数式のシンタックス、Calc:              Calc用の数式構文.    (line   6)
* 内部リンク、出力するHTMLの:            HTMLエクスポートでのリンク.
                                                              (line   6)
* 外部リンク、出力するHTMLの:            HTMLエクスポートでのリンク.
                                                              (line   6)
* アクティブなリージョン <1>:            HTMLエクスポートコマンド.
                                                              (line   6)
* アクティブなリージョン <2>:            ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  10)
* アクティブなリージョン <3>:            DocBookエクスポートコマンド.
                                                              (line   6)
* アクティブなリージョン <4>:            組み込みのテーブルエディタ.
                                                              (line 158)
* アクティブなリージョン <5>:            見出し位置と階層の変更.
                                                              (line 133)
* アクティブなリージョン:                LaTeX/PDFエクスポートコマンド.
                                                              (line   6)
* アジェンダビューの出力 <1>:            アジェンダビューの出力.
                                                              (line  12)
* アジェンダビューの出力:                アジェンダのコマンド.
                                                              (line 490)
* アジェンダ用のファイル:                アジェンダファイル.  (line   6)
* エラーのバックトレース:                フィードバック.      (line  40)
* カウントダウンタイマー:                カウントダウンタイマー.
                                                              (line   6)
* キャプチャテンプレート:                キャプチャテンプレート.
                                                              (line   6)
* ソースコード、連携する:                ソースコードとの連携.
                                                              (line   6)
* チェックボックスの統計:                チェックボックス.    (line  32)
* テーブル、他のモードで:                任意の構文によるテーブル.
                                                              (line   6)
* ファイル毎のキーワード:                ファイル毎のキーワード.
                                                              (line   6)
* プロパティ、スペシャル:                スペシャルプロパティ.
                                                              (line   6)
* プロパティ、ログをとる <1>:            作業の状態変化の追跡.
                                                              (line  39)
* プロパティ、ログをとる:                プロパティの継承.    (line  35)
* プロパティシンタックス:                プロパティの表記法.  (line   6)
* リンクの省略記法の補完:                補完.                (line   6)
* 参照、異なるテーブルへ:                参照.                (line 122)
* 引き出し、プロパティ用:                プロパティの表記法.  (line   6)
* 数式、フィールドの範囲:                フィールドと範囲の数式.
                                                              (line   6)
* 補完、リンクの省略記法:                補完.                (line   6)
* エントリのマッピング、API:             マッピングAPIを使う. (line   6)
* アクション、公開のための:              公開アクション.      (line   6)
* エクスポートされない部分:              コメント行.          (line   6)
* エクスポートのオプション:              エクスポートオプション.
                                                              (line   6)
* オプション、公開のための:              公開オプション.      (line   6)
* カスタマイズのオプション:              カスタマイズ.        (line   6)
* キーバインド、グローバル:              アクティベーション.  (line   6)
* グローバルなキーバインド:              アクティベーション.  (line   6)
* ソースコード、バッチ処理:              バッチ処理.          (line   6)
* ソースコード、評価の結果:              評価の結果.          (line   6)
* テーブルのマイナーモード:              Orgtblモード.        (line   6)
* デバッグ、テーブルの数式:              数式の編集とデバッグ.
                                                              (line  96)
* プロパティ、カラムビュー:              カラムの定義.        (line   6)
* マーキング文字、テーブル:              一歩進んだ機能.      (line  38)
* ライブラリ、ソースコード:              Babelライブラリ.     (line   6)
* レポート、計測された時間:              クロックテーブル.    (line   6)
* 公開のためのディレクトリ:              ソースと公開先.      (line   6)
* 統計、チェックボックスの:              チェックボックス.    (line  32)
* 表、マークアップのルール:              画像とテーブル.      (line   6)
* 上付き、下付き文字を示す TeX のようなシンタックス: エクスポートオプション.
                                                              (line  46)
* プロパティ、スペシャル、ALLTAGS:       スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、BLOCKED:       スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、CATEGORY:      スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、CLOSED:        スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、DEADLINE:      スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、FILE:          スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、ITEM:          スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、PRIORITY:      スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、SCHEDULED:     スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、TAGS:          スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、TIMESTAMP:     スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、TIMESTAMP_IA:  スペシャルプロパティ.
                                                              (line  13)
* プロパティ、スペシャル、TODO:          スペシャルプロパティ.
                                                              (line  13)
* オプションキーワードの補完:            補完.                (line   6)
* カラムビュー、プロパティ用:            カラムの定義.        (line   6)
* カレンダー、日付選択のため:            日付／時間プロンプト.
                                                              (line  66)
* コードブロック、バッチ処理:            バッチ処理.          (line   6)
* コードブロック、評価の結果:            評価の結果.          (line   6)
* サイトマップ、ページの公開:            サイトマップ.        (line   6)
* ソースコード、エクスポート:            コードブロックのエクスポート.
                                                              (line   6)
* ソースコード、ブロック構造:            コードブロックの構造.
                                                              (line   6)
* チェックボックスのブロック:            チェックボックス.    (line  46)
* テーブルエディタ、組み込み:            組み込みのテーブルエディタ.
                                                              (line   6)
* ファイル、公開のための選択:            ファイルの選択.      (line   6)
* プレーンテキスト外部リンク:            外部リンク.          (line  60)
* プロジェクト、公開のための:            プロジェクトのリスト.
                                                              (line   6)
* ベクトル、テーブルでの計算:            Calc用の数式構文.    (line  10)
* ライブラリ、コードブロック:            Babelライブラリ.     (line   6)
* 日付フォーマット、カスタム:            カスタムタイムフォーマット.
                                                              (line   6)
* 時間フォーマット、カスタム:            カスタムタイムフォーマット.
                                                              (line   6)
* 段落、マークアップのルール:            パラグラフ.          (line   6)
* 目次、マークアップのルール:            目次.                (line   6)
* 脚注、マークアップのルール:            フットノートのマークアップ.
                                                              (line   6)
* アジェンダのコマンド選択画面:          アジェンダのコマンド選択.
                                                              (line   6)
* エクスポート。タグによる選択:          選択エクスポート.    (line   6)
* カスタム日付時間フォーマット:          カスタムタイムフォーマット.
                                                              (line   6)
* コードブロック、エクスポート:          コードブロックのエクスポート.
                                                              (line   6)
* コードブロック、ヘッダー引数:          ヘッダー引数.        (line   6)
* タイムスタンプ、リピート間隔:          タイムスタンプ.      (line  25)
* ツリーの抽出、タグに基づいた:          タグ.                (line   6)
* ハイパーリンク、タイプの追加:          ハイパーリンクのタイプの追加.
                                                              (line   6)
* パッケージ、他のものとの連携:          連携.                (line   6)
* ブロック、チェックボックスの:          チェックボックス.    (line  46)
* リスト、マークアップのルール:          リスト.              (line   6)
* 奇数レベルのみのアウトライン:          アウトラインの「*」を取り除く.
                                                              (line   6)
* 補完、オプションのキーワード <1>:      エクスポートオプション.
                                                              (line   6)
* 補完、オプションのキーワード <2>:      補完.                (line   6)
* 補完、オプションのキーワード:          ファイル毎のキーワード.
                                                              (line  23)
* アクティブでないタイムスタンプ:        タイムスタンプ.      (line  49)
* アジェンダのコマンドを選択する:        アジェンダのコマンド選択.
                                                              (line   6)
* アジェンダビュー、エクスポート <1>:    アジェンダのコマンド.
                                                              (line 490)
* アジェンダビュー、エクスポート:        アジェンダビューの出力.
                                                              (line  12)
* アジェンダビュー、ユーザー定義:        特別なアジェンダビュー.
                                                              (line   6)
* 文脈に依存するコマンド、フック:        状況依存のコマンド.  (line   6)
* 日付、ミニバッファでの読み込み:        日付／時間プロンプト.
                                                              (line   6)
* 時刻、ミニバッファでの読み込み:        日付／時間プロンプト.
                                                              (line   6)
* 時間の情報、エクスポートの中で:        エクスポートオプション.
                                                              (line  46)
* 水平線、マーックアップのルール:        水平線のルール.      (line   6)
* 著者の情報、エクスポートの中で:        エクスポートオプション.
                                                              (line  46)
* アウトラインビューを見やすくする:      アウトラインの「*」を取り除く.
                                                              (line   6)
* アドオン、文脈に依存するコマンド:      状況依存のコマンド.  (line   6)
* インデックス、プロジェクトの公開:      インデックスの生成.  (line   6)
* クロックテーブル、動的なブロック:      クロックテーブル.    (line   6)
* タイムスタンプ、アクティブでない:      タイムスタンプ.      (line  49)
* 数式、テーブルの個々のフィールド:      フィールドと範囲の数式.
                                                              (line   6)
* ソースコードの抽出、コードブロック:    ソースコードの抽出.  (line   6)
* リテラルの例、マークアップのルール:    リテラルの例.        (line   6)
* 下位レベル、マッチしたタグへの包含:    タグの継承.          (line   6)
* 公開のためのインデックスのエントリ:    エントリのインデックス.
                                                              (line   6)
* インライン画像、マークアップのルール:  画像とテーブル.      (line  18)
* エクスポート中のマクロによる置き換え:  マクロ置換.          (line   6)
* スクリプト、アジェンダの処理のために:  アジェンダ情報の抽出.
                                                              (line   6)
* ソースコード、ブロックのヘッダー引数:  ヘッダー引数.        (line   6)
* ファイル、アジェンダリストに追加する:  アジェンダファイル.  (line  17)
* ファイルリンクにおける検索オプション:  検索オプション.      (line   6)
* 引き出し、状態変化を記録する際に使用:  作業の状態変化の追跡.
                                                              (line   6)
* 抽出されたツリー、デッドラインのため:  デッドライン／スケジュールを挿入.
                                                              (line  31)
* 文書のタイトル、マークアップのルール:  ドキュメントタイトル.
                                                              (line   6)
* コードのテキスト、マークアップのルール: 強調と等幅.         (line   6)
* 太字のテキスト、マーックアップのルール: 強調と等幅.         (line   6)
* 斜体のテキスト、マーックアップのルール: 強調と等幅.         (line   6)
* （外部出力に用いる）ヘッドラインレベル <1>: ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  38)
* （外部出力に用いる）ヘッドラインレベル <2>: LaTeX/PDFエクスポートコマンド.
                                                              (line  36)
* （外部出力に用いる）ヘッドラインレベル: HTMLエクスポートコマンド.
                                                              (line  40)
* 下線のあるテキスト、マークアップのルール: 強調と等幅.       (line   6)
* 見出しとセクション、マークアップのルール: 見出しとセクション.
                                                              (line   6)
* 文字通りのテキスト、マーックアップのルール: 強調と等幅.     (line   6)
* ファイルのインクルード、マークアップのルール: ファイルの挿入.
                                                              (line   6)
* 取り消されたテキスト、マーックアップのルール: 強調と等幅.   (line   6)
* コマンド選択画面、エクスポートコマンドのための: エクスポート用コマンド選択画面.
                                                              (line   6)
* コードラインのリファレンス、マークアップのルール: リテラルの例.
                                                              (line   6)
* ソースコードのフォーマット、マークアップのルール: リテラルの例.
                                                              (line  23)
* 最初の見出しより前のテキスト、マークアップのルール: 冒頭のテキスト.
                                                              (line   6)


File: org-ja,  Node: キーワードインデックス,  Next: コマンドと関数インデックス,  Prev: メインインデックス,  Up: Top

Key index
*********

 [index ]
* Menu:

* :                                      リンクの扱い.        (line 118)
* $:                                     アジェンダのコマンド.
                                                              (line 298)
* ':                                     CDLaTeXモード.       (line  40)
* +:                                     アジェンダのコマンド.
                                                              (line 321)
* ,:                                     アジェンダのコマンド.
                                                              (line 313)
* -:                                     アジェンダのコマンド.
                                                              (line 326)
* .:                                     アジェンダのコマンド.
                                                              (line  93)
* /:                                     アジェンダのコマンド.
                                                              (line 183)
* ::                                     アジェンダのコマンド.
                                                              (line 308)
* ;:                                     カウントダウンタイマー.
                                                              (line   6)
* < <1>:                                 日付／時間プロンプト.
                                                              (line  70)
* < <2>:                                 カラムビューの利用.  (line  62)
* <:                                     アジェンダファイル.  (line  61)
* <RET> <1>:                             組み込みのテーブルエディタ.
                                                              (line  68)
* <RET> <2>:                             タグの設定.          (line 108)
* <RET> <3>:                             アジェンダのコマンド.
                                                              (line  41)
* <RET>:                                 日付／時間プロンプト.
                                                              (line  70)
* <SPC> <1>:                             アジェンダのコマンド.
                                                              (line  29)
* <SPC>:                                 タグの設定.          (line 107)
* <TAB> <1>:                             タグの設定.          (line 100)
* <TAB> <2>:                             表示、非表示の切り替え.
                                                              (line  10)
* <TAB> <3>:                             アジェンダのコマンド.
                                                              (line  38)
* <TAB> <4>:                             見出し位置と階層の変更.
                                                              (line  34)
* <TAB> <5>:                             エントリー中の階層構造.
                                                              (line 100)
* <TAB> <6>:                             組み込みのテーブルエディタ.
                                                              (line  61)
* <TAB> <7>:                             数式の編集とデバッグ.
                                                              (line  53)
* <TAB>:                                 CDLaTeXモード.       (line  22)
* > <1>:                                 カラムビューの利用.  (line  62)
* > <2>:                                 アジェンダファイル.  (line  66)
* > <3>:                                 アジェンダのコマンド.
                                                              (line 373)
* >:                                     日付／時間プロンプト.
                                                              (line  70)
* ?:                                     MobileOrgからpullする.
                                                              (line  36)
* B:                                     アジェンダのコマンド.
                                                              (line 406)
* C:                                     アジェンダのコマンド.
                                                              (line 472)
* C-#:                                   一歩進んだ機能.      (line   9)
* C-':                                   アジェンダファイル.  (line  24)
* C-,:                                   アジェンダファイル.  (line  24)
* C-0 C-c C-w:                           ノートの再配置.      (line  38)
* C-<RET>:                               見出し位置と階層の変更.
                                                              (line  18)
* C-S-<RET>:                             見出し位置と階層の変更.
                                                              (line  29)
* C-S-<left> <1>:                        アジェンダのコマンド.
                                                              (line 275)
* C-S-<left>:                            キーワードセット.    (line  25)
* C-S-<right> <1>:                       アジェンダのコマンド.
                                                              (line 272)
* C-S-<right>:                           キーワードセット.    (line  25)
* C-TAB:                                 ファイル内部でのアーカイブ.
                                                              (line  49)
* C-_:                                   アジェンダのコマンド.
                                                              (line 263)
* C-c !:                                 タイムスタンプの作成.
                                                              (line  15)
* C-c #:                                 チェックボックス.    (line  86)
* C-c $:                                 サブツリーを移動する.
                                                              (line   9)
* C-c %:                                 リンクの扱い.        (line 138)
* C-c &:                                 リンクの扱い.        (line 143)
* C-c ' <1>:                             リテラルの例.        (line  62)
* C-c ' <2>:                             ソースコードの編集.  (line   6)
* C-c ' <3>:                             ファイルの挿入.      (line  29)
* C-c ' <4>:                             協調.                (line  61)
* C-c ':                                 数式の編集とデバッグ.
                                                              (line  35)
* C-c * <1>:                             見出し位置と階層の変更.
                                                              (line 122)
* C-c * <2>:                             テーブルの更新.      (line  13)
* C-c *:                                 エントリー中の階層構造.
                                                              (line 158)
* C-c +:                                 組み込みのテーブルエディタ.
                                                              (line 158)
* C-c ,:                                 プロパティ.          (line  24)
* C-c - <1>:                             組み込みのテーブルエディタ.
                                                              (line 105)
* C-c -:                                 エントリー中の階層構造.
                                                              (line 145)
* C-c .:                                 タイムスタンプの作成.
                                                              (line  10)
* C-c / <1>:                             衝突.                (line  74)
* C-c /:                                 ツリーの抽出.        (line  16)
* C-c / a:                               デッドライン／スケジュールを挿入.
                                                              (line  39)
* C-c / b:                               デッドライン／スケジュールを挿入.
                                                              (line  36)
* C-c / d:                               デッドライン／スケジュールを挿入.
                                                              (line  28)
* C-c / m <1>:                           タグの検索.          (line   9)
* C-c / m:                               プロパティの検索.    (line   8)
* C-c / p:                               プロパティの検索.    (line  28)
* C-c / r:                               ツリーの抽出.        (line  18)
* C-c / t:                               TODOの基本.          (line  37)
* C-c ;:                                 コメント行.          (line  12)
* C-c <:                                 タイムスタンプの作成.
                                                              (line  27)
* C-c <RET>:                             組み込みのテーブルエディタ.
                                                              (line 109)
* C-c = <1>:                             列の数式.            (line  26)
* C-c =:                                 数式の編集とデバッグ.
                                                              (line  13)
* C-c >:                                 タイムスタンプの作成.
                                                              (line  30)
* C-c ?:                                 数式の編集とデバッグ.
                                                              (line  22)
* C-c C-*:                               エントリー中の階層構造.
                                                              (line 163)
* C-c C-a <1>:                           添付.                (line  25)
* C-c C-a:                               アジェンダのコマンド.
                                                              (line 334)
* C-c C-a D:                             添付.                (line  64)
* C-c C-a F:                             添付.                (line  58)
* C-c C-a O:                             添付.                (line  52)
* C-c C-a a:                             添付.                (line  30)
* C-c C-a c:                             添付.                (line  35)
* C-c C-a d:                             添付.                (line  61)
* C-c C-a f:                             添付.                (line  55)
* C-c C-a i:                             添付.                (line  72)
* C-c C-a l:                             添付.                (line  35)
* C-c C-a m:                             添付.                (line  35)
* C-c C-a n:                             添付.                (line  39)
* C-c C-a o:                             添付.                (line  46)
* C-c C-a s:                             添付.                (line  68)
* C-c C-a z:                             添付.                (line  42)
* C-c C-b <1>:                           Beamerクラスのエクスポート.
                                                              (line  83)
* C-c C-b:                               移動.                (line  15)
* C-c C-c <1>:                           カラムビューの利用.  (line  48)
* C-c C-c <2>:                           数式の編集とデバッグ.
                                                              (line  44)
* C-c C-c <3>:                           キーバインドと便利関数.
                                                              (line  10)
* C-c C-c <4>:                           計測コマンド.        (line  40)
* C-c C-c <5>:                           数式の編集とデバッグ.
                                                              (line  88)
* C-c C-c <6>:                           コードブロックの評価.
                                                              (line  12)
* C-c C-c <7>:                           クロックテーブル.    (line  15)
* C-c C-c <8>:                           協調.                (line  52)
* C-c C-c <9>:                           キャプチャの使用.    (line  15)
* C-c C-c <10>:                          タグの設定.          (line  16)
* C-c C-c <11>:                          LaTeXコード片のプレビュー.
                                                              (line  14)
* C-c C-c <12>:                          「C-c C-c」キーはとても忙しい.
                                                              (line   6)
* C-c C-c <13>:                          チェックボックス.    (line  53)
* C-c C-c <14>:                          組み込みのテーブルエディタ.
                                                              (line  60)
* C-c C-c <15>:                          エントリー中の階層構造.
                                                              (line 139)
* C-c C-c <16>:                          カラム表示の保存.    (line  55)
* C-c C-c <17>:                          プロパティの表記法.  (line  57)
* C-c C-c <18>:                          計測コマンド.        (line  40)
* C-c C-c:                               脚注.                (line  90)
* C-c C-c D:                             プロパティの表記法.  (line  72)
* C-c C-c c:                             プロパティの表記法.  (line  75)
* C-c C-c d:                             プロパティの表記法.  (line  69)
* C-c C-c s:                             プロパティの表記法.  (line  61)
* C-c C-d <1>:                           デッドライン／スケジュールを挿入.
                                                              (line   9)
* C-c C-d:                               アジェンダのコマンド.
                                                              (line 341)
* C-c C-e:                               エクスポート用コマンド選択画面.
                                                              (line  14)
* C-c C-e A:                             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  20)
* C-c C-e D:                             DocBookエクスポートコマンド.
                                                              (line   6)
* C-c C-e F:                             公開の開始.          (line  14)
* C-c C-e H:                             HTMLエクスポートコマンド.
                                                              (line  19)
* C-c C-e I:                             iCalendarエクスポート.
                                                              (line  31)
* C-c C-e J:                             TaskJugglerエクスポート.
                                                              (line  25)
* C-c C-e L:                             LaTeX/PDFエクスポートコマンド.
                                                              (line  13)
* C-c C-e N:                             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  26)
* C-c C-e P:                             公開の開始.          (line  11)
* C-c C-e R:                             HTMLエクスポートコマンド.
                                                              (line  22)
* C-c C-e U:                             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  31)
* C-c C-e V:                             DocBookエクスポートコマンド.
                                                              (line  15)
* C-c C-e X:                             公開の開始.          (line   9)
* C-c C-e a:                             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  10)
* C-c C-e b:                             HTMLエクスポートコマンド.
                                                              (line  16)
* C-c C-e c:                             iCalendarエクスポート.
                                                              (line  37)
* C-c C-e d:                             LaTeX/PDFエクスポートコマンド.
                                                              (line  30)
* C-c C-e h:                             HTMLエクスポートコマンド.
                                                              (line   6)
* C-c C-e i:                             iCalendarエクスポート.
                                                              (line  29)
* C-c C-e j:                             TaskJugglerエクスポート.
                                                              (line  22)
* C-c C-e l:                             LaTeX/PDFエクスポートコマンド.
                                                              (line   6)
* C-c C-e m:                             Freemindエクスポート.
                                                              (line   8)
* C-c C-e n:                             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  23)
* C-c C-e p:                             LaTeX/PDFエクスポートコマンド.
                                                              (line  27)
* C-c C-e t:                             エクスポートオプション.
                                                              (line  19)
* C-c C-e u:                             ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  28)
* C-c C-e v <1>:                         ツリーの抽出.        (line  53)
* C-c C-e v:                             エクスポート用コマンド選択画面.
                                                              (line  20)
* C-c C-e v D:                           DocBookエクスポートコマンド.
                                                              (line  32)
* C-c C-e v x:                           XOXOエクスポート.    (line  11)
* C-c C-e x:                             XOXOエクスポート.    (line  10)
* C-c C-f:                               移動.                (line  12)
* C-c C-j:                               移動.                (line  21)
* C-c C-k <1>:                           キャプチャの使用.    (line  29)
* C-c C-k:                               表示、非表示の切り替え.
                                                              (line  43)
* C-c C-l:                               リンクの扱い.        (line  63)
* C-c C-n:                               移動.                (line   8)
* C-c C-o <1>:                           アジェンダのコマンド.
                                                              (line  60)
* C-c C-o <2>:                           リンクの扱い.        (line 101)
* C-c C-o <3>:                           脚注.                (line  94)
* C-c C-o <4>:                           タイムスタンプの作成.
                                                              (line  35)
* C-c C-o:                               キーバインドと便利関数.
                                                              (line  10)
* C-c C-p:                               移動.                (line   9)
* C-c C-q <1>:                           タグの設定.          (line   9)
* C-c C-q:                               数式の編集とデバッグ.
                                                              (line  46)
* C-c C-r <1>:                           数式の編集とデバッグ.
                                                              (line  49)
* C-c C-r:                               表示、非表示の切り替え.
                                                              (line  35)
* C-c C-s <1>:                           デッドライン／スケジュールを挿入.
                                                              (line  14)
* C-c C-s:                               アジェンダのコマンド.
                                                              (line 337)
* C-c C-t <1>:                           計測コマンド.        (line  46)
* C-c C-t:                               TODOの基本.          (line  13)
* C-c C-u:                               移動.                (line  18)
* C-c C-v C-a:                           キーバインドと便利関数.
                                                              (line  17)
* C-c C-v C-b:                           キーバインドと便利関数.
                                                              (line  17)
* C-c C-v C-f:                           キーバインドと便利関数.
                                                              (line  19)
* C-c C-v C-l:                           キーバインドと便利関数.
                                                              (line  24)
* C-c C-v C-p:                           キーバインドと便利関数.
                                                              (line  25)
* C-c C-v C-s:                           キーバインドと便利関数.
                                                              (line  27)
* C-c C-v C-t:                           キーバインドと便利関数.
                                                              (line  29)
* C-c C-v C-z:                           キーバインドと便利関数.
                                                              (line  31)
* C-c C-v a:                             キーバインドと便利関数.
                                                              (line  17)
* C-c C-v b:                             キーバインドと便利関数.
                                                              (line  17)
* C-c C-v f:                             キーバインドと便利関数.
                                                              (line  19)
* C-c C-v g:                             キーバインドと便利関数.
                                                              (line  21)
* C-c C-v h:                             キーバインドと便利関数.
                                                              (line  23)
* C-c C-v i:                             Babelライブラリ.     (line  18)
* C-c C-v l:                             キーバインドと便利関数.
                                                              (line  24)
* C-c C-v p:                             キーバインドと便利関数.
                                                              (line  25)
* C-c C-v s:                             キーバインドと便利関数.
                                                              (line  27)
* C-c C-v t <1>:                         キーバインドと便利関数.
                                                              (line  29)
* C-c C-v t:                             ソースコードの抽出.  (line  27)
* C-c C-v z:                             キーバインドと便利関数.
                                                              (line  31)
* C-c C-w <1>:                           見出し位置と階層の変更.
                                                              (line  96)
* C-c C-w <2>:                           アジェンダのコマンド.
                                                              (line 283)
* C-c C-w <3>:                           ノートの再配置.      (line  11)
* C-c C-w:                               キャプチャの使用.    (line  21)
* C-c C-x ,:                             相対時間タイマー.    (line  23)
* C-c C-x -:                             相対時間タイマー.    (line  13)
* C-c C-x .:                             相対時間タイマー.    (line  10)
* C-c C-x 0:                             相対時間タイマー.    (line  32)
* C-c C-x ;:                             カウントダウンタイマー.
                                                              (line   6)
* C-c C-x <:                             アジェンダファイル.  (line  46)
* C-c C-x > <1>:                         アジェンダファイル.  (line  54)
* C-c C-x >:                             アジェンダのコマンド.
                                                              (line 175)
* C-c C-x A <1>:                         アジェンダのコマンド.
                                                              (line 294)
* C-c C-x A:                             ファイル内部でのアーカイブ.
                                                              (line  52)
* C-c C-x C-a <1>:                       アーカイブ.          (line  11)
* C-c C-x C-a:                           アジェンダのコマンド.
                                                              (line 286)
* C-c C-x C-b:                           チェックボックス.    (line  56)
* C-c C-x C-c <1>:                       カラムビューの利用.  (line   9)
* C-c C-x C-c <2>:                       アジェンダのコマンド.
                                                              (line 163)
* C-c C-x C-c:                           アジェンダのカラム表示.
                                                              (line  11)
* C-c C-x C-d:                           計測コマンド.        (line  60)
* C-c C-x C-e <1>:                       計測コマンド.        (line  36)
* C-c C-x C-e:                           工数の見積もり.      (line  17)
* C-c C-x C-i:                           計測コマンド.        (line   6)
* C-c C-x C-j:                           計測コマンド.        (line  55)
* C-c C-x C-k:                           デッドライン／スケジュールを挿入.
                                                              (line  21)
* C-c C-x C-l:                           LaTeXコード片のプレビュー.
                                                              (line   9)
* C-c C-x C-n:                           リンクの扱い.        (line 149)
* C-c C-x C-o:                           計測コマンド.        (line  28)
* C-c C-x C-p:                           リンクの扱い.        (line 149)
* C-c C-x C-r:                           クロックテーブル.    (line  10)
* C-c C-x C-s <1>:                       アジェンダのコマンド.
                                                              (line 298)
* C-c C-x C-s:                           サブツリーを移動する.
                                                              (line   9)
* C-c C-x C-t:                           カスタムタイムフォーマット.
                                                              (line  11)
* C-c C-x C-u <1>:                       カラム表示の保存.    (line  55)
* C-c C-x C-u <2>:                       クロックテーブル.    (line  15)
* C-c C-x C-u:                           ダイナミックブロック.
                                                              (line  22)
* C-c C-x C-v:                           リンクの扱い.        (line 131)
* C-c C-x C-w <1>:                       見出し位置と階層の変更.
                                                              (line  58)
* C-c C-x C-w:                           組み込みのテーブルエディタ.
                                                              (line 133)
* C-c C-x C-x:                           計測コマンド.        (line  50)
* C-c C-x C-y <1>:                       見出し位置と階層の変更.
                                                              (line  67)
* C-c C-x C-y:                           組み込みのテーブルエディタ.
                                                              (line 137)
* C-c C-x G:                             RSSフィード.         (line  26)
* C-c C-x M-w <1>:                       見出し位置と階層の変更.
                                                              (line  63)
* C-c C-x M-w:                           組み込みのテーブルエディタ.
                                                              (line 129)
* C-c C-x \ <1>:                         下付き文字と上付き文字.
                                                              (line  26)
* C-c C-x \:                             特殊記号.            (line  28)
* C-c C-x a <1>:                         ファイル内部でのアーカイブ.
                                                              (line  39)
* C-c C-x a:                             アジェンダのコマンド.
                                                              (line 291)
* C-c C-x b <1>:                         アジェンダのコマンド.
                                                              (line  51)
* C-c C-x b:                             表示、非表示の切り替え.
                                                              (line  47)
* C-c C-x c:                             見出し位置と階層の変更.
                                                              (line  87)
* C-c C-x e:                             工数の見積もり.      (line  13)
* C-c C-x f:                             脚注.                (line  50)
* C-c C-x g:                             RSSフィード.         (line  22)
* C-c C-x i:                             カラム表示の保存.    (line  52)
* C-c C-x o <1>:                         チェックボックス.    (line  79)
* C-c C-x o:                             TODO間の関係.        (line  28)
* C-c C-x p <1>:                         Orgプロパティでのヘッダー引数.
                                                              (line  23)
* C-c C-x p:                             プロパティの表記法.  (line  47)
* C-c C-y <1>:                           計測コマンド.        (line  40)
* C-c C-y:                               タイムスタンプの作成.
                                                              (line  59)
* C-c C-z <1>:                           引き出し.            (line  32)
* C-c C-z:                               アジェンダのコマンド.
                                                              (line 329)
* C-c [:                                 アジェンダファイル.  (line  17)
* C-c \ <1>:                             タグの検索.          (line   9)
* C-c \:                                 プロパティの検索.    (line   8)
* C-c ]:                                 アジェンダファイル.  (line  21)
* C-c ^ <1>:                             見出し位置と階層の変更.
                                                              (line 100)
* C-c ^ <2>:                             エントリー中の階層構造.
                                                              (line 174)
* C-c ^:                                 組み込みのテーブルエディタ.
                                                              (line 113)
* C-c `:                                 組み込みのテーブルエディタ.
                                                              (line 176)
* C-c a !:                               詳細が未決定なプロジェクト.
                                                              (line  15)
* C-c a #:                               詳細が未決定なプロジェクト.
                                                              (line  14)
* C-c a ?:                               MobileOrgからpullする.
                                                              (line  47)
* C-c a C:                               検索式の保存.        (line   9)
* C-c a L:                               タイムライン.        (line  12)
* C-c a M <1>:                           タグの検索.          (line  15)
* C-c a M <2>:                           プロパティの検索.    (line  15)
* C-c a M:                               タグとプロパティとのマッチング.
                                                              (line  19)
* C-c a a:                               毎週／毎日のアジェンダ.
                                                              (line   9)
* C-c a e:                               アジェンダビューの出力.
                                                              (line  63)
* C-c a m <1>:                           タグの検索.          (line  11)
* C-c a m <2>:                           タグとプロパティとのマッチング.
                                                              (line  12)
* C-c a m:                               プロパティの検索.    (line  10)
* C-c a s:                               検索ビュー.          (line   9)
* C-c a t <1>:                           TODOの基本.          (line  51)
* C-c a t:                               グローバルなTODOリスト.
                                                              (line   9)
* C-c c:                                 キャプチャの使用.    (line   6)
* C-c c C:                               キャプチャテンプレート.
                                                              (line  10)
* C-c l <1>:                             リンクの扱い.        (line   9)
* C-c l:                                 リテラルの例.        (line  69)
* C-c { <1>:                             CDLaTeXモード.       (line  20)
* C-c {:                                 数式の編集とデバッグ.
                                                              (line  32)
* C-c |:                                 組み込みのテーブルエディタ.
                                                              (line 191)
* C-c }:                                 数式の編集とデバッグ.
                                                              (line  77)
* C-c ~:                                 協調.                (line  63)
* C-k:                                   アジェンダのコマンド.
                                                              (line 277)
* C-u C-c !:                             タイムスタンプの作成.
                                                              (line  20)
* C-u C-c *:                             テーブルの更新.      (line  15)
* C-u C-c .:                             タイムスタンプの作成.
                                                              (line  20)
* C-u C-c = <1>:                         フィールドと範囲の数式.
                                                              (line  22)
* C-u C-c =:                             数式の編集とデバッグ.
                                                              (line  13)
* C-u C-c C-c:                           テーブルの更新.      (line  18)
* C-u C-c C-l:                           リンクの扱い.        (line  86)
* C-u C-c C-t:                           TODOの基本.          (line  24)
* C-u C-c C-w:                           ノートの再配置.      (line  26)
* C-u C-c C-x ,:                         相対時間タイマー.    (line  27)
* C-u C-c C-x C-s:                       サブツリーを移動する.
                                                              (line  11)
* C-u C-c C-x C-u <1>:                   ダイナミックブロック.
                                                              (line  23)
* C-u C-c C-x C-u <2>:                   カラム表示の保存.    (line  60)
* C-u C-c C-x C-u:                       クロックテーブル.    (line  20)
* C-u C-c C-x a:                         ファイル内部でのアーカイブ.
                                                              (line  42)
* C-u C-c c:                             キャプチャの使用.    (line  42)
* C-u C-u <TAB>:                         表示、非表示の切り替え.
                                                              (line  71)
* C-u C-u C-c *:                         テーブルの更新.      (line  20)
* C-u C-u C-c =:                         数式の編集とデバッグ.
                                                              (line  16)
* C-u C-u C-c C-c:                       テーブルの更新.      (line  20)
* C-u C-u C-c C-e:                       エクスポート用コマンド選択画面.
                                                              (line  25)
* C-u C-u C-c C-t:                       キーワードセット.    (line  25)
* C-u C-u C-c C-w:                       ノートの再配置.      (line  29)
* C-u C-u C-c c:                         キャプチャの使用.    (line  44)
* C-u C-u C-u <TAB>:                     表示、非表示の切り替え.
                                                              (line  34)
* C-u C-u C-u C-c C-t:                   TODO間の関係.        (line  33)
* C-up:                                  キーバインドと便利関数.
                                                              (line  11)
* C-v:                                   日付／時間プロンプト.
                                                              (line  70)
* C-x C-s:                               数式の編集とデバッグ.
                                                              (line  44)
* C-x C-w <1>:                           アジェンダのコマンド.
                                                              (line 489)
* C-x C-w:                               アジェンダビューの出力.
                                                              (line  11)
* C-x n b:                               見出し位置と階層の変更.
                                                              (line 116)
* C-x n s:                               見出し位置と階層の変更.
                                                              (line 113)
* C-x n w:                               見出し位置と階層の変更.
                                                              (line 119)
* C-y:                                   見出し位置と階層の変更.
                                                              (line  73)
* D:                                     アジェンダのコマンド.
                                                              (line 102)
* E:                                     アジェンダのコマンド.
                                                              (line 140)
* F:                                     アジェンダのコマンド.
                                                              (line  45)
* G:                                     アジェンダのコマンド.
                                                              (line 148)
* H:                                     アジェンダのコマンド.
                                                              (line 476)
* I:                                     アジェンダのコマンド.
                                                              (line 378)
* J:                                     アジェンダのコマンド.
                                                              (line 389)
* L:                                     アジェンダのコマンド.
                                                              (line  35)
* M:                                     アジェンダのコマンド.
                                                              (line 464)
* M-<RET> <1>:                           相対時間タイマー.    (line  18)
* M-<RET> <2>:                           組み込みのテーブルエディタ.
                                                              (line 143)
* M-<RET> <3>:                           エントリー中の階層構造.
                                                              (line  88)
* M-<RET>:                               見出し位置と階層の変更.
                                                              (line   6)
* M-<TAB> <1>:                           タグの設定.          (line   6)
* M-<TAB> <2>:                           プロパティの表記法.  (line  44)
* M-<TAB> <3>:                           補完.                (line  16)
* M-<TAB> <4>:                           ファイル毎のキーワード.
                                                              (line  23)
* M-<TAB>:                               数式の編集とデバッグ.
                                                              (line  60)
* M-<down> <1>:                          組み込みのテーブルエディタ.
                                                              (line  94)
* M-<down>:                              数式の編集とデバッグ.
                                                              (line  73)
* M-<left> <1>:                          エントリー中の階層構造.
                                                              (line 120)
* M-<left> <2>:                          見出し位置と階層の変更.
                                                              (line  40)
* M-<left>:                              組み込みのテーブルエディタ.
                                                              (line  86)
* M-<right> <1>:                         組み込みのテーブルエディタ.
                                                              (line  86)
* M-<right> <2>:                         見出し位置と階層の変更.
                                                              (line  43)
* M-<right>:                             エントリー中の階層構造.
                                                              (line 120)
* M-<up> <1>:                            組み込みのテーブルエディタ.
                                                              (line  94)
* M-<up>:                                数式の編集とデバッグ.
                                                              (line  73)
* M-S-<RET> <1>:                         見出し位置と階層の変更.
                                                              (line  24)
* M-S-<RET> <2>:                         チェックボックス.    (line  74)
* M-S-<RET>:                             エントリー中の階層構造.
                                                              (line  96)
* M-S-<down> <1>:                        数式の編集とデバッグ.
                                                              (line  68)
* M-S-<down> <2>:                        エントリー中の階層構造.
                                                              (line 114)
* M-S-<down> <3>:                        見出し位置と階層の変更.
                                                              (line  55)
* M-S-<down>:                            組み込みのテーブルエディタ.
                                                              (line 101)
* M-S-<left> <1>:                        日付／時間プロンプト.
                                                              (line  70)
* M-S-<left> <2>:                        見出し位置と階層の変更.
                                                              (line  46)
* M-S-<left> <3>:                        エントリー中の階層構造.
                                                              (line 124)
* M-S-<left>:                            組み込みのテーブルエディタ.
                                                              (line  88)
* M-S-<right> <1>:                       エントリー中の階層構造.
                                                              (line 124)
* M-S-<right> <2>:                       組み込みのテーブルエディタ.
                                                              (line  91)
* M-S-<right> <3>:                       日付／時間プロンプト.
                                                              (line  70)
* M-S-<right>:                           見出し位置と階層の変更.
                                                              (line  49)
* M-S-<up> <1>:                          数式の編集とデバッグ.
                                                              (line  68)
* M-S-<up> <2>:                          エントリー中の階層構造.
                                                              (line 114)
* M-S-<up> <3>:                          組み込みのテーブルエディタ.
                                                              (line  98)
* M-S-<up>:                              見出し位置と階層の変更.
                                                              (line  52)
* M-a:                                   組み込みのテーブルエディタ.
                                                              (line  73)
* M-down:                                キーバインドと便利関数.
                                                              (line  12)
* M-e:                                   組み込みのテーブルエディタ.
                                                              (line  77)
* M-g M-n:                               ツリーの抽出.        (line  30)
* M-g M-p:                               ツリーの抽出.        (line  33)
* M-g n:                                 ツリーの抽出.        (line  30)
* M-g p:                                 ツリーの抽出.        (line  33)
* M-v:                                   日付／時間プロンプト.
                                                              (line  70)
* M-x org-iswitchb:                      アジェンダファイル.  (line  29)
* O:                                     アジェンダのコマンド.
                                                              (line 383)
* P:                                     アジェンダのコマンド.
                                                              (line 318)
* R:                                     アジェンダのコマンド.
                                                              (line 131)
* S:                                     アジェンダのコマンド.
                                                              (line 467)
* S-<RET>:                               組み込みのテーブルエディタ.
                                                              (line 161)
* S-<TAB> <1>:                           組み込みのテーブルエディタ.
                                                              (line  65)
* S-<TAB>:                               表示、非表示の切り替え.
                                                              (line  23)
* S-<down> <1>:                          エントリー中の階層構造.
                                                              (line 106)
* S-<down> <2>:                          数式の編集とデバッグ.
                                                              (line  63)
* S-<down> <3>:                          タイムスタンプの作成.
                                                              (line  46)
* S-<down> <4>:                          アジェンダのコマンド.
                                                              (line 326)
* S-<down> <5>:                          日付／時間プロンプト.
                                                              (line  70)
* S-<down>:                              プロパティ.          (line  28)
* S-<left> <1>:                          TODOの基本.          (line  31)
* S-<left> <2>:                          プロパティの表記法.  (line  65)
* S-<left> <3>:                          キーワードセット.    (line  32)
* S-<left> <4>:                          カラムビューの利用.  (line  34)
* S-<left> <5>:                          タイムスタンプの作成.
                                                              (line  40)
* S-<left> <6>:                          数式の編集とデバッグ.
                                                              (line  63)
* S-<left> <7>:                          日付／時間プロンプト.
                                                              (line  70)
* S-<left> <8>:                          アジェンダのコマンド.
                                                              (line 370)
* S-<left> <9>:                          クロックテーブル.    (line  25)
* S-<left>:                              エントリー中の階層構造.
                                                              (line 169)
* S-<right> <1>:                         タイムスタンプの作成.
                                                              (line  40)
* S-<right> <2>:                         数式の編集とデバッグ.
                                                              (line  63)
* S-<right> <3>:                         クロックテーブル.    (line  25)
* S-<right> <4>:                         カラムビューの利用.  (line  34)
* S-<right> <5>:                         キーワードセット.    (line  32)
* S-<right> <6>:                         日付／時間プロンプト.
                                                              (line  70)
* S-<right> <7>:                         アジェンダのコマンド.
                                                              (line 357)
* S-<right> <8>:                         エントリー中の階層構造.
                                                              (line 169)
* S-<right> <9>:                         プロパティの表記法.  (line  65)
* S-<right>:                             TODOの基本.          (line  31)
* S-<up> <1>:                            アジェンダのコマンド.
                                                              (line 321)
* S-<up> <2>:                            日付／時間プロンプト.
                                                              (line  70)
* S-<up> <3>:                            プロパティ.          (line  28)
* S-<up> <4>:                            タイムスタンプの作成.
                                                              (line  46)
* S-<up>:                                数式の編集とデバッグ.
                                                              (line  63)
* S-M-<RET>:                             TODOの基本.          (line  61)
* S-M-<left>:                            カラムビューの利用.  (line  67)
* S-M-<right>:                           カラムビューの利用.  (line  64)
* T:                                     アジェンダのコマンド.
                                                              (line 303)
* U:                                     アジェンダのコマンド.
                                                              (line 402)
* X:                                     アジェンダのコマンド.
                                                              (line 386)
* [:                                     アジェンダのコマンド.
                                                              (line 119)
* \:                                     アジェンダのコマンド.
                                                              (line 242)
* ]:                                     アジェンダのコマンド.
                                                              (line 249)
* ^:                                     CDLaTeXモード.       (line  31)
* _:                                     CDLaTeXモード.       (line  31)
* `:                                     CDLaTeXモード.       (line  36)
* a <1>:                                 カラムビューの利用.  (line  54)
* a:                                     アジェンダのコマンド.
                                                              (line 286)
* c:                                     アジェンダのコマンド.
                                                              (line 437)
* c-c C-e E:                             公開の開始.          (line  17)
* d:                                     アジェンダのコマンド.
                                                              (line  70)
* e:                                     カラムビューの利用.  (line  45)
* f:                                     アジェンダのコマンド.
                                                              (line  90)
* g <1>:                                 カラムビューの利用.  (line  22)
* g:                                     アジェンダのコマンド.
                                                              (line 159)
* i:                                     アジェンダのコマンド.
                                                              (line 444)
* j:                                     アジェンダのコマンド.
                                                              (line  96)
* k:                                     アジェンダのコマンド.
                                                              (line 345)
* k a:                                   デッドライン／スケジュールを挿入.
                                                              (line  24)
* k s:                                   デッドライン／スケジュールを挿入.
                                                              (line  24)
* l:                                     アジェンダのコマンド.
                                                              (line 106)
* m:                                     アジェンダのコマンド.
                                                              (line 397)
* mouse-1 <1>:                           脚注.                (line  94)
* mouse-1 <2>:                           リンクの扱い.        (line 122)
* mouse-1:                               日付／時間プロンプト.
                                                              (line  70)
* mouse-2 <1>:                           アジェンダのコマンド.
                                                              (line  38)
* mouse-2 <2>:                           脚注.                (line  94)
* mouse-2:                               リンクの扱い.        (line 122)
* mouse-3 <1>:                           アジェンダのコマンド.
                                                              (line  29)
* mouse-3:                               リンクの扱い.        (line 127)
* n <1>:                                 アジェンダのコマンド.
                                                              (line  20)
* n:                                     カラムビューの利用.  (line  41)
* o:                                     アジェンダのコマンド.
                                                              (line  69)
* p <1>:                                 カラムビューの利用.  (line  41)
* p:                                     アジェンダのコマンド.
                                                              (line  21)
* q <1>:                                 カラムビューの利用.  (line  25)
* q:                                     アジェンダのコマンド.
                                                              (line 502)
* r <1>:                                 グローバルなTODOリスト.
                                                              (line  22)
* r <2>:                                 カラムビューの利用.  (line  18)
* r:                                     アジェンダのコマンド.
                                                              (line 152)
* t:                                     アジェンダのコマンド.
                                                              (line 267)
* v:                                     カラムビューの利用.  (line  51)
* v A:                                   アジェンダのコマンド.
                                                              (line 126)
* v E:                                   アジェンダのコマンド.
                                                              (line 140)
* v L:                                   アジェンダのコマンド.
                                                              (line 109)
* v R:                                   アジェンダのコマンド.
                                                              (line 131)
* v SPC:                                 アジェンダのコマンド.
                                                              (line  76)
* v [:                                   アジェンダのコマンド.
                                                              (line 119)
* v a:                                   アジェンダのコマンド.
                                                              (line 123)
* v d:                                   アジェンダのコマンド.
                                                              (line  70)
* v l:                                   アジェンダのコマンド.
                                                              (line 106)
* v m:                                   アジェンダのコマンド.
                                                              (line  74)
* v w:                                   アジェンダのコマンド.
                                                              (line  73)
* v y:                                   アジェンダのコマンド.
                                                              (line  75)
* w:                                     アジェンダのコマンド.
                                                              (line  73)
* x:                                     アジェンダのコマンド.
                                                              (line 505)
* z:                                     アジェンダのコマンド.
                                                              (line 329)
* {:                                     アジェンダのコマンド.
                                                              (line 249)
* }:                                     アジェンダのコマンド.
                                                              (line 249)


File: org-ja,  Node: コマンドと関数インデックス,  Next: 変数インデックス,  Prev: キーワードインデックス,  Up: Top

Command and function index
**************************

 [index ]
* Menu:

* lisp-complete-symbol:                  数式の編集とデバッグ.
                                                              (line  60)
* next-error:                            ツリーの抽出.        (line  30)
* org-aganda-day-view:                   アジェンダのコマンド.
                                                              (line  73)
* org-agenda-action:                     アジェンダのコマンド.
                                                              (line 345)
* org-agenda-add-note:                   アジェンダのコマンド.
                                                              (line 329)
* org-agenda-archive:                    アジェンダのコマンド.
                                                              (line 298)
* org-agenda-archive-default-with-confirmation: アジェンダのコマンド.
                                                              (line 286)
* org-agenda-archive-to-archive-sibling: アジェンダのコマンド.
                                                              (line 294)
* org-agenda-archives-mode:              アジェンダのコマンド.
                                                              (line 123)
* org-agenda-archives-mode 'files:       アジェンダのコマンド.
                                                              (line 126)
* org-agenda-bulk-action:                アジェンダのコマンド.
                                                              (line 406)
* org-agenda-bulk-mark:                  アジェンダのコマンド.
                                                              (line 397)
* org-agenda-bulk-remove-all-marks:      アジェンダのコマンド.
                                                              (line 399)
* org-agenda-clock-cancel:               アジェンダのコマンド.
                                                              (line 386)
* org-agenda-clock-goto:                 アジェンダのコマンド.
                                                              (line 389)
* org-agenda-clock-in:                   アジェンダのコマンド.
                                                              (line 378)
* org-agenda-clock-out:                  アジェンダのコマンド.
                                                              (line 383)
* org-agenda-clockreport-mode:           アジェンダのコマンド.
                                                              (line 131)
* org-agenda-columns <1>:                アジェンダのカラム表示.
                                                              (line  11)
* org-agenda-columns:                    アジェンダのコマンド.
                                                              (line 163)
* org-agenda-convert-date:               アジェンダのコマンド.
                                                              (line 472)
* org-agenda-date-prompt:                アジェンダのコマンド.
                                                              (line 373)
* org-agenda-deadline:                   アジェンダのコマンド.
                                                              (line 341)
* org-agenda-diary-entry:                アジェンダのコマンド.
                                                              (line 444)
* org-agenda-do-date-earlier:            アジェンダのコマンド.
                                                              (line 370)
* org-agenda-do-date-later:              アジェンダのコマンド.
                                                              (line 357)
* org-agenda-entry-text-mode:            アジェンダのコマンド.
                                                              (line 140)
* org-agenda-exit:                       アジェンダのコマンド.
                                                              (line 505)
* org-agenda-file-to-front:              アジェンダファイル.  (line  17)
* org-agenda-filter-by-tag:              アジェンダのコマンド.
                                                              (line 183)
* org-agenda-filter-by-tag-refine:       アジェンダのコマンド.
                                                              (line 242)
* org-agenda-follow-mode:                アジェンダのコマンド.
                                                              (line  45)
* org-agenda-goto:                       アジェンダのコマンド.
                                                              (line  38)
* org-agenda-goto-calendar:              アジェンダのコマンド.
                                                              (line 437)
* org-agenda-goto-date:                  アジェンダのコマンド.
                                                              (line  96)
* org-agenda-goto-today:                 アジェンダのコマンド.
                                                              (line  93)
* org-agenda-holidays:                   アジェンダのコマンド.
                                                              (line 476)
* org-agenda-kill:                       アジェンダのコマンド.
                                                              (line 277)
* org-agenda-later:                      アジェンダのコマンド.
                                                              (line  90)
* org-agenda-list:                       毎週／毎日のアジェンダ.
                                                              (line   9)
* org-agenda-list-stuck-projects:        詳細が未決定なプロジェクト.
                                                              (line  14)
* org-agenda-log-mode:                   アジェンダのコマンド.
                                                              (line 106)
* org-agenda-manipulate-query-add:       アジェンダのコマンド.
                                                              (line 119)
* org-agenda-month-view:                 アジェンダのコマンド.
                                                              (line  74)
* org-agenda-month-year:                 アジェンダのコマンド.
                                                              (line  75)
* org-agenda-next-line:                  アジェンダのコマンド.
                                                              (line  20)
* org-agenda-open-link:                  アジェンダのコマンド.
                                                              (line  60)
* org-agenda-phases-of-moon:             アジェンダのコマンド.
                                                              (line 464)
* org-agenda-previous-line:              アジェンダのコマンド.
                                                              (line  21)
* org-agenda-priority-down:              アジェンダのコマンド.
                                                              (line 326)
* org-agenda-priority-up:                アジェンダのコマンド.
                                                              (line 321)
* org-agenda-quit:                       アジェンダのコマンド.
                                                              (line 502)
* org-agenda-recenter:                   アジェンダのコマンド.
                                                              (line  35)
* org-agenda-refile:                     アジェンダのコマンド.
                                                              (line 283)
* org-agenda-remove-restriction-lock <1>: アジェンダファイル. (line  66)
* org-agenda-remove-restriction-lock <2>: アジェンダのコマンド.
                                                              (line 175)
* org-agenda-remove-restriction-lock:    アジェンダファイル.  (line  54)
* org-agenda-reset-view:                 アジェンダのコマンド.
                                                              (line  76)
* org-agenda-rodo:                       アジェンダのコマンド.
                                                              (line 159)
* org-agenda-schedule:                   アジェンダのコマンド.
                                                              (line 337)
* org-agenda-set-restriction-lock:       アジェンダファイル.  (line  46)
* org-agenda-set-tags:                   アジェンダのコマンド.
                                                              (line 308)
* org-agenda-show-and-scroll-up:         アジェンダのコマンド.
                                                              (line  29)
* org-agenda-show-priority:              アジェンダのコマンド.
                                                              (line 318)
* org-agenda-show-tags:                  アジェンダのコマンド.
                                                              (line 303)
* org-agenda-sunrise-sunset:             アジェンダのコマンド.
                                                              (line 467)
* org-agenda-switch-to:                  アジェンダのコマンド.
                                                              (line  41)
* org-agenda-todo:                       アジェンダのコマンド.
                                                              (line 267)
* org-agenda-todo-nextset:               アジェンダのコマンド.
                                                              (line 272)
* org-agenda-todo-previousset:           アジェンダのコマンド.
                                                              (line 275)
* org-agenda-toggle-archive-tag:         アジェンダのコマンド.
                                                              (line 291)
* org-agenda-toggle-diary:               アジェンダのコマンド.
                                                              (line 102)
* org-agenda-toggle-time-grid:           アジェンダのコマンド.
                                                              (line 148)
* org-agenda-tree-to-indirect-buffer:    アジェンダのコマンド.
                                                              (line  51)
* org-agenda-undo:                       アジェンダのコマンド.
                                                              (line 263)
* org-archive-subtree:                   サブツリーを移動する.
                                                              (line   9)
* org-archive-subtree-default:           アーカイブ.          (line  11)
* org-archive-to-archive-sibling:        ファイル内部でのアーカイブ.
                                                              (line  52)
* org-attach <1>:                        アジェンダのコマンド.
                                                              (line 334)
* org-attach:                            添付.                (line  25)
* org-attach-attach:                     添付.                (line  30)
* org-attach-delete-all:                 添付.                (line  64)
* org-attach-delete-one:                 添付.                (line  61)
* org-attach-new:                        添付.                (line  39)
* org-attach-open:                       添付.                (line  46)
* org-attach-open-in-emacs:              添付.                (line  52)
* org-attach-reveal:                     添付.                (line  55)
* org-attach-reveal-in-emacs:            添付.                (line  58)
* org-attach-set-directory:              添付.                (line  68)
* org-attach-set-inherit:                添付.                (line  72)
* org-attach-sync:                       添付.                (line  42)
* org-backward-same-level:               移動.                (line  15)
* org-beamer-select-environment:         Beamerクラスのエクスポート.
                                                              (line  83)
* org-buffer-property-keys:              プロパティAPIを使う. (line  37)
* org-calendar-goto-agenda:              アジェンダのコマンド.
                                                              (line 439)
* org-capture:                           キャプチャの使用.    (line   6)
* org-capture-finalize:                  キャプチャの使用.    (line  15)
* org-capture-kill:                      キャプチャの使用.    (line  29)
* org-capture-refile:                    キャプチャの使用.    (line  21)
* org-check-after-date:                  デッドライン／スケジュールを挿入.
                                                              (line  39)
* org-check-before-date:                 デッドライン／スケジュールを挿入.
                                                              (line  36)
* org-check-deadlines:                   デッドライン／スケジュールを挿入.
                                                              (line  28)
* org-clock-cancel:                      計測コマンド.        (line  50)
* org-clock-display:                     計測コマンド.        (line  60)
* org-clock-goto:                        計測コマンド.        (line  55)
* org-clock-in:                          計測コマンド.        (line   6)
* org-clock-modify-effort-estimate <1>:  計測コマンド.        (line  36)
* org-clock-modify-effort-estimate:      工数の見積もり.      (line  17)
* org-clock-out:                         計測コマンド.        (line  28)
* org-clock-report:                      クロックテーブル.    (line  10)
* org-clocktable-try-shift:              クロックテーブル.    (line  25)
* org-clone-subtree-with-time-shift:     見出し位置と階層の変更.
                                                              (line  87)
* org-columns:                           カラムビューの利用.  (line   9)
* org-columns-delete:                    カラムビューの利用.  (line  67)
* org-columns-edit-allowed:              カラムビューの利用.  (line  54)
* org-columns-edit-value:                カラムビューの利用.  (line  45)
* org-columns-narrow:                    カラムビューの利用.  (line  62)
* org-columns-new:                       カラムビューの利用.  (line  64)
* org-columns-next-allowed-value:        カラムビューの利用.  (line  41)
* org-columns-previous-allowed-value:    カラムビューの利用.  (line  41)
* org-columns-quit:                      カラムビューの利用.  (line  25)
* org-columns-redo:                      カラムビューの利用.  (line  18)
* org-columns-set-tags-or-toggle:        カラムビューの利用.  (line  48)
* org-columns-show-value:                カラムビューの利用.  (line  51)
* org-columns-widen:                     カラムビューの利用.  (line  62)
* org-compute-property-at-point:         プロパティの表記法.  (line  75)
* org-copy-subtree:                      見出し位置と階層の変更.
                                                              (line  63)
* org-cut-subtree:                       見出し位置と階層の変更.
                                                              (line  58)
* org-cycle <1>:                         見出し位置と階層の変更.
                                                              (line  34)
* org-cycle <2>:                         エントリー中の階層構造.
                                                              (line 100)
* org-cycle <3>:                         表示、非表示の切り替え.
                                                              (line  10)
* org-cycle:                             エントリー中の階層構造.
                                                              (line  80)
* org-cycle-agenda-files:                アジェンダファイル.  (line  24)
* org-date-from-calendar:                タイムスタンプの作成.
                                                              (line  27)
* org-dblock-update <1>:                 ダイナミックブロック.
                                                              (line  22)
* org-dblock-update <2>:                 カラム表示の保存.    (line  55)
* org-dblock-update:                     クロックテーブル.    (line  15)
* org-deadline:                          デッドライン／スケジュールを挿入.
                                                              (line   9)
* org-delete-property:                   プロパティの表記法.  (line  69)
* org-delete-property-globally:          プロパティの表記法.  (line  72)
* org-demote:                            マッピングAPIを使う. (line  77)
* org-demote-subtree:                    見出し位置と階層の変更.
                                                              (line  49)
* org-do-demote:                         見出し位置と階層の変更.
                                                              (line  43)
* org-do-promote:                        見出し位置と階層の変更.
                                                              (line  40)
* org-edit-special:                      協調.                (line  61)
* org-entry-add-to-multivalued-property: プロパティAPIを使う. (line  53)
* org-entry-delete:                      プロパティAPIを使う. (line  29)
* org-entry-get:                         プロパティAPIを使う. (line  20)
* org-entry-get-multivalued-property:    プロパティAPIを使う. (line  49)
* org-entry-member-in-multivalued-property: プロパティAPIを使う.
                                                              (line  63)
* org-entry-properties:                  プロパティAPIを使う. (line   9)
* org-entry-put:                         プロパティAPIを使う. (line  33)
* org-entry-put-multivalued-property:    プロパティAPIを使う. (line  44)
* org-entry-remove-from-multivalued-property: プロパティAPIを使う.
                                                              (line  58)
* org-evaluate-time-range <1>:           タイムスタンプの作成.
                                                              (line  59)
* org-evaluate-time-range:               計測コマンド.        (line  40)
* org-export:                            エクスポート用コマンド選択画面.
                                                              (line  25)
* org-export-as-ascii:                   ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  10)
* org-export-as-ascii-to-buffer:         ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  20)
* org-export-as-docbook:                 DocBookエクスポートコマンド.
                                                              (line   6)
* org-export-as-docbook-pdf-and-open:    DocBookエクスポートコマンド.
                                                              (line  15)
* org-export-as-freemind:                Freemindエクスポート.
                                                              (line   8)
* org-export-as-html:                    HTMLエクスポートコマンド.
                                                              (line   6)
* org-export-as-html-and-open:           HTMLエクスポートコマンド.
                                                              (line  16)
* org-export-as-html-to-buffer:          HTMLエクスポートコマンド.
                                                              (line  19)
* org-export-as-latex:                   LaTeX/PDFエクスポートコマンド.
                                                              (line   6)
* org-export-as-latex-to-buffer:         LaTeX/PDFエクスポートコマンド.
                                                              (line  13)
* org-export-as-latin1:                  ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  23)
* org-export-as-latin1-to-buffer:        ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  26)
* org-export-as-pdf:                     LaTeX/PDFエクスポートコマンド.
                                                              (line  27)
* org-export-as-pdf-and-open:            LaTeX/PDFエクスポートコマンド.
                                                              (line  30)
* org-export-as-taskjuggler:             TaskJugglerエクスポート.
                                                              (line  22)
* org-export-as-taskjuggler-and-open:    TaskJugglerエクスポート.
                                                              (line  25)
* org-export-as-utf8:                    ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  28)
* org-export-as-utf8-to-buffer:          ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  31)
* org-export-as-xoxo:                    XOXOエクスポート.    (line  10)
* org-export-icalendar-all-agenda-files: iCalendarエクスポート.
                                                              (line  31)
* org-export-icalendar-combine-agenda-files: iCalendarエクスポート.
                                                              (line  37)
* org-export-icalendar-this-file:        iCalendarエクスポート.
                                                              (line  29)
* org-export-region-as-html:             HTMLエクスポートコマンド.
                                                              (line  22)
* org-export-visible:                    エクスポート用コマンド選択画面.
                                                              (line  20)
* org-feed-goto-inbox:                   RSSフィード.         (line  26)
* org-feed-update-all:                   RSSフィード.         (line  22)
* org-force-cycle-archived:              ファイル内部でのアーカイブ.
                                                              (line  49)
* org-forward-same-level:                移動.                (line  12)
* org-global-cycle:                      表示、非表示の切り替え.
                                                              (line  23)
* org-goto:                              移動.                (line  21)
* org-goto-calendar:                     タイムスタンプの作成.
                                                              (line  30)
* org-insert-columns-dblock:             カラム表示の保存.    (line  52)
* org-insert-export-options-template:    エクスポートオプション.
                                                              (line  19)
* org-insert-heading <1>:                相対時間タイマー.    (line  18)
* org-insert-heading <2>:                エントリー中の階層構造.
                                                              (line  88)
* org-insert-heading:                    見出し位置と階層の変更.
                                                              (line   6)
* org-insert-heading-respect-content:    見出し位置と階層の変更.
                                                              (line  18)
* org-insert-link:                       リンクの扱い.        (line  63)
* org-insert-property-drawer <1>:        プロパティAPIを使う. (line  40)
* org-insert-property-drawer:            プロパティの表記法.  (line  55)
* org-insert-todo-heading <1>:           TODOの基本.          (line  61)
* org-insert-todo-heading <2>:           チェックボックス.    (line  74)
* org-insert-todo-heading:               見出し位置と階層の変更.
                                                              (line  24)
* org-insert-todo-heading-respect-content: 見出し位置と階層の変更.
                                                              (line  29)
* org-map-entries:                       マッピングAPIを使う. (line  12)
* org-mark-entry-for-agenda-action:      デッドライン／スケジュールを挿入.
                                                              (line  21)
* org-mark-ring-goto:                    リンクの扱い.        (line 143)
* org-mark-ring-push:                    リンクの扱い.        (line 138)
* org-match-sparse-tree <1>:             プロパティの検索.    (line   8)
* org-match-sparse-tree:                 タグの検索.          (line   9)
* org-move-subtree-down:                 見出し位置と階層の変更.
                                                              (line  55)
* org-move-subtree-up:                   見出し位置と階層の変更.
                                                              (line  52)
* org-narrow-to-block:                   見出し位置と階層の変更.
                                                              (line 116)
* org-narrow-to-subtree:                 見出し位置と階層の変更.
                                                              (line 113)
* org-next-link:                         リンクの扱い.        (line 149)
* org-occur:                             ツリーの抽出.        (line  18)
* org-open-at-point <1>:                 リンクの扱い.        (line 101)
* org-open-at-point:                     タイムスタンプの作成.
                                                              (line  35)
* org-paste-subtree:                     見出し位置と階層の変更.
                                                              (line  67)
* org-previous-link:                     リンクの扱い.        (line 149)
* org-priority <1>:                      プロパティ.          (line  24)
* org-priority:                          マッピングAPIを使う. (line  65)
* org-priority-down:                     プロパティ.          (line  28)
* org-priority-up:                       プロパティ.          (line  28)
* org-promote:                           マッピングAPIを使う. (line  74)
* org-promote-subtree:                   見出し位置と階層の変更.
                                                              (line  46)
* org-property-action:                   プロパティの表記法.  (line  57)
* org-property-next-allowed-value:       プロパティの表記法.  (line  65)
* org-property-previous-allowed-value:   プロパティの表記法.  (line  65)
* org-publish:                           公開の開始.          (line   9)
* org-publish-all:                       公開の開始.          (line  17)
* org-publish-current-file:              公開の開始.          (line  14)
* org-publish-current-project:           公開の開始.          (line  11)
* org-refile <1>:                        ノートの再配置.      (line  11)
* org-refile:                            見出し位置と階層の変更.
                                                              (line  96)
* org-refile-cache-clear:                ノートの再配置.      (line  38)
* org-refile-goto-last-stored:           ノートの再配置.      (line  29)
* org-remove-file:                       アジェンダファイル.  (line  21)
* org-reveal:                            表示、非表示の切り替え.
                                                              (line  35)
* org-schedule:                          デッドライン／スケジュールを挿入.
                                                              (line  14)
* org-search-view:                       検索ビュー.          (line   9)
* org-set-effort:                        工数の見積もり.      (line  13)
* org-set-property:                      プロパティの表記法.  (line  61)
* org-set-startup-visibility:            表示、非表示の切り替え.
                                                              (line  71)
* org-set-tags-command:                  タグの設定.          (line  16)
* org-show-todo-key:                     TODOの基本.          (line  37)
* org-sort-entries-or-items:             見出し位置と階層の変更.
                                                              (line 100)
* org-sparse-tree:                       ツリーの抽出.        (line  16)
* org-speedbar-set-agenda-restriction:   アジェンダファイル.  (line  61)
* org-store-agenda-views:                アジェンダビューの出力.
                                                              (line  63)
* org-store-link:                        リンクの扱い.        (line   9)
* org-table-align:                       組み込みのテーブルエディタ.
                                                              (line  60)
* org-table-beginning-of-field:          組み込みのテーブルエディタ.
                                                              (line  73)
* org-table-copy-down:                   組み込みのテーブルエディタ.
                                                              (line 161)
* org-table-copy-region:                 組み込みのテーブルエディタ.
                                                              (line 129)
* org-table-create-or-convert-from-region: 組み込みのテーブルエディタ.
                                                              (line 191)
* org-table-create-with-table.el:        協調.                (line  63)
* org-table-cut-region:                  組み込みのテーブルエディタ.
                                                              (line 133)
* org-table-delete-column:               組み込みのテーブルエディタ.
                                                              (line  88)
* org-table-edit-field:                  組み込みのテーブルエディタ.
                                                              (line 176)
* org-table-edit-formulas:               数式の編集とデバッグ.
                                                              (line  35)
* org-table-end-of-field:                組み込みのテーブルエディタ.
                                                              (line  77)
* org-table-eval-formula <1>:            列の数式.            (line  26)
* org-table-eval-formula <2>:            数式の編集とデバッグ.
                                                              (line  16)
* org-table-eval-formula:                フィールドと範囲の数式.
                                                              (line  22)
* org-table-export:                      組み込みのテーブルエディタ.
                                                              (line 202)
* org-table-fedit-abort:                 数式の編集とデバッグ.
                                                              (line  46)
* org-table-fedit-finish:                数式の編集とデバッグ.
                                                              (line  44)
* org-table-fedit-line-down:             数式の編集とデバッグ.
                                                              (line  68)
* org-table-fedit-line-up:               数式の編集とデバッグ.
                                                              (line  68)
* org-table-fedit-lisp-indent:           数式の編集とデバッグ.
                                                              (line  53)
* org-table-fedit-ref-down:              数式の編集とデバッグ.
                                                              (line  63)
* org-table-fedit-ref-left:              数式の編集とデバッグ.
                                                              (line  63)
* org-table-fedit-ref-right:             数式の編集とデバッグ.
                                                              (line  63)
* org-table-fedit-ref-up:                数式の編集とデバッグ.
                                                              (line  63)
* org-table-fedit-scroll-down:           数式の編集とデバッグ.
                                                              (line  73)
* org-table-fedit-scroll-up:             数式の編集とデバッグ.
                                                              (line  73)
* org-table-fedit-toggle-ref-type:       数式の編集とデバッグ.
                                                              (line  49)
* org-table-field-info:                  数式の編集とデバッグ.
                                                              (line  22)
* org-table-hline-and-move:              組み込みのテーブルエディタ.
                                                              (line 109)
* org-table-insert-column:               組み込みのテーブルエディタ.
                                                              (line  91)
* org-table-insert-hline:                組み込みのテーブルエディタ.
                                                              (line 105)
* org-table-insert-row:                  組み込みのテーブルエディタ.
                                                              (line 101)
* org-table-iterate:                     テーブルの更新.      (line  20)
* org-table-iterate-buffer-tables:       テーブルの更新.      (line  31)
* org-table-kill-row:                    組み込みのテーブルエディタ.
                                                              (line  98)
* org-table-move-column-left:            組み込みのテーブルエディタ.
                                                              (line  86)
* org-table-move-column-right:           組み込みのテーブルエディタ.
                                                              (line  86)
* org-table-move-row-down:               組み込みのテーブルエディタ.
                                                              (line  94)
* org-table-move-row-up:                 組み込みのテーブルエディタ.
                                                              (line  94)
* org-table-next-field:                  組み込みのテーブルエディタ.
                                                              (line  61)
* org-table-next-row:                    組み込みのテーブルエディタ.
                                                              (line  68)
* org-table-paste-rectangle:             組み込みのテーブルエディタ.
                                                              (line 137)
* org-table-previous-field:              組み込みのテーブルエディタ.
                                                              (line  65)
* org-table-recalculate:                 テーブルの更新.      (line  13)
* org-table-recalculate-buffer-tables:   テーブルの更新.      (line  28)
* org-table-rotate-recalc-marks:         一歩進んだ機能.      (line   9)
* org-table-sort-lines:                  組み込みのテーブルエディタ.
                                                              (line 113)
* org-table-sum:                         組み込みのテーブルエディタ.
                                                              (line 158)
* org-table-toggle-coordinate-overlays:  数式の編集とデバッグ.
                                                              (line  27)
* org-table-toggle-formula-debugger:     数式の編集とデバッグ.
                                                              (line  32)
* org-table-wrap-region:                 組み込みのテーブルエディタ.
                                                              (line 143)
* org-tags-view <1>:                     プロパティの検索.    (line  15)
* org-tags-view <2>:                     タグとプロパティとのマッチング.
                                                              (line  19)
* org-tags-view:                         タグの検索.          (line  15)
* org-time-stamp:                        タイムスタンプの作成.
                                                              (line  10)
* org-time-stamp-inactive:               タイムスタンプの作成.
                                                              (line  15)
* org-timeline:                          タイムライン.        (line  12)
* org-timer:                             相対時間タイマー.    (line  10)
* org-timer-item:                        相対時間タイマー.    (line  13)
* org-timer-start:                       相対時間タイマー.    (line  32)
* org-timestamp-down-day:                タイムスタンプの作成.
                                                              (line  40)
* org-timestamp-down-down:               タイムスタンプの作成.
                                                              (line  46)
* org-timestamp-up:                      タイムスタンプの作成.
                                                              (line  46)
* org-timestamp-up-day:                  タイムスタンプの作成.
                                                              (line  40)
* org-todo <1>:                          TODOの基本.          (line  13)
* org-todo <2>:                          マッピングAPIを使う. (line  61)
* org-todo:                              計測コマンド.        (line  46)
* org-todo-list <1>:                     TODOの基本.          (line  51)
* org-todo-list:                         グローバルなTODOリスト.
                                                              (line   9)
* org-toggle-archive-tag:                ファイル内部でのアーカイブ.
                                                              (line  39)
* org-toggle-checkbox:                   チェックボックス.    (line  53)
* org-toggle-heading:                    見出し位置と階層の変更.
                                                              (line 122)
* org-toggle-inline-images:              リンクの扱い.        (line 131)
* org-toggle-ordered-property <1>:       TODO間の関係.        (line  28)
* org-toggle-ordered-property:           チェックボックス.    (line  79)
* org-toggle-tag:                        マッピングAPIを使う. (line  69)
* org-toggle-time-stamp-overlays:        カスタムタイムフォーマット.
                                                              (line  11)
* org-tree-to-indirect-buffer:           表示、非表示の切り替え.
                                                              (line  47)
* org-update-all-dblocks:                カラム表示の保存.    (line  60)
* org-update-statistics-cookies:         チェックボックス.    (line  86)
* org-write-agenda <1>:                  アジェンダのコマンド.
                                                              (line 489)
* org-write-agenda:                      アジェンダビューの出力.
                                                              (line  11)
* org-yank:                              見出し位置と階層の変更.
                                                              (line  73)
* outline-next-visible-heading:          移動.                (line   8)
* outline-previous-visible-heading:      移動.                (line   9)
* outline-up-heading:                    移動.                (line  18)
* pcomplete:                             プロパティの表記法.  (line  44)
* previous-error:                        ツリーの抽出.        (line  33)
* show-all:                              表示、非表示の切り替え.
                                                              (line  34)
* show-branches:                         表示、非表示の切り替え.
                                                              (line  43)
* widen:                                 見出し位置と階層の変更.
                                                              (line 119)


File: org-ja,  Node: 変数インデックス,  Prev: コマンドと関数インデックス,  Up: Top

Variable index
**************

これは変数とフェイスの完全なインデックスではありません。このマニュアルで言及
したものだけを列挙しています。さらに詳しいリストは、 `M-x org-customize
<RET>'で表示されるカスタムブラウザで確認できます。表示さ
れるツリーをクリックしてください。

 [index ]
* Menu:

* LaTeX-verbatim-environments:           LaTeXの例.           (line  21)
* cdlatex-simplify-sub-super-scripts:    CDLaTeXモード.       (line  31)
* constants-unit-system <1>:             参照.                (line 107)
* constants-unit-system:                 バッファ内での変数制御.
                                                              (line 130)
* htmlize-output-type:                   アジェンダビューの出力.
                                                              (line  19)
* org-M-RET-may-split-line <1>:          エントリー中の階層構造.
                                                              (line  91)
* org-M-RET-may-split-line:              見出し位置と階層の変更.
                                                              (line   7)
* org-adapt-indentation:                 アウトラインの「*」を取り除く.
                                                              (line  45)
* org-agenda-add-entry-text-maxlines:    アジェンダビューの出力.
                                                              (line  19)
* org-agenda-columns-add-appointments-to-effort-sum: 工数の見積もり.
                                                              (line  41)
* org-agenda-confirm-kill:               アジェンダのコマンド.
                                                              (line 280)
* org-agenda-custom-commands <1>:        検索式の保存.        (line   9)
* org-agenda-custom-commands <2>:        ツリーの抽出.        (line  38)
* org-agenda-custom-commands <3>:        設定オプション.      (line  35)
* org-agenda-custom-commands <4>:        アジェンダ情報の抽出.
                                                              (line   6)
* org-agenda-custom-commands:            設定オプション.      (line   6)
* org-agenda-diary-file:                 アジェンダのコマンド.
                                                              (line 447)
* org-agenda-dim-blocked-tasks:          TODO間の関係.        (line  38)
* org-agenda-entry-text-maxlines:        アジェンダのコマンド.
                                                              (line 143)
* org-agenda-exporter-settings <1>:      アジェンダのコマンド.
                                                              (line 490)
* org-agenda-exporter-settings:          アジェンダビューの出力.
                                                              (line  12)
* org-agenda-files <1>:                  アジェンダの項目をソートする.
                                                              (line   8)
* org-agenda-files <2>:                  アジェンダファイル.  (line   6)
* org-agenda-files:                      iCalendarエクスポート.
                                                              (line  34)
* org-agenda-filter-preset:              アジェンダのコマンド.
                                                              (line 184)
* org-agenda-log-mode-items:             アジェンダのコマンド.
                                                              (line 109)
* org-agenda-ndays:                      毎週／毎日のアジェンダ.
                                                              (line  15)
* org-agenda-overriding-header:          特別なアジェンダビュー.
                                                              (line  42)
* org-agenda-prefix-format:              表示とソート.        (line   6)
* org-agenda-restore-windows-after-quit: アジェンダビュー.    (line  43)
* org-agenda-show-inherited-tags:        アジェンダのコマンド.
                                                              (line 306)
* org-agenda-skip-archived-trees:        ファイル内部でのアーカイブ.
                                                              (line  24)
* org-agenda-skip-function <1>:          特別なアジェンダビュー.
                                                              (line  45)
* org-agenda-skip-function <2>:          マッピングAPIを使う. (line  46)
* org-agenda-skip-function:              特別なアジェンダビュー.
                                                              (line   6)
* org-agenda-skip-function-global:       特別なアジェンダビュー.
                                                              (line   6)
* org-agenda-skip-scheduled-if-done:     デッドラインとスケジュール.
                                                              (line  30)
* org-agenda-sorting-strategy:           アジェンダの項目をソートする.
                                                              (line  31)
* org-agenda-span <1>:                   毎週／毎日のアジェンダ.
                                                              (line  15)
* org-agenda-span:                       アジェンダのコマンド.
                                                              (line  77)
* org-agenda-start-with-clockreport-mode: アジェンダのコマンド.
                                                              (line 134)
* org-agenda-start-with-entry-text-mode: アジェンダのコマンド.
                                                              (line 143)
* org-agenda-start-with-follow-mode:     アジェンダのコマンド.
                                                              (line  48)
* org-agenda-tags-column:                表示とソート.        (line   6)
* org-agenda-tags-todo-honor-ignore-options: タグとプロパティとのマッチング.
                                                              (line  22)
* org-agenda-text-search-extra-files <1>: 検索ビュー.         (line  27)
* org-agenda-text-search-extra-files:    アジェンダのコマンド選択.
                                                              (line  36)
* org-agenda-time-grid <1>:              アジェンダのコマンド.
                                                              (line 151)
* org-agenda-time-grid:                  時刻の仕様.          (line  42)
* org-agenda-todo-ignore-deadlines:      グローバルなTODOリスト.
                                                              (line  38)
* org-agenda-todo-ignore-scheduled:      グローバルなTODOリスト.
                                                              (line  38)
* org-agenda-todo-ignore-timestamp:      グローバルなTODOリスト.
                                                              (line  38)
* org-agenda-todo-ignore-with-date:      グローバルなTODOリスト.
                                                              (line  38)
* org-agenda-todo-list-sublevels <1>:    グローバルなTODOリスト.
                                                              (line  46)
* org-agenda-todo-list-sublevels:        タスクの分割.        (line   6)
* org-agenda-use-time-grid <1>:          時刻の仕様.          (line  42)
* org-agenda-use-time-grid:              アジェンダのコマンド.
                                                              (line 151)
* org-agenda-window-setup:               アジェンダビュー.    (line  43)
* org-alphabetical-lists:                エントリー中の階層構造.
                                                              (line  21)
* org-archive-default-command <1>:       アーカイブ.          (line  12)
* org-archive-default-command:           アジェンダのコマンド.
                                                              (line 289)
* org-archive-location <1>:              サブツリーを移動する.
                                                              (line  10)
* org-archive-location:                  バッファ内での変数制御.
                                                              (line  15)
* org-archive-save-context-info:         サブツリーを移動する.
                                                              (line  31)
* org-attach-directory:                  添付.                (line   6)
* org-attach-method:                     添付.                (line  31)
* org-babel-default-header-args <1>:     Orgプロパティでのヘッダー引数.
                                                              (line  23)
* org-babel-default-header-args:         システム全体のヘッダー引数.
                                                              (line   6)
* org-calc-default-modes:                Calc用の数式構文.    (line  13)
* org-clock-idle-time:                   空き時間の解決.      (line  10)
* org-clock-into-drawer:                 計測コマンド.        (line   7)
* org-clock-modeline-total:              計測コマンド.        (line  17)
* org-clocktable-defaults:               クロックテーブル.    (line  41)
* org-coderef-label-format:              リテラルの例.        (line  54)
* org-columns-default-format <1>:        アジェンダのコマンド.
                                                              (line 166)
* org-columns-default-format <2>:        アジェンダのカラム表示.
                                                              (line  18)
* org-columns-default-format <3>:        工数の見積もり.      (line  31)
* org-columns-default-format:            カラムビューの利用.  (line  10)
* org-columns-skip-archived-trees:       ファイル内部でのアーカイブ.
                                                              (line  34)
* org-combined-agenda-icalendar-file:    iCalendarエクスポート.
                                                              (line  40)
* org-confirm-babel-evaluate:            コード評価の安全性.  (line  33)
* org-confirm-elisp-link-function:       コード評価の安全性.  (line  53)
* org-confirm-shell-link-function:       コード評価の安全性.  (line  50)
* org-create-file-search-functions:      カスタム検索.        (line  12)
* org-ctrl-c-ctrl-c-hook:                状況依存のコマンド.  (line   6)
* org-ctrl-k-protect-subtree:            ヘッドライン.        (line   6)
* org-cycle-emulate-tab:                 表示、非表示の切り替え.
                                                              (line  16)
* org-cycle-global-at-bob:               表示、非表示の切り替え.
                                                              (line  16)
* org-cycle-include-plain-lists:         エントリー中の階層構造.
                                                              (line  81)
* org-cycle-separator-lines:             ヘッドライン.        (line  23)
* org-deadline-warning-days <1>:         デッドラインとスケジュール.
                                                              (line  13)
* org-deadline-warning-days:             デッドライン／スケジュールを挿入.
                                                              (line  31)
* org-default-notes-file <1>:            キャプチャの設定.    (line   9)
* org-default-notes-file:                テンプレートの要素.  (line  46)
* org-default-priority <1>:              プロパティ.          (line  38)
* org-default-priority:                  バッファ内での変数制御.
                                                              (line  49)
* org-display-custom-times <1>:          公開オプション.      (line  12)
* org-display-custom-times:              カスタムタイムフォーマット.
                                                              (line   6)
* org-display-internal-link-with-indirect-buffer: リンクの扱い.
                                                              (line 130)
* org-disputed-keys:                     衝突.                (line  33)
* org-done (フェイス):                   TODOキーワードのフェイス.
                                                              (line   6)
* org-drawers <1>:                       バッファ内での変数制御.
                                                              (line  41)
* org-drawers:                           引き出し.            (line   6)
* org-effort-property:                   工数の見積もり.      (line   6)
* org-empty-line-terminates-plain-lists: エントリー中の階層構造.
                                                              (line  38)
* org-enable-table-editor:               組み込みのテーブルエディタ.
                                                              (line  32)
* org-enforce-todo-dependencies:         TODO間の関係.        (line  42)
* org-entities <1>:                      特殊文字.            (line   6)
* org-entities:                          特殊記号.            (line  14)
* org-execute-file-search-functions:     カスタム検索.        (line  12)
* org-export-ascii-links-to-notes:       ASCII/Latin-1/UTF-8エクスポート.
                                                              (line  57)
* org-export-author-info:                公開オプション.      (line  12)
* org-export-creator-info:               公開オプション.      (line  12)
* org-export-default-language <1>:       エクスポートオプション.
                                                              (line  22)
* org-export-default-language:           公開オプション.      (line  12)
* org-export-docbook-default-image-attributes: DocBookエクスポートでの画像.
                                                              (line  17)
* org-export-docbook-doctype:            特殊文字.            (line   6)
* org-export-docbook-inline-image-extensions: DocBookエクスポートでの画像.
                                                              (line  38)
* org-export-docbook-xsl-fo-proc-command: DocBookエクスポートコマンド.
                                                              (line  20)
* org-export-docbook-xslt-proc-command:  DocBookエクスポートコマンド.
                                                              (line  20)
* org-export-docbook-xslt-stylesheet:    DocBookエクスポートコマンド.
                                                              (line  25)
* org-export-email:                      公開オプション.      (line  12)
* org-export-exclude-tags <1>:           選択エクスポート.    (line   6)
* org-export-exclude-tags:               公開オプション.      (line  12)
* org-export-headline-levels <1>:        公開オプション.      (line  12)
* org-export-headline-levels:            見出しとセクション.  (line   6)
* org-export-highlight-first-table-line: 公開オプション.      (line  12)
* org-export-html-expand:                公開オプション.      (line  12)
* org-export-html-extension:             公開オプション.      (line  12)
* org-export-html-extra:                 CSSサポート.         (line  38)
* org-export-html-inline-images <1>:     公開オプション.      (line  12)
* org-export-html-inline-images:         HTMLエクスポートでの画像.
                                                              (line   6)
* org-export-html-link-home:             公開オプション.      (line  12)
* org-export-html-link-org-files-as-html: 公開オプション.     (line  12)
* org-export-html-link-up:               公開オプション.      (line  12)
* org-export-html-postamble:             公開オプション.      (line  12)
* org-export-html-preamble:              公開オプション.      (line  12)
* org-export-html-style <1>:             CSSサポート.         (line  38)
* org-export-html-style:                 公開オプション.      (line  12)
* org-export-html-style-default:         CSSサポート.         (line  38)
* org-export-html-style-extra:           公開オプション.      (line  12)
* org-export-html-style-include-default <1>: 公開オプション.  (line  12)
* org-export-html-style-include-default: CSSサポート.         (line  38)
* org-export-html-style-include-scripts: 公開オプション.      (line  12)
* org-export-html-table-tag <1>:         公開オプション.      (line  12)
* org-export-html-table-tag:             HTMLエクスポートでのテーブル.
                                                              (line   6)
* org-export-html-tag-class-prefix:      CSSサポート.         (line   6)
* org-export-html-todo-kwd-class-prefix: CSSサポート.         (line   6)
* org-export-html-use-infojs:            JavaScriptサポート.  (line  62)
* org-export-html-with-timestamp:        公開オプション.      (line  12)
* org-export-latex-classes:              ヘッダーと章立て.    (line   8)
* org-export-latex-default-class:        ヘッダーと章立て.    (line   8)
* org-export-latex-default-packages-alist: ヘッダーと章立て.  (line   8)
* org-export-latex-packages-alist:       ヘッダーと章立て.    (line   8)
* org-export-preserve-breaks:            公開オプション.      (line  12)
* org-export-publishing-directory:       公開オプション.      (line  12)
* org-export-run-in-background:          エクスポート用コマンド選択画面.
                                                              (line  28)
* org-export-section-number-format:      公開オプション.      (line  12)
* org-export-select-tags <1>:            選択エクスポート.    (line   6)
* org-export-select-tags:                公開オプション.      (line  12)
* org-export-skip-text-before-1st-heading <1>: 冒頭のテキスト.
                                                              (line  11)
* org-export-skip-text-before-1st-heading: 公開オプション.    (line  12)
* org-export-taskjuggler-default-reports: TaskJugglerエクスポート.
                                                              (line 113)
* org-export-taskjuggler-project-tag:    TaskJugglerエクスポート.
                                                              (line  31)
* org-export-taskjuggler-resource-tag:   TaskJugglerエクスポート.
                                                              (line  43)
* org-export-with-LaTeX-fragments <1>:   LaTeXのコード片.     (line  38)
* org-export-with-LaTeX-fragments:       公開オプション.      (line  12)
* org-export-with-TeX-macros:            公開オプション.      (line  12)
* org-export-with-archived-trees <1>:    公開オプション.      (line  12)
* org-export-with-archived-trees:        ファイル内部でのアーカイブ.
                                                              (line  30)
* org-export-with-drawers:               公開オプション.      (line  12)
* org-export-with-emphasize:             公開オプション.      (line  12)
* org-export-with-fixed-width:           公開オプション.      (line  12)
* org-export-with-footnotes:             公開オプション.      (line  12)
* org-export-with-priority:              公開オプション.      (line  12)
* org-export-with-section-numbers:       公開オプション.      (line  12)
* org-export-with-special-strings:       公開オプション.      (line  12)
* org-export-with-sub-superscripts <1>:  下付き文字と上付き文字.
                                                              (line  14)
* org-export-with-sub-superscripts:      公開オプション.      (line  12)
* org-export-with-tables:                公開オプション.      (line  12)
* org-export-with-tags:                  公開オプション.      (line  12)
* org-export-with-timestamps:            公開オプション.      (line  12)
* org-export-with-toc <1>:               目次.                (line   6)
* org-export-with-toc:                   公開オプション.      (line  12)
* org-export-with-todo-keywords:         公開オプション.      (line  12)
* org-fast-tag-selection-include-todo:   TODOの状態への素早い対応手段.
                                                              (line  15)
* org-fast-tag-selection-single-key:     タグの設定.          (line 135)
* org-file-apps <1>:                     添付.                (line  47)
* org-file-apps:                         リンクの扱い.        (line 104)
* org-footnote-auto-adjust <1>:          バッファ内での変数制御.
                                                              (line 133)
* org-footnote-auto-adjust:              脚注.                (line  56)
* org-footnote-auto-label <1>:           脚注.                (line  43)
* org-footnote-auto-label:               バッファ内での変数制御.
                                                              (line 133)
* org-footnote-define-inline <1>:        脚注.                (line  56)
* org-footnote-define-inline:            バッファ内での変数制御.
                                                              (line 133)
* org-footnote-section:                  脚注.                (line  56)
* org-format-latex-header:               LaTeXのコード片.     (line   6)
* org-format-latex-options <1>:          LaTeXのコード片.     (line  34)
* org-format-latex-options:              LaTeXコード片のプレビュー.
                                                              (line  19)
* org-from-is-user-regexp:               テンプレートの拡張.  (line  42)
* org-global-properties <1>:             プロパティの表記法.  (line  39)
* org-global-properties:                 工数の見積もり.      (line  31)
* org-goto-auto-isearch:                 移動.                (line  26)
* org-goto-interface:                    移動.                (line  37)
* org-hide (face):                       アウトラインの「*」を取り除く.
                                                              (line  63)
* org-hide-block-startup:                ブロック.            (line   6)
* org-hide-leading-stars <1>:            バッファ内での変数制御.
                                                              (line 117)
* org-hide-leading-stars:                アウトラインの「*」を取り除く.
                                                              (line  48)
* org-hierarchical-checkbox-statistics:  チェックボックス.    (line  32)
* org-hierarchical-todo-statistics:      タスクの分割.        (line  23)
* org-highest-priority <1>:              プロパティ.          (line  38)
* org-highest-priority:                  バッファ内での変数制御.
                                                              (line  49)
* org-icalendar-alarm-time:              iCalendarエクスポート.
                                                              (line   6)
* org-icalendar-categories:              iCalendarエクスポート.
                                                              (line   6)
* org-icalendar-include-body:            iCalendarエクスポート.
                                                              (line  44)
* org-icalendar-include-todo:            iCalendarエクスポート.
                                                              (line   6)
* org-icalendar-store-UID:               iCalendarエクスポート.
                                                              (line  19)
* org-icalendar-use-deadline:            iCalendarエクスポート.
                                                              (line   6)
* org-icalendar-use-scheduled:           iCalendarエクスポート.
                                                              (line   6)
* org-imenu-depth:                       協調.                (line  37)
* org-infojs-options:                    JavaScriptサポート.  (line  62)
* org-insert-mode-line-in-empty-file:    アクティベーション.  (line  29)
* org-irc-link-to-logs:                  リンクの扱い.        (line  43)
* org-keep-stored-link-after-insertion:  リンクの扱い.        (line  64)
* org-latex-low-levels:                  LaTeX/PDFエクスポートコマンド.
                                                              (line  36)
* org-link-abbrev-alist <1>:             リンクの省略記法.    (line  12)
* org-link-abbrev-alist:                 バッファ内での変数制御.
                                                              (line  45)
* org-link-to-org-use-id:                リンクの扱い.        (line  20)
* org-list-automatic-rules <1>:          エントリー中の階層構造.
                                                              (line 145)
* org-list-automatic-rules:              チェックボックス.    (line   6)
* org-list-demote-modify-bullet:         エントリー中の階層構造.
                                                              (line  69)
* org-list-end-regexp:                   エントリー中の階層構造.
                                                              (line  38)
* org-list-ending-method:                エントリー中の階層構造.
                                                              (line  38)
* org-log-done <1>:                      アジェンダのコマンド.
                                                              (line 109)
* org-log-done <2>:                      作業の状態変化の追跡.
                                                              (line  25)
* org-log-done:                          バッファ内での変数制御.
                                                              (line  92)
* org-log-into-drawer <1>:               アジェンダのコマンド.
                                                              (line 332)
* org-log-into-drawer:                   作業の状態変化の追跡.
                                                              (line   6)
* org-log-note-clock-out <1>:            バッファ内での変数制御.
                                                              (line  92)
* org-log-note-clock-out:                計測コマンド.        (line  31)
* org-log-refile:                        ノートの再配置.      (line  12)
* org-log-repeat <1>:                    バッファ内での変数制御.
                                                              (line  92)
* org-log-repeat:                        繰り返されるタスク.  (line  32)
* org-log-states-order-reversed:         作業の状態変化の追跡.
                                                              (line   6)
* org-lowest-priority <1>:               バッファ内での変数制御.
                                                              (line  49)
* org-lowest-priority:                   プロパティ.          (line  38)
* org-odd-levels-only <1>:               タグとプロパティとのマッチング.
                                                              (line  62)
* org-odd-levels-only <2>:               特別なアジェンダビュー.
                                                              (line  45)
* org-odd-levels-only <3>:               アウトラインの「*」を取り除く.
                                                              (line  70)
* org-odd-levels-only:                   バッファ内での変数制御.
                                                              (line 117)
* org-outline-path-complete-in-steps:    ノートの再配置.      (line  12)
* org-overriding-columns-format:         アジェンダのカラム表示.
                                                              (line  18)
* org-plain-list-ordered-item-terminator: エントリー中の階層構造.
                                                              (line 145)
* org-popup-calendar-for-date-prompt:    日付／時間プロンプト.
                                                              (line  66)
* org-priority-faces:                    プロパティ.          (line  12)
* org-priority-start-cycle-with-default: プロパティ.          (line  32)
* org-property-allowed-value-functions:  プロパティAPIを使う. (line  67)
* org-publish-project-alist <1>:         公開オプション.      (line  66)
* org-publish-project-alist:             プロジェクトのリスト.
                                                              (line   6)
* org-publish-use-timestamps-flag:       公開の開始.          (line  22)
* org-put-time-stamp-overlays:           バッファ内での変数制御.
                                                              (line 126)
* org-read-date-display-live:            日付／時間プロンプト.
                                                              (line  78)
* org-read-date-prefer-future:           日付／時間プロンプト.
                                                              (line   6)
* org-refile-allow-creating-parent-nodes: ノートの再配置.     (line  12)
* org-refile-targets:                    ノートの再配置.      (line  12)
* org-refile-use-cache:                  ノートの再配置.      (line  12)
* org-refile-use-outline-path:           ノートの再配置.      (line  12)
* org-remove-highlights-with-change <1>: ツリーの抽出.        (line  21)
* org-remove-highlights-with-change:     計測コマンド.        (line  63)
* org-replace-disputed-keys:             衝突.                (line  18)
* org-return-follows-link:               リンクの扱い.        (line 121)
* org-reverse-note-order:                ノートの再配置.      (line  12)
* org-show-entry-below:                  ツリーの抽出.        (line   6)
* org-show-following-heading:            ツリーの抽出.        (line   6)
* org-show-hierarchy-above:              ツリーの抽出.        (line   6)
* org-show-siblings:                     ツリーの抽出.        (line   6)
* org-sort-agenda-noeffort-is-high:      アジェンダのコマンド.
                                                              (line 201)
* org-sparse-tree-open-archived-trees:   ファイル内部でのアーカイブ.
                                                              (line  19)
* org-special-ctrl-a/e:                  ヘッドライン.        (line   6)
* org-special-ctrl-k:                    ヘッドライン.        (line   6)
* org-speed-commands-user:               スピードキー.        (line   6)
* org-startup-align-all-tables <1>:      列幅と整列.          (line  35)
* org-startup-align-all-tables:          バッファ内での変数制御.
                                                              (line  80)
* org-startup-folded <1>:                バッファ内での変数制御.
                                                              (line  70)
* org-startup-folded:                    表示、非表示の切り替え.
                                                              (line  56)
* org-startup-indented:                  バッファ内での変数制御.
                                                              (line  76)
* org-startup-with-inline-images <1>:    リンクの扱い.        (line 134)
* org-startup-with-inline-images:        バッファ内での変数制御.
                                                              (line  86)
* org-store-link-functions:              ハイパーリンクのタイプの追加.
                                                              (line  66)
* org-stuck-projects:                    詳細が未決定なプロジェクト.
                                                              (line  18)
* org-support-shift-select <1>:          エントリー中の階層構造.
                                                              (line 172)
* org-support-shift-select <2>:          衝突.                (line   6)
* org-support-shift-select:              エントリー中の階層構造.
                                                              (line 110)
* org-sycle-open-archived-trees:         ファイル内部でのアーカイブ.
                                                              (line  12)
* org-table-auto-blank-field:            組み込みのテーブルエディタ.
                                                              (line  32)
* org-table-copy-increment:              組み込みのテーブルエディタ.
                                                              (line 164)
* org-table-export-default-format:       組み込みのテーブルエディタ.
                                                              (line 202)
* org-table-formula:                     バッファ内での変数制御.
                                                              (line  32)
* org-table-formula-constants <1>:       協調.                (line  16)
* org-table-formula-constants <2>:       参照.                (line 101)
* org-table-formula-constants:           バッファ内での変数制御.
                                                              (line  32)
* org-table-use-standard-references <1>: 数式の編集とデバッグ.
                                                              (line   6)
* org-table-use-standard-references:     参照.                (line  20)
* org-tag-alist <1>:                     バッファ内での変数制御.
                                                              (line 157)
* org-tag-alist:                         タグの設定.          (line  21)
* org-tag-faces:                         タグ.                (line  10)
* org-tag-persistent-alist:              タグの設定.          (line  37)
* org-tags-column:                       タグの設定.          (line  10)
* org-tags-exclude-from-inheritance:     タグの継承.          (line  20)
* org-tags-match-list-sublevels <1>:     タグとプロパティとのマッチング.
                                                              (line  22)
* org-tags-match-list-sublevels <2>:     プロパティの検索.    (line  18)
* org-tags-match-list-sublevels <3>:     タグの継承.          (line  23)
* org-tags-match-list-sublevels:         タグの検索.          (line  18)
* org-time-stamp-custom-formats:         カスタムタイムフォーマット.
                                                              (line   6)
* org-time-stamp-overlay-formats:        バッファ内での変数制御.
                                                              (line 126)
* org-time-stamp-rounding-minutes:       タイムスタンプの作成.
                                                              (line  24)
* org-todo (フェイス):                   TODOキーワードのフェイス.
                                                              (line   6)
* org-todo-keyword-faces:                TODOキーワードのフェイス.
                                                              (line   6)
* org-todo-keywords <1>:                 グローバルなTODOリスト.
                                                              (line  16)
* org-todo-keywords <2>:                 バッファ内での変数制御.
                                                              (line 172)
* org-todo-keywords <3>:                 TODOの基本.          (line  40)
* org-todo-keywords:                     TODO拡張.            (line   6)
* org-todo-repeat-to-state:              繰り返されるタスク.  (line  17)
* org-todo-state-tags-triggers:          TODOの基本.          (line  66)
* org-track-ordered-property-with-tag <1>: TODO間の関係.      (line  29)
* org-track-ordered-property-with-tag:   チェックボックス.    (line  82)
* org-treat-S-cursor-todo-selection-as-state-change: TODOの基本.
                                                              (line  32)
* org-treat-insert-todo-heading-as-state-change: 見出し位置と階層の変更.
                                                              (line  27)
* org-use-property-inheritance <1>:      iCalendarエクスポート.
                                                              (line  44)
* org-use-property-inheritance <2>:      プロパティの継承.    (line   6)
* org-use-property-inheritance:          プロパティAPIを使う. (line  18)
* org-use-speed-commands:                スピードキー.        (line   6)
* org-use-tag-inheritance:               タグの継承.          (line  20)
* org-yank-adjusted-subtrees:            見出し位置と階層の変更.
                                                              (line  76)
* org-yank-folded-subtrees:              見出し位置と階層の変更.
                                                              (line  76)
* parse-time-months:                     日付／時間プロンプト.
                                                              (line  53)
* parse-time-weekdays:                   日付／時間プロンプト.
                                                              (line  53)
* ps-landscape-mode:                     アジェンダビューの出力.
                                                              (line  19)
* ps-number-of-columns:                  アジェンダビューの出力.
                                                              (line  19)
* user-full-name <1>:                    エクスポートオプション.
                                                              (line  22)
* user-full-name:                        公開オプション.      (line  12)
* user-mail-address <1>:                 公開オプション.      (line  12)
* user-mail-address:                     エクスポートオプション.
                                                              (line  22)



Tag Table:
Node: Top1368
Node: まえがき25841
Node: 概要26338
Node: インストール30989
Node: アクティベーション34535
Ref: アクティベーション-Footnote-136967
Node: フィードバック37191
Ref: フィードバック-Footnote-141252
Node: 慣例41409
Node: ドキュメントの構造43439
Node: アウトライン44675
Node: ヘッドライン45698
Ref: ヘッドライン-Footnote-147176
Node: 表示、非表示の切り替え47404
Ref: 表示、非表示の切り替え-Footnote-151716
Ref: 表示、非表示の切り替え-Footnote-251815
Ref: 表示、非表示の切り替え-Footnote-351873
Node: 移動52228
Node: 見出し位置と階層の変更53956
Ref: 見出し位置と階層の変更-Footnote-163008
Node: ツリーの抽出63149
Ref: ツリーの抽出-Footnote-166827
Ref: ツリーの抽出-Footnote-267093
Ref: ツリーの抽出-Footnote-367180
Node: エントリー中の階層構造67413
Ref: エントリー中の階層構造-Footnote-178876
Ref: エントリー中の階層構造-Footnote-279533
Ref: エントリー中の階層構造-Footnote-379664
Ref: エントリー中の階層構造-Footnote-479946
Ref: エントリー中の階層構造-Footnote-580291
Ref: エントリー中の階層構造-Footnote-680397
Ref: エントリー中の階層構造-Footnote-780475
Ref: エントリー中の階層構造-Footnote-880780
Ref: エントリー中の階層構造-Footnote-980921
Node: 引き出し81049
Ref: 引き出し-Footnote-182899
Node: ブロック83047
Node: 脚注83856
Ref: 脚注-Footnote-190063
Ref: 脚注-Footnote-290190
Node: Orgstructモード90294
Node: テーブル91932
Node: 組み込みのテーブルエディタ92786
Node: 列幅と整列106488
Ref: 列幅と整列-Footnote-1110182
Ref: 列幅と整列-Footnote-2110240
Node: 行のグループ110379
Node: Orgtblモード112240
Node: スプレッドシート113372
Node: 参照115084
Ref: 参照-Footnote-1123437
Ref: 参照-Footnote-2123733
Ref: 参照-Footnote-3124073
Ref: 参照-Footnote-4124326
Ref: 参照-Footnote-5124499
Node: Calc用の数式構文124830
Ref: Calc用の数式構文-Footnote-1128203
Node: Lisp用の数式構文128562
Node: フィールドと範囲の数式130735
Node: 列の数式133544
Node: 数式の編集とデバッグ135842
Node: テーブルの更新141870
Node: 一歩進んだ機能143600
Node: Org-Plot148936
Node: ハイパーリンク152984
Node: リンクのフォーマット153904
Node: 内部リンク155728
Ref: 内部リンク-Footnote-1158334
Ref: 内部リンク-Footnote-2158573
Node: ラジオターゲット158874
Node: 外部リンク159832
Node: リンクの扱い164330
Ref: リンクの扱い-Footnote-1174752
Ref: リンクの扱い-Footnote-2175271
Ref: リンクの扱い-Footnote-3175627
Ref: リンクの扱い-Footnote-4175744
Ref: リンクの扱い-Footnote-5175838
Node: Org外でのリンク利用175913
Node: リンクの省略記法176559
Node: 検索オプション179394
Ref: 検索オプション-Footnote-1181864
Node: カスタム検索181976
Node: TODOアイテム183405
Ref: TODOアイテム-Footnote-1184908
Node: TODOの基本185075
Node: TODO拡張188820
Node: ワークフローの状態190138
Ref: ワークフローの状態-Footnote-1191868
Node: タスクの種別191985
Ref: タスクの種別-Footnote-1194140
Node: キーワードセット194255
Node: TODOの状態への素早い対応手段196693
Ref: TODOの状態への素早い対応手段-Footnote-1197705
Node: ファイル毎のキーワード198049
Ref: ファイル毎のキーワード-Footnote-1199904
Node: TODOキーワードのフェイス200186
Node: TODO間の関係201582
Node: 進行記録204527
Node: アイテムの完了205404
Ref: アイテムの完了-Footnote-1206721
Ref: アイテムの完了-Footnote-2206801
Node: 作業の状態変化の追跡206885
Ref: 作業の状態変化の追跡-Footnote-1210751
Ref: 作業の状態変化の追跡-Footnote-2210825
Node: 習慣の追跡211231
Node: プロパティ216400
Ref: プロパティ-Footnote-1219108
Node: タスクの分割219209
Ref: タスクの分割-Footnote-1221795
Node: チェックボックス221952
Ref: チェックボックス-Footnote-1228491
Ref: チェックボックス-Footnote-2228641
Node: タグ228849
Node: タグの継承230142
Ref: タグの継承-Footnote-1231616
Ref: タグの継承-Footnote-2231764
Node: タグの設定231988
Ref: タグの設定-Footnote-1240014
Node: タグの検索240120
Node: プロパティとカラム241709
Node: プロパティの表記法243565
Node: スペシャルプロパティ247262
Node: プロパティの検索249075
Node: プロパティの継承250964
Node: カラムビュー253264
Node: カラムの定義254938
Node: カラム定義の有効範囲255477
Node: カラム・アトリビュート256586
Ref: カラム・アトリビュート-Footnote-1261874
Node: カラムビューの利用262022
Node: カラム表示の保存265525
Ref: カラム表示の保存-Footnote-1269569
Node: プロパティAPI269753
Node: 日付や時間270244
Node: タイムスタンプ271572
Ref: タイムスタンプ-Footnote-1274957
Node: タイムスタンプの作成275205
Node: 日付／時間プロンプト278997
Ref: 日付／時間プロンプト-Footnote-1284459
Ref: 日付／時間プロンプト-Footnote-2284672
Ref: 日付／時間プロンプト-Footnote-3284797
Node: カスタムタイムフォーマット284956
Node: デッドラインとスケジュール287416
Ref: デッドラインとスケジュール-Footnote-1291154
Node: デッドライン／スケジュールを挿入291366
Ref: デッドライン／スケジュールを挿入-Footnote-1294200
Ref: デッドライン／スケジュールを挿入-Footnote-2294390
Ref: デッドライン／スケジュールを挿入-Footnote-3294504
Node: 繰り返されるタスク294619
Ref: 繰り返されるタスク-Footnote-1299322
Ref: 繰り返されるタスク-Footnote-2299578
Node: 作業に費やした時間の計測299875
Ref: 作業に費やした時間の計測-Footnote-1301406
Node: 計測コマンド301573
Ref: 計測コマンド-Footnote-1306507
Ref: 計測コマンド-Footnote-2306671
Ref: 計測コマンド-Footnote-3306724
Ref: 計測コマンド-Footnote-4306787
Node: クロックテーブル306883
Ref: クロックテーブル-Footnote-1314807
Ref: クロックテーブル-Footnote-2314935
Node: 空き時間の解決315138
Ref: 空き時間の解決-Footnote-1319595
Node: 工数の見積もり320089
Ref: 工数の見積もり-Footnote-1323754
Ref: 工数の見積もり-Footnote-2323862
Node: 相対時間タイマー324005
Node: カウントダウンタイマー326711
Node: キャプチャ／再配置／アーカイブ327494
Node: キャプチャ328911
Node: キャプチャの設定330754
Ref: キャプチャの設定-Footnote-1331262
Node: キャプチャの使用331348
Node: キャプチャテンプレート334083
Node: テンプレートの要素336339
Node: テンプレートの拡張343048
Ref: テンプレートの拡張-Footnote-1347203
Ref: テンプレートの拡張-Footnote-2347336
Ref: テンプレートの拡張-Footnote-3347635
Node: 添付347751
Ref: 添付-Footnote-1352148
Node: RSSフィード352339
Node: プロトコル354479
Node: ノートの再配置355425
Ref: ノートの再配置-Footnote-1358168
Node: アーカイブ358283
Node: サブツリーを移動する359202
Ref: サブツリーを移動する-Footnote-1361460
Node: ファイル内部でのアーカイブ361986
Node: アジェンダビュー365424
Node: アジェンダファイル368756
Ref: アジェンダファイル-Footnote-1373157
Ref: アジェンダファイル-Footnote-2373372
Node: アジェンダのコマンド選択373678
Ref: アジェンダのコマンド選択-Footnote-1376993
Ref: アジェンダのコマンド選択-Footnote-2377120
Node: 組み込みのアジェンダビュー377288
Node: 毎週／毎日のアジェンダ378214
Ref: 毎週／毎日のアジェンダ-Footnote-1385109
Ref: 毎週／毎日のアジェンダ-Footnote-2385491
Node: グローバルなTODOリスト385604
Node: タグとプロパティとのマッチング389419
Node: タイムライン398637
Node: 検索ビュー399801
Node: 詳細が未決定なプロジェクト401813
Ref: 詳細が未決定なプロジェクト-Footnote-1405394
Node: 表示とソート405427
Node: カテゴリ406614
Ref: カテゴリ-Footnote-1407754
Node: 時刻の仕様408473
Node: アジェンダの項目をソートする410982
Node: アジェンダのコマンド413214
Ref: アジェンダのコマンド-Footnote-1443787
Ref: アジェンダのコマンド-Footnote-2443902
Ref: アジェンダのコマンド-Footnote-3444597
Node: カスタムアジェンダビュー444732
Node: 検索式の保存445699
Ref: 検索式の保存-Footnote-1449356
Node: ブロックアジェンダ449544
Node: 設定オプション451316
Node: アジェンダビューの出力455629
Ref: アジェンダビューの出力-Footnote-1462492
Ref: アジェンダビューの出力-Footnote-2462596
Ref: アジェンダビューの出力-Footnote-3462861
Ref: アジェンダビューの出力-Footnote-4463192
Node: アジェンダのカラム表示463328
Node: マークアップ467404
Node: 構造化されたマークアップの要素468746
Node: ドキュメントタイトル469659
Node: 見出しとセクション470789
Node: 目次471434
Node: 冒頭のテキスト472308
Node: リスト473785
Node: パラグラフ474237
Node: フットノートのマークアップ475594
Node: 強調と等幅476093
Node: 水平線のルール476610
Node: コメント行476963
Node: 画像とテーブル477657
Node: リテラルの例479414
Ref: リテラルの例-Footnote-1483816
Ref: リテラルの例-Footnote-2484937
Ref: リテラルの例-Footnote-3485116
Ref: リテラルの例-Footnote-4485336
Node: ファイルの挿入485455
Node: エントリのインデックス487309
Node: マクロ置換487957
Node: LaTeXの組み込み489005
Ref: LaTeXの組み込み-Footnote-1490125
Node: 特殊記号490343
Ref: 特殊記号-Footnote-1492268
Node: 下付き文字と上付き文字492423
Node: LaTeXのコード片494010
Ref: LaTeXのコード片-Footnote-1496698
Ref: LaTeXのコード片-Footnote-2496706
Ref: LaTeXのコード片-Footnote-3496943
Node: LaTeXコード片のプレビュー497138
Node: CDLaTeXモード498486
Ref: CDLaTeXモード-Footnote-1501613
Node: エクスポート501838
Node: 選択エクスポート504484
Node: エクスポートオプション505651
Ref: エクスポートオプション-Footnote-1511467
Node: エクスポート用コマンド選択画面511614
Ref: エクスポート用コマンド選択画面-Footnote-1513597
Node: ASCII/Latin-1/UTF-8エクスポート513729
Ref: ASCII/Latin-1/UTF-8エクスポート-Footnote-1517169
Ref: ASCII/Latin-1/UTF-8エクスポート-Footnote-2517242
Node: HTMLのエクスポート517338
Node: HTMLエクスポートコマンド518679
Ref: HTMLエクスポートコマンド-Footnote-1521438
Ref: HTMLエクスポートコマンド-Footnote-2521511
Node: HTMLタグの引用符521607
Node: HTMLエクスポートでのリンク522441
Node: HTMLエクスポートでのテーブル524019
Node: HTMLエクスポートでの画像524772
Ref: HTMLエクスポートでの画像-Footnote-1526471
Node: HTMLエクスポートでの数式フォーマット526553
Ref: HTMLエクスポートでの数式フォーマット-Footnote-1528448
Node: HTMLエクスポートでのテキストエリア528636
Node: CSSサポート529915
Ref: CSSサポート-Footnote-1533441
Ref: CSSサポート-Footnote-2533685
Node: JavaScriptサポート533911
Node: LaTeXとPDFエクスポート538708
Ref: LaTeXとPDFエクスポート-Footnote-1540078
Node: LaTeX/PDFエクスポートコマンド540410
Ref: LaTeX/PDFエクスポートコマンド-Footnote-1543018
Ref: LaTeX/PDFエクスポートコマンド-Footnote-2543091
Node: ヘッダーと章立て543186
Ref: ヘッダーと章立て-Footnote-1544660
Node: LaTeXコードの引用544780
Node: LaTeXエクスポートでのテーブル545634
Node: LaTeXエクスポートでの画像546932
Node: Beamerクラスのエクスポート548809
Node: DocBookエクスポート555775
Node: DocBookエクスポートコマンド556913
Ref: DocBookエクスポートコマンド-Footnote-1558870
Ref: DocBookエクスポートコマンド-Footnote-2558949
Node: DocBookコードの引用559033
Node: 章の繰り返し560433
Node: DocBookエクスポートでのテーブル561472
Node: DocBookエクスポートでの画像562070
Node: 特殊文字564461
Node: TaskJugglerエクスポート565738
Node: Freemindエクスポート572309
Node: XOXOエクスポート572738
Node: iCalendarエクスポート573347
Ref: iCalendarエクスポート-Footnote-1576929
Ref: iCalendarエクスポート-Footnote-2577041
Ref: iCalendarエクスポート-Footnote-3577180
Node: 公開577330
Node: 設定578385
Node: プロジェクトのリスト579236
Node: ソースと公開先580420
Node: ファイルの選択582284
Node: 公開アクション583469
Ref: 公開アクション-Footnote-1585673
Node: 公開オプション586158
Node: ファイルリンク付きの公開590103
Node: サイトマップ592426
Node: インデックスの生成595641
Node: ファイルのアップロード596413
Node: 設定例598694
Node: 簡単な例599248
Node: 複雑な例599925
Node: 公開の開始602206
Node: ソースコードとの連携603481
Node: コードブロックの構造605679
Node: ソースコードの編集607695
Node: コードブロックのエクスポート609967
Node: ソースコードの抽出612351
Node: コードブロックの評価614240
Ref: コードブロックの評価-Footnote-1617591
Ref: コードブロックの評価-Footnote-2618030
Node: Babelライブラリ618184
Node: 言語619299
Node: ヘッダー引数621733
Node: ヘッダー引数の利用622291
Node: システム全体のヘッダー引数623215
Node: 各言語のヘッダー引数624141
Node: バッファ全体のヘッダー引数624598
Node: Orgプロパティでのヘッダー引数625564
Node: コードブック指定のヘッダー引数626990
Node: 関数実行時のヘッダー引数629176
Node: ヘッダー引数の指定630022
Node: var631870
Node: results638776
Node: file644298
Node: dir645553
Node: exports649279
Node: tangle650258
Node: mkdirp651262
Node: comments651729
Node: no-expand653213
Node: session653860
Node: noweb654440
Node: cache656380
Node: sep658240
Node: hlines659099
Node: colnames660888
Node: rownames662469
Node: shebang663619
Node: eval664058
Node: 評価の結果664694
Node: Nowebでの参照の構文668585
Node: キーバインドと便利関数669869
Node: バッチ処理671513
Node: その他672757
Node: 補完673755
Node: 簡単なテンプレート676416
Node: スピードキー678121
Node: コード評価の安全性679216
Node: カスタマイズ682714
Node: バッファ内での変数制御683447
Ref: バッファ内での変数制御-Footnote-1694816
Node: 「C-c C-c」キーはとても忙しい694863
Node: アウトラインの「*」を取り除く697433
Ref: アウトラインの「*」を取り除く-Footnote-1702443
Ref: アウトラインの「*」を取り除く-Footnote-2702509
Ref: アウトラインの「*」を取り除く-Footnote-3702748
Ref: アウトラインの「*」を取り除く-Footnote-4702824
Ref: アウトラインの「*」を取り除く-Footnote-5702971
Node: TTYキー703155
Node: 連携705037
Node: 協調705425
Node: 衝突710223
Node: ハッキング715007
Node: フック716073
Node: アドオンパッケージ716587
Node: ハイパーリンクのタイプの追加717292
Node: 状況依存のコマンド722212
Ref: 状況依存のコマンド-Footnote-1724103
Node: 任意の構文によるテーブル724269
Node: ラジオテーブル726052
Node: LaTeXの例729159
Ref: LaTeXの例-Footnote-1733710
Ref: LaTeXの例-Footnote-2733926
Node: 変換関数734412
Ref: 変換関数-Footnote-1738177
Node: ラジオリスト738324
Node: ダイナミックブロック739778
Node: 特別なアジェンダビュー742836
Ref: 特別なアジェンダビュー-Footnote-1748579
Node: アジェンダ情報の抽出748770
Node: プロパティAPIを使う754056
Node: マッピングAPIを使う758486
Node: MobileOrg763862
Node: ディレクトリの設定766016
Ref: ディレクトリの設定-Footnote-1767540
Ref: ディレクトリの設定-Footnote-2767966
Node: ディレクトリへの出力768312
Ref: ディレクトリへの出力-Footnote-1769943
Ref: ディレクトリへの出力-Footnote-2770675
Node: MobileOrgからpullする770762
Ref: MobileOrgからpullする-Footnote-1774650
Ref: MobileOrgからpullする-Footnote-2774723
Node: 歴史と謝辞775317
Node: メインインデックス791936
Node: キーワードインデックス880660
Node: コマンドと関数インデックス940414
Node: 変数インデックス981741

End Tag Table


Local Variables:
coding: utf-8
End:
