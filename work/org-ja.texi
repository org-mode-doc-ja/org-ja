

\input texinfo
@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c %**start of header
@setfilename ../../info/org-ja
@settitle Org Mode マニュアル

@documentlanguage ja
@documentencoding utf-8
@iftex
@usedvipdfmx
@end iftex

@set VERSION 7.5
@set DATE March 2011

@c Use proper quote and backtick for code sections in PDF output
@c Cf. Texinfo manual 14.2
@set txicodequoteundirected
@set txicodequotebacktick

@c Version and Contact Info
@set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
@set AUTHOR Carsten Dominik
@set MAINTAINER Carsten Dominik
@set MAINTAINEREMAIL @email{carsten at orgmode dot org}
@set MAINTAINERCONTACT @uref{mailto:carsten at orgmode dot org,contact the maintainer}
@c %**end of header
@finalout


@c -----------------------------------------------------------------------------

@c Macro definitions for commands and keys
@c =======================================

@c The behavior of the key/command macros will depend on the flag cmdnames
@c When set, commands names are shown.  When clear, they are not shown.

@set cmdnames

@c Below we define the following macros for Org key tables:

@c orgkey{key}                        A key item
@c orgcmd{key,cmd}                    Key with command name
@c xorgcmd{key,cmmand}                Key with command name as @itemx
@c orgcmdnki{key,cmd}                 Like orgcmd, but do not index the key
@c orgcmdtkc{text,key,cmd}            Like orgcmd,special text instead of key
@c orgcmdkkc{key1,key2,cmd}           Two keys with one command name, use "or"
@c orgcmdkxkc{key1,key2,cmd}          Two keys with one command name, but
@c                                    different functions, so format as @itemx
@c orgcmdkskc{key1,key2,cmd}          Same as orgcmdkkc, but use "or short"
@c xorgcmdkskc{key1,key2,cmd}         Same as previous, but use @itemx
@c orgcmdkkcc{key1,key2,cmd1,cmd2}    Two keys and two commands

@c a key but no command
@c    Inserts:    @item key
@macro orgkey{key}
@kindex \key\
@item @kbd{\key\}
@end macro

@macro xorgkey{key}
@kindex \key\
@itemx @kbd{\key\}
@end macro

@c one key with a command
@c   Inserts:    @item KEY               COMMAND
@macro orgcmd{key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@item @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@item @kbd{\key\}
@end ifclear
@end macro

@c One key with one command, formatted using @itemx
@c   Inserts:    @itemx KEY               COMMAND
@macro xorgcmd{key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@itemx @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@itemx @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@itemx @kbd{\key\}
@end ifclear
@end macro

@c one key with a command, bit do not index the key
@c   Inserts:    @item KEY               COMMAND
@macro orgcmdnki{key,command}
@ifset cmdnames
@findex \command\
@iftex
@item @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@item @kbd{\key\}
@end ifclear
@end macro

@c one key with a command, and special text to replace key in item
@c   Inserts:    @item TEXT                    COMMAND
@macro orgcmdtkc{text,key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@item @kbd{\text\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\text\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@item @kbd{\text\}
@end ifclear
@end macro

@c two keys with one command
@c   Inserts:    @item KEY1 or KEY2            COMMAND
@macro orgcmdkkc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\}
@end ifclear
@end macro

@c Two keys with one command name, but different functions, so format as
@c @itemx
@c   Inserts:    @item KEY1
@c               @itemx KEY2                COMMAND
@macro orgcmdkxkc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\}
@itemx @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\}
@itemx @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\}
@itemx @kbd{\key2\}
@end ifclear
@end macro

@c Same as previous, but use "or short"
@c   Inserts:    @item KEY1 or short KEY2            COMMAND
@macro orgcmdkskc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\}
@end ifclear
@end macro

@c Same as previous, but use @itemx
@c   Inserts:    @itemx KEY1 or short KEY2            COMMAND
@macro xorgcmdkskc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\}
@end ifclear
@end macro

@c two keys with two commands
@c   Inserts:    @item KEY1                        COMMAND1
@c               @itemx KEY2                       COMMAND2
@macro orgcmdkkcc{key1,key2,command1,command2}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command1\
@findex \command2\
@iftex
@item @kbd{\key1\} @hskip 0pt plus 1filll @code{\command1\}
@itemx @kbd{\key2\} @hskip 0pt plus 1filll @code{\command2\}
@end iftex
@ifnottex
@item @kbd{\key1\} @tie{}@tie{}@tie{}@tie{}(@code{\command1\})
@itemx @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command2\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\}
@itemx @kbd{\key2\}
@end ifclear
@end macro
@c -----------------------------------------------------------------------------

@iftex
@c @hyphenation{time-stamp time-stamps time-stamp-ing time-stamp-ed}
@end iftex

@c Subheadings inside a table.
@macro tsubheading{text}
@ifinfo
@subsubheading \text\
@end ifinfo
@ifnotinfo
@item @b{\text\}
@end ifnotinfo
@end macro

@copying
このマニュアルは、Org-mode @value{VERSION}に対応しています。

Copyright @copyright{} 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free
Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant
Sections, with the Front-Cover texts being ``A GNU Manual,'' and with the
Back-Cover Texts as in (a) below.  A copy of the license is included in the
section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and modify
this GNU manual.  Buying copies from the FSF supports it in developing GNU
and promoting software freedom.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document separately
from the collection, you can do so by adding a copy of the license to the
document, as described in section 6 of the license.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Org Mode: (org-ja).        Outline-based notes management and organizer
                               (Japanese translation)
@end direntry

@titlepage
@title Org Mode マニュアル

@subtitle リリース @value{VERSION}
@author by Carsten Dominik
with contributions by David O'Toole, Bastien Guerry, Philip Rooke, Dan
Davison, Eric Schulte, and Thomas Dye

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, まえがき, (dir), (dir)
@top Org Mode マニュアル

@insertcopying
@end ifnottex

@menu
* まえがき::             さあ、はじめよう
* ドキュメントの構造::  ツリーはあなたの脳のように動作します。
* テーブル::             あっという間にフォーマットする魔法
* ハイパーリンク::    コンテクストにおけるノート
* TODOアイテム::         全ツリーの枝をTODOアイテムになれます
* タグ::                   見出しのタグ付けとタグの組み合せによる検索
* プロパティとカラム::  エントリーについての情報を保存する
* 日付や時間::          計画のためにアイテムを扱いやすくする
* キャプチャ／再配置／アーカイブ::  プロジェクトへの入出力
* アジェンダビュー::  さまざまな情報をビューにまとめて表示する
* マークアップ::       リッチなエクスポートのための下準備
* エクスポート::       ノートの共有と公開
* 公開::                   相互にリンクしたOrg-modeのファイルでウェブサイト
を作る
* ソースコードとの連携::  コードブロックの出力、評価、そしてtangle
* その他::                その他の機能
* ハッキング::          Org-modeをハックする方法
* MobileOrg::                モバイルデバイスでのタスクの閲覧とキャプチャ
* 歴史と謝辞::          Org-modeがどこからやってきたか
* メインインデックス::  Org-modeのコンセプトと特徴のインデックス
* キーワードインデックス::  キーバインドのインデックス
* コマンドと関数インデックス::  コマンドの名称と内部関数
* 変数インデックス::  マニュアルで言及した変数

@detailmenu
 --- ノードリストの細目 ---



まえがき



* 概要::                   Org-modeで何ができるか
* インストール::       Org-modeのインストール
* アクティベーション::  Org-modeを特定のバッファで有効にする方法
* フィードバック::    バグ報告、アイディア、パッチなど
* 慣例::                   マニュアルで使われる植字の慣例

ドキュメントの構造



* アウトライン::       Org-modeはoutline-modeをベースにしています
* ヘッドライン::       org-modeの階層構造の見出しをどう組み込むか
* 表示、非表示の切り替え::  簡単な操作で表示、非表示を切り替える
* 移動::                   他の見出しにジャンプする
* 見出し位置と階層の変更::  見出しの順序と階層を変更する
* ツリーの抽出::       文脈の中に埋め込まれた一致
* エントリー中の階層構造::  １つのエントリーの中に階層のある構造を追加する
* 引き出し::             いろいろなものを隠す
* ブロック::             ブロック単位で折りたたむ
* 脚注::                   org-modeの構文の中で脚注はどのように規定されるの
か
* Orgstructモード::       org-mode外のモードでの階層編集

テーブル



* 組み込みのテーブルエディタ::  単純なテーブル
* 列幅と整列::          自動設定を解除する
* 行のグループ::       縦の線を引き金にしてグループを作る
* Orgtblモード::          マイナーモードとしてのテーブルエディタ
* スプレッドシート::  テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする

スプレッドシート



* 参照::                   どうやって他のフィールドや範囲を参照するか
* Calc用の数式構文::   Calcを使って計算する
* Lisp用の数式構文::   Emacs Lispで数式を書く
* フィールドと範囲の数式::  特定の（範囲の）フィールドのための数式
* 列の数式::             カラム全体に有効な数式
* 数式の編集とデバッグ::  数式を修正する
* テーブルの更新::    依存関係にあるすべてのフィールドを再計算する
* 一歩進んだ機能::    フィールド名、パラメーター、自動再計算

ハイパーリンク



* リンクのフォーマット::  Org-modeでのリンクのフォーマット
* 内部リンク::          現在のファイルの別の場所へのリンク
* 外部リンク::          URL形式のリンク
* リンクの扱い::       創造、挿入、追随
* Org外でのリンク利用::  Cのソースコードからのリンク？
* リンクの省略記法::  複雑なリンクを書くためのショートカット
* 検索オプション::    特定の場所へのリンク
* カスタム検索::       デフォルトの検索が充分ではないとき

内部リンク



* ラジオターゲット::  プレーンテキストのリンクをターゲットに起動させる

TODOアイテム



* TODOの基本::            登録したTODOのマーキングと表示
* TODO拡張::               ワークフローと割り当て
* 進行記録::             進行管理のための日付とメモ
* プロパティ::          他より重要なものもある
* タスクの分割::       タスクを管理可能な単位に分解する
* チェックボックス::  リストをチェックする

TODOキーワードの拡張的な使い方



* ワークフローの状態::  TODOからDONEまでの流れ
* タスクの種別::       私はこの仕事をこなす。フレッドは休む。
* キーワードセット::  ごちゃまぜにしてもやり方は見つけられる
* TODOの状態への素早い対応手段::  状態を選択するための文字
* ファイル毎のキーワード::  ファイルが違えば、やりたい事も違う
* TODOキーワードのフェイス::  状態のハイライト
* TODO間の関係::         他のタスクの終了を待たないといけないタスクがある時

進行記録



* アイテムの完了::    DONEとなったのはいつ？
* 作業の状態変化の追跡::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？

タグ



* タグの継承::          アウトラインのツリー構造に沿ってタグ付けされる
* タグの設定::          見出しにタグをつける
* タグの検索::          タグの組み合わせで検索する

プロパティ（属性）とカラム（列）



* プロパティの表記法::  プロパティの表記の仕方
* スペシャルプロパティ::  他のorg-modeの機能を使用する
* プロパティの検索::  プロパティ値の一致作業
* プロパティの継承::  ツリー上でのプロパティの伝達
* カラムビュー::       表による表示と修正
* プロパティAPI::       Lispプログラマのためのプロパティ

カラムビュー



* カラムの定義::       カラムの書式のプロパティ
* カラムビューの利用::  カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック

カラムの定義



* カラム定義の有効範囲::  カラム設定の定義範囲の指定方法は？
* カラム・アトリビュート::  カラム内の表示と値

日付と時刻



* タイムスタンプ::    ツリーに時間の割り当て
* タイムスタンプの作成::  タイムスタンプを挿入するコマンド
* デッドラインとスケジュール::  作業計画をたてる
* 作業に費やした時間の計測::  タスクに費やす時間を追跡する
* 工数の見積もり::    事前に作業活動を計画する
* 相対時間タイマー::  実行中のタイマーに関する注意
* カウントダウンタイマー::  タスクのカウントダウンタイマーを起動する

タイムスタンプの作成



* 日付／時間プロンプト::  日付と時刻入力のサポート
* カスタムタイムフォーマット::  日付を異なる見た目にする

デッドラインとスケジュール



* デッドライン／スケジュールを挿入::  計画項目
* 繰り返されるタスク::  何度も現れる項目

作業に費やした時間の計測



* 計測コマンド::       時計の開始と終了
* クロックテーブル::  詳細な報告
* 空き時間の解決::    空いた時間を解決する

キャプチャ／再配置／アーカイブ



* キャプチャ::          新しいものをキャプチャする
* 添付::                   タスクにファイルを追加する
* RSSフィード::          RSSフィードから取り込む
* プロトコル::          外部（e.g. @:
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* ノートの再配置::    別な場所にツリーを移動する
* アーカイブ::          完了したプロジェクトの扱い方

キャプチャ



* キャプチャの設定::  キャプチャされたノートが保存される場所
* キャプチャの使用::  キャプチャの実行と中止コマンド
* キャプチャテンプレート::  異なるタイプのテンプレートを定義する

キャプチャテンプレート



* テンプレートの要素::  完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む

アーカイブ



* サブツリーを移動する::  アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す

アジェンダビュー



* アジェンダファイル::  アジェンダ生成のために探索されるファイル
* アジェンダのコマンド選択::  アジェンダビューへのキーボードアクセス
* 組み込みのアジェンダビュー::  すぐに使える機能に何があるでしょう？
* 表示とソート::       表示のためにどのようにアジェンダ項目が準備されるのか
* アジェンダのコマンド::  タスクツリーのリモート編集
* カスタムアジェンダビュー::  特別な検索とビューを定義する
* アジェンダビューの出力::  ビューをファイルに書き出す
* アジェンダのカラム表示::  収集したエントリーのためにコラムビューを使用する

アジェンダに組み込まれているビュー



* 毎週／毎日のアジェンダ::  現在のタスクが表示されたカレンダーのページ
* グローバルなTODOリスト::  全ての未完了アクション項目
* タグとプロパティとのマッチング::  微調整された検索での構造化された情報
* タイムライン::       単一ファイルでの時間順のビュー
* 検索ビュー::          文章の中を検索してエントリーを見つける
* 詳細が未決定なプロジェクト::  レビューが必要なプロジェクトを見つける

表示とソート



* カテゴリ::             全てのタスクが同じであるとは限らない
* 時刻の仕様::          アジェンダはどうやって時間を知るか
* アジェンダの項目をソートする::  物事の順番

カスタムアジェンダビュー



* 検索式の保存::       一度入力し、何度も使う
* ブロックアジェンダ::  必要な事項をひとつのバッファに集める
* 設定オプション::    ルールを変更する

リッチエクスポートのためのマークアップ



* 構造化されたマークアップの要素::  エクスポートでわかる基本的な構造
* 画像とテーブル::    テーブルと画像は含まれているだろう
* リテラルの例::       特別なフォーマットのためのソースコードの例
* ファイルの挿入::    文書に別のファイルを添付する
* エントリのインデックス::  インデックスを作る
* マクロ置換::          複雑なアウトプットを作成するためにマクロを使用する
* LaTeXの組み込み::     LaTeXはorg-modeの文書では自在に使用することができる

構造化されたマークアップの要素



* ドキュメントタイトル::  どこからタイトルが取り出されるか
* 見出しとセクション::  文書の構造はエクスポートの設定で確認できる
* 目次::                   コンテンツのテーブルの条件と場所
* 冒頭のテキスト::    最初の見出しより前に書かれた文
* リスト::                リスト
* パラグラフ::          パラグラフ
* フットノートのマークアップ::  脚注
* 強調と等幅::          太字、イタリック、その他
* 水平線のルール::    線を作る
* コメント行::          何がエクスポートされないか

Embedded @LaTeX{}



* 特殊記号::             ギリシャ文字や他の記号
* 下付き文字と上付き文字::  テキストを上付き／下付きにする簡単な構文
* LaTeXのコード片::     複雑な数式を簡単に作成する
* LaTeXコード片のプレビュー::  このスニペットは何と似ているか
* CDLaTeXモード::         数式の入力をスピードアップする

エクスポート



* 選択エクスポート::  タグを使ってツリーを選択したり排除したりする
* エクスポートオプション::  ファイル毎のエクスポート設定
* エクスポート用コマンド選択画面::  どのようにエクスポートのコマンドにアクセ
スするか
* ASCII/Latin-1/UTF-8エクスポート::  文字コードの変換を伴う通常のファイルへ
のエクスポート
* HTMLのエクスポート::  HTMLへのエクスポート
* LaTeXとPDFエクスポート::  @LaTeX{}へのエクスポート、そしてPDFへ変換のプロセス
* DocBookエクスポート::  DocBookへのエクスポート
* TaskJugglerエクスポート::  TaskJugglerへのエクスポート
* Freemindエクスポート::  Freemindのマインドマップへのへエクスポート
* XOXOエクスポート::   XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート

HTMLのエクスポート



* HTMLエクスポートコマンド::  HTMLへのエクスポートをどうやって起動するか
* HTMLタグの引用符::   Org-modeにHTMLを直接書き込む
* HTMLエクスポートでのリンク::  リンクはどのように解釈されフォーマットされる
か
* HTMLエクスポートでのテーブル::  テーブルのフォーマットをどのように修正する
か
* HTMLエクスポートでの画像::  HTMLの出力にどのように図形を挿入するか
* HTMLエクスポートでの数式フォーマット::  web上でも美しい数式
* HTMLエクスポートでのテキストエリア::  例示を表現するための別の方法
* CSSサポート::          出力の見栄えを変更する
* JavaScriptサポート::   webブラウザ上で説明や折りたたみを表示する

@LaTeX{}とPDFのエクスポート



* LaTeX/PDFエクスポートコマンド::  どのキーでどのコマンドが起動するのか
* ヘッダーと章立て::  ファイル構造を出力するための準備
* LaTeXコードの引用::  @LaTeX{}コードの統合
* LaTeXエクスポートでのテーブル::  @LaTeX{}に表をエクスポートする際のオプション
* LaTeXエクスポートでの画像::  @LaTeX{}の出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える

DocBookエクスポート



* DocBookエクスポートコマンド::  DocBookエクスポートの起動方法
* DocBookコードの引用::  DocBookコードをOrgファイルに取りこむ
* 章の繰り返し::       DocBookで繰り返し使われるセクション
* DocBookエクスポートでのテーブル::  表はHTMLのテーブルとして出力される
* DocBookエクスポートでの画像::  DocBookの出力に図を挿入する方法
* 特殊文字::             特殊文字の処理方法

公開



* 設定::                   プロジェクトの定義
* ファイルのアップロード::  ファイルをサーバにアップロードする方法
* 設定例::                プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド

設定



* プロジェクトのリスト::  主な設定用の変数
* ソースと公開先::    ここからそこまで
* ファイルの選択::    どのファイルがプロジェクトの一部なのか
* 公開アクション::    公開を行う関数の設定
* 公開オプション::    HTMLエクスポート時の調整
* ファイルリンク付きの公開::  どのリンクを公開した後も有効にしておくか
* サイトマップ::       全てのページリストの生成
* インデックスの生成::  ページを超えたインデックス

設定例



* 簡単な例::             1コンポーネントでの公開
* 複雑な例::             複数コンポーネントでの公開

ソースコードとの連携



* コードブロックの構造::  コードブロックシンタックスについて
* ソースコードの編集::  言語のメジャーモードを用いた編集
* コードブロックのエクスポート::  コード(と/または)結果のエクスポート
* ソースコードの抽出::  ソースコードのみのファイルの作成
* コードブロックの評価::  Org-modeバッファ中の評価結果の場所
* Babelライブラリ::     有用なコードブロックのライブラリを読む、そして貢献す
る
* 言語::                   コードブロックがサポートする言語一覧
* ヘッダー引数::       コードブロックの機能的な設定
* 評価の結果::          評価の結果を操作する方法
* Nowebでの参照の構文::  Org-modeでの文芸的プログラミング
* キーバインドと便利関数::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す

ヘッダー引数



* ヘッダー引数の利用::  ヘッダー引数を設定するための別の方法
* ヘッダー引数の指定::  ヘッダー引数のリスト

ヘッダー引数の利用



* システム全体のヘッダー引数::  全体的な初期値を設定する
* 各言語のヘッダー引数::  言語ごとに初期値を設定する
* バッファ全体のヘッダー引数::  特定のバッファで初期値を設定する
* Orgプロパティでのヘッダー引数::  ヘッダーまたはバッファに初期値を設定する
* コードブック指定のヘッダー引数::  値を設定するうえで最も一般的な方法
* 関数実行時のヘッダー引数::  最も細かいレベル

ヘッダー引数の指定



* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* tangle::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレク
トリの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をト
グルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する

その他



* 補完::                   M-TABはあなたが何を必要としているか知っています
* 簡単なテンプレート::  構造的な要素の素早い挿入
* スピードキー::       見出しの開始位置で使うの電撃的なコマンド
* コード評価の安全性::  Org-modeのファイルはインラインのコードを評価する
* カスタマイズ::       Org-modeをユーザーの好みに合わせる
* バッファ内での変数制御::  「#+KEYWORDS」の概要
* 「C-c C-c」キーはとても忙しい::  わからなかったら「C-c
                                                C-c」
* アウトラインの「*」を取り除く::  アウトラインの「*」の並びを取り除く
* TTYキー::                Org-modeをtty端末で使う
* 連携::                   Emacsの他のパッケージ

他のパッケージとの関係



* 協調::                   Orgと連携するパッケージ
* 衝突::                   衝突を起こすパッケージ

ハッキング



* フック::                Orgの内部にアクセスするのはどれ？
* アドオンパッケージ::  利用できるエクステンション
* ハイパーリンクのタイプの追加::  新しいリンクタイプの作成
* 状況依存のコマンド::  機能的なコマンドの追加方法
* 任意の構文によるテーブル::  @LaTeX{}のためのOrgtblと他のプログラム
* ダイナミックブロック::  自動的にブロック内に挿入する
* 特別なアジェンダビュー::  カスタマイズされたビュー
* アジェンダ情報の抽出::  アジェンダ情報の後処理
* プロパティAPIを使う::  項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング

任意のシンタックスによる表やリスト



* ラジオテーブル::    ラジオテーブルの送受信
* LaTeXの例::              少しずつ、チュートリアルのようなものを
* 変換関数::             コピーと修正
* ラジオリスト::       リストでも同じように

MobileOrg



* ディレクトリの設定::  モバイルデバイスとはどこでデータをやりとりすれば良い
ですか？
* ディレクトリへの出力::  Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する

@end detailmenu
@end menu

@node まえがき, ドキュメントの構造, Top, Top
@chapter まえがき
@cindex はじめに

@menu
* 概要::                   Org-modeで何ができるか
* インストール::       Org-modeのインストール
* アクティベーション::  Org-modeを特定のバッファで有効にする方法
* フィードバック::    バグ報告、アイディア、パッチなど
* 慣例::                   マニュアルで使われる植字の慣例
@end menu

@node 概要, インストール, まえがき, まえがき
@section 概要
@cindex 概要

Org-modeは、高速かつ効率的に動作するプレーンテキストのシステムを用いて、ノー
トを保存したり、TODOリストを管理したり、プロジェクトを計画するためのEmacsモ
ードです。

プレーンなテキスト形式でリストやプロジェクトに関する情報を含む分散したノート
から、Org-modeは組織的に結びついたタスク群を生成します。Org-modeはアウトライ
ンモードを元に実装されているます。そのため、大きなファイルの内容をわかりやす
く構造化した状態に維持できます。また、必要な部分だけを表示する機能と文書構造
の編集機能がツリー形式の文書編集を手助けします。ビルトインされたテーブルエデ
ィタで簡単に表を作成できます。Org-modeは、TODOアイテム、デッドライン、タイム
スタンプ、そして、スケジュール管理に対応しています。スケジュール管理はタスク
を動的にアジェンダへ蓄積します。アジェンダはEmacsのcalendarとdiaryの多くの機
能を利用し、スムーズに統合しています。プレーンテキストで記述されるURLに似た
リンクは、ウェブサイト、メール、ネットのメッセージ、BBDBのデータ、そして、プ
ロジェクトに関連するどのようなファイルとも結びついています。ノートの印刷や共
有のために、構造化されたアスキー形式のファイルやHTMLのファイル、または（TODO
とアジェンダアイテムに限り）iCalendar形式のファイルへOrg-modeのファイルをエ
クスポートできます。また、リンクの張られたウェブページ一式を公開するツールと
しても役立ちます。

見出しとなるノードにメタデータを追加することで、Org-modeはプロジェクトを計画
する環境となります。そのメタデータに基づくことでクエリの中から特定のエントリ
ーを抽出でき、動的な@i{agenda views}を生成できます。

Org-modeはOrg-Babel環境を含んでいて、次のようなことが可能になります。すなわ
ち、ソースコードブロックが組み込まれたファイルで作業でき、コードを評価、文書
化、そして、文芸的プログラミングを実践できます。

Org-modeの自動的かつ文脈を読み取る表編集機能は、表計算ソフトと互換性があり、
マイナーモードのOrgtblを動かすことでどのようなメジャーモードにも組み込めます
。表を変換することで、たとえば@LaTeX{}の表のように任意のファイルタイプで表を維
持することができます。構造編集とリスト生成の機能は、マイナーモードの
OrgstructによってOrg-modeの外部で利用できます。

Org-modeは単純なものは単純なまま保持します。初めて起動したOrg-modeは、わかり
やすく、簡単に使えるアウトライナーのように感じるはずです。Org-modeに複雑さは
なく、それでいて、必要に応じて数多くの機能を利用できます。Org-modeはツールボ
ックスであり、様々な方法で、そして様々な目的で利用できます。例えば、具体的に
は以下のようなものです。

@example
@r{@bullet{} ツリーの表示状態の切り替えと構造編集を可能にしたアウトラインの拡張}
@r{@bullet{} 構造化されたノートを取るための、テキスト整形の仕組みと表編集機能}
@r{@bullet{} TODOリストの編集機能}
@r{@bullet{} 締切日とスケジュールの管理機能を備えた完全なアジェンダと予定表}
@pindex GTD, Getting Things Done
@r{@bullet{} Devid Allen 氏のGTDシステムを実行するための環境}
@r{@bullet{} シンプルなハイパーテキストシステム（HTMLと@LaTeX{}エクスポートを含む）}
@r{@bullet{} 内部リンクで構成されたウェブページ群を生成するための公開ツール}
@r{@bullet{} 文芸的プログラミングのための環境}
@end example


@cindex よくある質問
最新バージョンへのリンクがある、Org-modeのためのウェブサイトがあります。関連
情報、よくある質問(FAQ)、または、チュートリアルなどへのリンクも集約されてい
ます。@uref{http://orgmode.org}
で公開されています。

@cindex 印刷版
このマニュアルのバージョン7.3は
@uref{http://www.network-theory.co.uk/org/manual/, paperback book from Network Theory Ltd.}で手に入ります。

@page


@node インストール, アクティベーション, 概要, まえがき
@section インストール
@cindex インストール
@cindex XEmacs

@b{重要}:
@i{もしあなたが、Emacsの一部として組み込まれたOrg-modeを利用している、もしくは、
XEmacsのパッケージを利用している場合には、このセクションを飛ばして直接
@ref{アクティベーション}に移動してください。あなたのEmacsに含まれているOrg-mode
（存在する場合）のバージョンを見るためには、@kbd{M-x load-library RET org}を実行
してから、@kbd{M-x org-version}を実行してください。}

すでにインターネットからOrg-modeをダウンロードしているならば、@file{.zip}か@file{.tar}
もしくはGitアーカイブかを問いませんが、以下の手順に沿ってインストールしてく
ださい。まず、配布されたOrg-modeのディレクトリを解凍し、そこに移動します。次
に、@file{Makefile}の最初のセクションを編集します。Emacsバイナリの名前を記入しな
ければなりません。たとえば、@file{emacs}もしくは@file{xemacs}のような名前です。最後に
、ローカルのLispとInfoファイルが保存されているディレクトリへのパスを記入しま
す。システムディレクトリへのアクセス権を持っていないならば、@file{lisp}（訳注：解
凍したディレクトリの直下にあるサブディレクトリ）をEmacsのロードパスに加える
ことで、配布されたOrg-modeのディレクトリを使って、簡単にOrg-modeを動かせます
。このようにするためには、@file{.emacs}に次の行を加えてください。

@example
(setq load-path (cons "~/path/to/orgdir/lisp" load-path))
@end example

@noindent
もし@file{contrib}サブディレクトリのコードを使うならば、このディレクトリについて
も同様のステップを実行します。

@example
(setq load-path (cons "~/path/to/orgdir/contrib/lisp" load-path))
@end example

@noindent
そして、シェルコマンドを使ってLispファイルをバイトコンパイルします。

@example
make
@end example

@noindent
解凍したOrg-modeファイルがあるディレクトリでOrg-modeを動かすならば、これでイ
ンストール完了です。もしOrg-modeをシステムディレクトリにインストールしたいな
らば、管理者権限で次のコマンドを実行します。

@example
make install
@end example

INFOファイルのインストール方法はシステムに依存します。これは、@file{install-info}
プログラムの違いに原因があります。Debianであれば、@file{install-info}がINFOファイ
ルを正しいディレクトリにコピーし、INFOディレクトリファイル（訳注：dirのこと
）を変更します。その他の多くのシステムでは、各ファイルが別々に正しいディレク
トリにコピーされる必要があります。そして、@file{install-info}がディレクトリファイ
ルだけを修正します。システムのドキュメントを読んで、次のどちらのコマンドを必
要とするかを調査してください。

@example
make install-info
make install-info-debian
@end example

最後に、以下の一行を@file{.emacs}に追加します。これは、Org-modeの開始時には読み込
まれないファイルにある関数を、Emacsが自動的に読み込むために必要です。
@lisp
(require 'org-install)
@end lisp

次節に解説されているOrg-modeのアクティベーションを忘れずに実行してください。
@page

@node アクティベーション, フィードバック, インストール, まえがき
@section アクティベーション
@cindex activation
@cindex autoload
@cindex グローバルなキーバインド
@cindex キーバインド、グローバル

拡張子が@file{.org}のファイルで必ずOrg-modeを利用することを確実にするために、次の
行を@file{.emacs}に追加します。
@lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
@end lisp
@noindent
Org-modeのバッファは、フォントロックが有効になっている必要があります。これは
Emacsの標準の設定です@footnote{もしグローバルにフォントロックを使わない場合は、
@code{(add-hook 'org-mode-hook 'turn-on-font-lock)}を使って、Org-modeのバッファの
フォントロックを有効化してください。}。

Org-modeの4つのコマンド（@command{org-store-link}, @command{org-capture},
@command{org-agenda},
@command{org-iswitchb}）は、グローバルキーを割り当てて使いやすくするべきでしょう（つ
まり、Org-modeのバッファだけではなく、Emacsでいつでも使えるようにします。）
。これらのキーバインドとして以下を割り当てることをお勧めします。自分の環境に
応じて適当にキーを変更してください。
@lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
@end lisp

@cindex Org-mode、利用開始
ここまでの設定を用いると、拡張子が@samp{.org}のファイルのすべてがOrg-modeに設定さ
れます。別の方法として、ファイルの一行目に次のような一文を追加することでも、
Org-modeに設定できます。

@example
MY PROJECTS    -*- mode: org; -*-
@end example

@vindex org-insert-mode-line-in-empty-file
@noindent
この設定が書き込まれたバッファは、ファイルの名前とは無関係にOrg-modeが有効に
なります。変数@code{org-insert-mode-line-in-empty-file}も確認してください。

Org-modeの多くのコマンドは、リージョンが@i{アクティブ}ならば、そのリージョンに対
して動作します。アクティブなリージョンをハイライトするためには、
@code{transient-mark-mode}（XEmacsでは@code{zmacs-regions}）を有効にする必要があります
。Emacs23では標準で有効になっていますが、Emacs22では次のように自分で設定する
必要があります。
@lisp
(transient-mark-mode 1)
@end lisp
@noindent
もし@code{transient-mark-mode}が好みでないならば、マウスを利用した領域の選択で、
アクティブなリージョンを指定できます。もしくは、カーソルを移動する前に
@kbd{C-@key{SPC}}を二回押します。

@node フィードバック, 慣例, アクティベーション, まえがき
@section フィードバック
@cindex フィードバック
@cindex バグレポート
@cindex メンテナー
@cindex 著者

Org-modeで問題を発見した場合、あるいは質問や意見、アイディアがある場合には、
Org-modeのメーリングリスト@email{emacs-orgmode@@gnu.org}へメールしてください。あな
たがメーリングリストのメンバーでないと、投稿したメールは管理者が承認した後に
メーリングリストへ転送されます@footnote{メーリングリストの管理者の仕事量を最小化する
ために、ぜひメーリングリストの購読を検討してください。}。

バグをレポートする時は、まず始めに最新バージョンのOrg-modeを利用して該当のバ
グが再現されるか試してください。古いバージョンを利用している場合、すでにその
バグが修正されている可能性が高いです。バグの再現性が確認できたならば、レポー
トを準備して可能な限り多くの情報を提供してください。具体的には、Emacsのバー
ジョン情報（@kbd{M-x emacs-version @key{RET}}）とOrg-modeのバージョン情報（
@kbd{M-x org-version @key{RET}}）、また、Org-modeに関連する@file{.emacs}の設定をバグレポ
ートに記載してください。このようなバグレポートの形式を守るための最も簡単な方
法は、次のコマンドを利用することです。
@example
@kbd{M-x org-submit-bug-report}
@end example
@noindent
この関数を実行すると、Emacsのメールバッファに必要なテンプレートを書きこんで
くれるので、バグの説明だけを書き加えればよい状態になります。Emacsを利用して
メールを送信しない場合は、テンプレートの内容をメールクライアントにコピー＆ペ
ーストしてください。

もしOrg-modeを使っていてエラーが発生したら、バックトレースがとても役立ちます
（作り方は次節を参照してください）。しばしば例となる小さなファイルが問題解決
の手助けになります。それらには次のような明瞭な情報を含んでいます。

@enumerate
@item 正確に何を実行したのか
@item 何が起きることを期待していたのか
@item 期待と異なり何が起こったのか
@end enumerate
@noindent
Org-modeの改善にご協力いただき感謝します。

@subsubheading 有用なバックトレースを生成する方法

@cindex エラーのバックトレース
Org-modeを利用していて理解できないメッセージのエラーが発生したら、バグを発見
した可能性があります。エラーを報告する最良の方法は、すでに説明したバグレポー
トの書式に加えて、@emph{backtrace}を提供することです。バックトレースは、ビルトイ
ンされたデバッガによるエラーの発生箇所とどのように発生したかについての情報を
含みます。以下に、有用なバックトレースを生成する手順を示します。

@enumerate
@item
コンパイルされていないOrg-modeのLispファイル群を再度読み込みます。コン
パイルされていないコードを利用して生成したバックトレースは、より多くの
情報を含みます。そのために、次のコマンドを実行します。
@example
C-u M-x org-reload RET
@end example
@noindent
もしくは、@code{Org -> Refresh/Reload -> Reload Org uncompiled}をメニューか
ら選択します。
@item
オプションメニュー@code{Options}から、@code{Enter Debugger on Error}を選択します
（XEmacsでは、このオプションは@code{Troubleshooting}サブメニューにあります
）。
@item
エラーを再現するために必要な操作を行なってください。実行した操作を忘れ
ずにメモしておいてください。
@item
エラーが再現されると、@file{*Backtrace*}バッファが画面上に表示されます。こ
のバッファを別のファイルとして保存し（例えば@kbd{C-x C-w}を使って）、バグ
レポートに添付します。
@end enumerate

@node 慣例, , フィードバック, まえがき
@section 本マニュアルで使われる植字ルール

Org-modeは、3種類のキーワードを使います。TODOキーワード、タグ、プロパティで
す。このマニュアルでは次のように植字を使い分けます。

@table @code
@item TODO
@itemx WAITING
TODOキーワードは、すべて大文字で記述されます。ユーザーが定義する場合も
同様です。
@item boss
@itemx ARCHIVE
ユーザー定義のタグは、小文字で記述されます。特別な意味を持つビルトイン
されたタグは、すべて大文字で記述されます。
@item Release
@itemx PRIORITY
ユーザー定義のプロパティは、大文字で始めて残りが小文字で記述されます。
特別な意味を持つビルトインされたプロパティは、すべて大文字で記述されます。
@end table

このマニュアルでは、Org-modeの機能を利用するためのキーバインドと、対応するコ
マンドの両方を表記します。Org-modeは、しばしば異なる関数に対して同じキーバイ
ンドを使います（これはコマンドを利用する状況に依存しています）。そのようなキ
ーバインドが割り振られたコマンドには、@code{org-metaright}のような一般的な名称が
あります。このマニュアルでは、可能な限り一般的なコマンドを用いて内部的に呼び
出される関数の名称を提示します。例えば、ドキュメントの構造についての章では、
@kbd{M-@key{right}}は@code{org-do-demote}を呼び出すように表記します。一方で、テーブルにつ
いての章では、@code{org-table-move-column-right}を呼び出すように表記します。

もし望むならば、@file{org.texi}にある@code{cmdnames}フラグの設定を外すことで、コマンド
の名称を表示しないようにマニュアルをコンパイルできます。

@node ドキュメントの構造, テーブル, まえがき, Top
@chapter ドキュメントの構造
@cindex document structure
@cindex structure of document

Org-modeは、Outline modeをベースとしており、ドキュメントの構造を編集するため
にフレキシブルなコマンドを用意しています。

@menu
* アウトライン::       Org-modeはoutline-modeをベースにしています
* ヘッドライン::       org-modeの階層構造の見出しをどう組み込むか
* 表示、非表示の切り替え::  簡単な操作で表示、非表示を切り替える
* 移動::                   他の見出しにジャンプする
* 見出し位置と階層の変更::  見出しの順序と階層を変更する
* ツリーの抽出::       文脈の中に埋め込まれた一致
* エントリー中の階層構造::  １つのエントリーの中に階層のある構造を追加する
* 引き出し::             いろいろなものを隠す
* ブロック::             ブロック単位で折りたたむ
* 脚注::                   org-modeの構文の中で脚注はどのように規定されるの
か
* Orgstructモード::       org-mode外のモードでの階層編集
@end menu

@node アウトライン, ヘッドライン, ドキュメントの構造, ドキュメントの構造
@section アウトライン
@cindex outlines
@cindex Outline mode

Org-modeはoutline
modeの上で実行されます。アウトラインによって階層構造で体系化されたドキュメン
トが作られ、（少なくとも私にとっては）それによって、ノートや思考の最高の表現
方法となります。ドキュメントの大きな部分を折りたたむ（隠す）ことによって、ド
キュメントの骨格のみを表示したり、現在、作業している部分を表示したりして、ド
キュメントの構造の全体を見渡すことができるのです。Org-modeは、全体を表示した
り／隠したりする機能を、たったひとつのコマンド、@command{org-cycle}、それは@key{TAB}キー
と結びついていますが、に圧縮することにより、アウトラインの使用を大変単純なも
のにしています。

@node ヘッドライン, 表示、非表示の切り替え, アウトライン, ドキュメントの構造
@section ヘッドライン
@cindex headlines
@cindex outline tree
@vindex org-special-ctrl-a/e
@vindex org-special-ctrl-k
@vindex org-ctrl-k-protect-subtree

見出しは、アウトラインのツリーの構造を定義します。Org-modeの見出しは、左のマ
ージン@footnote{見出しの中で、@kbd{C-a}、@kbd{C-e}および@kbd{C-k}の特別な作用を設定するために、
@code{org-special-ctrl-a/e}、@code{org-special-ctrl-k}、および
@code{org-ctrl-k-protect-subtree}の変数を参照してください。}上にある１つもしくは
それ以上の数の「＊」で始まります。例えば。

@example
* Top level headline
** Second level
*** 3rd level
    some text
*** 3rd level
    more text

* Another top level headline
@end example

@noindent
たくさんの「＊」があるとうるさく感じ、空白のあとに、見出しの始まりとしてのひ
とつの「＊」があるという形式のアウトラインを好む人もいるでしょう。このような
形式の設定について、@ref{アウトラインの「*」を取り除く},で説明しています。

@vindex org-cycle-separator-lines
最後のサブツリーの直後の空白行は、そのサブツリーの一部と見なされます。そのた
めサブツリーが折り畳まれたときには、隠れてしまいます。しかしながら、すくなく
とも2行の空白行を残したときは、折り畳んだビューを構造化するために、サブツリ
ーを折り畳んだあとも、1つの空白行は残ったままになります。この動作を修正した
いときは、@code{org-cycle-separator-lines}を参照してください。

@node 表示、非表示の切り替え, 移動, ヘッドライン, ドキュメントの構造
@section 表示、非表示の切り替え
@cindex cycling, visibility
@cindex visibility cycling
@cindex trees, visibility
@cindex show hidden text
@cindex hide text

アウトラインによって、バッファの中で、テキストの一部を隠すことが可能となりま
す。Org-modeはバッファ内での表示の状況を変更するために、@key{TAB}と@kbd{S-@key{TAB}}とに
結びついた2つのコマンドを使用します。

@cindex subtree visibility states
@cindex subtree cycling
@cindex folded, subtree visibility state
@cindex children, subtree visibility state
@cindex subtree, subtree visibility state
@table @asis
@orgcmd{@key{TAB},org-cycle} @emph{Subtree cycling}：カレントのサブツリーの状態を順番
に表示します。

@example
,-> FOLDED -> CHILDREN -> SUBTREE --.
'-----------------------------------'
@end example

@vindex org-cycle-emulate-tab
@vindex org-cycle-global-at-bob
これを動作@footnote{しかしながら、@code{org-cycle-emulate-tab}オプションを参照してく
ださい。}
させるためにはカーソルが見出しの上に置かれている必要があります。カーソ
ルがバッファの一番上の行にあり、そして最初の行が見出しでない場合は、
@key{TAB}が実際にグローバルな切り替えが実行されます。（下記を参照）
@footnote{@code{org-cycle-global-at-bob}オプション参照。}
前置引数(@kbd{C-u @key{TAB}})をつけて呼び出したときは、グローバルな切替が実行
されます。

@cindex global visibility states
@cindex global cycling
@cindex overview, global visibility state
@cindex contents, global visibility state
@cindex show all, global visibility state
@orgcmd{S-@key{TAB},org-global-cycle}
@itemx C-u @key{TAB}
@emph{Global cycling}：バッファ全体を交代で状態を変更する。

@example
,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
'--------------------------------------'
@end example

@kbd{S-@key{TAB}}がNという数字のついた前置引数と一緒に呼び出されたときは、レベ
ルN以上の見出しがCONTENTSビューに表示されます。テーブルの中では、
@kbd{S-@key{TAB}}は前のフィールドにジャンプするということに注意してください。

@cindex show all, command
@orgcmd{C-u C-u C-u @key{TAB},show-all} 全てを表示する。引き出しを含む。
 @orgcmd{C-c C-r,org-reveal}
カレントエントリーや、下の見出しや上の階層を表示して、その場所でのコン
テクストを表示する。ツリーの抽出コマンド（@pxref{ツリーの抽出}）やアジェンダ
のコマンド（@pxref{アジェンダのコマンド}）によって表示された場所の周辺で作業
をするのに役立ちます。前置引数をつけることで、各階層での同一レベルの見
出しを表示する。前置引数を2重に使った場合は、親のサブツリー全体を表示する。
@orgcmd{C-c C-k,show-branches}
サブツリーの見出しを全て表示し、ひとつのサブツリーのためのコンテンツビ
ューである。@orgcmd{C-c C-x b,org-tree-to-indirect-buffer}　間接的なバッファ
@footnote{間接的なバッファとは、
@ifinfo (@pxref{Indirect Buffers,,,emacs,GNU Emacs Manual})
@end ifinfo
@ifnotinfo (see the Emacs manual for more information about indirect buffers)
@end ifnotinfo
は全てのバッファを含んでいるが、カレントのツリーに制限されるだろう。間接的なバッファを編集することは、オリジナルのバッファに変更を加えることでもある。だがそのバッファの中での表示に影響を与えることはできない。}.
の中にあるカレントのサブツリーを表示する。Nという数値付きの前置引数を
つけると、N段階上の階層に上がるがそのツリーを捉える。もしもNがマイナス
の値ならば、多くの階層まで遡る。@kbd{C-u}の前置引数をつけたならば、それ以
前に使用された間接的なバッファを削除してはならない。
@end table

@vindex org-startup-folded
@cindex @code{overview}, STARTUPキーワード
@cindex @code{content}, STARTUPキーワード
@cindex @code{showall}, STARTUPキーワード
@cindex @code{showeverything}, STARTUPキーワード

EmacsであるOrg-modeファイルを最初に開いたときに、グローバルな状態としては、
概観のビューで開くように設定されています。すなわち、最上位の階層の見出しのみ
が表示されています。これは、@code{org-startup-folded}変数によって設定されています
。つまり、以下に示す行をバッファ上のどこかに追加することによって、ファイル毎
に設定することができます。

@example
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
@end example

@cindex property, VISIBILITY
@noindent
さらに、どのエントリーも@samp{VISIBILITY}属性（@pxref{プロパティとカラム}）を持っており
、それを受けて適用された表示性をしめすでしょう。この属性のために許されている
値は、@code{folded}、@code{children}、@code{content}および@code{all}です。
@table @asis
@orgcmd{C-u C-u @key{TAB},org-set-startup-visibility}　そのバッファにおける起動時
の表示条件に戻ります。すなわち、@:起動時のオプションで要求されている内
容、そして個々のエントリーの中で設定されている@samp{VISIBILITY}の属性に。
@end table

@node 移動, 見出し位置と階層の変更, 表示、非表示の切り替え, ドキュメントの構造
@section 移動
@cindex motion, between headlines
@cindex jumping, to headlines
@cindex headline navigation
以下のコマンドはバッファの中で他の見出しにジャンプするものです。

@table @asis
@orgcmd{C-c C-n,outline-next-visible-heading}　次の見出しへ。
@orgcmd{C-c C-p,outline-previous-visible-heading}　前の見出しへ。
@orgcmd{C-c C-f,org-forward-same-level}　次の同一階層の見出しへ。
@orgcmd{C-c C-b,org-backward-same-level}　前の同一階層の見出しへ。
@orgcmd{C-c C-u,outline-up-heading}　一つ上の階層の見出しに戻る。
@orgcmd{C-c C-j,org-goto}　現在のアウトラインの表示状態を変更することなく、別
の場所にジャンプする。現在のバッファの中で文書の構造を表示し、そこでは
あなたの目的の場所を見つけるために以下のようなキーを使用することができます。
@vindex org-goto-auto-isearch
@example
@key{TAB}         @r{表示を切り替える。}
@key{down} / @key{up}   @r{次の／前の表示されている見出しへ。}
@key{RET}         @r{この場所を選択する。}
@kbd{/}           @r{ツリーの抽出による検索を実行する}
@r{もしも@code{org-goto-auto-isearch}　を停止したときには以下のキーが動作する}
n / p        @r{次の／前の表示されている見出しへ。}
f / b        @r{次の／前の同じ階層の見出しへ。}
u            @r{ひとつ上の階層へ。}
0-9          @r{数値の変数。}
q            @r{停止}
@end example
@vindex org-goto-interface
@noindent
@code{org-goto-interface}変数もまた参照のこと。
@end table

@node 見出し位置と階層の変更, ツリーの抽出, 移動, ドキュメントの構造
@section 見出し位置と階層の変更
@cindex structure editing
@cindex headline, promotion and demotion
@cindex promotion, of subtrees
@cindex demotion, of subtrees
@cindex subtree, cut and paste
@cindex pasting, of subtrees
@cindex cutting, of subtrees
@cindex copying, of subtrees
@cindex sorting, of subtrees
@cindex subtrees, cut and paste

@table @asis
@orgcmd{M-@key{RET},org-insert-heading}
@vindex org-M-RET-may-split-line
カレントの階層と同じ階層の新しい見出しを挿入します。もしもカーソルがプ
レーンなリストアイテムの中にあるならば、新しいアイテムが作成されます
(@pxref{エントリー中の階層構造})。新しい見出しを強制的に作成するには前置引数
をつけます。このコマンドが行の途中で使用されたときは、その行が分割され
、その行の残りの部分が新しい見出し@footnote{もしも行を途中で分割したくないとき
は、@code{org-M-RET-may-split-line}変数をカスタマイズしてください。}となり
ます。もしも見出しの先頭でそのコマンドが使用されたときは、カレント行の
前に新しい見出しが作られます。もしも見出し以外の行の先頭の場合は、その
行の内容が新しい見出しとして作成されます。そのコマンドが折り畳まれてい
るサブツリーの行末で使用されたならば（i.e.@:
見出しの最後の楕円の後）、カレントの見出しと同様な見出しが、サブツリー
の末尾の後に挿入されるでしょう。
@orgcmd{C-@key{RET},org-insert-heading-respect-content}@kbd{M-@key{RET}}とちょうど同じよ
うに、カレントの見出しの下に新しい見出しが付け加えられたときを除いて、
新しい見出しは本文の前に置かれるかわりに、本文の後に置かれます。このコ
マンドはエントリーの中のどの場所からでも動作します。
@orgcmd{M-S-@key{RET},org-insert-todo-heading}
@vindex org-treat-insert-todo-heading-as-state-change
カレントの見出しと同じ階層の新しいTODOエントリーが挿入されます。
@code{org-treat-insert-todo-heading-as-state-change}変数も同じように参照し
てください。@orgcmd{C-S-@key{RET},org-insert-todo-heading-respect-content}
カレントの見出しと同一の階層に新しいTODOエントリーを挿入します。
@kbd{C-@key{RET}}と同様に、新しい見出しはカレントのサブツリーの後に挿入される
でしょう。@orgcmd{@key{TAB},org-cycle}
新しいエントリーでまだ文が書かれていない状態で、最初に@key{TAB}を実行する
と、そのエントリーの階層を下げ、その前の見出しの子になります。次に
@key{TAB}を実行すると、その見出しを親として、それによってトップの階層まで
、作成します。さらに次の@key{TAB}で、初期の階層にもどります。
@orgcmd{M-@key{left},org-do-promote}
カレントの見出しを1階層上げる。@orgcmd{M-@key{right},org-do-demote}
カレントの見出しを1階層下げる。@orgcmd{M-S-@key{left},org-promote-subtree}
カレントのサブツリーを1階層上げる。@orgcmd{M-S-@key{right},org-demote-subtree}
カレントのサブツリーを1階層下げる。@orgcmd{M-S-@key{up},org-move-subtree-up}
サブツリーを上に移動する。（同じ階層の前のサブツリーと交換する。）
@orgcmd{M-S-@key{down},org-move-subtree-down}
サブツリーを下に移動する。（同一階層の次のサブツリーと交換する。）
@orgcmd{C-c C-x C-w,org-cut-subtree}
サブツリーをキルする。i.e.@:
そのサブツリーをバッファから取り除くが、キルリングに保存する。Nという
数字付きの前置引数をつけたときは、N個連続でサブツリーをキルする。
@orgcmd{C-c C-x M-w,org-copy-subtree}
サブツリーをキルリングにコピーする。Nという数字付きの前置引数をつけた
ときは、N個連続でサブツリーをコピーする。
@orgcmd{C-c C-x C-y,org-paste-subtree}
キルリングからサブツリーを貼り付ける。これによると、貼り付けるポジショ
ンにうまく合わせて、ツリーに適合するようにサブツリーの階層を調整する。
数字付きの前置引数をつけるか、@samp{****}のような星印のついた見出しの後に貼
り付けることによって、貼り付ける階層を指定することができる。
@orgcmd{C-y,org-yank}
@vindex org-yank-adjusted-subtrees
@vindex org-yank-folded-subtrees
@code{org-yank-adjusted-subtrees}と@code{org-yank-folded-subtrees}という変数によ
って、Org-modeの内部の@code{yank}コマンドは、賢い方法で、@kbd{C-c C-x C-y}と同
等のコマンドを用いて、折り畳まれているサブツリーを貼り付けることができ
るでしょう。デフォルトの設定では、階層の調整は行われませんが、貼り付け
られたツリーは、既に表示されているテキスト受け入れない限り、折り畳まれ
たままでしょう。このコマンドに対して何らかの前置引数をつけることで、渡
されたプレフィックスに応じて、通常の@code{yank}を実行させることになります。
通常のyankを実行する良い方法は@kbd{C-u C-y}です。yankの後で@code{yank-pop}を使
うと、階層の調整や折り畳みをすることなく、それ以前にkillしたアイテムを
プレーンにyankします。@orgcmd{C-c C-x c,org-clone-subtree-with-time-shift}た
くさんのそれと同じ兄弟のコピーを作成することで、サブツリーの複製を作り
ます。たくさんのコピーの作成を実行したいならば、そのエントリーに含まれ
ているタイムスタンプも調整されるように指定することもできます。この機能
は便利です。例えば、準備している一連の講義に関連した沢山のタスクを作成
するという場合のように。もっと詳細な情報が必要ならば、
@code{org-clone-subtree-with-time-shift}コマンドの解説を参照してください。
@orgcmd{C-c C-w,org-refile}エントリーやリージョンを別の場所に保管します。
@xref{ノートの再配置}.@orgcmd{C-c ^,org-sort-entries-or-items}同じ階層のエントリー
を並び替えられます。アクティブなリージョンがあるときに、そのリージョン
にあるすべてのエントリーは順番に並びます。もう一方で、カレントの見出し
の子供の階層も並び替えられます。並び替えの形式をコマンドで入力します。
すなわちアルファベット順、数字順、時間順（実行するために参照される作成
日、予定日、期限などの最初のタイムスタンプ）、優先順位順、TODOキーワー
ド順（設定の中で定義された一連のキーワードの中で）あるいは属性の価値の
順に並べ替えるために。並び順を反転することも同様に可能です。並び替えの
キーを拡張するために自分自身の関数を用意することもできます。@kbd{C-u C-u}
という二重の前置引数を使用すると、複製されたエントリーは削除されます。
@orgcmd{C-x n s,org-narrow-to-subtree}カレントのサブツリーのためにバッファを
ナローイングします。@orgcmd{C-x n b,org-narrow-to-block} カレントのブロックの
ためにバッファをナローイングします。@orgcmd{C-x n w,widen}
ナローイングを取り除きバッファを広げます。@orgcmd{C-c *,org-toggle-heading}
普通の行やプレーンなリストアイテムを見出しに変更します。（そのため、そ
れらの場所によってはサブの見出しになります。）星汁うぃを取り除くことに
よって見出しを普通の行に変更することもできます。もしもアクティブなリー
ジョンあるならば、その領域のすべての行が見出しに変更されます。もしもそ
の領域の中の最初の行がアイテムだったら、そのアイテムの行のみが見出しに
変更されます。最後に、もし最初の行が見出しならば、その領域の中の全ての
見出しから星印が取り除かれます。
@end table

@cindex region, active
@cindex アクティブなリージョン
@cindex 暫定マークモード
アクティブなリージョンがあるときには（Transient Mark
mode）、そのリージョンのすべての見出しの階層を上げたり、下げたり作用すること
ができる。あるリージョンの見出しを選択するためには、行の先頭にポイントを置い
てマークし、最初の見出しの先頭でマークし、変更する最後の見出しの次の行にポイ
ントを置くのが良い方法である。カーソルがテーブル
(@pxref{テーブル})の中にあるときに、Meta-Cursorキーは異なる機能性を持つことに注意
してください。


@node ツリーの抽出, エントリー中の階層構造, 見出し位置と階層の変更, ドキュメントの構造
@section ツリーの抽出
@cindex sparse trees
@cindex trees, sparse
@cindex folding, sparse trees
@cindex occur, command

@vindex org-show-hierarchy-above
@vindex org-show-following-heading
@vindex org-show-siblings
@vindex org-show-entry-below
Org-modeの重要な特徴の一つに、あるアウトラインのツリーに含まれている選択され
た情報のために@emph{sparse trees（ツリーの抽出）}を作ることができるということがあ
ります。そのため文書全体が最大限畳まれていても、その@footnote{検索に一致したときに、
どの範囲の内容を表示するかを詳細にコントロールするために、
@code{org-show-hierarchy-above}@code{org-show-following-heading}、@code{org-show-siblings}
、そして@code{org-show-entry-below}変数を参照のこと}
上に見出し構造に沿って表示することができるのです。試してみて、それがどんなに
素早く動作するかを見てください。

Org-modeにはそういうツリーを作成するためのいくつものコマンドがあります。これ
らのコマンドの全てはディスパッチャーを通してアクセスすることができます。

@table @asis
@orgcmd{C-c /,org-sparse-tree}
これは、ツリーの抽出を選択するためのコマンドを作成する追加のキーを入力
する。@orgcmd{C-c / r,org-occur}
@vindex org-remove-highlights-with-change
発生。正規表現のための入力と全ての一致したものについてのツリーの抽出を
表示する。もしもその一致した言葉が見出しの中にあるならば、その見出しが
表示される。もしもその一致した言葉がエントリーの本文の中にあるならば、
見出しと本文が表示される。最小の内容を区分するために、その一致した言葉
のある見出しの階層全体が表示され、同様にその一致した言葉に続く見出しも
表示される。どの一致した言葉もハイライトされる。そのハイライトはバッフ
ァが編集コマンド@footnote{これは@code{org-remove-highlights-with-change}オプションに
依存する。}
　によって変更されるか、@kbd{C-c C-c}を押すことで消える。@kbd{C-u}前置引数が呼
ばれたときは、以前のハイライトは維持される。そのため何度もこのコマンド
を呼び出すと積み重ねることができる。@orgcmdkkc{M-g n,M-g M-n,next-error} そのバ
ッファの中の次のツリーの抽出部分にジャンプする。
@orgcmdkkc{M-g p,M-g M-p,previous-error}　そのバッファの前のツリーの抽出部分にジ
ャンプする。
@end table


@noindent
@vindex org-agenda-custom-commands
特定の検索文字列によるツリーの抽出を何度も使用するために、
@code{org-agenda-custom-commands}変数を使って特定のツリーの抽出に、素早くキーボー
ドからアクセスする定義をすることができる。これらのコマンドはアジェンダディス
パッチャー(@pxref{アジェンダのコマンド選択})を通してアクセスすることができる。例え
ば。

@lisp
(setq org-agenda-custom-commands
      '(("f" occur-tree "FIXME")))
@end lisp

@noindent
@samp{FIXME}という文字列にマッチするツリーの抽出するためのショートカットとして、
@kbd{C-c a f}を定義します。

他のツリーの抽出のためのコマンドは、TODOキーワード、タグ、あるいは属性に基づ
いて見出しを選択するもので、このマニュアルの後の部分で議論されるだろう。

@kindex C-c C-e v
@cindex printing sparse trees
@cindex visible text, printing
抽出したツリーを印刷するためには、Emacsの@code{ps-print-buffer-with-faces}という
コマンドを使用することができます。それを使うと文書@footnote{このコマンドは、XEmacsで
は動作しません。というのは、XEmacsでは、テキスト属性の部分ではなく、アウトラ
インを選択して表示するために使用するものだからです。}のうちの表示されていな
い部分は印刷されません。あるいは、文書の見えている部分をエクスポートするため
に、@kbd{C-c C-e v}コマンドを使用し、エクスポートしたファイルを印刷することがで
きます。

@node エントリー中の階層構造, 引き出し, ツリーの抽出, ドキュメントの構造
@section エントリー中の階層構造
@cindex plain lists
@cindex lists, plain
@cindex lists, ordered
@cindex ordered lists

アウトラインのエントリーの中に、手動でフォーマットしたリストによって、別の構
造化された項目を追加することができます。そのリストを使って、チェックボックス
(@pxref{チェックボックス})のリストを作成する方法が提供されています。Org-modeではそ
ういうリストの編集をサポートしており、そしてすべてのエクスポート機能
(@pxref{エクスポート})はそれらのリストの構文を解析しフォーマット化することができま
す。

Org-modeでは、数字付きのリスト、順序のないリスト、そして記述リストを解釈しま
す。
@itemize @bullet
@item
@emph{順序のない}リストアイテムは、@samp{-}、@samp{+}、または箇条書きの太い中黒として
の@samp{*}@footnote{@samp{*}を箇条書きの太い中黒として使用するときは、それらの行はインデ
ントが設定されている必要があります。そうでなければ、それらの行は見出し
のトップ階層と見なされてしまいます。また、わかりやすいアウトラインビュ
ーを得るために、先頭の星印を隠しているときは、プレーンなリストアイテム
の場合は、本当の見出しと区別が付かなくなります。簡単に言えば、@samp{*}をサ
ポートしているもののプレーンなリストアイテムのためには使用しない方が良
いかもしれません。}
が文頭に付きます。
@item
@vindex org-plain-list-ordered-item-terminator
@vindex org-alphabetical-lists
@emph{順番のある}
リストアイテムは、数字のあとにピリオドか右括弧
@footnote{@code{org-plain-list-ordered-item-terminator}の設定によって、それらのリス
トをはずすことが可能です。}
がついた形ではじまっています。例えば、@code{org-alphabetical-lists}を設定す
ることによって、@samp{1.}や@samp{1)}@footnote{@samp{a.}、@samp{A.}、あるいは@samp{a)}といった形式も可能
です。通常のテキストの混乱を最小限にするために、１つの文字のみに限定さ
れています。この制限を超えると、数字に替えてbulletが自動的に使用されま
す。}のように。もしもあなたがリストをこれら以外の値(e.g.@:
20)で始めたいと思ったら、そのアイテムの最初の文字を@code{[@@20]}@footnote{そのアイテ
ムの中にチェックボックスがある場合は、そのクッキーは、チェックボックス
の@emph{前に}置かれなければなりません。もしも活性化されたアルファベットのつ
いたリストがあるならば、@code{[@@b]}といったカウンターを使用することもでき
ます。}
のような文字で始めます。
@item
@emph{説明}のリストアイテムは順序のないリストアイテムで、説明内容と@emph{用語}の
記述を区別するために@samp{ :: }といった区分するための記号を含んでいます。
@end itemize

同じリストに属しているアイテムは、最初の行と同じインデントでなければならない
。特に、もしも順番のついたリストが@samp{10.}番に到達したら、その２つの数字の番号
は、そのリストの中の他の番号とおなじく左寄せで書かれなければなりません。アイ
テムは、次の行が、そのbullet／数字よりも少ないか等しいインデントの場合の前ま
でで終わります。

@vindex org-list-ending-method
@vindex org-list-end-regexp
@vindex org-empty-line-terminates-plain-lists
リストを終わらせるために２つの方法@footnote{これらどちらも無効にするためには、
@code{org-list-ending-method}を設定します。}
が用意されています。ひとつのリストは、それぞれのアイテムが終了すると終わりま
す。そのことは、トップのレベルのアイテムよりも少ないか等しいインデントの行の
前までであるということを意味しています。また、空行
@footnote{@code{org-empty-line-terminates-plain-lists}を参照してください。}
が2行あると終了します。その場合、すべてのアイテムが閉じていることになります
。うまく管理するには、@code{org-list-end-regexp}の中のどれかのパターンの設定でリ
ストを終わることです。事例を紹介します。

@example
@group
** ロードオブザリング
   渡しの大好きなシーンは (この順で)
   1. the Rohirrimの攻撃
   2. Eowynが魔法使いの王と一緒に戦うところ
      + これはもともと本を読んだときも私のお気に入りのシーンだった
      + 私はMiranda Ottoが本当に好きだ。
   3. Peter JacksonがLegolasに撃たれる
      - DVDだけで
      そのとき彼は本当に面白い顔をした。
   しかし、結局、映画全体を通して個性的なシーンがない。
   この映画での重要な俳優は:
   - @b{Elijah Wood} :: Frodo役
   - @b{Sean Austin} :: Sam役, Frodoの友達。私は今でも@i{The Goonies}
     の中でMikey Walsh役として素晴らしい役回りを演じたことを覚えている。
@end group
@end example

Org-modeでは、これらのリストを正しく@footnote{Org-modeではEmacs用のみの埋め込みの設定
を変更できます。XEmacs用としては、Kyle E. Jonesの@file{filladapt.el}を使用しなけ
ればなりません。この設定を起動するためには、@file{.emacs}:に
@code{(require 'filladapt)}を記述しておく必要があります。}取り扱うために、埋め込
んだり包んだりするコマンドをチューニングし、適切にエクスポートする
(@pxref{エクスポート})ことによって、これらのリストに対応しています。これらのリスト
の構造を管理しているのがインデントであるため、@code{#+BEGIN_...}ブロックのような
多くの構造的な構成を、特別なアイテムに帰属しているという目印のためにインデン
トを設定することができます。

@vindex org-list-demote-modify-bullet
（カレントのリストの階層のために使用するというよりも）サブリストのために、異
なるbulletを使うことが読みやすくできると思ったら、
@code{org-list-demote-modify-bullet}変数をカスタマイズしてください。

@vindex org-list-automatic-rules
あるアイテムの最初の行（bulletまたは数字のついている行）にカーソルがあるとき
に、以下のコマンドがアイテムに作用します。それらのコマンドのいくつかは、リス
トの構造を完全なままたもつために自動的なルールのアプリケーションであることを
暗示しています。これらのコマンドの動作のいくつかを独自のやりかたにしたいなら
ば、それらを個別に無効にするために、@code{org-list-automatic-rules}を設定してくだ
さい。

@table @asis
@orgcmd{@key{TAB},org-cycle}
@vindex org-cycle-include-plain-lists
アイテムは見出しの階層と同じように折り畳むことができます。通常これらは
カーソルがプレーンなリストアイテムの上にあるときに限り動作します。もっ
と詳しく理解するには、@code{org-cycle-include-plain-lists}変数を参照してく
ださい。もしもこの変数が@code{integrate}に設定されているときは、プレーンな
リストアイテムは下の階層の見出しと同様に取り扱われます。そのため筆のア
イテムの階層はbulletまたは数字のインデントによって決定されます。アイテ
ムは実際の見出しに常に従属しているのです。しかしながら、階層構造は完全
に区別されたままになります。@orgcmd{M-@key{RET},org-insert-heading}
@vindex org-M-RET-may-split-line
@vindex org-list-automatic-rules
新しいアイテムをカレントの階層に挿入します。前置引数を用いると、新しい見出し
(@pxref{見出し位置と階層の変更}.)となります。もしもこのコマンドがアイテムの
途中で使用されるならば、そのアイテムは２つに@emph{分割}
されます。そして2番目の部分は新しいアイテム@footnote{もしもアイテムを分割したく
ないならば、@code{org-M-RET-may-split-line}変数をカスタマイズしてください。
}となります。もしもこのコマンドが、@emph{本文の前で}実行されるならば、新し
いアイテムは、カレントのアイテムの@emph{前に}作成されます。
@kindex M-S-@key{RET}
@item M-S-@key{RET}
チェックボックス(@pxref{チェックボックス})のついた新しいアイテムを挿入します
。@orgcmd{@key{TAB},org-cycle}
テキストがまだ書かれていない新しいアイテムの中で、最初の@key{TAB}
でそのアイテムをその前のアイテムの子の階層に移動します。それに続けて
@key{TAB}を入力していくと、そのアイテムをリスト上で意味のある階層に移動し
、そして最終的にもとあった一に戻ります。
@kindex S-@key{down}
@item S-@key{up}
@itemx S-@key{down}
@cindex shift-selection-mode
@vindex org-support-shift-select
カレントのリストの中で、前の／次のアイテムにジャンプします。ただし
@code{org-support-shift-select}
がオフになっている時だけです。もしもそうなっていないなら、@kbd{C-@key{up}}
と@kbd{C-@key{down}}のようなパラグラフのジャンプコマンドと全く同様の効果が現れ
るように使用することができます。
@kindex M-S-@key{up}
@kindex M-S-@key{down}
@item M-S-@key{up}
@itemx M-S-@key{down}
サブアイテムを持っているアイテムを上下（同じインデントのついたアイテム
の前後と入れ替わる）に移動します。もしもリストに序列があるならば、自動
的に採番しなおします。
@kindex M-@key{left}
@kindex M-@key{right}
@item M-@key{left}
@itemx M-@key{right}
一つのアイテムのインデントを増減します。子のアイテムを残したままで。
@kindex M-S-@key{left}
@kindex M-S-@key{right}
@item M-S-@key{left}
@itemx M-S-@key{right}
サブアイテムを含んだまま、アイテムのインデントを増減します。初期設定で
は、アイテムのツリーはカレントのインデントに基づいて選択されます。直接
連続してこれらのコマンドが何度も実行されたときは、たとえ新しいインデン
トが異なる階層であるとわかっていても、初期に選択されたリージョンが使用
されます。新しい階層を使用するために、カーソルを移動させるコマンドの連
鎖をブレイクする必要があります。

特別な場合として、リストの本当に最初のアイテムの上で、このコマンドを使
用することで全てのリストを動かすことができます。この動作は
@code{org-list-automatic-rules}を設定することで無効にすることができます。あ
るリストのグローバルなインデントは、そのリストの@emph{後の}テキストにはなん
の影響も与えません。
@kindex C-c C-c
@item C-c C-c
アイテムの行にチェックボックス(@pxref{チェックボックス})がある場合には、チェ
ックボックスの状態を切り替えます。ともかく、リスト全体についてbulletと
インデントの整合性を検証します。
@kindex C-c -
@vindex org-plain-list-ordered-item-terminator
@vindex org-list-automatic-rules
@item C-c -
@code{org-plain-list-ordered-item-terminator}の設定により、異なる箇条書き/
番号付きのbullet(@samp{-},
@samp{+}, @samp{*}, @samp{1.}, @samp{1)})
、またはそれらのサブセットをもとにして全体のリストの階層、リストのタイ
プ、リストの位置@footnote{もっと多くの情報が必要ならば、
@code{org-list-automatic-rules}の中の@code{bullet}を参照してください。}を切り替
えます。Nという数字の付いた前置引数を使用すると、これらのリストの中のN
番目のbulletが選択されます。もしも、このコマンドを呼び出したときにアク
ティブなリージョンがあるならば、選択された文章は普通のアイテムに変更さ
れます。前置引数を使うと、すべての行がリストアイテムに変換されます。も
しも最初の行がすでにリストアイテムだったならば、どのアイテムの符号もリ
ストから削除されるでしょう。最後に、アクティブなリージョンでない場合で
も、リストアイテムに変換されます。
@kindex C-c *
@item C-c *
プレーンなリストのアイテムを見出しに変更します（そのロケーションによっ
てはサブの見出しになることもあります。）@xref{見出し位置と階層の変更}.、こ
こに詳しい説明があります。
@kindex C-c C-*
@item C-c C-*
プレーンなリスト全体をカレントの見出しのサブツリーに変換します。チェック
ボックス(@pxref{チェックボックス})は、チェックされていないとき（またはチェッ
クされているとき）はTODO（またはDONE）キーワードになるでしょう。
@kindex S-@key{left}
@kindex S-@key{right}
@item S-@key{left}/@key{right}
@vindex org-support-shift-select
bullet上、またはアイテムの行のどこかにカーソルが置かれているときに、こ
のコマンドは、また、bulletのスタイルを切り替えます。詳細は
@code{org-support-shift-select}に依存します。
@kindex C-c ^
@item C-c ^
プレーンなリストを並び替えます。次の並び替えの方法を入力します。数字順
、アルファベット順、時間順、あるいはカスタムな機能の順番に。
@end table

@node 引き出し, ブロック, エントリー中の階層構造, ドキュメントの構造
@section 引き出し
@cindex drawers
@cindex #+DRAWERS
@cindex visibility cycling, drawers

@vindex org-drawers
あるエントリーに関連する情報を保持していたいときがあるが、普段はその情報を見
たくはないということがあります。こういうときのために、Org-modeは@emph{引き出し}と
いう機能を持っています。引き出しは
@code{org-drawers}@footnote{@code{#+DRAWERS: HIDDEN PROPERTIES STATE}というような行を使ってファ
イル毎に引き出しを定義することができます。}変数で設定する必要があります。引
き出しはこんな形をしています。

@example
** これは見出しです
   ここはまだ引き出しの外側です
   :DRAWERNAME:
   これは引き出しの内側です。
   :END:
   引き出しの後です。
@end example

見出し上で表示の切り替え(@pxref{表示、非表示の切り替え})を行うとエントリーを隠した
り表示したりすることができますが、引き出しの部分は1行に畳まれたままの状態に
なります。引き出しの中身を見るためには、カーソルを引き出しの行に移動し、そこ
で@key{TAB}キーを押すことが必要です。Org-modeは属性(@pxref{プロパティとカラム})を保持
するために、@code{PROPERTIES}という引き出しを使用します。そしてノート
(@pxref{作業の状態変化の追跡})と時刻(@pxref{作業に費やした時間の計測})の変化の状態を用意
するために@code{LOGBOOK}という引き出しの中に保存をすることができます。もしも、状
態の変化のためと似たような方法で素早くノートをLOGBOOKの引き出しに保存したい
ときには、このように使います。

@table @kbd
@kindex C-c C-z
@item C-c C-z
LOGBOOKのための引き出しにタイムスタンプ付きのノートを追加します。
@end table

@node ブロック, 脚注, 引き出し, ドキュメントの構造
@section ブロック

@vindex org-hide-block-startup
@cindex blocks, folding
Org-modeはソースコードの例(@pxref{リテラルの例})
から時刻のログ情報(@pxref{作業に費やした時間の計測})を記録することまで、いろいろな
目的のために、begin...endというブロックを使用します。このブロックでは、行の
先頭でTABを押すことによって、折り畳んだり、折り畳みを解いたりすることができ
ます。@code{org-hide-block-startup}変数を設定するか、以下のようなファイル毎の設定
をすることで、起動時に全てのブロックを折り畳んでおくこともできます。

@cindex @code{hideblocks}, STARTUP keyword
@cindex @code{nohideblocks}, STARTUP keyword
@example
#+STARTUP: hideblocks
#+STARTUP: nohideblocks
@end example

@node 脚注, Orgstructモード, ブロック, ドキュメントの構造
@section 脚注
@cindex footnotes

Org-modeは脚注の作成をサポートしています。Org-modeは、@file{footnote.el}パッケー
ジと対照的に、1回限りのEメールのような文書だけでなく、大きな文書上で動作する
よう設計されています。基本構文は@file{footnote.el}の構文で使われているのと良く似
ており、i.e.@:インデントが認められていない、カラム0の角カッコの中の脚注の印
によって始まるパラグラフの中で定義されます。もしも脚注の中でパラグラフを改行
したいならば、@LaTeX{}の用語である@samp{\par}を使用します。脚注の参照は、テキストの
中の単純な角カッコの中の記号です。例えば。

@example
Org-modeのホームページ[fn:1] は以前に比べて現在は相当改良されていると思いま
す。
...
[fn:1] リンク先は: http://orgmode.org
@end example

Org-modeでは数字をベースとした構文を、@emph{名前のついた}脚注とオプションのインラ
インでの定義へと拡張しています。プレーンな数字を(@file{footnote.el}で行えるように
）マーカーとして使うことは、下位の互換性としてサポートされていますが、@LaTeX{}
のsnippet(@pxref{LaTeXの組み込み})と衝突する危険性があるのでお奨めはできません。以
下に確かな参考資料を説明します。

@table @code
@item [1]
プレーンな数字付きの脚注用の記号です。@file{footnote.el}と互換性はあります
が、@samp{[1]}のような記号は、snippetのコードとかぶることが多いので推奨しま
せん。
@item [fn:name]
名前付きの脚注参照、そこでは@code{name}がユニークな言葉によるラベルとなって
おり、さもなければ簡単に自動的に作成される、数字が用いられます。
@item [fn:: これは脚注のインラインの定義です]
参照のポイントに直接定義がなされる@LaTeX{}のような無記名の脚注。
@item [fn:name: a definition]
脚注のインラインでの定義、それはまた、ノートのための名前を明確に規定し
ます。Org-modeは同じノートに対して多重の参照を許容するので、新たな参照
を作成するために、@code{[fn:name]}を使用することができます。
@end table

@vindex org-footnote-auto-label
脚注のラベルは自動的に作成することができます。そうしないならば、あなた自身で
名前を作成することができます。これは@code{org-footnote-auto-label}変数で操作され
、@code{#+STARTUP}キーワードに対応します。詳細については変数の説明を参照してくだ
さい。

@noindent
以下のコマンドはプロパティを操作する助けとなります。

@table @kbd
@kindex C-c C-x f
@item C-c C-x f
脚注の動作のコマンド。

カーソルが脚注参照上にあるときに、定義部分にジャンプします。カーソルが
定義部分にあるときに、（最初の）参照されている部分にジャンプします。

@vindex org-footnote-define-inline
@vindex org-footnote-section
@vindex org-footnote-auto-adjust
そうでなければ、新しい脚注を作成します。
@code{org-footnote-define-inline}@footnote{対応するインバッファの設定は、
@code{#+STARTUP: fninline}または @code{#+STARTUP: nofninline}となります。}によっ
て、参照の一部として、または、@code{org-footnote-section}変数によって決定さ
れる場所の中に区分されて、テキストの中に正しく定義が配置されるでしょう。

前置引数と一緒にコマンドが呼び出された場合は、追加のオプションのメニュ
ーが提示されます。
@example
s   @r{参照の順場によって、脚注の定義は並び替えられます。編集している間は、}
    @r{Org-modeは特定の並びの中に脚注の定義を並び替える努力はしません。}
    @r{もしもそれらを並び替えたいならば、このコマンドを使用してください。}
    @r{それによって@code{org-footnote-section}に従ってエントリーをまた移動しま
す。}
    @r{挿入／削除のあとに自動的に並び替えるには、変数を使うことで設定する}
    @r{ことができます。}
r   @r{単純な@code{fn:N} の脚注を思い出してください。挿入／削除それぞれのあとの
}
    @r{自動的な採番は、@code{org-footnote-auto-adjust}変数を使う}
    @r{ことで設定できます。}
S   @r{最初の@code{r}のショートカットで、@code{s}はアクションです。}
n   @r{すべての定義（インラインの定義もふくみます）を特別なセクションに集
める}
    @r{ことによって脚注を標準化します。そしてそれからそれらの定義を順番に
採番}
    @r{します。参照先にも番号がふられます。これは、ひとつのドキュメントを
終了}
    @r{する前の最後の段階であることを意味します。(e.g.@: Eメールを発送する）
。}
    @r{エクスポート機能はこのことを自動的に行い、}
    @r{@code{message-send-hook}のような何かを行います。}
d   @r{そのポイント、およびそれについての参照先の定義を削除します。}
@end example
@code{org-footnote-auto-adjust}@footnote{対応するインバッファのオプションは
@code{fnadjust}と@code{nofnadjust}になります。}と@code{nofnadjust}の変数に依存し、そ
れぞれの挿入と削除のあとに、番号の振り直しと脚注の並び替えが自動的に行
われます。

@kindex C-c C-c
@item C-c C-c
もしもカーソルが脚注の参照の上にあるときは、定義部分に飛びます。もしも
それがある定義ならば、参照先にジャンプして戻ります。前置引数と一緒に、
脚注の場所を呼び出すときに、@kbd{C-c C-x f}として同じメニューが提供されて
います。
@kindex C-c C-o
@kindex mouse-1
@kindex mouse-2
@item C-c C-o  @r{or} mouse-1/2
脚注のラベルはまた、定義／参照先に対応してリンクを貼ります。そして通常
のコマンドでこれらのリンクをフォローするための通常のコマンドを使用する
ことができます。
@end table

@node Orgstructモード, , 脚注, ドキュメントの構造
@section The Orgstruct minor mode
@cindex Orgstructモード
@cindex minor mode for structure editing

もしもOrg-modeの構造の編集とリストのフォーマットの動作について直感的な方法を
好むのならば、あなたはTextモードやMailモードと同じような他のモードのコマンド
を使用したいと思うでしょう。@code{orgstruct-mode}というマイナーモードでそれが可能
になります。@kbd{M-x orgstruct-mode}を使ってモードを切り替えるか、例えばMessage
モードの中で、デフォルトでそれを作動させるか、次のいずれかを用いて、

@lisp
(add-hook 'message-mode-hook 'turn-on-orgstruct)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
@end lisp

このモードがアクティブで、カーソルが見出しやリストアイテムの最初の行のような
Org-modeのような行の上にあるときには、ほとんどの構造の編集のためのコマンドは
動作するでしょう。たとえ、あなたが使っているメジャーモードの中で、同じキーが
普通に異なる機能を持っているとしても。もしもカーソルがそういった特別の行の一
つの中に置かれていなくても、Orgstructモードは影の中で静かに隠れています。
@code{orgstruct++-mode}を使ったときは、Org-modeは、それらのモードの中に、インデン
トやオートフィルの設定を書き出すでしょう。そして、アイテムの最初の行の後にア
イテムのコンテクストを見つけるでしょう。

@node テーブル, ハイパーリンク, ドキュメントの構造, Top
@chapter テーブル
@cindex tables
@cindex editing tables

Org-modeは、高速で直感的なテーブルエディタを備えています。Emacsの@file{calc}パッ
ケージを用いて、スプレッドシートのような計算機能に対応しています。
@ifinfo
(@pxref{Top,Calc,,Calc,Gnu Emacs Calculator Manual}).
@end ifinfo
@ifnotinfo
（Emacs Calculatorの詳細は、同パッケージのマニュアルを参照してください。）
@end ifnotinfo

@menu
* 組み込みのテーブルエディタ::  単純なテーブル
* 列幅と整列::          自動設定を解除する
* 行のグループ::       縦の線を引き金にしてグループを作る
* Orgtblモード::          マイナーモードとしてのテーブルエディタ
* スプレッドシート::  テーブルエディタはスプレッドシートの能力を持つ
* Org-Plot::                 org-modeのテーブルからプロットする
@end menu

@node 組み込みのテーブルエディタ, 列幅と整列, テーブル, テーブル
@section 組み込まれたテーブルエディタ
@cindex テーブルエディタ、組み込み

Org-modeを使うと、プレーンなASCII形式のテーブルを手軽に編集できます。空白文
字を除いて、最初の文字が@samp{|}であれば、どの行もテーブルの一部であるとみなされ
ます。@samp{|}は、列を区分するセパレータとしても使われます。Org-modeのテーブルは
、次のような見た目になるでしょう。

@example
| Name  | Phone | Age |
|-------+-------+-----|
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |
@end example

テーブルの中で、@key{TAB}や@key{RET}もしくは@kbd{C-c C-c}を押す度に、テーブルの表示が自
動的に更新されます。@key{TAB}を押すとカーソルが次のフィールドに移ります（@key{RET}の
場合は次の行へ）。また、テーブルの端もしくは水平ラインの直前の行で押せば、テ
ーブルに新しい行が追加されます。テーブルのインデントは一行目で決定されます。
@samp{|-}で開始するどんな行も水平ラインとして解釈され、次にテーブルが更新される時
に、水平ラインはテーブル幅いっぱいに拡張されます。つまり、上記のテーブルを作
成するためには、次のように入力するだけでよかったのです。

@example
|Name|Phone|Age|
|-
@end example

@noindent
続いて@key{TAB}を押してテーブルを整列し、フィールドへの入力を始めます。さらに素
早いテーブルの作成方法は、@code{|Name|Phone|Age}に続いて@kbd{C-c @key{RET}}と入力すること
です。

@vindex org-enable-table-editor
@vindex org-table-auto-blank-field
フィールドに文字を入力すると、Org-modeは@key{DEL}と@key{Backspace}、また、すべての文
字キーを特別な方法で扱います。文字の挿入と削除によって他のフィールドがズレて
しまうことを避けるためです。また、@emph{@kbd{@key{TAB}}、@kbd{S-@key{TAB}}もしくは@kbd{@key{RET}}によって
、カーソルが新しいフィールドへ移動した直後に文字を入力すると}、自動的に空白
文字が挿入されます。この動作が気に入らない場合には、変数
@code{org-enable-table-editor}と@code{org-table-auto-blank-field}を調節してください。

@table @kbd
@tsubheading{テーブルの作成と変換} @orgcmd{C-c |,org-table-create-or-convert-from-region}
アクティブリージョンをテーブルに変換します。全ての行が少なくとも一つの
タブを含んでいるならば、この関数は処理対象をタブ区切りの表であると想定
します。また、全ての行がコンマを含んでいるならば、コンマ区切り（いわゆ
るCSV）であると想定されます。それ以外の場合は空白文字で区切られている
と想定します。プレフィックスを用いることで、区切り文字を強制的に指定で
きます。すなわち、@kbd{C-u}でCSV、@kbd{C-u C-u}でTAB区切りを指定できます。また
、プレフィックスの引き数として整数値Nを用いれば、少なくともN個の連続し
た空白を区切りとして指定できます。条件に合わなければ、TABが代わりの区
切りとして使われるでしょう。@*
もしアクティブリージョンが存在しないならば、このコマンドは空のテーブル
を生成します。しかし、@kbd{|Name|Phone|Age @key{RET} |- @key{TAB}}とタイプしてテー
ブルを作り始める方が簡単です。

@c
@c
@c
@c
@tsubheading{テールの整列とフィールドの動き} @orgcmd{C-c C-c,org-table-align}
カーソルを動かさずにテーブルを整列します。@orgcmd{<TAB>,org-table-next-field}
テーブルを整列して、カーソルを次のフィールドに移します。必要ならば新た
な行を生成します。@orgcmd{S-@key{TAB},org-table-previous-field}
テーブルを整列して、カーソルを前のフィールドに移します。
@orgcmd{@key{RET},org-table-next-row}
テーブルを整列して、次の行にカーソルを下げます。必要ならば新しい行を追
加します。行頭もしくは行末にカーソルがあるときの@key{RET}は、NEWLINEを意味
して、テーブルの分割に使われます。@orgcmd{M-a,org-table-beginning-of-field}
フィールド内の文頭にカーソルを移動します。もしくは、前のフィールドの文
頭に移動します。@orgcmd{M-e,org-table-end-of-field}
フィールド内の文末にカーソルを移動します。もしくは、次のフィールドの文
末に移動します。

@c
@c
@c
@c
@c
@c
@c
@c
@tsubheading{テーブルの列と行の編集}
@orgcmdkkcc{M-@key{left},M-@key{right},org-table-move-column-left,org-table-move-column-right}
カーソルがある列を左右に移動します。
@orgcmd{M-S-@key{left},org-table-delete-column}
カーソル位置の列を削除します。@orgcmd{M-S-@key{right},org-table-insert-column}
カーソル位置の左に新しい列を追加します。
@orgcmdkkcc{M-@key{up},M-@key{down},org-table-move-row-up,org-table-move-row-down}
カーソル位置の行を上下に移動します。@orgcmd{M-S-@key{up},org-table-kill-row}
カーソル位置の行もしくは水平ラインを削除します。
@orgcmd{M-S-@key{down},org-table-insert-row}
カーソル位置の上に新しい行を追加します。プレフィックスを使うと、カーソ
ル位置の下に追加されます。@orgcmd{C-c -,org-table-insert-hline}
カーソル位置の下に水平ラインを追加します。プレフィックスを使うと、カー
ソル位置の上に追加されます。@orgcmd{C-c @key{RET},org-table-hline-and-move}
カーソル位置の下に水平ラインを追加して、カーソルを追加された水平ライン
の次の行に移動します。@orgcmd{C-c ^,org-table-sort-lines}
リージョンに含まれるテーブルの各行をソートします。ポイントのある列の情
報がソートに利用されます。また、ソート対象となる範囲は、最も近い水平ラ
インの行まで、もしくは、テーブル全体が指定されます。カーソル位置がテー
ブルの第一列よりも前にあるときは、ソートに利用する列を指定するためにプ
ロンプトが表示されます。すでにアクティブリージョンが存在する場合、マー
クは第一行とソートに利用する列を指定して、同時にポイントは、ソート対象
に含まれる最終行に位置しなければなりません。このコマンドは、ソートの種
類（アルファベット順、数値順、もしくは時間順）を指定するためにプロンプ
トを表示します。プレフィックスを利用すると、大文字と小文字が区別されます。

@c
@c
@c
@tsubheading{リージョン} @orgcmd{C-c C-x M-w,org-table-copy-region}
テーブルの矩形領域を特別なクリップボードにコピーします。ポイントとマー
クは、矩形領域を構成する末端となるフィールドを決定します。アクティブリ
ージョンがなければ、カーソル位置のフィールドだけをコピーします。この処
理は、テーブルの水平ラインを無視します。
@orgcmd{C-c C-x C-w,org-table-cut-region}
テーブルの矩形領域を特別なクリップボードにコピーし、領域内の全てのフィ
ールドを空にします。つまりこれは「カット」操作です。
@orgcmd{C-c C-x C-y,org-table-paste-rectangle}
テーブルに矩形領域をペーストします。領域の左上がカーソル位置のフィール
ドに上書きされます。ペーストする領域に重なるすべてのフィールドは上書き
されます。対象とするテーブルに矩形領域が合わないならば、必要に応じてテ
ーブルは拡張されます。この処理は、テーブルの水平ラインを無視します。
@orgcmd{M-@key{RET},org-table-wrap-region}
カーソル位置でフィールドの文字列を分割し、カーソル以降を一つ下のフィー
ルドの文頭に移動します。アクティブリージョンが存在し、またポイントとマ
ークの両方が同じ列にあるとき、列に含まれるテキストは、与えられた行数を
最小化するように改行されます（訳注：余計な空白が消される）。プレフィッ
クスで指定する整数値は、希望する行数に合わせるために使われます（訳注：
M行をN行に圧縮できます）。もし選択領域がない状態でプレフィックスを指定
すると、カーソル位置のフィールドは空白になり、元々あった文字列は一つ上
のフィールドの文末に付け加えられます。

@tsubheading{計算機能}
@cindex 数式、テーブル内部
@cindex テーブルの中での計算
@cindex region, active
@cindex アクティブなリージョン
@cindex 暫定マークモード
@c
@orgcmd{C-c +,org-table-sum}
カーソル位置の列、もしくは、アクティブリージョンで定められた矩形領域に
含まれる数値を合計します。計算結果はエコー領域に表示され、@kbd{C-y}で挿入
できます。@orgcmd{S-@key{RET},org-table-copy-down}
@vindex org-table-copy-increment
カーソル位置のフィールドが空白のとき、上にある空白でないフィールドから
文字列をコピーします。空白でないときには、値を次の行のフィールドにコピ
ーし、カーソルも移動させます。@code{org-table-copy-increment}の値に依存して
、フィールドが整数値のときは値を一つ増やしてからコピーされるでしょう。
整数の値が大きすぎる場合は、値が増やされません。また、プレフィックスで
@code{0}を用いれば、一時的に値の増加を防げます。このキーバインドは、
shift-selectionと、これに関連するモードでも使われています（@pxref{衝突}）。

@c
@tsubheading{その他の機能} @orgcmd{C-c `,org-table-edit-field}
専用のウィンドウでカーソル位置のフィールドを編集します。この機能は、フ
ィールドの全体が表示されていない場合に便利です（@pxref{列幅と整列}）。プレフ
ィックス@kbd{C-u}を伴って関数が呼ばれると、フィールドの全ての内容が表示さ
れます（訳注：フィールドの文字列が一部隠れている場合にだけ呼び出せる）
。そのためカーソル位置のフィールドをそのまま編集できます。
@item M-x org-table-import
@c
ファイルをテーブルとしてインポートします。テーブルは、タブもしくは空白
で区切られている必要があります。この機能は、例えば、スプレッドシートの
テーブルやデータベースの情報をインポートするために利用します。というの
も、一般的にこれらのプログラムが、タブ区切りのテキストフィールドを書き
出せるためです。このコマンドは、ファイルの内容をバッファに挿入すること
で処理が始まり、その領域をテーブルに変換します。コンバータに与えられる
すべてのプレフィックスは、セパレータを決定するために利用されます。
@orgcmd{C-c |,org-table-create-or-convert-from-region}
org-modeのバッファにテーブル状のテキスト（訳注：文字列がタブで区切られ
ているテキスト領域など）をペーストすることでもorg-modeのテーブルを作成
できます。@kbd{C-x C-x}でバッファにペーストされているテキストを選択して、
@kbd{C-c |}でorg-modeのテーブルに変換します（前述の@i{Creation and conversion}
を参照してください）。
@item M-x org-table-export
@findex org-table-export
@vindex org-table-export-default-format
テーブルをエクスポートします。エクスポートされるファイルでは、標準でタ
ブ区切りが使われます。この機能は、例えば、スプレッドシートやデータベー
スプログラムと情報を交換するために使います。ファイルのエクスポートに使
われるフォーマットは、変数@code{org-table-export-default-format}で調節でき
ます。また、ファイル名を指定するためにプロパティ@code{TABLE_EXPORT_FILE}を
利用でき、サブツリーでのテーブルエクスポートのフォーマットを指定するた
めにプロパティ@code{TABLE_EXPORT_FORMAT}を指定できます。エクスポートされる
テーブルについて、org-modeはかなり一般的なフォーマットをサポートします
。エクスポートのフォーマットは、Orgtblのラジオテーブルで使われているも
のと同じです。より詳しい説明は@ref{変換関数}を参照してください。
@end table

@samp{|}で始まる行を思い通りに編集するため、自動的なテーブルの編集が好みでない場
合は、次のコマンドでこの機能を停止できます。

@lisp
(setq org-enable-table-editor nil)
@end lisp

@noindent
こうすると、テーブルのコマンドで利用できるのは、@kbd{C-c C-c}による手動の再整列
だけになります。

@node 列幅と整列, 行のグループ, 組み込みのテーブルエディタ, テーブル
@section 列幅と整列
@cindex narrow columns in tables
@cindex alignment in tables

テーブルの各列の幅はテーブルエディタによって自動的に決定されます。また、列の
配置も自動的に決定されます。具体的には、列の中で数値でないフィールド数に対す
る、数値（と解釈できる）フィールド数の割合に応じて決まります。

ただ一つ、または、いくつかのフィールドでより多くのテキストを扱おうとすると、
困ったことに列幅が広がってしまいます。もしくは、フィールドの内容にかかわらず
、固定幅の列でテーブルを作成したいと思うかもしれません。列の幅を指定するため
には、列のどこに記述してもよいですが、一つのフィールドが文字列@samp{<N>}だけを含
む必要があります。ここで@samp{N}は、列の幅を指定する整数値の文字列です@footnote{この機能は
、XEmacsでは動作しません}。次に行なわれるテーブルの整列では、この数値を用い
て列の幅を設定します。

@example
@group
|---+------------------------------|               |---+--------|
|   |                              |               |   | <6>    |
| 1 | one                          |               | 1 | one    |
| 2 | two                          |     ----\     | 2 | two    |
| 3 | This is a long chunk of text |     ----/     | 3 | This=> |
| 4 | four                         |               | 4 | four   |
|---+------------------------------|               |---+--------|
@end group
@end example

@noindent
指定された幅よりも広いフィールドは一部が切り取られ、文字列@samp{=>}で終わります。
フィールド内に表示されていたテキストは、バッファ内部にそのまま存在し、表示が
隠されていることに注意してください。隠されたテキストも含めてすべてを表示する
ためには、対象とするフィールドにマウスカーソルを置いてください。ツールチップ
が現われて、フィールドに含まれるすべての内容が表示されます。このようなフィー
ルドを編集するには、@kbd{C-c `}を使います（@kbd{C-c}に続いてバッククォートを入力しま
す）。フィールドの全ての内容を表示した新しいウィンドウが開かれます。フィール
ドの内容を編集し、@kbd{C-c C-c}で完了します。

@vindex org-startup-align-all-tables
幅が狭められた列を持つテーブルが記述されているファイルを訪問する段階では、ま
だ文字列の隠蔽は実行されていません。見た目を良くするにはテーブルを整列する必
要があります。オプションの@code{org-startup-align-all-tables}
を設定すると、ファイルを訪問するときにファイルに記述された全てのテーブルが自
動的に整列されます。ただしスタートアップが少し遅くなります。以下の設定を利用
すれば、ファイルごとにこのオプションを設定することもできます。

@example
#+STARTUP: align
#+STARTUP: noalign
@end example

数値の多い列を右揃えにして、文字列の多い列を左揃えにする自動的な整列を無効に
したいならば、@samp{<r>}、@samp{c}@footnote{Emacsの表示上は中央揃えにはできませんが、HTMLへエク
スポートするときに中央揃えになります。}、もしくは@samp{<l>}を同じような形式で利用
できます。@samp{<|10>}のようにすれば、列を揃える方法とフィールドの幅を同時に指定
できます。

書式の設定情報のみを含む行は、ドキュメントをエクスポートするときに自動的に削
除されます。

@node 行のグループ, Orgtblモード, 列幅と整列, テーブル
@section 行のグループ
@cindex 列のグルーピング

org-modeのテーブルをエクスポートすると、垂直ラインを標準で表示しません。これ
は、一般に視覚的な満足度がより高いためです。しかし場合によっては、列のグルー
プでテーブルを構造化する目的で、垂直ラインが役に立つます。これは水平ラインが
いくつかの行をグループ化するために役立つことと同じです。列のグループを指定す
るために、最初のフィールドが@samp{/}だけを含む特別な行を使います。それ以降のフィ
ールドについては、@samp{<}を含むとき、その列がグルーピングされる列の始めであるこ
とを意味します。@samp{>}を含む場合は、グループの終了を表します。@samp{<>}を含む列はこ
れ自体を一つのグループにします。列のグループを表す境界線が、エクスポート時に
垂直ラインで表示されます。以下に例を示します。

@example
| N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
|---+-----+-----+-----+---------+------------|
| / |   < |     |   > |       < |          > |
| 1 |   1 |   1 |   1 |       1 |          1 |
| 2 |   4 |   8 |  16 |  1.4142 |     1.1892 |
| 3 |   9 |  27 |  81 |  1.7321 |     1.3161 |
|---+-----+-----+-----+---------+------------|
#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))
@end example

表示させたいすべての垂直ラインの後ろに、列のグループ開始を指定するだけでも十
分です。

@example
|  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
|----+-----+-----+-----+---------+------------|
| /  | <   |     |     | <       |            |
@end example

@node Orgtblモード, スプレッドシート, 行のグループ, テーブル
@section Orgtblマイナーモード
@cindex Orgtblモード
@cindex テーブルのマイナーモード

org-modeのテーブルエディタが提供する直感的な編集が好みなら、テキストモードや
メールモードのような別のモードで利用したくなるかもしれません。これはマイナー
モードのOrgtblモードが実現してくれます。@kbd{M-x orgtbl-mode}でトグルできます。
標準でOrgtblモードを有効にするには、たとえばメッセージモードのときに、次の設
定を使います。

@lisp
(add-hook 'message-mode-hook 'turn-on-orgtbl)
@end lisp

さらに、いくつかの特別な手順を追加することで、orgtblモードの任意のシンタック
スを使ってテーブルをメンテナンスできます。たとえば、orgtblモードの簡単さと機
能を用いて@LaTeX{}のテーブルを構築できます。これは表計算機能も含んでいます。さ
らなる詳細は、@ref{任意の構文によるテーブル}.を参照してください。

@node スプレッドシート, Org-Plot, Orgtblモード, テーブル
@section スプレッドシート
@cindex テーブルの中での計算
@cindex 表計算機能
@cindex @file{calc}パッケージ

org-modeのテーブルエディタは、表計算機能を実装するためにEmacsの@file{calc}を利用
します。異なるフィールドの値を使って様々なフィールドの値を算出するために、
Emacs
Lispの書式も評価できます。十分な表計算機能が備わっていますが、org-modeの実装
が他の表計算ソフトと全く同等というわけではありません。たとえば、org-modeは
@emph{列の数式}の概念を理解しています。これは、関連する各フィールドに数式をコピー
することなく、ヘッダーを除いた列にある全てのフィールドに適用されます。数式の
デバッガもあります。また、数式に含まれる参照に対応するフィールドを、テーブル
内でハイライトする機能と、それらの参照に矢印キーで移動する機能を持つ数式エデ
ィタがあります。

@menu
* 参照::                   どうやって他のフィールドや範囲を参照するか
* Calc用の数式構文::   Calcを使って計算する
* Lisp用の数式構文::   Emacs Lispで数式を書く
* フィールドと範囲の数式::  特定の（範囲の）フィールドのための数式
* 列の数式::             カラム全体に有効な数式
* 数式の編集とデバッグ::  数式を修正する
* テーブルの更新::    依存関係にあるすべてのフィールドを再計算する
* 一歩進んだ機能::    フィールド名、パラメーター、自動再計算
@end menu

@node 参照, Calc用の数式構文, スプレッドシート, スプレッドシート
@subsection 参照
@cindex リファレンス

テーブル内部のフィールドを他のフィールドの値を使って計算するに、数式は、他の
フィールドか範囲を必ず参照していなければなりません。org-modeでは、名前、絶対
的または相対的な位置によってフィールドを参照することができます。フィールドの
位置がどこかを特定するためには、そのフィールドで@kbd{C-c ?}を押してください。も
しくは、グリッド表示をトグルするために@kbd{C-c @}}を使用してください。

@subsubheading フィールドの参照
@cindex フィールドの参照
@cindex 参照、フィールド

数式は別フィールドの値を2つの方法で参照できます。他の表計算ソフトと同じよう
に、@code{B3}のような文字と数値の組み合わせでフィールドを参照できます。三行目の第
二フィールドを意味しています。

@noindent
@vindex org-table-use-standard-references
org-modeでは、もう一つの方法を好みます@footnote{org-modeはユーザーが指定する@samp{B4}のよ
うな参照を理解しますが、編集を目的とした数式を提供するときはこのシンタックス
は使われません。変数@code{org-table-use-standard-references}を使うことで、この動
作を変更できます。}。より一般的な次のような表記です。
@example
@@@var{row}$@var{column}
@end example

@noindent
また、相対的な参照も認めています。すなわち、値が計算されいるフィールドの行と
列に相対的な参照です。このような相対的な参照は、数式を一度だけ記録すればよく
、数式のコピーや変更せずにたくさんのフィールドで利用できます。

列の参照は、@samp{1}、@samp{2}、...@samp{@var{N}}のように絶対的に表されるか、もしくは、カーソル
位置の列に対して相対的に@samp{+1}、@samp{-2}のように表されます。@code{$>}はテーブルの最終列
を参照します。さらに、@code{$>-2}のようなオフセットを指定できます。この場合、一番
右から三番目の列を表します。

行の指定ではデータを含む行のみをカウントして、水平ライン（hline）を無視しま
す。列と同様に、@samp{1}...@samp{@var{N}}のように絶対的な行の番号を利用できます。また、
@samp{+3}や@samp{-1}のようにカーソル位置の行に対する相対的な位置を表し、@code{@@>}でテーブ
ルの最終行を参照します@footnote{後方互換のために、@samp{$LR5}や@samp{$LR12}のような特別な名前も
利用できます。これらは、テーブル最終行にある5番目と12番目のフィールドを正し
く参照します。しかしながら、このシンタックスは廃止予定であり、新たな文書で使
うべきではありません}。ある水平ラインに対する相対的な行を指定することもでき
ます。@samp{I}は最初のhlineへの参照@footnote{テーブルの各行を@emph{分離している}水平ラインだけ
がカウントされることに注意してください。ヘッダーの上に水平ラインがあるテーブ
ルでは、その水平ラインをカウントしません。}で、@samp{II}は二番目の水平ラインへの
参照、といった具合に指定します。@samp{-I}は、カーソル位置の行の上方にある最初の水
平ラインを参照し、@samp{+I}は下方にある最初の水平ラインを参照します。@samp{III+2}のよ
うに指定すると、テーブルの三番目の水平ラインから二番目の行を表します。

@samp{0}は、カーソル位置の行と列を参照します。また、もし参照について列と行のいず
れかを記述しなければ、カーソル位置の行または列が暗黙に参照されます。

org-modeの@emph{符号無し}数値を使った参照は、静的な参照です。つまり、二つの異なる
フィールドにある数式の中で同じ参照を利用すれば、常に同じフィールドが参照され
ます。@emph{符号付き}数値を使った参照は、動的な参照です。これは、見た目上は同じ参
照であっても、数式で計算されるフィールドに依存して、異なるフィールドを参照で
きるためです。


いくつかの例を示します。

@example
@@2$3      @r{第二行、第三列}
C2        @r{同上}
$5        @r{現在行の第五列}
E&        @r{同上}
@@2        @r{現在列、第二行}
@@-1$-3    @r{カーソル位置から一つ上、左に三つ目}
@@-I$2     @r{カーソル位置の上方の水平ライン直下の第二列}
@end example

@subsubheading 範囲参照
@cindex 範囲参照
@cindex 参照、範囲指定

複数のフィールドを集めた矩形の範囲を参照できます。この範囲は、二つの参照を二
つのドット@samp{..}で接続して指定します。二つの参照が共にカーソル位置の行にあると
き、単純に@samp{$2..$7}と指定できます。しかし、一方のフィールドが異なる列にあると
きは、少なくとも最初に指定するフィールドについて@code{@@row$column}のような省略し
ない形式を使う必要があります（つまり、正しく解釈させるために参照を@samp{@@}で始め
なければなりません）。具体例は次のようになります。

@example
$1..$3        @r{カーソル位置の行の始めの3フィールド}
$P..$Q        @r{列の名前を使った範囲（後述する詳細を見てください）}
@@2$1..@@4$3    @r{二つのフィールド間にある6フィールド}
A2..C4        @r{同上}
@@-1$-2..@@-1   @r{カーソル位置の左の列の2つ上方の行の3フィールド}
@@I..II        @r{第一と第二の水平ラインに挟まれた領域（@code{@@I..@@II}の短縮表記）}
@end example

@noindent
範囲参照はCalcのベクトル関数に代入可能な値のベクトルを返します。範囲に含まれ
る空のフィールドは、普通は除去されます。これはベクトルが空ではないフィールド
のみを含むようにするためです（ただし下記の@samp{E}モードスイッチも参照してくださ
い）。もし、すべてのフィールドが空ならば、数式のシンタックスエラーを避けるた
めに@samp{[0]}が返されます。

@subsubheading 数式中のフィールドの座標
@cindex フィールドの座標
@cindex 座標、フィールド
@cindex 行、フィールドの座標
@cindex 列、フィールドの座標

Calc形式とLisp形式の数式では、数式の演算結果が指すフィールドの行と列の番号を
取得するために、@code{@@#}と@code{$#}を利用できます（訳注：前者が行を表し、後者が列を
表す）。伝統的なLispの数式に相当するのは@code{org-table-current-dline}と
@code{org-table-current-column}です。たとえば、

@example
if(@@# % 2, $#, string(""))   @r{奇数行に限定して列の番号を抽出する}
$3 = remote(FOO, @@@@#$2)      @r{テーブルFOOの二列目をコピーし、}
                             @r{現在のテーブルの三列目に上書きする}
@end example

@noindent
二つ目の例では、テーブルFOOは少なくとも、カーソル位置のテーブルが持つ行数と
同じ数の行がなければなりません。たくさんの行があると処理が重くなる@footnote{この計算
の規模は、O(N^2)のオーダーです。各フィールドをコピーするために、テーブルFOO
がパースされるのが原因です。}ことに気を付けてください。

@subsubheading 名前付き参照
@cindex 名前付き参照
@cindex 参照、名前付き
@cindex 名前、列やフィールド
@cindex 計算中の定数
@cindex #+CONSTANTS

@vindex org-table-formula-constants
@samp{$name}は、列の名前として解釈されます。パラメーターや定数を扱います。定数は
、変数@code{org-table-formula-constants}を利用してグローバルに定義されます。また
、次のような一文を追加して、ファイルのローカル変数として定義されます。

@example
#+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6
@end example

@noindent
@vindex constants-unit-system
@pindex constants.el
プロパティ（@pxref{プロパティとカラム}）もテーブルの数式では定数として扱われます。
プロパティ@samp{:Xyz:}については@samp{$PROP_Xyz}という名前を使います。そして、このプロ
パティは現在のアウトラインエントリーとその上位が階層的に検索されます。もし
@file{constants.el}パッケージを読み込んでいるならば、これも定数を決めるために使わ
れます。このパッケージには、プランク定数@samp{$h}のような物理定数、そしてキロメー
ター@samp{$km}のような単位が含まれています@footnote{@file{constants.el}は、@code{SI}と@code{cgs}の二つの
異なる単位系で定数の値を提供します。どちらが利用されるかは、変数
@code{constants-unit-system}の値に依存します。カレントバッファで値を設定するため
に、@code{#+STARTUP}でオプション@code{constSI}と@code{constcgs}を指定します。}。列の名前と
パラメーターは、テーブルの特別なラインで設定できます。詳細は後述します（
@ref{一歩進んだ機能}.）。すべての名前は文字から始まり、それ以降は文字と数値で構
成します。

@subsubheading リモート参照
@cindex リモート参照
@cindex 参照、リモート
@cindex 参照、異なるテーブルへ
@cindex 名前、列やフィールド
@cindex 計算中の定数
@cindex #+TBLNAME

別テーブルの定数、フィールドそして範囲を参照できます。現在のファイルでも、別
ファイルにある場合でも参照できます。シンタックスは、

@example
remote(NAME-OR-ID,REF)
@end example

@noindent
NAMEは別ファイルにあるテーブルの名前で、テーブルの前の行に@code{#+TBLNAME: NAME}
と設定しておきます。エントリーのIDも利用でき、別ファイルにあるものも指定でき
ます。この場合はエントリーに含まれる最初のテーブルを参照します。REFは前述し
たような絶対的なフィールドか範囲参照で、@code{@@3$3}や@code{$somename}と表され、参照さ
れたテーブルにおいて有効です。

@node Calc用の数式構文, Lisp用の数式構文, 参照, スプレッドシート
@subsection Calc用の数式構文
@cindex 数式のシンタックス、Calc
@cindex シンタックス、数式

@c FIXME:  The link to the Calc manual in HTML does not work.
数式は、Emacsの@file{Calc}パッケージが理解できる任意の代数表現です。@b{通常の計算とは
異なる@file{Calc}の慣例に気を付けてください。@samp{/}は@samp{*}よりも低く優先されます。つま
り、@samp{a/b*c}は、@samp{a/(b*c)}として解釈されます。}@code{calc-eval}（
@pxref{Calling Calc from Your Programs,calc-eval,Calling Calc from Your Lisp Programs, Calc, GNU Emacs Calc Manual}）で評価される以前に、先ほどのルールに従って変数が代入されます。
@cindex ベクトル、テーブルでの計算
範囲指定するベクトルは@samp{vmean}や@samp{vsum}のようなCalcのベクトル関数に直接渡され
ます。

@cindex フォーマット指定
@cindex モード、@file{Calc}
@vindex org-calc-default-modes
数式は、セミコロンの後に続くオプションモードの文字列を含むことができます。こ
の文字列は実行時にCalcや他のモードに作用するフラグで構成されます。デフォルト
では、org-modeは標準のCalcモード（精度=12桁、角度単位=度、分数／シンボリック
モード=OFF）を使います。ただし、表示フォーマットは、テーブルをコンパクトに保
つために、@code{(float 8)}に変更されています。

@example
p20           @r{Calcの内部計算精度を20桁に設定}
n3 s3 e2 f4   @r{通常表記、科学指数、工学指数、固定小数点}
              @r{でCalcの出力結果がorg-modeに戻る。}
              @r{Calcの計算精度が表示上の精度よりも高い限り、}
              @r{Calc表記は精度上の制限を受けない。}
D R           @r{角度モード（度／ラジアン）}
F S           @r{分数／シンボリックモード}
N             @r{全フィールドを数値として解釈。非数値は0を使用}
T             @r{強制的に文字列として解釈}
E             @r{領域中のフィールドを空に保つ}
L             @r{リテラル}
@end example

@noindent
大きな整数値を使用しないか、浮動小数点での高精度な計算と表示を行なわないなら
ば、Calcがすでにフォーマットした結果ではなく、org-modeに戻された後のCalcの出
力結果を再フォーマットする目的で、@code{printf}によるフォーマット指定を代わりとし
て与えることが可能です@footnote{@code{printf}による再フォーマットは、精度の影響を受けます
。@code{integer}や@code{double}に変換された値が渡されるためです。@code{integer}は、符号付き
32ビット整数値に丸め込まれます。@code{double}は、全体が64ビット精度に制限され、近
似的に16ビットの10進数の有意桁数があります。}。いくつかの例を示します。

@example
$1+$2                @r{第一と第二フィールドの和}
$1+$2;%.2f           @r{同上。ただし、小数点以下2桁表示}
exp($2)+exp($1)      @r{関数も利用可能}
$0;%.1f              @r{小数点以下1桁に再フォーマット}
($3-32)*5/9          @r{華氏から摂氏への変換}
$c/$1/$cm            @r{周波数[Hz]から波長[cm]への変換（constants.elを使用）}
tan($1);Dp3s1        @r{角度計算（3桁精度、科学指数1桁）}
sin($1);Dp3%.1e      @r{同上。ただし、printfでの表示指定}
vmean($2..$7)        @r{列の平均値、ベクトルを利用}
vmean($2..$7);EN     @r{同上。ただし、空フィールドを0とする}
taylor($3,x=7,2)     @r{$3の2次のテーラー級数でx=7の値}
@end example

Calcは論理演算の完全な集合も含んでいます。例として次があります。

@example
if($1<20,teen,string(""))  @r{もし年齢$1が20未満なら十代、そうでなければ空}
@end example

@node Lisp用の数式構文, フィールドと範囲の数式, Calc用の数式構文, スプレッドシート
@subsection 数式としてのEmacs Lisp形式
@cindex Lisp形式、テーブルの数式として

Emacs
Lispで数式を記述することもできます。Calcの機能では不十分なら、文字列操作と構
造の制御に役立ちます。開き括弧が後ろに続くシングルクォートで数式が始まるとき
、Lisp形式として解釈されます。評価値は、文字列か数値で返ります。@file{Calc}の数式
と同じように、セミコロンの後にモードとprintfフォーマットを指定できます。
Emacs
Lisp形式では、フィールドの参照がLisp形式で挿入されることを意識する必要があり
ます。デフォルトで、参照はフィールドを含む（ダブルクォートで括られた）Lispの
文字列として挿入されます。もし@samp{N}モードスイッチを指定すると、全ての参照され
た要素は数値になり（非数値のフィールドは0になる）、クォートなしでLisp形式の
数値として挿入されます。@samp{L}フラッグを指定すると、全てのフィールドは、クォー
トなしでそのままの内容が挿入されます。すなわち、もしLisp形式の文字列として参
照が挿入されることを望むなら、@code{"$3"}のように、ダブルクォートで参照のオペレー
タ自体を包んでください。範囲はスペースで区切られたフィールドとして挿入されま
す。そのため、リストやベクトルシンタックスに埋め込んだりできます。いくつかの
例を示します。Lispを用いて計算をするときに、@samp{N}モードの使われ方に注意してく
ださい。

@example
@r{一列目の内容について、一文字目と二文字目を入れ替える}
  '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
@r{一列目と二列目を加算する。Calcの@code{$1+$2}と同じ}
  '(+ $1 $2);N
@r{列1から列4の合計を計算。Calcの@code{vsum($1..$4)}と同じ}
  '(apply '+ '($1..$4));N
@end example

@node フィールドと範囲の数式, 列の数式, Lisp用の数式構文, スプレッドシート
@subsection フィールドと範囲の数式
@cindex フィールドの数式
@cindex 範囲の数式
@cindex 数式、テーブルの個々のフィールド
@cindex 数式、フィールドの範囲

特定のフィールドに数式を割り当てるためには、@samp{:=}に続けて、直接フィールドに書
き込みます。たとえば、@samp{:=vsum(@@II..III)}のようにします。カーソルがフィール
ドにある状態で、@key{TAB}や@key{RET}、もしくは@kbd{C-c C-c}を押すと、入力した数式はその
フィールド専用の数式として保存され、評価された後、フィールドの表示が演算結果
で置き換わります。

@cindex #+TBLFM
数式はテーブルの下にある@samp{#+TBLFM:}で始まる特別な行に保存されます。テーブルの
中で第三行の四番目のフィールドに数式を入力すると、この数式は@samp{@@3$4=$1+$2}の
ように記述されます。適当なコマンドで列と行の挿入／消去／入れ替えを行なうとき
、保存された数式の中の@i{絶対参照}（相対参照では関係ありません）は、同一のフィー
ルドを参照するために変更されます。もちろん通常の編集コマンドを用いてテーブル
の構造を編集するときには実行されません。したがって、マニュアルで数式を補正し
なければなりません。フィールドに数式を記入する代わりに、次のコマンドも使用で
きます。

@table @kbd
@orgcmd{C-u C-c =,org-table-eval-formula}
現在のフィールドに新しい数式をインストールします。このコマンドは、
@samp{#+TBLFM:}行から選ばれたデフォルトの数式を表示し、現在のフィールドに適
用してから保存します。
@end table

多数の別フィールドに数式を割り当てるために、等式の左側は特別な表現を指定でき
ます。範囲数式を入力するショートカットはありません。これを入力するには、数式
エディタ（@pxref{数式の編集とデバッグ}）を用いるか、@code{#+TBLFM:}行に直接記述します。

@table @code
@item $2=
列の数式。列の全体に対して有効。よく利用されるため、org-modeはこれらの
数式を特別な方法で扱います。@ref{列の数式}.を参照してください。
@item @@3=
行の数式。特定の行が含む全てのフィールドに適用する。@code{@@L=}は最終行を意
味する。
@item @@1$2..@@4$3=
範囲数式、与えられた矩形領域の全てのフィールドに適用する。これはある行
の全てのフィールドではなく一部に対して数式を割り当てることにも利用できます。
@item $name=
名前付きフィールド（@ref{一歩進んだ機能}を参照）
@end table

@node 列の数式, 数式の編集とデバッグ, フィールドと範囲の数式, スプレッドシート
@subsection 列の数式
@cindex 列の数式
@cindex 数式（テーブルの列）

@code{$3=}のような、シンプルな列の参照を数式に指定すると、同じ数式がその列の全て
のフィールドで使用されます。次の項目を利便性の高めるための例外としています。
（1）テーブルが水平ラインを含む場合は、最初の水平ラインよりも上に存在する全
ての行がテーブルの@emph{ヘッダー}の一部であると考えられ、列の数式によって変更され
ません。（2）フィールドや範囲の数式からすでに値を取得しているフィールドは、
列の数式は関与しません。これらの条件によって列の数式はとても使いやすくなって
います。

列に数式を割り当てるためには、列のフィールドに直接記述します。イコールの後に
続くように、@samp{=$1+$2}としましょう。同じフィールド内で@key{TAB}や@key{RET}もしくは
@kbd{C-c C-c}を押すと、入力した数式はそのフィールドのための数式として保存され、
評価されたのち、フィールドの表示が演算結果で置き換わります。フィールドが
@samp{=}だけの場合、以前に列で保存した数式が利用されます。各列について、org-mode
は直前に利用した数式だけを記憶します。@samp{#+TBLFM:}行で、列の数式は@samp{$4=$1+$2}の
ように保存されます。列数式のイコールの左側には、列の名前を置くことができず、
数値の列の参照か@code{$>}を置かなければなりません。

フィールドに数式を書き入れる代わりに、次のコマンドも利用できます。

@table @kbd
@orgcmd{C-c =,org-table-eval-formula}
現在の列に新しい数式を書き込み、数式の演算結果で置き換える。このコマン
ドは@samp{#+TBLFM:}の列から取得したデフォルトの数式を表示し、カーソル位置の
フィールドに適用してから保存します。数値のプレフィックス（たとえば@:
@kbd{C-5 C-c =}）を用いると、現在の列で連続したフィールドに同じ効果を与え
ます。
@end table

@node 数式の編集とデバッグ, テーブルの更新, 列の数式, スプレッドシート
@subsection 数式の編集とデバッグ
@cindex 数式の編集
@cindex 編集、テーブルの数式

@vindex org-table-use-standard-references
ミニバッファ、もしくは、直接フィールド内で、個々の数式を編集できます。
org-modeは、テーブルに含まれるすべてのアクティブな数式が表示される特別なバッ
ファも用意しています。数式を編集しようとすると、もし可能ならば、org-modeは参
照を標準のフォーマット（@code{B3}や@code{D&}のような記法）に変換します。内部フォーマッ
ト（@code{@@3$2}や@code{$4}のような記法）を用いて編集したい場合は、変数
@code{org-table-use-standard-references}を設定してください。

@table @kbd
@orgcmdkkc{C-c =,C-u C-c =,org-table-eval-formula}
カーソル位置の列やフィールドに結びついている数式をミニバッファで編集す
る。@ref{列の数式}と@ref{フィールドと範囲の数式}を参照してください。
@orgcmd{C-u C-u C-c =,org-table-eval-formula}
カーソル位置のフィールドにアクティブな数式（フィールドの数式、もしくは
列の数式）を再挿入します。これはフィールドの中でそのまま編集できるよう
にするためです。ミニバッファでの編集よりも有利なのは、@kbd{C-c ?}を使える
ことです。@orgcmd{C-c ?,org-table-field-info}テーブルのフィールド内で数式を編
集するときに、数式内のカーソルが置かれている参照によって指し示されたフ
ィールドをハイライトする。
@kindex C-c @}
@findex org-table-toggle-coordinate-overlays
@item C-c @}
オーバーレイ（@command{org-table-toggle-coordinate-overlays}）を使用して、テー
ブルの行と列の番号を表示するようにトグルする。テーブルが整列される度に
表示が変わり、@kbd{C-c C-c}で強制的に表示を更新できます。
@kindex C-c @{
@findex org-table-toggle-formula-debugger
@item C-c @{
数式のデバッガをON／OFFする（@command{org-table-toggle-formula-debugger}）。
@orgcmd{C-c ',org-table-edit-formulas}
現在のテーブルにあるすべての数式を、特別なバッファで編集する。バッファ
では数式はラインごとに一つずつ表示される。カーソル位置のフィールドにア
クティブな数式があるとき、カーソルエディタのカーソルはその数式をマーク
します。この特別なバッファの中では、org-modeは、カーソルがあるどんなフ
ィールドや範囲参照も自動的にハイライトします。数式の編集、削除、追加が
可能で、さらに次のコマンドを利用できます。
@table @kbd
@orgcmdkkc{C-c C-c,C-x C-s,org-table-fedit-finish}
数式エディタを抜けて、修正された数式を保存します。プレフィックス@kbd{C-u}
を使うと、新しい数式をテーブル全体に適用します。
@orgcmd{C-c C-q,org-table-fedit-abort} 変更を破棄して数式エディタを抜けます。
@orgcmd{C-c C-r,org-table-fedit-toggle-ref-type}
数式エディタの全ての参照について、(@code{B3}のような）標準の記法と（@code{@@3$2}
のような）内部の記法をトグルします。
@orgcmd{@key{TAB},org-table-fedit-lisp-indent}
カーソル位置のLisp数式を見やすくするかインテンドします。ラインにLisp数
式が含まれる場合は、Emacs
Lispのルールに基づいて数式を整えます。さらに@key{TAB}を押すと、整えられた
数式を崩して元の状態に戻します。開いた数式では、Emacs
Lispモードのように@key{TAB}でさらにインテンドします。
@orgcmd{M-@key{TAB},lisp-complete-symbol}
Emacs LispモードのようにLispの記号を補完します。
@kindex S-@key{up}
@kindex S-@key{down}
@kindex S-@key{left}
@kindex S-@key{right}
@findex org-table-fedit-ref-up
@findex org-table-fedit-ref-down
@findex org-table-fedit-ref-left
@findex org-table-fedit-ref-right
@item S-@key{up}/@key{down}/@key{left}/@key{right}
カーソル位置の参照を移動します。たとえば、参照が@code{B3}で@kbd{S-@key{right}}を押
すと、@code{C3}に変化します。これは相対参照や水平ラインの参照についても同じ
ように動作します。
@orgcmdkkcc{M-S-@key{up},M-S-@key{down},org-table-fedit-line-up,org-table-fedit-line-down}
列の数式のためのテストライン（訳注：現在ハイライトされている行）を
org-modeのバッファで上下に移動します。
@orgcmdkkcc{M-@key{up},M-@key{down},org-table-fedit-scroll-down,org-table-fedit-scroll-up}
テーブルを表示するウィンドウをスクロールします。
@kindex C-c @}
@findex org-table-toggle-coordinate-overlays
@item C-c @}
テーブルの座標グリッドをON／OFFする
@end table
@end table

テーブルのフィールドを空欄にしても、そのフィールドに結びつけられた数式は削除
されません。これは数式が別な行（@samp{#+TBLFM:}行）に保存されているためです。次に
再計算が行なわれる際に、再びフィールドに数式の結果が戻ります。フィールドから
数式を削除するためには、数式を表示させて空にするか、@samp{#+TBLFM:}行を編集する必
要があります。

@kindex C-c C-c
@samp{#+TBLFM:}行は直接編集でき、変更した数式が再適用できます。これは@samp{#+TBLFM:}行
で@kbd{C-c C-c}を押すか、テーブルで通常の再計算コマンドを発行することで実行でき
ます。

@subsubheading 数式のデバッグ
@cindex 数式のデバッグ
@cindex デバッグ、テーブルの数式
数式を評価してエラーが生じた時は、フィールドの文字列が@samp{#ERROR}に変わります。
バグを見つけるために、変数の代入と計算の過程で何が起こっているかを調べたいな
らば、@code{Tbl}メニューにある数式のデバッグを有効にして、計算をやり直してくださ
い。たとえば、フィールド内で@kbd{C-u C-u C-c = @key{RET}}と押します。すると、詳細な
情報が表示されます。

@node テーブルの更新, 一歩進んだ機能, 数式の編集とデバッグ, スプレッドシート
@subsection テーブルの更新
@cindex フィールドの再計算
@cindex 更新、テーブル

テーブルの再計算は、通常は自動的に行なわれず、コマンドにより実行する必要があ
ります。@ref{一歩進んだ機能}を参照してください。少なくとも半自動で計算されます。

テーブルのある行もしくはテーブル全体を再計算するために、次のコマンドを使いま
す。

@table @kbd
@c
@orgcmd{C-c *,org-table-recalculate}
最初に保存されている列の数式を用いて、現在行を左から右に再計算します。
現在行の全てのフィールドと範囲数式が対象です。
@kindex C-u C-c *
@item C-u C-c *
@kindex C-u C-c C-c
@itemx C-u C-c C-c
@c
行ごとにテーブル全体を再計算します。最初の水平ラインの以前にあるどの行
も再計算されません。これらは、テーブルのヘッダーであると想定します。
@orgcmdkkc{C-u C-u C-c *,C-u C-u C-c C-c,org-table-iterate}
計算結果の変化が生じなくなるまでテーブルの再計算を繰り返します。これは
、計算の流れにおいて@i{後段で}計算される別フィールドの値を、すでに計算の対
象となっているフィールドで利用する場合に必要になるでしょう。
@item M-x org-table-recalculate-buffer-tables
@findex org-table-recalculate-buffer-tables
現在のバッファに含まれる全てのフィールドを再計算します
@item M-x org-table-iterate-buffer-tables
@findex org-table-iterate-buffer-tables
テーブル間の依存関係を収束させるために、カレントバッファの全てのテーブ
ルを反復計算する。
@end table

@node 一歩進んだ機能, , テーブルの更新, スプレッドシート
@subsection 一歩進んだ機能

もしも自動的にフィールドを再計算したい、もしくは、フィールドと列に@i{名前}を割り
当てたいならば、テーブルの第一列を特別なマーキング文字を格納するために予約し
ておく必要があります。
@table @kbd
@orgcmd{C-#,org-table-rotate-recalc-marks} 第一行の計算用マーカを@samp{ }、@samp{#}、
@samp{*}、@samp{!}、@samp{$}の順番に循環します。アクティブリージョンがあれば、その領
域のすべてのマーカを変更します。
@end table

例として、学生の試験結果を集めて自動再計算の機能を使うテーブルを示します。

@example
@group
|---+---------+--------+--------+--------+-------+------|
|   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
|---+---------+--------+--------+--------+-------+------|
| ! |         |     P1 |     P2 |     P3 |   Tot |      |
| # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
| ^ |         |     m1 |     m2 |     m3 |    mt |      |
|---+---------+--------+--------+--------+-------+------|
| # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
| # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
|---+---------+--------+--------+--------+-------+------|
|   | Average |        |        |        |  29.7 |      |
| ^ |         |        |        |        |    at |      |
| $ | max=50  |        |        |        |       |      |
|---+---------+--------+--------+--------+-------+------|
#+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@@-II..@@-I);%.1f
@end group
@end example

@noindent
@b{重要}: このような特別なテーブルについて、@kbd{C-u C-c *}を使った再計算は、@samp{#}もし
くは@samp{*}でマークされた行、そして、自身に対して数式が適用されているフィールド
だけに影響することに気をつけてください。最初のフィールドが空になっている行に
は、列の数式が適用されません。

@cindex マーキング文字、テーブル
マーキング文字には、次のような意味があります。
@table @samp
@item !
行に含まれるフィールドが、対応する列の名前を表します。これは@samp{$6}ではな
く@samp{$Tot}として列を参照可能にするためです。
@item ^
@emph{上側の}列のフィールドについて名前を定義します。この定義を用いることで
、テーブルのどのような数式でも、値@samp{10}を参照するために@samp{$m1}を利用でき
ます。また、名前を定義するフィールドに数式を割り当てると、@samp{$name=...}
として保存されます。
@item _
@samp{^}とほぼ同じだが、@emph{下側にある}列のフィールドに対する名前を定義します
。
@item $
この行のフィールドは、数式の@emph{パラメータ}を定義します。たとえば、@samp{$}が
指定された行で、フィールドが@samp{max=50}を含むならば、テーブルの数式は
@samp{$max}を用いて値@samp{50}を参照できます。パラメーターは、正に定数として動作
し、テーブルごとに定義されます。
@item #
行の中で@key{TAB}、@kbd{RET}、または@kbd{S-@key{TAB}}を押すと、この行のフィールドは自
動的に再計算されます。また、この行は@kbd{C-u C-c *}によるグローバルな再計
算に利用されます。このコマンドでは、マークされていない行はそのままに維
持されます。
@item *
@kbd{C-u C-c *}によるグローバルな再計算にこの行を利用します。ただし、自動
的な再計算には利用されません。自動再計算が編集速度を著しく低下させる場
合に利用します。
@item
マークされていない行は、@kbd{C-u C-c *}による再計算から除外されます。再計
算の対象とするすべきすべての行は、@samp{#}や@samp{*}でマークされなければなりませ
ん。
@item /
この行はエクスポートしない。表示幅を狭くする@samp{<N>}マーカ、もしくは列の
グループマーカを含む列で使うと便利です。
@end table

最後に、素晴らしい@file{calc.el}パッケージで何ができるのかを知るという学習欲を刺
激するために、一つのテーブルを示します。このテーブルは、いくつかの関数に対し
て、@code{x}における@code{n}次のテーラー級数を計算します。

@example
@group
|---+-------------+---+-----+--------------------------------------|
|   | Func        | n | x   | Result                               |
|---+-------------+---+-----+--------------------------------------|
| # | exp(x)      | 1 | x   | 1 + x                                |
| # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
| # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
| # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
| # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
| * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
|---+-------------+---+-----+--------------------------------------|
#+TBLFM: $5=taylor($2,$4,$3);n3
@end group
@end example

@node Org-Plot, , スプレッドシート, テーブル
@section Org-Plot
@cindex グラフ、テーブル
@cindex Gnuplotを用いたテーブルのプロット
@cindex #+PLOT

Org-Plotは、org-modeのテーブルに保存された情報を用いた2次元と3次元のグラフを
生成できます。@file{Gnuplot}
@uref{http://www.gnuplot.info/}と@file{gnuplot-mode}
@uref{http://cars9.uchicago.edu/~ravel/software/gnuplot-mode.html}を利用していま
す。動作を確認するためには、GnuplotとGnuplotモードの両方がシステムにインスト
ールされていることを確かめてください。その上で、次に示すテーブルで
@code{org-plot/gnuplot}を呼び出してください。

@example
@group
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |
@end group
@end example

Org-Plotは、テーブルのヘッダをラベルとして適用できます。ラベル、タイプ、コン
テンツ、プロットの外観は、テーブルの上の@code{#+PLOT:}で始まる行によって制御可能
です。以下のOrg-Plotオプションの完全なリストを見てください。さらなる情報と例
は、@uref{http://orgmode.org/worg/org-tutorials/org-plot.html}にあるOrg-Plotのチ
ュートリアルを参照してください。

@subsubheading プロットオプション

@table @code
@item set
グラフの描画時に設定される@command{gnuplot}のオプションを指定します。

@item title
プロットのタイトルを設定します。

@item ind
@code{x}軸として利用するテーブルの列を指定します。

@item deps
Lispスタイルのリストで描画するように列を指定します。括弧で括られ、スペ
ースで分離されます。たとえば、@code{dep:(3 4)}とすると、第三と第四列を描画
します（デフォルトでは、@code{ind}の列を除いて他の全ての列が描画されます）。

@item type
プロットの種別（@code{2d}、@code{3d}もしくは@code{grid}）を指定します。

@item with
@code{with}オプションで挿入される、各プロット点の表示種別を指定します。たと
えば、@:
@code{lines}、@code{points}、@code{boxes}、@code{impluses}などで、デフォルトは@code{lines}。

@item file
プロット結果を外部ファイルに出力したいときに、
@code{"@var{path/to/desired/output-file}"}のように指定します。

@item labels
@code{deps}で利用されるラベルのリストを指定します。標準では列のヘッダーが使
われます（存在する場合）。

@item line
Gnuplotのスクリプトに、記述内容がそのまま挿入される行を設定します。

@item map
プロットの種別で@code{3d}もしくは@code{grid}を指定する場合に、このオプションを
@code{t}にすると、@code{3d}の立体的な傾斜がわかる表示ではなく、平らな表示（訳注
：平面に射影した状態）でプロットします。

@item timefmt
Gnuplotが解釈するような形式にorg-modeのタイムスタンプを整えます。デフ
ォルトでは、
@samp{%Y-%m-%d-%H:%M:%S}が使われます。

@item script
Gnuplotをさらに制御するために、プロットに利用されるスクリプトファイル
（ファイル名をダブルクォーテーションで囲んでください）を指定できます。
プロットを始める前に、指定されたスクリプトファイルに含まれるすべての
@code{$datafile}の記述は、プロット点を格納するファイル（訳注：org-plotが作
る一時的なプロット点データ）へのファイルパスで置き換えられます。仮にこ
のオプションを指定しても、データファイルの内容に影響を与えることができ
るように、プロットの種別を制御したくなるかもしれません。
@end table

@node ハイパーリンク, TODOアイテム, テーブル, Top
@chapter ハイパーリンク
@cindex ハイパーリンク

HTMLのように、Org-modeはファイル内でリンクしたり、他のファイルやUsenetの記事
やメールなど、外部へリンクしたりすることができます。

@menu
* リンクのフォーマット::  Org-modeでのリンクのフォーマット
* 内部リンク::          現在のファイルの別の場所へのリンク
* 外部リンク::          URL形式のリンク
* リンクの扱い::       創造、挿入、追随
* Org外でのリンク利用::  Cのソースコードからのリンク？
* リンクの省略記法::  複雑なリンクを書くためのショートカット
* 検索オプション::    特定の場所へのリンク
* カスタム検索::       デフォルトの検索が充分ではないとき
@end menu

@node リンクのフォーマット, 内部リンク, ハイパーリンク, ハイパーリンク
@section リンクのフォーマット
@cindex リンクのフォーマット
@cindex フォーマット,リンクの

Org-modeはURLのようなリンクを認識して、クリック可能なリンクにしてくれます。
Org-mode上での一般的なリンクのフォーマットは以下のようなものです:

@example
[[リンク][項目名]]       @r{または}           [[リンク]]
@end example

@noindent
すべての括弧を入力し終えてリンクが完成すると、Org-modeは、[[リンク][項目名]]
のかわりに「項目名」を、[[リンク]]のかわりに「リンク」を表示します。リンクは
「org-link」で設定されたフェイスでハイライトされます。なおデフォルトのフェイ
スはアンダーラインになっています。表示されている部分については、直接編集する
ことができます。項目名がない場合はリンクの編集になり、項目名がある場合は項目
名の編集になることに注意してください。表示されていないリンクを編集するには、
該当するリンクの上で「C-c
C-l」を実行します。

表示されたテキストの始端もしくは終端にカーソルを置いて@key{BACKSPACE}を押すと、
その場所にある（表示されていない）括弧を取り除くことができます。これによって
リンクは不完全なものになり、リンクの内部は再びプレーンなテキストとして表示さ
れます。取り除かれた括弧を再度挿入することでリンクは再び内部化され隠されます
。すべてのリンクの内部的な構造を表示するには、
@code{Org->Hyperlinks->Literal links}というメニューを使用します。

@node 内部リンク, 外部リンク, リンクのフォーマット, ハイパーリンク
@section 内部リンク
@cindex 内部リンク
@cindex リンク,内部
@cindex ターゲット,リンクの

@cindex property, CUSTOM_ID
もしもリンクがURLのようなものではない場合、現在使用しているファイル内へのリ
ンクだとみなされます。最も重要なケースは、@samp{[[#my-custom-id]]}のようなリンク
で、@samp{my-custom-id}という@code{CUSTOM_ID}プロパティのついた見出しへリンクします。
このようなカスタムIDは、HTMLでのエクスポート(@pxref{HTMLのエクスポート})時にセクシ
ョン毎のリンクを書き出してくれるので、大変便利です。ただし、各カスタムID名が
ファイル内で重複しないようにする必要があります。

@samp{[[My Target]]}や@samp{[[My Target][Find my target]]}のようなリンクは、現在使用し
ているファイル内でのテキスト検索になります。

マウスのクリック、またはリンク上にカーソルがあるときは@kbd{C-c C-o}で、リンクを
開くことができます(@pxref{リンクの扱い})。カスタムIDへのリンクは、対応する見出しを
指し示します。テキストへのリンクには、@i{専用のターゲット}を用意する方が良いでし
ょう。同じ文字列を二重の角付きの括弧でくくるとか。ターゲットはどこに置かれて
いてもかまいません。しかし、コメント行のようなところに置いたほうが便利なこと
が多いでしょう。たとえば、以下のように。

@example
# <<My Target>>
@end example

@noindent
HTMLでのエクスポート（@pxref{HTMLのエクスポート}）では、このようなターゲットは、
@samp{http}で直接アクセスできる名前つきのアンカーになります@footnote{最初の見出しより前の
文はエクスポートされないことに注意してください。このためそのようなターゲット
の最初のものは、最初の見出しより後にある必要があります。}。

もしも専用のターゲットが存在しない場合には、Org-modeはそのリンクにある語句と
同じ見出しを検索しますが、TODOキーワードやタグ@footnote{見出しへのリンクを挿入すると
きは、バッファ内補完をすることができます。*印の後にいくつか文字を入力し、
@kbd{M-@key{TAB}}を実行してください。現在のバッファ内にあるすべての見出しが補完候補
として表示されます。}も検索されます。Org-mode以外のファイルでは、リンクのテ
キストにある語句を検索します。上記の例では、@samp{my target}が検索されます。

リンクをたどると、Org-mode自身のマークリングにマークが格納されます。@kbd{C-c &}
で、ひとつ前のポジションに戻ります。このコマンドを連続して使うことにより、更
に前のポジションへと戻ることができます。

@menu
* ラジオターゲット::  プレーンテキストのリンクをターゲットに起動させる
@end menu

@node ラジオターゲット, , 内部リンク, 内部リンク
@subsection ラジオターゲット
@cindex ラジオターゲット
@cindex ターゲット,ラジオ
@cindex リンク,ラジオターゲット

Org-modeは、通常のテキスト部分に書かれたターゲット名を、自動でリンクにするこ
とができます。ですから、わざわざ個別のリンクを作成することなく、それぞれのテ
キストがターゲットにリンクされます。ラジオターゲットは、３つの角括弧で囲まれ
たものです。例えば、@samp{<<<My Target>>>}というターゲットは、通常のテキスト部分
に@samp{my target}が登場する度にアクティブなリンクにしてくれます。Org-modeファイ
ル内のラジオターゲットは、最初の読み込み時のみ自動的にスキャンされます。編集
中にターゲットをアップデートしてリンクするには、ターゲットのところで
@kbd{C-c C-c}を実行します。

@node 外部リンク, リンクの扱い, 内部リンク, ハイパーリンク
@section 外部リンク
@cindex links, external
@cindex 外部リンク
@cindex links, external
@cindex Gnusリンク
@cindex BBDBリンク
@cindex IRCリンク
@cindex URLリンク
@cindex ファイルリンク
@cindex VMリンク
@cindex RMAILリンク
@cindex WANDERLUSTリンク
@cindex MH-Eリンク
@cindex USENETリンク
@cindex SHELLリンク
@cindex Infoリンク
@cindex ELispリンク

Org-modeは次のようなリンクをサポートしています。ファイル、webサイト、ネット
ニュース、emailのメッセージ、BBDBデータベースの項目、IRCの会話とログなど。外
部リンクはURLを記載するような方法でリンクします。それらはコロンの前に短い定
義用の文字列をつけて表記します。コロンのあとに空白をとってはいけません。以下
に例とそれぞれのリンクのタイプの一覧を示します。

@example
http://www.astro.uva.nl/~dominik          @r{ウェブへのリンク}
doi:10.1000/182                           @r{電子文献のためのDOI}
file:/home/dominik/images/jupiter.jpg     @r{ファイルへの絶対パス}
/home/dominik/images/jupiter.jpg          @r{上に同じ}
file:papers/last.pdf                      @r{ファイルへの相対パス}
./papers/last.pdf                         @r{same as above}
file:/myself@@some.where:papers/last.pdf   @r{リモートマシン上のファイルへのパス}
/myself@@some.where:papers/last.pdf        @r{same as above}
file:sometextfile::NNN                    @r{ジャンプ先の行番号付きファイル}
file:projects.org                         @r{他のOrg-modeファイルへのリンク}
file:projects.org::some words             @r{Org-modeファイル内でのテキスト検索}
file:projects.org::*task title            @r{Org-modeファイル内での見出し検索}
docview:papers/last.pdf::NNN              @r{ファイルをページ指定して開く}
id:B7423F4D-2E8A-471B-8810-C40F074717E9   @r{IDのついた見出しへのリンク}
news:comp.emacs                           @r{Usenetへのリンク}
mailto:adent@@galaxy.net                   @r{メールリンク}
vm:folder                                 @r{VMのフォルダへのリンク}
vm:folder#id                              @r{VMのメールメッセージへのリンク}
vm://myself@@some.where.org/folder#id      @r{リモートマシン上のVMのメールメッセージへのリンク}
wl:folder                                 @r{WANDERLUSTのフォルダーへのリンク}
wl:folder#id                              @r{WANDERLUSTのメールメッセージへのリ
ンク}
mhe:folder                                @r{MH-Eのフォルダーへのリンク}
mhe:folder#id                             @r{MH-Eのメールメッセージへのリンク}
rmail:folder                              @r{RMAILのフォルダへのリンク}
rmail:folder#id                           @r{RMAILのメールメッセージへのリンク}
gnus:group                                @r{Gnusグループへのリンク}
gnus:group#id                             @r{Gnusの記事へのリンク}
bbdb:R.*Stallman                          @r{BBDBへのリンク(正規表現)}
irc:/irc.com/#emacs/bob                   @r{IRCへのリンク}
info:org#External%20links                 @r{Infoノードへのリンク(空白をエンコー
ド)}
shell:ls *.org                            @r{シェルコマンドへのリンク}
elisp:org-agenda                          @r{Elispコマンドへのリンク}
elisp:(find-file-other-frame "Elisp.org") @r{Elispフォームを評価}
@end example

Org-modeをカスタマイズして、新しいリンクのタイプを付け加えるには、
@ref{ハイパーリンクのタイプの追加}を参照してください。

リンクは二重括弧で囲んだ方が良いでしょう。URLの代わりにテキストを表示するこ
ともできます(@pxref{リンクのフォーマット})。たとえば、以下のように。

@example
[[http://www.gnu.org/software/emacs/][GNU Emacs]]
@end example

@noindent
項目名が画像を指し示すファイル名やURLの場合、HTMLエクスポート
(@pxref{HTMLのエクスポート})によって、画像はクリック可能なボタンとして書き出されま
す。項目名がない画像の場合には、インライン画像として書き出されます。

@cindex 大括弧,リンクの周辺
@cindex プレーンテキスト外部リンク
Org-modeは、通常のテキスト内のリンクを見つけ出し、外部リンクとします。もしス
ペースがリンクの一部として必要な場合(たとえば、@samp{bbdb:Richard Stallman})や、
リンクの末端であいまいさをなくしたい場合、角括弧で囲みます。

@node リンクの扱い, Org外でのリンク利用, 外部リンク, ハイパーリンク
@section リンクの扱い
@cindex リンク,扱い

Org-modeは正しい構文でリンクを作成したり、Org-modeのファイルにリンクを挿入し
たり、そのリンクをたどったりする方法を提供しています。

@table @kbd
@orgcmd{C-c l,org-store-link}
@cindex リンクの保存
現在の位置へのリンクを一時保管します。これはリンクを作成するときに、ど
のバッファでも使用できる@emph{グローバルな}コマンド(あなた自身でキーバイン
ドを作成しなければなりません。)です。リンクは一時保管され、後から
Org-modeのバッファへ挿入することができます(下記参照)。どの種類のリンク
が作成されるかは、現在のバッファが何であるかによります。

@b{Org-modeバッファ}@*もしカーソル位置に@samp{<<target>>}がある場合、リンクはそのターゲットを指しま
す。それ以外の場合は、見出しを指し、見出しは項目名にもなります。

@vindex org-link-to-org-use-id
@cindex property, CUSTOM_ID
@cindex property, ID
もし見出しに@code{CUSTOM_ID}プロパティがある場合、このカスタムIDプロパティ
へのリンクが一時保管されます。また、(@code{org-link-to-org-use-id}の値によ
りますが)グローバルに固有の@code{ID}プロパティが、リンクを作成するために作
られます。ですから、このコマンドをOrg-modeバッファ内で使うと、潜在的に
ふたつのリンクを作成することになります。つまり、Org-modeバッファ内でこ
のコマンドを使用することにより、人間が読むことのできるカスタムIDと、グ
ローバルに固有で、エントリーがファイル間を移動しても動作するリンクが作
成されます。後にリンクを挿入するときには、どのリンクを挿入するかを決め
なければなりません。

@b{メール/ニュースクライアント:VM, Rmail, Wanderlust, MH-E, Gnus}@*ほとんどすべてのEmacsのメールクライアントがサポートされています。リンク
は現在の記事を指し示します。Gnusバッファでは、グループを指し示すことも
あるでしょう。項目名は筆者名と題名から作成されます。

@b{ウェブブラウザー:W3 and W3M}@*現在のURLがリンクになり、ページのタイトルが項目名になります。

@b{連絡先:BBDB}@*BBDBバッファ内で作成されたリンクは、現在のエントリーへのリンクになります
。

@b{Chat: IRC}@*
@vindex org-irc-link-to-logs
IRCリンクの場合、@code{org-irc-link-to-logs}変数を@code{t}にした場合は、ログファ
イル内に、現在の会話に相当する部分への@samp{file:/}形式のリンクが作成されま
す。それ以外の場合は、user/channel/serverへの@samp{irc:/}スタイルのリンクが
一時保管されます。

@b{その他のファイル}@*その他のファイルの場合、リンクは、現在の行を指ししめす検索語句
(@pxref{検索オプション})を伴って作成されます。もし、アクティブなリージョンが
ある場合は、選択された言葉が検索語句の基本となります。自動的に作成され
たリンクがうまく働かなかったり、不正確であったりする場合は、カスタム関
数を書いて、検索語句を選択したり、特定のファイル形式を検索したりするこ
とがきます。@ref{カスタム検索}を参照してください。@kbd{C-c l}というキーバイン
ディングはひとつの提案に過ぎません@ref{インストール})。

@b{アジェンダビュー}@*カーソルがアジェンダビューにあるときは、作成されたリンクは現在の行が参照
するエントリーを指し示します。

@c
@orgcmd{C-c C-l,org-insert-link}
@cindex リンクの補完
@cindex 補完,リンクの
@cindex リンクの挿入
@vindex org-keep-stored-link-after-insertion
リンク@footnote{リンクを挿入するのに、このコマンドを使わなければならないわけで
はないことに注意してください。Org-modeでのリンクはプレーンテキストです
ので、リンクはタイプしたりペーストしたりして直接バッファへ入力すること
ができます。このコマンドを使うことによって、リンクは自動的に二重括弧に
入れられ、オプションとして項目名を入力するかどうかをたずねられます。}
を挿入します。そうすると、プロンプトによって、バッファに挿入するリンク
をたずねられます。テキストを使った内部リンクや、既に述べましたリンクタ
イプのいずれかへのリンクを入力するだけです。リンクは項目名とともに、バ
ッファ@footnote{一時保管されたリンクを挿入した後は、そのリンクは一時保管リスト
から削除されます。後で使用するためにリンクを保存したままにしておきたい
場合は、@kbd{C-c C-l}の前に3回@kbd{C-u}をタイプするか、
@code{org-keep-stored-link-after-insertion}オプションを設定してください。}
に挿入されます。もし、このコマンドの呼び出し時にテキストが選択されてい
た場合には、選択されたテキストがデフォルトの項目名になります。

@b{一時保管されたリンクを挿入}@*<現在のセッションで一時保管されたすべてのリンクは、このプロンプトの履歴
となっていますので、@key{up}や@key{down}(あるいは、@kbd{M-p/n})を使ってこれらにア
クセスすることができます。

@b{補完の支援}@*@key{TAB}を使用した補完機能によって、リンクの省略記法で定義された接頭辞
(@pxref{リンクの省略記法})を含む、@samp{http}や@samp{ftp}などのリンクを適切に挿入する
ことができるでしょう。もし、@var{prefix}のみをタイプした後に@key{RET}を押すと
、Org-modeは、いくつかのリンク形式@footnote{これは@code{org-PREFIX-complete-link}と
いう特別な関数を呼び出すことによって行います。}に対して詳細な補完の支
援を行います。たとえば、@kbd{file @key{RET}}をタイプすると、ファイル名の補完((
または、@kbd{C-u C-c C-l}をタイプします。以下を参照。)を行い、@kbd{bbdb @key{RET}}
をタイプすると、連絡先の名前を補完することができます。@orgkey C-u C-c C-l
@cindex ファイル名の補完
@cindex 補完,ファイル名の
@c
接頭辞@kbd{C-u}を付けて@kbd{C-c C-l}が呼び出されたときは、ファイルへのリンクが
挿入され、ファイル名の補完を利用することができます。リンクされたファイ
ルがカレントディレクトリにあるときや、カレントディレクトリのサブディレ
クトリにあるとき、あるいはパスが@samp{../}を使って相対パスで書かれていると
きは、ファイルへのパスは、現在のOrg-modeファイルからの相対パスとして挿
入されます。それ以外の場合は絶対パスが使われ、可能であれば、ホームディ
レクトリには@samp{~/}が使われます。2つの@kbd{C-u}を付けることによって、絶対パス
表記を明確に指定することができます。
@item C-c C-l @ @r{(カーソルがリンク上にある場合)}
@c
リンク上にカーソルがある場合、@kbd{C-c C-l}を実行すると、リンクと項目名を
編集することができます。
@cindex リンクをたどる
@orgcmd{C-c C-o,org-open-at-point}
@vindex org-file-apps
その場所にあるリンクを開きます。リンクがURLならば、
(@command{browse-url-at-point}を使って)ウェブブラウザーを開きますし、それぞれ
対応するリンクにより、VM/MH-E/Wanderlust/Rmail/Gnus/BBDBが起動し、シェ
ルへのリンクの場合はコマンドを実行します。カーソルが内部リンク上にある
ときは、対応する検索を行います。カーソルが見出しのタグ上にあるときは、
対応するタグビューを作成します。カーソルがタイムスタンプ上にあるときは
、その日のアジェンダを表示します。さらに、@samp{file:}リンクの場合、テキス
トファイルやリモートマシン上のファイルはEmacsで、非テキストファイルは
適切なアプリケーションで、ファイルを開きます。ファイルの分類は、拡張子
のみによって判断されます。@code{org-file-apps}を参照してください。もし、デ
フォルトのアプリケーションではなくEmacsでファイルを開きたい場合は、接
頭辞@kbd{C-u}を付け、Emacsで開くことを避けたい場合は、接頭辞@kbd{C-u C-u}を付
けてください。カーソルがリンクではない見出し上にあるときは、見出し上の
すべてのリンクとエントリーテキストを表示します。@orgkey
@key{RET}
@vindex org-return-follows-link
@c
@code{org-return-follows-link}が設定されているときは、@kbd{@key{RET}}もポイント上の
リンクを開きます。
@kindex mouse-2
@kindex mouse-1
@item mouse-2
@itemx mouse-1
@c
リンク上では、@kbd{mouse-2}は@kbd{C-c C-o}と同様にリンクを開きます。Emacs
22以降では、@kbd{mouse-1}もリンクを開きます。
@kindex mouse-3
@item mouse-3
@vindex org-display-internal-link-with-indirect-buffer
@c
@kbd{mouse-2}と同様にリンクを開きますが、ファイルのリンクを強制的にEmacsで
開き、内部リンクは別のウインドウ
@footnote{@code{org-display-internal-link-with-indirect-buffer}変数を参照してくださ
い。}で開きます。@orgcmd{C-c C-x C-v,org-toggle-inline-images}
@cindex インライン画像
@cindex 画像,インライン
@vindex org-startup-with-inline-images
@cindex @code{inlineimages}, STARTUP keyword
@cindex @code{noinlineimages}, STARTUP keyword
リンクされた画像のインライン表示をトグルします。通常これはリンクに項目
名がない画像のみをインライン表示するものです。すなわち、エクスポート時
にインラインになる画像のことです。@code{org-startup-with-inline-images}変数
@footnote{対応する@code{#+STARTUP}@code{inlineimages}と@code{inlineimages}と共に。}を設定する
ことにより、インライン画像を起動時に表示されることができます。
@orgcmd{C-c %,org-mark-ring-push}
@cindex マークリング
@c
現在のポジションをマークリングに格納し、現在のポジションに簡単に戻って
こられるようにします。ファイル内部でのリンクをたどるときは、自動的にこ
れが行われます。@orgcmd{C-c &,org-mark-ring-goto}
@cindex リンク,戻る
@c
記録されたポジションへ戻ります。ポジションは、内部リンクをたどるコマン
ドと@kbd{C-c %}によって記録されます。このコマンドを連続して何回か使うと、
記録されたポジション間を移動することができます。
@orgcmdkkcc{C-c C-x C-n,C-c C-x C-p,org-next-link,org-previous-link}
@cindex リンク,次/前を探す
バッファ内の前後のリンクへ移動します。バッファの端では、移動は、いった
んエラーになり、もう一度行うと回り込みます。このキーバインドはとても長
いので、@kbd{C-n}と@kbd{C-p}に設定したいと考えるかもしれません。
@lisp
(add-hook 'org-load-hook
  (lambda ()
    (define-key org-mode-map "\C-n" 'org-next-link)
    (define-key org-mode-map "\C-p" 'org-previous-link)))
@end lisp
@end table

@node Org外でのリンク利用, リンクの省略記法, リンクの扱い, ハイパーリンク
@section Org外でのリンク利用

Org-modeだけでなく、どのEmacsのバッファでも、Org-mode構文を持つリンクを挿入
し、たどることができます。このためには、次のような2つのグローバルコマンドを
作成しなければなりません(自分に適したグローバルなキーを設定してください)。

@lisp
(global-set-key "\C-c L" 'org-insert-link-global)
(global-set-key "\C-c o" 'org-open-at-point-global)
@end lisp

@node リンクの省略記法, 検索オプション, Org外でのリンク利用, ハイパーリンク
@section リンクの省略記法
@cindex リンクの省略記法
@cindex 省略記法,リンクの

長いURLをタイプするのは面倒ですが、往々にしてひとつの文章には似たようなリン
クが数多く登場するものです。このような場合には、リンクの省略記法を使うことが
できます。省略記法されたリンクは次のようなものです。

@example
[[リンク語句:タグ][項目名]]
@end example

@noindent
@vindex org-link-abbrev-alist
タグはなくても構いません。@i{リンク語句}は文字で始まる語句、数字、@samp{-}、@samp{_}を使う
ことができます。省略記法は、リンク語句とリンクテキストを関連づける
@code{org-link-abbrev-alist}変数の値にしたがって展開されます。以下に例を示します
。

@smalllisp
@group
(setq org-link-abbrev-alist
  '(("bugzilla" . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
    ("google"   . "http://www.google.com/search?q=")
    ("gmap"     . "http://maps.google.com/maps?q=%s")
    ("omap"     . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
    ("ads"      . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
@end group
@end smalllisp

置き換えるテキストに@samp{%s}が含まれている場合は、タグに置き換えられます。それ以
外の場合は、タグはリンクを作成するために文字列に付け加えられます。リンクを作
成する引数としてタグと一緒に呼び出される機能を指定したほうがよいかもしれませ
ん。

上記の設定だと、@code{[[bugzilla:129]]}で特定のバグへリンクすることができ、
@code{[[google:OrgMode]]}で@samp{OrgMode}をウェブ検索することができ、
@code{[[gmap:51 Franklin Street, Boston]]}でFree Software Foundationの、
@code{[[omap:Science Park 904, Amsterdam, The Netherlands]]}でCarstenのオフィスの
地図上の位置を表示することができ、@code{[[ads:Dominik,C]]}でOrg-modeの作者がEmacs
のハッキングの他に何をしているかを見つけることができます。

ある特定のOrg-modeバッファだけでリンクの省略記法を使いたい場合は、次のように
することで定義できます。

@cindex #+LINK
@example
#+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
#+LINK: google    http://www.google.com/search?q=%s
@end example

@noindent
バッファ内補完(@pxref{補完})は、@samp{[}以降でリンクの省略記法を補完するために使用する
ことができます。@kbd{C-c C-l}でリンクを挿入することへの特別な支援(たとえば、補完
)を実行する@code{org-PREFIX-complete-link}関数を定義することもできます。このよう
な関数はいかなる引数も受け入れず、接頭辞付きのリンクを返します。

@node 検索オプション, カスタム検索, リンクの省略記法, ハイパーリンク
@section ファイルリンクにおける検索オプション
@cindex ファイルリンクにおける検索オプション
@cindex ファイルリンク,検索

ファイルへのリンクには、ファイル内の特定の場所へジャンプするリンクを含ませる
ことができます。これは、ダブルコロン@footnote{下方互換性のために、行番号はシングルコ
ロンの後に置くこともできます。}の後に行番号や検索語句を置くことによって行い
ます。たとえば、@kbd{C-c l}コマンドをタイプして、あるファイルへのリンクを作成す
る場合(@pxref{リンクの扱い})、現在の行の言葉を検索語句としてリンクに含めることがで
き、@kbd{C-c C-o}コマンドで開くことができます。

説明と共に、あるファイルリンクへの検索語句を付加する様々な構文の方法を示しま
す。

@example
[[file:~/code/main.c::255]]
[[file:~/xx.org::My Target]]
[[file:~/xx.org::*My Target]]
[[file:~/xx.org::#my-custom-id]]
[[file:~/xx.org::/regexp/]]
@end example

@table @code
@item 255
255行目へジャンプします。
@item My Target
内部リンクの検索と同様に、@samp{<<My Target>>}という名前のリンクターゲット
、あるいは@samp{my target}というテキストを検索します(@ref{内部リンク}を参照して
ください。)。HTMLエクスポート(@pxref{HTMLのエクスポート})では、このようなフ
ァイルへのリンクは、リンク先のファイル内にある、一致する名前のアンカー
へのHTMLリンクになります。
@item *My Target
Org-modeファイルの中で見出しの検索に限定されます。
@item #my-custom-id
@code{CUSTOM_ID}プロパティを持つ見出しへリンクします。
@item /regexp/
@c If the target file is a directory,
@c @code{grep} will be used to search all files in the directory.
@code{regexp}を正規表現検索します。これは、Emacsの@code{occur}コマンドを使って、
一致するすべてを別ウインドウでリスト表示します。ターゲットがOrg-modeフ
ァイルならば、@code{org-occur}が使われ、一致した部分について、ツリーの抽出
を行います。
@end table

特殊なケースとして、ファイル名が指定されていないファイルのリンクは、現在のフ
ァイルの検索となります。たとえば、@code{[[file:::find me]]}は、@samp{[[find me]]}と同
様に、現在のファイルで@samp{find me}を検索します。

@node カスタム検索, , 検索オプション, ハイパーリンク
@section カスタム検索
@cindex カスタム検索文字列
@cindex 検索文字列,カスタム

デフォルトの検索文字列作成のメカニズムと、実際のファイル検索のメカニズムは、
すべての場合でうまく動作するとは限りません。たとえば、Bib@TeX{}データベースのフ
ァイルは、@samp{year=\"1993\"}のようなエントリーをたくさん有していますが、これは
良い検索文字列であるとは言えません。なぜならば、Bib@TeX{}のエントリーでは、唯一
の識別情報は引用キーだからです。

@vindex org-create-file-search-functions
@vindex org-execute-file-search-functions
このような問題に直面した場合は、特定のファイルタイプに適した検索文字列を設定
し、そのファイルで検索を行うカスタム関数を書くことができます。@code{add-hook}を使
用して、これらの関数は、@code{org-create-file-search-functions}、
@code{org-execute-file-search-functions}というフック変数に付け加えられる必要があ
ります。これらの変数についてのより詳しい情報は、ドキュメント文字列を参照して
ください。Org-modeは、実際にこのメカニズムをBib@TeX{}データベースファイルに使用
しており、該当するコードを実装のサンプルとして使うことができます。
@file{org-bibtex.el}というファイルを参照してください。

@node TODOアイテム, タグ, ハイパーリンク, Top
@chapter TODOアイテム
@cindex TODOアイテム

Org-modeではTODOリストを個別の文書として管理するわけではありません。
@footnote{もちろん、長いTODOリストだけを含む個別の文書を作成することもできますが、そ
うする必要はないということです。}その変りに、TODOアイテムはノートファイルの
一部として存在します。なぜならTODOアイテムはメモを書いている最中に頭に浮かぶ
ものだからです!Org-modeでは、ツリーの中のどの項目でも簡単にマークしてTODOア
イテムとするだけです。この方法により特定の情報を複数個所にもつ必要は無くなり
、TODOアイテムを作成するのに使用した全文書が常に最新であることになります。

もちろん、こうした手法をとることで、あなたのノートファイルの中のあちこちに、
TODOアイテムが散らばることになります。それを補うためにOrg-modeでは、やらなけ
ればならない事柄の全体を見渡す方法が提供されています。

@menu
* TODOの基本::            登録したTODOのマーキングと表示
* TODO拡張::               ワークフローと割り当て
* 進行記録::             進行管理のための日付とメモ
* プロパティ::          他より重要なものもある
* タスクの分割::       タスクを管理可能な単位に分解する
* チェックボックス::  リストをチェックする
@end menu

@node TODOの基本, TODO拡張, TODOアイテム, TODOアイテム
@section 基本的なTODOの機能

どの見出しでも@samp{TODO}という言葉を前につけることで、TODOアイテムとみなします。
例えば:

@example
*** TODO サム フォーチュンに手紙を書く。
@end example

@noindent
TODO項目を入力するときの最も重要なコマンドは以下のとおりです。

@table @kbd
@orgcmd{C-c C-t,org-todo}
@cindex TODOの状態の切り替え
現在のTODOの状態を次のように切り替えます。

@example
,-> (マーク無し) -> TODO -> DONE --.
'----------------------------------'
@end example

同じような状態の切り替えは、タイムラインとアジェンダバッファで@kbd{t}コマ
ンドキー（@pxref{アジェンダのコマンド}参照）を入力することで「間接的に」完了
にすることもできます。

@orgkey{C-u C-c C-t}補完や「すでに設定されていれば」さらに速い選択方法を提供
するインターフェイスを使用して特定のキーワードを選択します。後者の方法
では、TODOの状態に対してキーを割り振る必要があります。詳細は、
@ref{ファイル毎のキーワード}と@ref{タグの設定}を参照してください。

@kindex S-@key{right}
@kindex S-@key{left}
@item S-@key{right} @ @r{/} @ S-@key{left}
@vindex org-treat-S-cursor-todo-selection-as-state-change
切り替えの機能に似て、後にくるTODOの状態、あるいは前にくるものを選択し
ます。もっとも役に立つのはTODOの状態が２段階以上の場合です。(@pxref{TODO拡張
}).@code{shift-selection-mode}との連携については、@ref{衝突}も参照してください
。変数@code{org-treat-S-cursor-todo-selection-as-state-change}も参照してく
ださい。@orgcmd{C-c / t,org-show-todo-key}
@cindex ツリーの抽出、TODO用
@vindex org-todo-keywords
@emph{ツリーの抽出}機能を使ってTODOを確認します（@pxref{ツリーの抽出}）参照。バッ
ファ全体を折り畳みますが、全てのTODO項目「DONE状態以外の」とその上の見
出しの階層を表示します。前置引数をつけることで(もしくは、キーバインド
@kbd{C-c / T})、ある特定のDONE状態の項目も表示させることができます。検索用
のキーワードを入力するためのプロンプトが表示されます。さらにキーワード
のリストを次のように入力することもでき@code{KWD1|KWD2|...}、この内のどれか
に一致するものが表示されます。前置引数Nを使って、変数
@code{org-todo-keywords}内のN番目のキーワードを含むツリーを表示することもで
きます。２回の前置引数を指定すると、すべてのTODO状態「DONEとそれ以外を
含む」を見つけることができます。@orgcmd{C-c a t,org-todo-list}グローバルTODO
リストを表示します。すべての「DONE状態以外の」TODOアイテムをすべてのア
ジェンダファイル(@pxref{アジェンダビュー})から集めて、一つのバッファに表示し
ます。その新しくできたバッファは、@code{agenda-mode}で表示され、確認や修正
を加えるためのコマンドも提供されます。(@pxref{アジェンダのコマンド}).
@xref{グローバルなTODOリスト}.を参照してください。
@orgcmd{S-M-@key{RET},org-insert-todo-heading}新しいTODOを現在の位置にあるTODOの
前に入力します。
@end table

@noindent
@vindex org-todo-state-tags-triggers
TODOの状態の変更は、タグの変更をすることになることがあります。詳細については
、オプション@code{org-todo-state-tags-triggers}のドキュメント文字列を参照してくだ
さい。

@node TODO拡張, 進行記録, TODOの基本, TODOアイテム
@section TODOキーワードの拡張的な使い方
@cindex 拡張されたTODOキーワード

@vindex org-todo-keywords
デフォルトでは、マークされたTODOの状態は、TODOとDONEの２つしかありません。さ
らにOrg-modeは、@emph{TODOキーワード}「@code{org-todo-keywords}に指定されています。」
を使って、より複雑にTODOアイテムを分類できます。特別な設定により、TODOキーワ
ードシステムは、ファイルによって異なる働きにすることできます。

注記、@i{タグ}は見出しと特にTODOアイテムを分類するもう一つの方法です。(@pxref{タグ}).

@menu
* ワークフローの状態::  TODOからDONEまでの流れ
* タスクの種別::       私はこの仕事をこなす。フレッドは休む。
* キーワードセット::  ごちゃまぜにしてもやり方は見つけられる
* TODOの状態への素早い対応手段::  状態を選択するための文字
* ファイル毎のキーワード::  ファイルが違えば、やりたい事も違う
* TODOキーワードのフェイス::  状態のハイライト
* TODO間の関係::         他のタスクの終了を待たないといけないタスクがある時
@end menu

@node ワークフローの状態, タスクの種別, TODO拡張, TODO拡張
@subsection ワークフローの状態としてのTODOキーワード
@cindex TODOワークフロー
@cindex TODOキーワードとしてのワークフローの状態

TODOキーワードを使用して、アイテムの@emph{連続した}異なる状態を表すことができます
。例えば、@footnote{この変数の変更は、Org-modeをバッファ内で再起動した場合のみ有効に
なります。}:

@lisp
(setq org-todo-keywords
  '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
@end lisp

縦線は、TODOキーワード「@emph{アクションが必要な}状態」とDONE状態「アクションが必
要ない状態」を分けます。縦線が指定されていない場合は、最後の状態が、DONE状態
として使用されます。
@cindex 完了、TODOキーワードの
この設定により、コマンド@kbd{C-c C-t}で、TODOからFEEDBACKへ、それからVERIFY、最
後にDONE、DELEGATEDというように順番に切り替えます。前置引数を使用することで
、特定の状態を即座に選択することもできます。例えば@kbd{C-3 C-c C-t}と入力すると
、すぐに３番目のVERIFYに変更することができます。もしくは、@kbd{S-@key{left}}により、
逆の方向に順番に切り替えることもできます。もしも、たくさんのキーワードを定義
した場合は、バッファ内補完機能（@pxref{補完}）か特別な一つのキーによる選択により特
定のキーワードをバッファに入力することができます。
(@pxref{TODOの状態への素早い対応手段})TODOの状態の変更は、タイムスタンプと共にログ
をとることができます。（より詳しい情報は@ref{作業の状態変化の追跡}を参照）

@node タスクの種別, キーワードセット, ワークフローの状態, TODO拡張
@subsection 種類としてのTODOキーワード
@cindex タスクの種別
@cindex 名前をTODOキーワードとして
@cindex 種類をTODOキーワードとして

TODOキーワードの２つ目の使い方として、いろいろな@emph{種類}のやるべき事として表す
使用法です。例えば、項目を「仕事」または「家」を示すようにも使えます。もしく
は、複数の人と同じプロジェクトに参加するとき、その中の何人かに彼らの名前を
TODOキーワードとして使って直接やるべき事を割り当てたいかもしれません。これは
、以下のように設定します。：

@lisp
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
@end lisp

この場合、それぞれのキーワードは作業の順序を表しているのではなく、別々のタイ
プを表すことになります。そのため、通常の作業の流れとしてタスクを一人に割り振
ることになり、その後のDONEになります。Org-modeは、このような形式をサポートす
るため、「@kbd{C-c C-t}」コマンドの動作が少し変化します（@footnote{タイムラインやアジェン
ダのバッファでは、「@kbd{t}」コマンドも同じ仕様です。}）。まずは、適当なタイプを
選択するのに、繰り返し押すことで、順番にキーワードの名称が表示されます。しば
らく間をおいてその項目に戻ってきて、「@kbd{C-c C-t}」を再度実行すると、そのとき
は、すぐDONEに切り替えられます。前置引数か補完を使えば、適当なタイプをすぐに
選ぶことができます。さらに@kbd{C-c / t}に前置引数を指定することにより、抽出され
たツリーの中で特定のTODOタイプの項目を確認することもできます。例えば、Lucyが
やらねばならないにすべての項目を見るには、「@kbd{C-3 C-c / t}」を実行します。す
べてのアジェンダファイルの中からLucyの項目を一つのバッファに集約するには、グ
ローバルなtodoリストを作成し、前置引数を使用します:「@kbd{C-3 C-c a t}」、

@node キーワードセット, TODOの状態への素早い対応手段, タスクの種別, TODO拡張
@subsection 同一ファイル内での複数のキーワードセット
@cindex TODOキーワードセット

時には、異なるセットのTODOキーワードを同時に使いたい場合があるかもしれません
。例えば、通常の@code{TODO}/@code{DONE}を使用しつつ、バグフィックスのワークフロー、さ
らにアイテムがキャンセルをされたことを表すもう一つの状態を使用したい場合など
です「つまりDONEではないが、次のアクションが必要ない場合」。その場合の設定は
次のようになります:

@lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
        (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
        (sequence "|" "CANCELED")))
@end lisp

キーワードは、すべて異なるようにすべきで、そうすることでOrg-modeが、今入力さ
れたキーワードから次に続くものを認識するのに役立ちます。この設定では、
@kbd{C-c C-t}は、サブグループ内だけで働きます。つまり@code{DONE}から(何も無い状態)か
ら@code{TODO}へ、そして@code{FIXED}から(何も無い状態)から@code{REPORT}へ。その為、まず使い
たいサブグループを選ぶ方法が必要です。当然通常行うようにキーワードをタイプす
るか、補完、または次のコマンドを使うこともできます:

@table @kbd
@kindex C-S-@key{right}
@kindex C-S-@key{left}
@kindex C-u C-u C-c C-t
@item C-u C-u C-c C-t
@itemx C-S-@key{right}
@itemx C-S-@key{left}
これらのキーは、あるTODOのサブグループから次へとジャンプします。上の例
では、@kbd{C-u C-u C-c C-t}または、@kbd{C-S-@key{right}}は、@code{TODO}か@code{DONE}から
@code{REPORT}、そして、二番目のサブグループのどれかの状態から@code{CANCELED}へジ
ャンプします。注意として@kbd{C-S-}キーバインディングは、
@code{shift-selection-mode}
(@pxref{衝突})と衝突します。
@kindex S-@key{right}
@kindex S-@key{left}
@item S-@key{right}
@itemx S-@key{left}
@kbd{S-@key{<left>}}と@kbd{S-@key{<right>}}は、すべてのサブグループの@emph{すべて}のキーワ
ードに切り替えいきます。例えば、上記の例では、@kbd{S-@key{<right>}}は、@code{DONE}
に切り替えられ、さらに@code{REPORT}になります。@code{shift-selection-mode}と連携
させる方法については、@ref{衝突}を参照してください。>
@end table

@node TODOの状態への素早い対応手段, ファイル毎のキーワード, キーワードセット, TODO拡張
@subsection TODOの状態への素早い対応手段

もし、切り替えせずに任意のTODOの状態にすばやく変更したい場合は、キー登録して
一文字でその状態に変更できます。それには、各キーワードの後に括弧で括ってセク
ションキーを割り当てることにより実現できます。例えば:

@lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELED(c)")))
@end lisp

@vindex org-fast-tag-selection-include-todo
@code{C-c C-t}を押して、選択の為のキーを押せば、その選ばれた状態へ切り替えられま
す。さらに@key{SPC}を使って、どのTODOキーワードも削除することができます。
@footnote{変数@code{org-fast-tag-selection-include-todo}も見てください、この変数は、タグを
使って状態の変更を可能にします(@pxref{タグの設定})、この二つを混ぜて使いたいならで
すが。この場合、それぞれのキーワードセットに単一なキーを準備する必要がありま
す。}

@node ファイル毎のキーワード, TODOキーワードのフェイス, TODOの状態への素早い対応手段, TODO拡張
@subsection ファイル別にキーワードを設定する
@cindex キーワードオプション
@cindex ファイル毎のキーワード
@cindex #+TODO
@cindex #+TYP_TODO
@cindex #+SEQ_TODO

異なるファイルごとに、TODOの機能をさまざまなの方法で使用できるととても便利で
す。ファイル単位のローカルな設定をするためには、そのファイルだけに通用するキ
ーワードを特別な行として記入することで設定する必要があります。例えば、前述し
た２つの例のうちの一つを設定するの場合、次のような行を、そのファイルのどこか
で行頭から開始する必要があります。

@example
#+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
@end example
@noindent
(解釈を明確にするために@code{#+SEQ_TODO}と記入してもいいです。しかし、@code{#+TODO}と
記入するのと同じです。)、もしくは、
@example
#+TYP_TODO: Fred Sara Lucy Mike | DONE
@end example

同時に複数のキーワードグループの設定には:

@example
#+TODO: TODO | DONE
#+TODO: REPORT BUG KNOWNCAUSE | FIXED
#+TODO: | CANCELED
@end example

@cindex 補完、オプションのキーワード
@kindex M-@key{TAB}
@noindent
間違いなく正しいキーワードを使うため、そのバッファ内で@samp{#+}をタイプして、
@kbd{M-@key{TAB}}を使って補完してください。

@cindex DONEは最終のTODOキーワード
縦線の後のキーワード「もしくは、縦線が指定されてない場合は、最後のキーワード
」は、そのアイテムがいつもDONE「最後のもの」であることを覚えていてください「
と言ってもDONE以外のキーワードも使えます」。これらの変更を加えた後、Org-mode
に変更を認識させるため、カーソルを変更した場所に置いたままで@kbd{C-c C-c}してく
ださい。@footnote{Org-modeがこれらの行を読み込むのは、ファイルを開いてOrg-modeが実行
された場合だけです。@samp{#+}で始まる行にカーソルを置いて@kbd{C-c C-c}をすると、単に
現在のバッファでOrg-modeを再起動したことになります。}

@node TODOキーワードのフェイス, TODO間の関係, ファイル毎のキーワード, TODO拡張
@subsection TODOキーワードのフェイス
@cindex フェイス、TODOキーワード

@vindex org-todo @r{(フェイス)}
@vindex org-done @r{(フェイス)}
@vindex org-todo-keyword-faces
Org-modeは、TODOキーワードを特別なフェイスを使ってハイライトします
:@code{org-todo}は、あるアイテムがアクションを必要とするキーワードであることを指
しています。@code{org-done}は、あるアイテムが完了していることを指しています。もし
2つ以上の異なる状態を使用しているのであれば、特別なフェイスを使いたくなるか
もしれません。これは、変数@code{org-todo-keyword-faces}を変更することで可能です。
例えば:

@lisp
@group
(setq org-todo-keyword-faces
      '(("TODO" . org-warning) ("STARTED" . "yellow")
        ("CANCELED" . (:foreground "blue" :weight bold))))
@end group
@end lisp

CANCELEDにあるようにフェイスプロパティのリストを使えば上手くいく@emph{はず}ですが
、いつもうまくいっているように見えないかもしれません。必要であれば、特別なフ
ェイスを定義してそれを使うのもいいかもしれません。文字列は、カラーとして解釈
されます。変数@code{org-faces-easy-properties}により、文字の色にするか、背景色に
するか指定できます。

@node TODO間の関係, , TODOキーワードのフェイス, TODO拡張
@subsection TODO間の関係
@cindex TODO間の関係
@cindex 依存関係、TODOの状態

@vindex org-enforce-todo-dependencies
@cindex プロパティ、ORDERED
Orgファイルの構成「階層とリスト」は、TODOの依存関係の定義を容易にします。通
常、親TODOタスクは、すべてのサブタスク「子タスクと定義されている」が終るまで
は、DONEにするべきではありません。そして時折、多く「サブ」タスクに対して論理
的な順序があるので、あるタスクがその前にあるすべての関連したタスクが終るまで
始められないこともあります。もし、変数@code{org-enforce-todo-dependencies}をカス
タマイズすれば、Orgは、未完了の子タスクが終わるまでDONEへの状態の変更を防ぎ
ます。さらに、もし、あるアイテムに@code{ORDERED}のプロパティが設定されていると、
その前の関連したタスクのすべてがDONEになるまで、そのそれぞれの子タスクは、変
更できないようになります。ここに例があります:

@example
* TODO このTODOは、２番が終るまで変更できない。
** DONE １番
** TODO ２番

* 親
  :PROPERTIES:
    :ORDERED: t
  :END:
** TODO a
** TODO b, (a)が終わるのを待つ必要があります。
** TODO c, (a)と(b)が終わるのを待つ必要があります。
@end example

@table @kbd
@orgcmd{C-c C-x o,org-toggle-ordered-property}
@vindex org-track-ordered-property-with-tag
@cindex プロパティ、ORDERED
@code{ORDERED}プロパティを現在のアイテムに対してトグルします。プロパティが
、この動作に使われるのは、タグのように継承するのではなく、現在のアイテ
ムに対してのみ動作させるためです。しかし、もし見やすいようにタグを使っ
てプロパティの値を記録したいのであれば、変数
@code{org-track-ordered-property-with-tag}をカスタマイズしてください。
@orgkey{C-u C-u C-u C-c C-t}変更できない状態のものでもTODOの状態を変更します
。
@end table

@vindex org-agenda-dim-blocked-tasks
変数@code{org-agenda-dim-blocked-tasks}を設定すれば、依存関係のせいで閉じることの
できないTODOエントリーをアジェンダビューで薄暗いフォントにして表示するか、さ
らに見えなくすることもできます。(@pxref{アジェンダビュー}).

@cindex チェックボックスとTODO依存関係
@vindex org-enforce-todo-dependencies
チェックボックスを見ることでTODOの状態の変更を妨げることもできます
(@pxref{チェックボックス})。変数@code{org-enforce-todo-checkbox-dependencies}を設定すれ
ば、チェックされていないチェックボックスをもつエントリーがDONEになるのを妨げ
ることもできます。

もし、より複雑な依存関係の構造が必要であれば、例えば、異なるツリーやファイル
のエントリー同士の依存関係、付属モジュールの@file{org-depend.el}を参照してみてく
ださい。

@page
@node 進行記録, プロパティ, TODO拡張, TODOアイテム
@section 進行記録
@cindex 進捗状況の記録
@cindex 進捗状況の記録

Org-modeは、TODOアイテムにDONEという完了の印をつけたときや、TODOアイテムの状
態を変更したときはいつでも、自動的にタイムスタンプとメモを記録できます。かな
り柔軟に設定することが可能で、キーワードごとに設定したり、ファイルやサブツリ
ーごとに設定することもできます。タスクの時間管理についての情報は、
@ref{作業に費やした時間の計測}を参照してください。

@menu
* アイテムの完了::    DONEとなったのはいつ？
* 作業の状態変化の追跡::  状態が変わったのはいつですか？
* 習慣の追跡::          どれだけ、続けられていますか？
@end menu

@node アイテムの完了, 作業の状態変化の追跡, 進行記録, 進行記録
@subsection アイテムの完了

一番基本的な時間の記録機能は、@emph{いつ}TODOアイテムが完了したかを記録することで
す。これは、次のようにしてください@footnote{これに対応するイン-バッファ定義は
:@code{#+STARTUP: logdone}}

@lisp
(setq org-log-done 'time)
@end lisp

@noindent
この後、毎回TODO「未完了」からDONEの状態に移行したとき、見出しの後に
@samp{CLOSED: [タイムスタンプ]}の行が挿入されます。切り替えていく間に一つのエント
リーに対してTODOの状態に戻すと挿入された行はまた削除されます。タイムスタンプ
と一緒にメモも記録したいのであれば、次のようにしてください@footnote{これに対応するイ
ン-バッファ定義は:@code{#+STARTUP: lognotedone}}

@lisp
(setq org-log-done 'note)
@end lisp

@noindent
この設定によりメモの入力を聞いてきます。そのメモは@samp{Closing Note}という見出し
の下に挿入されます。

タイムライン「@pxref{タイムライン}」とアジェンダ「@pxref{毎週／毎日のアジェンダ}」上で、
@kbd{l}キー使用してTODOアイテムと@samp{CLOSED}タイムスタンプを日ごとに表示することが
できます。何が完了しているかのサマリも提供されます。

@node 作業の状態変化の追跡, 習慣の追跡, アイテムの完了, 進行記録
@subsection 作業の状態変化の追跡
@cindex 引き出し、状態変化を記録する際に使用

@vindex org-log-states-order-reversed
@vindex org-log-into-drawer
@cindex プロパティ、LOG_INTO_DRAWER
TODOキーワードがワークフローの状態(@pxref{ワークフローの状態})として使われる時に、
いつその状態の変化が起きたか記録し、さらにメモを取りたくなるかもしれません。
その場合、タイムスタンプかタイムスタンプ付きメモを記録することができます。こ
れらは、見出しの後に一番新しいものを先頭として@footnote{変数
@code{org-log-states-order-reversed}を確認してください}項目ごとにリストされ挿入さ
れます。たくさんのメモをとっている場合、そのメモを引き出しの中に入れて隠した
いようになるかもしれません「@pxref{引き出し}」。その場合、変数
@code{org-log-into-drawer}を編集してください。オススメの引き出しは、@code{LOGBOOK}と呼
ばれています。さらにサブツリーのために、この変数の設定も@code{LOG_INTO_DRAWER}プ
ロパティを修正すれば、その効果を無視して上書きすることができます。

通常、すべての状態でメモを記録するのはやりすぎになるので、Org-modeは、キーワ
ードごとに設定されると想定します。これは、特別なマーカー@samp{!}「タイムスタンプ
用」、@samp{@@}「メモ用」をキーワードの後に括弧に入れることでできるようになります
。例えば、以下のようになります。

@lisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@@/!)" "|" "DONE(d!)" "CANCELED(c@@)")))
@end lisp

@noindent
@vindex org-log-done
これで、グローバルTODOキーワードとショートカットキーを定義するだけでなく、
DONEに状態が変更された際、時間も記録されるようにも定義できます。@footnote{Org-modeは
、@code{org-log-done}と状態変化の際の記録機能を使えば、二つのタイムスタンプを記録
することも可能です。それでも、二つのメモをするように聞かれることはできません
。もし実際に、両方の機能を設定した場合、状態変化の際の記録機能の方が優先され
て、@samp{Closing Note}は、使われません。}そして、WAITかCANCELEDに状態が変化した
ときにメモが記録されます。WAITの設定は、さらに特別です:斜線の後の@samp{!}は、その
状態に最初に切り替わる際に挿入されるメモの記録だけでなく、WAITの状態から@i{次に
の状態に変わる}時に、タイムスタンプも記録されます「でもこれは、@i{次の}状態が切
り替わる時に記録する設定がない場合にのみ有効です」。そのため、WAITからDONEに
切り替わる際には影響がありません、なぜならDONEは、タイムスタンプを記録するだ
けとして設定されているからです。しかしWAITからTODOに戻る場合は、TODOになにも
記録するように設定されてなくても、WAITの@samp{/!}設定が、タイムスタンプを挿入する
ようになります。

まったく同じ構文を使ってバッファ内のみ有効な設定を使用できます。
@example
#+TODO: TODO(t) WAIT(w@@/!) | DONE(d!) CANCELED(c@@)
@end example

@cindex プロパティ、ログをとる
サブツリーまたは、一つのアイテムだけ局所的にログの設定を定義したい場合は、そ
のエントリーにLOGGINGプロパティを定義してください。空ではないLOGGINGプロパテ
ィは、すべてのログの設定をnilにリセットします。この後、@code{lognotedone}か
@code{logrepeat}のようなSTARTUPキーワード、そして@code{TODO(!)}のような状態に特化した
設定を追加して、特定のツリーに対してログを開始するようにできます。例えば

@example
* TODO 各状態のタイムスタンプだけをログを取る
  :PROPERTIES:
  :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
  :END:
* TODO WAITに切り替えられ、さらに繰り返されたときだけログを取る
  :PROPERTIES:
  :LOGGING: WAIT(@@) logrepeat
  :END:
* TODO 何もログを取らない
  :PROPERTIES:
  :LOGGING: nil
  :END:
@end example

@node 習慣の追跡, , 作業の状態変化の追跡, 進行記録
@subsection 習慣の追跡
@cindex 習慣

Org-modeには、「habits(習慣)」と呼ばれるTODOの特別なカテゴリーの一貫性を記録
するための機能があります。habitには、以下の性質があります:

@enumerate
@item
変数@code{org-modules}をカスタマイズすることで@code{habits}モジュールを有効にし
てある。
@item
habitは、TODO一種であり、TODOキーワードを使い未解決を表します。
@item
プロパティ@code{STYLE}に、@code{habit}を値として定義してある。
@item
このTODOは、スケジュールされた日付があり、通常@code{.+}スタイルで繰り返され
る間隔を表します。@code{++}スタイルは、時間制限があるような場合に有効でしょ
う。例えば、週末にしなければいけないことなどです。@code{+}スタイルは、遅れ
ることがあるような通常の習慣ではないような場合「例:週次報告書」に適し
ています。
@item
このTODOは、最短から最長の期間を@samp{.+2d/3d}のようなシンタックスで指定で
きます。この例の場合、このタスクを少なくともで３日ごとか、多くて２日ご
とにこなすと指定しています。
@item
記録されていたデータが一貫性のあるグラフに表記されるように、状態のログ
を取る@code{DONE}を使用できるようにしておく必要があります。使用できるように
なっていない場合は、エラーにはなりませんが、一貫性を表すはずのグラフが
まったく意味のないものになります。
@end enumerate

上記にある定義が実際にはどのようになるか分かってもらうために、ここに経過の記
録情報と共に実際のhabitがあります。

@example
** TODO 髭剃り
   SCHEDULED: <2009-10-17 Sat .+2d/4d>
   - State "DONE"       from "TODO"       [2009-10-15 Thu]
   - State "DONE"       from "TODO"       [2009-10-12 Mon]
   - State "DONE"       from "TODO"       [2009-10-10 Sat]
   - State "DONE"       from "TODO"       [2009-10-04 Sun]
   - State "DONE"       from "TODO"       [2009-10-02 Fri]
   - State "DONE"       from "TODO"       [2009-09-29 Tue]
   - State "DONE"       from "TODO"       [2009-09-25 Fri]
   - State "DONE"       from "TODO"       [2009-09-19 Sat]
   - State "DONE"       from "TODO"       [2009-09-16 Wed]
   - State "DONE"       from "TODO"       [2009-09-12 Sat]
   :PROPERTIES:
   :STYLE:    habit
   :LAST_REPEAT: [2009-10-19 Mon 00:36]
   :END:
@end example

このhabitが表しているのは、髭剃りを多くて２日ごとか「@code{SCHEDULED}により指定さ
れた日付と繰り返される間隔」、少なくとも４日ごとにする。もし、今日が１５日と
すると、このhabitは、二日後の１０月１７日にアジェンダに表示されて、４日後の
１９日には、期限切れとして表示されます。

habitsの本当に使い易いところは、定期性グラフと表示されることです。これは、過
去にどれぐらいタスクが定期的に完了したかを見るためのものです。このグラフは、
毎日過去３週間のタスクが完了したかを色分けして表示します。各色は、以下を表し
ます:

@table @code
@item 青
まだ、その日までにタスクが完了してなくていい場合。
@item 緑
その日に完了できたはずのタスクの場合。
@item 黄
明日になると期限切れになるタスクの場合。
@item 赤
その日に期限切れのタスクの場合。
@end table

日ごとの色分けだけでなく、その日に終わったタスクに関してはアスタリスクでマー
クされ、感嘆符が、グラフ中の今日の日付の部分に付きます。

アジェンダ上でhabitsが表示方法を変える幾つかの設定変数があります。

@table @code
@item org-habit-graph-column
定期的グラフを表記させるバッファ列。これにより指定された列にある文字列
を上書きします。そのため、habitのタイトルを短く要点を付くようにすると
いいでしょう。
@item org-habit-preceding-days
今日より前に、定期的グラフに何日分の日付を表示するかの指定。
@item org-habit-following-days
今日より後に、定期的グラフに何日分の日付表示するかの指定。
@item org-habit-show-habits-only-for-today
nil以外が指定されている場合、habitsを今日のアジェンダビューだけに表示
する。これは、初期値で真に設定されています。
@end table

最後に、アジェンダバッファで@kbd{K}を押すことによりhabitsを一時的に使用不可にし
、まったく表示させないようにできます。もう一度@kbd{K}を押すと元にもどります。例
えば、もし特定の前後の内容によてのみ必要なhabitsの場合は、タグのフィルタリン
グの影響も受けます。

@node プロパティ, タスクの分割, 進行記録, TODOアイテム
@section プロパティ
@cindex 優先順位

もし、Org-modeよく使うのであれば、最終的にTODOアイテム量が増え、優先順位付け
をした方がいいとなるかもしれません。優先順位付けはTODOアイテムの見出しに、次
のように@emph{優先順位クッキー}を置くことで可能になります:

@example
*** TODO [#A] サム フォーチュンに手紙を書く。
@end example

@noindent
@vindex org-priority-faces
初期値としてOrg-modeは、次の３つの優先順位付けをサポートします:@samp{A}、@samp{B}、
@samp{C}。@samp{A}が一番高い優先度です。クッキーなしの場合は、@samp{B}の優先度として扱われ
ます。優先順位付けは、アジェンダの順番を付けるときのみ影響します。「
@pxref{毎週／毎日のアジェンダ}アジェンダ外では、Org-modeで継承されたりしません。ク
ッキーは、変数@code{org-priority-faces}をカスタマイズすることにより、特別なフェイ
スを使ってハイライトすることもできます。

優先順位付けどんなアウトラインモードにも付けるとができます。つまりTODOアイテ
ムである必要はありません。

@table @kbd
@item @kbd{C-c ,}
@kindex @kbd{C-c ,}
@findex org-priority
@c
現在の見出しの優先順位付けをする「@command{org-priority}」。このコマンドは、優
先順位付けのための文字@samp{A}、@samp{B}、または、@samp{C}を聞いてきます。その代わり
に@key{SPC}を押すと、優先順位付けのクッキーが見出しから削除されます。優先
順位は、タイムラインまたは、アジェンダバッファからも@kbd{,}コマンドで遠隔
的に変更できます。「@pxref{アジェンダのコマンド}」。
@orgcmdkkcc{S-@key{up},S-@key{down},org-priority-up,org-priority-down}
@vindex org-priority-start-cycle-with-default
現在の見出し優先度を上下する。@footnote{次のオプションも参照してください。
@code{org-priority-start-cycle-with-default}.}.これらのキーはタイムスタンプ
を修正するのにも使うので注意してください。「@pxref{タイムスタンプの作成}」
@code{shift-selection-mode}との相互利用に関しては次を参照してください。
@ref{衝突}
@end table

@vindex org-highest-priority
@vindex org-lowest-priority
@vindex org-default-priority
変数@code{org-highest-priority}、@code{org-lowest-priority}、@code{org-default-priority}を
設定することで、変更できる優先度の範囲を変えることができます。バッファごとに
、「上限、下限、既定値」の設定を以下のようにすることができます。「必ず一番上
の優先度の文字が、一番下の優先度よりもアルファベットの並びで前の文字であるよ
うにしてください。」:

@cindex #+PRIORITIES
@example
#+PRIORITIES: A C B
@end example

@node タスクの分割, チェックボックス, プロパティ, TODOアイテム
@section タスクをサブタスクに細分化する。
@cindex タスク、細分化
@cindex 統計、TODOアイテムのための

@vindex org-agenda-todo-list-sublevels
通常、大きなタスクは小さくて管理しやすいサブタスクに細分化することをお勧めし
ます。これはTODOアイテムの下にアウトラインツリーをさらに詳細なサブタスクをそ
のツリーを付けて作成することで可能です。@footnote{サブタスクをグローバルTODOリストに
含めないようにするには、@code{org-agenda-todo-list-sublevels}を参照してください。
}すでに完了したサブタスクの進捗状況を表示してさせておくには、@samp{[/]}か@samp{[%]}ヘ
ッドラインのどこかに挿入してください。これらのクッキーは、サブタスクのTODOの
状態が変わるかクッキー上で@kbd{C-c C-c}を押すたびに更新されます。例えば:

@example
* パーティーの準備をする [33%]
** TODO 出席者に電話する [1/2]
*** TODO ピーター
*** DONE サラ
** TODO 食べ物を買う
** DONE 近所の人と話す
@end example

@cindex プロパティ、COOKIE_DATA
もし、見出しがチェックボックスと子TODOを両方持っていた場合、統計クッキーは、
あいまいなものになります。この問題を解決するには、@code{COOKIE_DATA}プロパティを
@samp{checkbox}か@samp{todo}に設定してください。

@vindex org-hierarchical-todo-statistics
もし統計クッキーに「直下のTODOだけでなく」すべてのサブツリーのTODOエントリー
を含めたい場合は、変数@code{org-hierarchical-todo-statistics}を設定してください。
これを一つのサブツリーに行うには、@samp{recursive}というキーワードを@code{COOKIE_DATA}
プロパティの値として設定してください。

@example
* 親キャプチャ統計 [2/20]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
@end example

もしすべての子タスクが終了後、TODOエントリーを自動的にDONEに切り替えたい場合
は、以下の設定を行なってください:

@example
(defun org-summary-todo (n-done n-not-done)
  "すべてのサブツリーが終了するとDONEに切り替え、その他の場合は、TODOになす
る。"
  (let (org-log-done org-log-states)   ; 記録「logging」を終了
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
@end example


その他の方法としては、チェックボックスをつかって「階層化された」多量のサブタ
スクがいくつあるか調べることもできます。「@pxref{チェックボックス}」


@node チェックボックス, , タスクの分割, TODOアイテム
@section チェックボックス
@cindex チェックボックス

@vindex org-list-automatic-rules
プレーンなリスト@footnote{これは概要リスト以外という意味ですが、このリストも
@code{org-list-automatic-rules}を修正することで可能です。}「
@pxref{エントリー中の階層構造}」は、@samp{[ ]}で開始することでチェックボックスにするこ
とができます。この機能は、TODOアイテムに似ていますが「@pxref{TODOアイテム}」、より
気軽につかえます。チェックボックスは、グローバルTODOリストに追加されません。
そのためタスクを分岐するのに便利です。もしくは、買い物リストに使えます。チェ
ックボックスをチェックした状態するには、@kbd{C-c C-c}を使ってください。もしくは
、マウスでクリックしてください。「Piotr Zielinskiの@file{org-mouse.el}に感謝」。

以下は、チェックボックスリストの例です:

@example
* TODO パーティーの準備 [2/4]
  - [-] みんなに連絡 [1/3]
    - [ ] ピーター
    - [X] サラ
    - [ ] サム
  - [X] 食べ物を注文
  - [ ] どんな音楽を掛けるか考える
  - [X] 近所の人と話す
@end example

チェックボックスは、階層化に対応しています。そのため、もしあるチェックボック
ス下の項目が複数のチェックボックスである場合、チェックボックスが全くチェック
されていないか、いくつかされているか、全てされているかによりその内の一つのチ
ェックボックスをチェックした状態にすると親チェックボックスに影響します。

@cindex 統計、チェックボックスの
@cindex チェックボックスの統計
@cindex プロパティ、COOKIE_DATA
@vindex org-hierarchical-checkbox-statistics
最初と二列目の@samp{[2/4]}と@samp{[1/3]}はクッキーであり、いくつのチェックボックスがそ
のエントリーでチェックされているかとそのすべてのチェックボックス数が表示され
ています。これにより、いくつのチェックボックスが残っているか、折りたたまれて
いても分かるようになっています。クッキーは見出しかプレーンなリスト「の最初の
列」に置くことができいます。各クッキーは、クッキーのある見出し／項目の直下に
ある子構造であるチェックボックスを表しています。@footnote{もし直下だけでなくクッキー
のしたにあるすべてのチェックボックスを網羅したい場合は、変数
@code{org-hierarchical-checkbox-statistics}を設定してください。}自分でクッキーを
@samp{[/]}もしくは、@samp{[%]}をタイプして入力しなければなりません。@samp{[/]}を入力すると
上記したように、@samp{m個の内のn個}となります。@samp{[%]}の場合は、何パーセントのチェ
ックボックスがチェックされているかが情報として得られます。「上記の例では、そ
れぞれ@samp{[50%]}と@samp{[33%]となります」}.
見出しの下では、クッキーは、見チェックボックスか子TODOの状態の数を数えます。
また、最後の変更に基づいて表示されます。この問題を解決するには、プロパティ
@code{COOKIE_DATA}を@samp{checkbox}か@samp{todo}に設定してください。

@cindex ブロック、チェックボックスの
@cindex チェックボックスのブロック
@cindex プロパティ、ORDERED
アウトラインノードに@code{ORDERED}プロパティが設定されている場合、チェックボック
スは、連続でチェックされていなければなりません。上部のチェックボックスがチェ
ックされていない状態でその下部のチェックボックスをチェックしようとするとエラ
ーがスローされます

@noindent
以下のコマンドでチェックボックスを操作できます:

@table @kbd
@orgcmd{C-c C-c,org-toggle-checkbox}チェックした状態をトグルするか「前置引数
と実行すると」チェックボックスを作成します。ダブル前置引数だと、@samp{[-]}
が設定されます。これは、中間の状態を表します。
@orgcmd{C-c C-x C-b,org-toggle-checkbox}チェックした状態をトグルするか「前置
引数と実行すると」チェックボックスを作成します。ダブル前置引数だと、
@samp{[-]}が設定されます。これは、中間の状態を表します。
@itemize @minus
@item
アクティブなリージョンがある場合は、そのリージョンの最初のチェックボッ
クスをトグルします。そして残りのボックスを最初のボックスと同じ状態にし
ます。前置引数と使用すると、リージョン内のすべてのチェックボックスを作
成するか削除します。
@item
カーソルが見出し上にある場合、現在の見出しから次の見出しのリージョン内
のチェックボックスをトグルします。「つまりサブツリー全体では@emph{ない}」
@item
アクティブなリージョンがなければ、その場所のチェックボックスをトグルします。
@end itemize
@orgcmd{M-S-@key{RET},org-insert-todo-heading}新しい項目をチェックボックスと共に挿入し
ます。これは、プレーンなリスト(@pxref{エントリー中の階層構造})内にカーソルがすでに
ある場合にのみ動作します。@orgcmd{C-c C-x o,org-toggle-ordered-property}
@vindex org-track-ordered-property-with-tag
@cindex プロパティ、ORDERED
@code{ORDERED}プロパティを設定します。これは、連続でチェックボックスがチェックさ
れていなければならないと指定します。プロパティが使用されます、なぜならこの指
定はローカルに影響するべきでタグのように継承されるないからです。しかし、見や
すいようにタグを使ってプロパティの値を@i{記録}したい場合は、
@code{org-track-ordered-property-with-tag}変数をカスタマイズしてください。
@orgcmd{C-c #,org-update-statistics-cookies}現在のアウトライン内の統計クッキーを更
新します。@kbd{C-u}引数と呼び出されるとファイル全体を更新します。@kbd{C-c C-c}でチェ
ックボックスをトグルした場合と@kbd{M-S-@key{RET}}で新しいチェックボックス項目が作成
された場合、チェックボックス統計クッキーは、自動的に更新されます。TODO状態を
変更すると統計クッキーも更新されます。手動でチェックボックスや項目を削除した
り、それらを追加したり変更した場合は、このコマンドをつかって状態を更新してく
ださい。もしくは、単にコマンドを二度トグルしてください「@kbd{C-c C-c}チェックボ
ックスを作成など」。
@end table

@node タグ, プロパティとカラム, TODOアイテム, Top
@chapter タグ
@cindex タグ
@cindex 見出しのタグ付け
@cindex マッチング、タグ
@cindex ツリーの抽出、タグに基づいた

相互に関係する情報のためにコンテクストやラベルをつけるためのすばらしい方法の
一つは見出しに@i{タグ}を対応づけることです。Org-modeはタグについて幅広く対応して
います。

@vindex org-tag-faces
全ての見出しはタグのリストを取ることができて、タグは見出しの最後に置かれます
。タグはいわゆる普通の単語で利用される文字や数字、@samp{_}、@samp{_}を利用できます。タ
グはコロンで始まりコロンで終わらなければなりません。例えば、@samp{:work:}です。複
数のタグはこのように書きます。@samp{:work:urgent:}。タグはデフォルトでは太字のフ
ェイスで見出しと同じ色で表示されます。TODOのキーワード
(@pxref{TODOキーワードのフェイス})と同じように変数@code{org-tag-faces}を変更することで
特別なフェイスを設定することも可能です。

@menu
* タグの継承::          アウトラインのツリー構造に沿ってタグ付けされる
* タグの設定::          見出しにタグをつける
* タグの検索::          タグの組み合わせで検索する
@end menu

@node タグの継承, タグの設定, タグ, タグ
@section タグの継承
@cindex タグの継承
@cindex 継承、タグの
@cindex 下位レベル、マッチしたタグへの包含

@i{タグ}はアウトラインツリーの階層構造を利用します。もしある見出しに特定のタグが
ついていれば、全ての下位レベルにタグが継承されます。以下に例を示します:

@example
* Meeting with the French group      :work:
** Summary by Frank                  :boss:notes:
*** TODO Prepare slides for him      :action:
@end example

@noindent
最後の見出しには明示的にマークされていない、@samp{:work:}、@samp{:boss:}、@samp{:notes:}、
@samp{:action:}のタグがついています。ファイル全体の見出しに継承される見出しをつけ
ることもでき、これは仮定的にレベル0の見出しとして定義され、ファイル全体に反
映させることができます。この例を次に示します@footnote{これら全てのバッファ内の設定は
、@kbd{C-c C-c}とタイプすることでその行の変更を有効にすることができる}:

@cindex #+FILETAGS
@example
#+FILETAGS: :Peter:Boss:Secret:
@end example

@noindent
@vindex org-use-tag-inheritance
@vindex org-tags-exclude-from-inheritance
特定のタグについてタグの継承を制限するには変数@code{org-use-tag-inheritance}、
@code{org-tags-exclude-from-inheritance}を利用します。

@vindex org-tags-match-list-sublevels
タグの継承が有効の場合にタグの検索で見出しが一致したとき、その見出しの全ての
サブツリーも同じように一致します@footnote{タグ以外の条件を加えて検索するとこの限りで
はない(これはもしその検索が、より複雑な属性を含む条件を伴わないときだけ正し
い)(@pxref{プロパティの検索})}。始めにタグが一致したサブツリーのみを表示したいので
あれば、変数@code{org-tags-match-list-sublevels}を設定してください
(非推奨).

@node タグの設定, タグの検索, タグの継承, タグ
@section タグの設定
@cindex タグの設定
@cindex タグ、設定

@kindex M-@key{TAB}
簡単に見出しの最後へタグは入力することができます。コロンの次に@kbd{M-@key{TAB}}でタ
グの補完をします。他にもタグの入力のための特別なコマンドが以下に続きます:

@table @kbd
@orgcmd{C-c C-q,org-set-tags-command}
@cindex 完了、タグの
@vindex org-tags-column
現在の見出しに新しくタグを入力します。org-modeは補完を始めるか、特別な
ワンキーのインタフェースを提示します。ワンキーのインタフェースは後で説
明します。タグを入力し、@key{RET}キーをタイプするとタグが挿入され、
@code{org-tags-column}の列に整列されます。数引数(@kbd{C-u}
prefix)をつけて呼び出すと、カレントバッファの全てのタグがきれいに見え
るように整列されます。TAGSは自動的に昇格や降格した後に再整列され、TODO
の状態が変わります(@pxref{TODOの基本})。@orgcmd{C-c C-c,org-set-tags-command} カー
ソルが見出し行にある時は@kbd{C-c C-q}と同じ動作をします。
@end table

@vindex org-tag-alist
Org-modeは@emph{list of tags}に基づくタグの挿入をサポートしています。このリストは
デフォルトでは動的に構築され、バッファで使われているタグを全て含みます。変数
@code{org-tag-alist}にタグのリストを設定することでグローバルにタグを指定しておく
こともできます。デフォルトのタグを次のようにファイルに記述することでもデフォ
ルトのタグリストを設定できます。

@cindex #+TAGS
@example
#+TAGS: @@work @@home @@tennisclub
#+TAGS: laptop car pc sailboat
@end example

もし変数@code{org-tag-alist}にタグを設定することでタグリストがグローバルに定義さ
れていたとして、そのリストよりもファイルから生成された動的なタグリストを利用
したければ、次のような空のTAGSオプションをファイルに指定します

@example
#+TAGS:
@end example

@vindex org-tag-persistent-alist
もし全てのファイルで使うつもりのタグや、ファイルごとのTAGSオプションで定義さ
れたタグの集合を優先したければ、変数@code{org-tag-persistent-alist}に明記すればよ
い。これを止めるにはファイルごとにSTARTUPオプションを次のように書きます。

@example
#+STARTUP: noptag
@end example

デフォルトでOrg-modeはタグの入力に標準的なミニバッファでの補完を使います。し
かし@emph{fast tag selection}と呼ばれるもう一つの速い実装もあります。これはタグの
選択や除外をワンキーで可能にするものです。これをうまく動かすためにあなたはユ
ニークな文字を良く使うタグにアサインするべきです。変数@code{org-tag-alist}を
@file{.emacs}に設定することでグローバルにこの機能を使うことができます。例えば複数
のファイルの多くの項目に@samp{:@@home:}タグをつけるという需要があったとします。こ
の場合次のような設定なるでしょう。

@lisp
(setq org-tag-alist '(("@@work" . ?w) ("@@home" . ?h) ("laptop" . ?l)))
@end lisp

@noindent
もしそのタグが作業中のファイルにおいてのみふさわしいのであれば、かわりに次の
ようにTAGSオプションを書くこともできます。

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)  laptop(l)  pc(p)
@end example

@noindent
タグインタフェースはスプラッシュウィンドウにとりうるタグを表示します。もし特
定のタグの後に新しい行から始めたいのであればタグリストに@samp{\n}を挿入します。

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t) \n laptop(l)  pc(p)
@end example

@noindent
もしくは2行に分けて書きます。

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)
#+TAGS: laptop(l)  pc(p)
@end example

@noindent
また次のようにブレース(波括弧@{@})を使うことで相互排除したグループにタグをま
とめることもできます。

@example
#+TAGS: @{ @@work(w)  @@home(h)  @@tennisclub(t) @}  laptop(l)  pc(p)
@end example

@noindent
これは@samp{@@work}、@samp{@@home}、@samp{@@tennisclub}のうち少なくとも一つは選択されること
を意図しています。そのようなグループを複数持つことも可能です。

@noindent
これらの変更を有効にするために、その行にカーソルを置いて@key{C-c C-c}を押すこと
を忘れないようにしてください。

@noindent
これらの相互排除グループを変数@code{org-tags-alist}で設定するためには、ブレースの
代わりにダミーのタグとして@code{:startgroup}と@code{:endgroup}を使わなければなりません
。同様に改行を表現するためにダミーのタグとして@code{:newline}を使うことができます
。直前の例を設定すると次のような記述になります。

@lisp
(setq org-tag-alist '((:startgroup . nil)
                      ("@@work" . ?w) ("@@home" . ?h)
                      ("@@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))
@end lisp

もし少なくとも一つのタグに選択用キーが設定されていると、@kbd{C-c C-c}が押された
ときに自動的に特別なインタフェースが表示されます。そのインタフェースは継承さ
れたタグ、現在の見出しのタグ、全ての有効な付随するタグを提示します@footnote{キーが設
定されていないタグにはは自動的にキーがアサインされます。}。このインタフェー
スでは以下のキーが利用できます。

@table @kbd
@item a-z...
アサインされたキーを押すことで現在の行にタグが追加または削除されます。
相互排除グループのタグを選択することでそのグループの他のタグは無効にな
ります。
@kindex @key{TAB}
@item @key{TAB}
たとえあらかじめ定義されていないタグでも、ミニバッファでタグを入力しま
す。バッファ内の全てのタグを補完することができます。コンマで区切ること
で複数のタグを追加することも可能です。

@kindex @key{SPC}
@item @key{SPC}
この行のタグを全てクリアします。
@kindex @key{RET}
@item @key{RET}
変更された集合を確定します。
@item C-g
変更を破棄します。
@item q
もし@kbd{q}がタグにアサインされていなければ@kbd{C-g}のように変更を破棄します。
@item !
相互排除しているタグのグルーピングを無効にします。これはそのグループ内
のタグを(例外的に)複数個、タグづけるときに使います。
@item C-c
次の変更後の自動終了をトグルします(下記参照)。もしもしエキスパートモー
ドを使っているのであれば、最初の@kbd{C-c}が選択ウィンドウに表示されます。
@end table

@noindent
このメソッド(特別なインタフェース)であなたはとても少ないタイプで見出しにタグ
をつけられます。上記の設定で、現在のタグをクリアして、@samp{@@home}、@samp{laptop}、
@samp{pc}のタグをつけるには次のように入力します:
@kbd{C-c C-c @key{SPC} h l p @key{RET}}。タグ@samp{@@home}を@samp{@@work}へ付け替えるには
@kbd{C-c C-c w @key{RET}}とタイプするか代わりに@kbd{C-c C-c C-c w}とタイプします。定義さ
れていないタグ@samp{Sarah}を追加するには@kbd{C-c C-c @key{TAB} S a r a h @key{RET} @key{RET}}すれ
ばよいのです。

@vindex org-fast-tag-selection-single-key
もしタグを決定するのをただひとつのキーを押すだけにする必要があれば、変数
@code{org-fast-tag-selection-single-key}を設定します。これによってタグを選択する
キーを押した後に@kbd{RET}を押す必要がなくなります。もしキー入力が必要であれば
@kbd{C-c}で無効化できます(つまりタグの選択を始めるために@kbd{C-c C-c C-c}の代わりに
@kbd{C-c C-c}を使います)。もしこの変数に@code{expert}を設定すれば、タグのワンキー選択
用の特別なウィンドウを表示しなくなります。@kbd{C-c}を追加してはじめてそのウィン
ドウが表示されるようになります。

@node タグの検索, , タグの設定, タグ
@section タグの検索
@cindex タグの検索
@cindex タグのための検索

一度タグシステムが設定されると、関連する情報を特殊なリストに集めるのに使われ
ます。

@table @kbd
@orgcmdkkc{C-c / m,C-c \\,org-match-sparse-tree}
タグ検索にマッチした全てのツリーを抽出する。@kbd{C-u}のプレフィックスをつ
けて呼び出すことで、TODOの見出しのみに限定する。
@orgcmd{C-c a m,org-tags-view}
全てのアジェンダファイルにおいてタグにマッチしたものの一覧を作成する。
@xref{タグとプロパティとのマッチング}. @orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
全てのアジェンダファイルにおいてタグにマッチしたものの一覧を作成する。
ただしTODOの項目に限定し、サブツリーの項目の検索を強制する(変数
@code{org-tags-match-list-sublevels}参照)。
@end table

これらのコマンドは全てマッチ文字列を問います。マッチ文字列はタグ@samp{boss}と
@samp{urgent}を含み、@samp{project1}を含まないものを検索する@samp{+boss+urgent-project1}や
、タグ@samp{Kathy}または@samp{Sally}がつけられているエントリーを検索する@samp{Kathy|Sally}
のような基本的な論理構造が使用可能です。検索文字列の全ての構文はリッチでTODO
キーワードやエントリーのレベル、プロパティにもマッチします。完全な説明と多く
の例は@ref{タグとプロパティとのマッチング}を見てください。


@node プロパティとカラム, 日付や時間, タグ, Top
@chapter プロパティ（属性）とカラム（列）
@cindex properties

プロパティはエントリーに関連付けられたキーと値を持つペアのあつまりです。
Org-modeでは、プロパティのための主要なアプリケーションが2つあります。1つ目は
、プロパティはタグのようですが値を持つことです。2つ目は、Org-modeのバッファ
で(とても基本的な)データベース機能を実装するためにプロパティを使えることです
。1つ目のアプリケーションの例に、ソフトウェアのリリース計画とバグを文章化す
るファイルを管理することを想像して下さい。@code{:release_1:}、@code{:release_2:}のよう
なタグを使う代わりに、@code{:Release:}というプロパティを使い、異なるサブツリーの
中に@code{1.0}や@code{2.0}のような異なる値を持たせれば良いのです。プロパティの2つ目の
アプリケーションの例に、音楽CDのトラックを管理する事を想像して下さい。そこで
はアルバム名、アーティスト名、リリース日、トラックの数などがプロパティとなる
でしょう。

プロパティはカラムビューで便利に編集、閲覧できます(@pxref{カラムビュー})。

@menu
* プロパティの表記法::  プロパティの表記の仕方
* スペシャルプロパティ::  他のorg-modeの機能を使用する
* プロパティの検索::  プロパティ値の一致作業
* プロパティの継承::  ツリー上でのプロパティの伝達
* カラムビュー::       表による表示と修正
* プロパティAPI::       Lispプログラマのためのプロパティ
@end menu

@node プロパティの表記法, スペシャルプロパティ, プロパティとカラム, プロパティとカラム
@section プロパティの表記法
@cindex プロパティシンタックス
@cindex 引き出し、プロパティ用

プロパティはキーと値のペアです。それらは、名前@code{PROPERTIES}を持つ特別な引き出
し(@pxref{引き出し})の中にある必要があります。各プロパティは最初に(コロンで囲われ
た)キーを持ち、その後に値を持つ1行で記述されます。以下に例を示します。

@example
* CD collection
** Classic
*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glen Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :END:
@end example

プロパティ@samp{:Xyz_ALL:}のように設定する事で、特定なプロパティ@samp{:Xyz:}の許容値を
定義できます。この特別なプロパティは、もしレベル1のエントリに設定されたなら
ば全てのツリーに適用されるように@emph{継承}されます。許容値を定義すると、対応する
プロパティの設定が簡単になり、入力ミスを防ぐ事ができます。CDコレクションの例
では、以下のように1つのボックスの中に発売元とディスクの数をあらかじめ定義で
きます。

@example
* CD collection
  :PROPERTIES:
  :NDisks_ALL:  1 2 3 4
  :Publisher_ALL: "Deutsche Grammophon" Philips EMI
  :END:
@end example

1つのファイル全体で継承されるプロパティを設定したいならば、以下の行のように
します。
@cindex プロパティ、_ALL
@cindex #+PROPERTY
@example
#+PROPERTY: NDisks_ALL 1 2 3 4
@end example

@vindex org-global-properties
グローバル変数@code{org-global-properties}に設定するプロパティの値は全ての
Org-modeのファイルに継承されます。

@noindent
以下のコマンドはプロパティを操作する助けとなります。

@table @kbd
@orgcmd{M-@key{TAB},pcomplete}行にある最初のコロンのうしろで、プロパティのキーを
補完します。現在のファイルで使われた全てのキーは可能な補完候補として提
供されます。@orgcmd{C-c C-x p,org-set-property}プロパティを設定します。プロパ
ティ名と値の入力を促します。必要なら、プロパティの引き出しがさらに作ら
れます。
@item M-x org-insert-property-drawer
@findex org-insert-property-drawer
現在のエントリーの中にプロパティの引き出しを入れます。引き出しはエント
リーのはじめに入りますが、デッドラインのような計画情報を持つ行の後とな
ります。@orgcmd{C-c C-c,org-property-action}プロパティの引き出しの中にカーソ
ルがあるとき、プロパティコマンドを実行します。
@orgcmd{C-c C-c s,org-set-property}現在のエントリにプロパティを設定します。プ
ロパティと値の両方共、補完を使って入力できます。
@orgcmdkkcc{S-@key{right},S-@key{left},org-property-next-allowed-value,org-property-previous-allowed-value}ポイントのプロパティを次/前の許容値に切り替えます。@orgcmd{C-c C-c d,org-delete-property}現在のエントリからプロパティを削除します。@orgcmd{C-c C-c D,org-delete-property-globally}プロパティを現在のファイルにある全てのエントリからグローバルに削除します。@orgcmd{C-c C-c c,org-compute-property-at-point}ポイントにあるプロパティを最も近い列のフォーマット定義からオペレータやスコープを使って計算します。
@end table

@node スペシャルプロパティ, プロパティの検索, プロパティの表記法, プロパティとカラム
@section スペシャルプロパティ
@cindex プロパティ、スペシャル

以前の章で述べたTODO状態や、エントリの優先度のようなスペシャルプロパティは、
Org-modeの機能への別のアクセス方法を提供します。このインターフェイスはカラム
ビュー(@pxref{カラムビュー})にそれらの状態を含めたり、クエリにそれらを使ったりする
事で生じます。次のプロパティ名は特別(@code{:CATEGORY:}を除いて)で、プロパティの引
き出しでキーとして使われません。

@cindex プロパティ、スペシャル、TODO
@cindex プロパティ、スペシャル、TAGS
@cindex プロパティ、スペシャル、ALLTAGS
@cindex プロパティ、スペシャル、CATEGORY
@cindex プロパティ、スペシャル、PRIORITY
@cindex プロパティ、スペシャル、DEADLINE
@cindex プロパティ、スペシャル、SCHEDULED
@cindex プロパティ、スペシャル、CLOSED
@cindex プロパティ、スペシャル、TIMESTAMP
@cindex プロパティ、スペシャル、TIMESTAMP_IA
@cindex 特別なプロパティ（CLOCKSUM）
@cindex プロパティ、スペシャル、BLOCKED
@c guessing that ITEM is needed in this area; also, should this list be sorted?
@cindex プロパティ、スペシャル、ITEM
@cindex プロパティ、スペシャル、FILE
@example
TODO         @r{エントリのTODOキーワード}
TAGS         @r{見出しに直接定義されたタグ}
ALLTAGS      @r{継承されたタグも含む全てのタグ}
CATEGORY     @r{エントリのカテゴリ}
PRIORITY     @r{1文字の文字列である、エントリの優先度}
DEADLINE     @r{山括弧(<>)のないデッドライン時刻文字列}
SCHEDULED    @r{山括弧(<>)のないスケジュールタイムスタンプ}
CLOSED       @r{いつこのエントリがクローズされたか}
TIMESTAMP    @r{エントリで最初のキーワードのないタイムスタンプ}
TIMESTAMP_IA @r{エントリで最初のアクティブでないタイムスタンプ}
CLOCKSUM     @r{サブツリーでのCLOCKインターバルの合計。@code{org-clock-sum}\n}
             @r{が値を計算するために最初に実行されなければならない。\n}
BLOCKED      @r{"t" であれば、タスクが子供や兄弟に現在ブロックされている}
ITEM         @r{エントリの内容}
FILE         @r{エントリのあるファイル名}
@end example

@node プロパティの検索, プロパティの継承, スペシャルプロパティ, プロパティとカラム
@section プロパティの検索
@cindex プロパティ、検索
@cindex 検索、プロパティの

プロパティに基づいて選択した特別なリストやツリーの抽出を作成するために、タグ
検索(@pxref{タグの検索})の場合と同じコマンドが使えます。
@table @kbd
@orgcmdkkc{C-c / m,C-c \\,org-match-sparse-tree}
全てのマッチしたエントリについて抽出したツリーを作成します。前置引数
@kbd{C-u}をつけると、TODO行でない見出しは無視します。
@orgcmd{C-c a m,org-tags-view} 全てのアジェンダファイルからマッチするタグ・プ
ロパティのグローバルなリストを作成します。
@xref{タグとプロパティとのマッチング}.  @orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
全てのアジェンダファイルからマッチするタグのグローバルなリストを作成し
ます。しかし、TODO項目と下位項目の強制チェック(変数
@code{org-tags-match-list-sublevels}参照)のみチェックします。
@end table

検索文字列のための文法は、@ref{タグとプロパティとのマッチング}で説明されています
。

1つのプロパティに基いて抽出したツリーを作成するための特別なコマンドもありま
す。

@table @kbd
@orgkey{C-c / p}プロパティの値に基づいて抽出したツリーを作成します。これは最
初にプロパティ名、次にその値の入力を促します。抽出したツリーは与えられ
た値でこのプロパティを定義する全てのエントリで作られます。その値を大括
弧で括っていたならば正規表現として解釈され、プロパティ値に対してマッチ
します。
@end table

@node プロパティの継承, カラムビュー, プロパティの検索, プロパティとカラム
@section プロパティの継承
@cindex プロパティ、継承
@cindex 継承、プロパティの

@vindex org-use-property-inheritance
Org-mode文章のアウトライン構造はプロパティの継承モデルを適用しています。ツリ
ーの親があるプロパティを持っているならば、子はこのプロパティを継承します。
Org-modeはこれをデフォルトで有効としていません。これはプロパティの検索を遅く
してしまうためとあまり必要とされないためです。しかしながら、継承が役立つ場面
があるならば、変数@code{org-use-property-inheritance}を設定する事で有効とできます
。この変数は、全てのプロパティを親から継承する@code{t}、継承されるべきプロパティ
のリスト、継承されるプロパティにマッチする正規表現を設定できます。もしプロパ
ティが値@samp{nil}を持つならば、継承検索がこの値で停止し@code{nil}を返すように、明示的
に未定義のプロパティであると解釈されます。

Org-modeは、継承がハードコードされているプロパティがいくつかあります。少なく
ともそれらを使う特別なアプリケーションがあります。

@cindex プロパティ（COLUMNS）
@table @code
@item COLUMNS
@code{:COLUMNS:}プロパティは、カラムビュー(@pxref{カラムビュー})のフォーマットを
定義します。@code{:COLUMNS:}プロパティが定義されているレベルがカラムビュー
テーブルの開始地点として使われるという意味で継承されます。そして、列表
示が有効である場所とサブツリーの場所とは無関係です。
@item CATEGORIES
@cindex プロパティ（CATEGORY）
アジェンダビュー用です。@code{:CATEGORY:}プロパティを通して設定されたカテゴ
リがサブツリー全体に適用されます。
@item ARCHIVE
@cindex プロパティ（ARCHIVE）
アーカイブ用です。@code{:ARCHIVE:}プロパティは、サブツリー全体のアーカイブ
位置を定義します(@pxref{サブツリーを移動する})。
@item LOGGING
@cindex プロパティ、ログをとる
LOGGINGプロパティは、エントリやサブツリーのログ取得設定について定義し
ます(@pxref{作業の状態変化の追跡})。
@end table

@node カラムビュー, プロパティAPI, プロパティの継承, プロパティとカラム
@section カラムビュー

アウトラインツリーにあるプロパティを閲覧、編集するための最も良い方法は@emph{カラ
ムビュー}です。カラムビューでは、各アウトラインノードがテーブル行に変換され
ます。このテーブルにある列がエントリのプロパティへのアクセスです。Org-modeは
、各項目の見出し上にテーブル構造をオーバレイすることで列を実装します。見出し
はテーブル列に変換されますが、アウトラインツリーの見た目もまだ変えられます。
例えば、CONTENTS
ビュー(@kbd{S-@key{TAB}S-@key{TAB}}、もしくは、カラムビューがアクティブであるときに単純
に@kbd{c})にスイッチする事でコンパクトなテーブルを得られますが、まだ各見出し以下
のエントリを開いたり、読んだり、編集したりもできます。また、ツリーの抽出コマ
ンドを実行した後にカラムビューに切り替える事もでき、この方法では選択した項目
のみのテーブルを得ます。カラムビューは利用可能な複数のファイルから選択した項
目を集めたクエリのあるアジェンダバッファ(@pxref{アジェンダビュー})でも動作します。

@menu
* カラムの定義::       カラムの書式のプロパティ
* カラムビューの利用::  カラム表示の作り方と使い方
* カラム表示の保存::  カラム表示用の動的ブロック
@end menu

@node カラムの定義, カラムビューの利用, カラムビュー, カラムビュー
@subsection カラムの定義
@cindex カラムビュー、プロパティ用
@cindex プロパティ、カラムビュー

最初にカラムビューを設定するために、カラムを定義する必要があります。これはカ
ラムフォーマット行を定義する事によってなされます。

@menu
* カラム定義の有効範囲::  カラム設定の定義範囲の指定方法は？
* カラム・アトリビュート::  カラム内の表示と値
@end menu

@node カラム定義の有効範囲, カラム・アトリビュート, カラムの定義, カラムの定義
@subsubsection カラム定義の有効範囲

カラムフォーマットを定義するために、次のように行を記載します。

@cindex #+COLUMNS
@example
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
@end example

指定したツリーに適用するだけのフォーマットを指定するために、@code{:COLUMNS:}プロ
パティをそのツリーの一番上のノードに追加します。例えば、

@example
** カラムビューの最初のノード
   :PROPERTIES:
   :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
   :END:
@end example

もし@code{:COLUMNS:}プロパティがエントリに現れると、そのエントリ自身とそれ以下の
サブツリー全体の列を定義します。列定義は文章の階層構造の一部なので、全てのサ
ブレベルに十分一般的なレベル1の列を定義でき、また、ツリーのより深い部分を編
集するとき、より下位の指定された列を定義できます。

@node カラム・アトリビュート, , カラム定義の有効範囲, カラムの定義
@subsubsection カラム・アトリビュート
列定義は、列の属性の集りです。一般的な定義は以下のようになります。

@example
 %[@var{width}]@var{property}[(@var{title})][@{@var{summary-type}@}]
@end example

@noindent
パーセントとプロパティ名を除いて、全ての項目はオプションです。個々のパーツは
次の意味を持ちます。

@example
@var{width}           @r{列の幅を文字数で指定する整数。}
                @r{省略すると、幅は自動的に決定されます。}
@var{property}        @r{この列で編集できるプロパティ。}
                @r{メタデータを示す特別なプロパティがここで許容されます。}
                @r{(@pxref{スペシャルプロパティ})}
@var{title}     @r{列の見出しテキスト。省略するとプロパティ名が使われます。}
@{@var{summary-type}@}  @r{サマリタイプ。}
                        @r{指定すると親ノードの列の値は子から計算されます。}
                @r{サポートされるサマリのタイプは以下です。}
                @{+@}       @r{この列にある数の和。}
                @{+;%.1f@}  @r{@samp{+}と似ているが、フォーマットが@samp{%.1f}となる。}
                @{$@}       @r{通貨。@samp{+;%.2f}の略。}
                @{:@}       @r{時刻の合計。HH:MM。数値は時間。}
                @{X@}       @r{チェックボックスの状態。}
                            @r{子が全て@samp{[X]}ならば、@samp{[X]}です。}
                @{X/@}      @r{チェックボックスの状態。@samp{[n/m]}。}
                @{X%@}      @r{チェックボックスの状態。@samp{[n%]}。}
                @{min@}     @r{列の最も小さい数値。}
                @{max@}     @r{最も大きい数値。}
                @{mean@}    @r{数の算術平均。}
                @{:min@}    @r{列に最も小さい時間数値。}
                @{:max@}    @r{最も大きい時間数値。}
                @{:mean@}   @r{時刻の算術平均。}
                @{@@min@}    @r{最小時刻(日/時間/分/秒)。}
                @{@@max@}    @r{最大時刻(日/時間/分/秒)。}
                @{@@mean@}   @r{時刻の算術平均(日/時間/分/秒)。}
                @{est+@}    @r{低-高見積りを追加。}
@end example

@noindent
含めるあらゆるプロパティに1つのサマリタイプしかを持てないという事に気をつけ
て下さい。同じプロパティを参照する後にくる列は全て同じサマリの情報を表示しま
す。

@code{est+}サマリタイプはもう少し説明が必要です。それは低-高の幅で表現される見積
りを組み合わせるために使われます。例えば、特定のタスクが5日必要であると見積
る代わりに、どのくらいの仕事が必要とされるか公正に確実に見積もるならば5日か
ら6日と、それをなすのに必要な時間が本当に分からないならば、1-10日と見積るで
しょう。両者の幅の平均は5.5日ですが、前者はより予測可能な発言を示しています
。

そのような見積りを組み合わせるとき、単純に低と高を追加すると非現実的な幅の結
果を作ります。代わりに、@code{est+}は合計から最終的な見積りを生成する事で統計的意
味やサブタスクの分散を追加します。例えば、10個のタスクがあるとき、各々が0.5
から2日の仕事であると見積られました。全てが非常によく進む、もしくは悪く進む
と期待する事による計算で、ストレートな追加は5日から20日の見積りであると生成
します。対照的に、@code{est+}は全ての仕事より現実的に10日から15日であると見積りま
す。

以下は許可値にそって列定義を計算する例です。

@example
:COLUMNS:  %25ITEM %9Approved(Approved?)@{X@} %Owner %11Status \@footnote{COLUMNS定義
は1行でなければならないことに注意して下さい。書式の制約のためここでラップさ
れます。}
                   %10Time_Estimate@{:@} %CLOCKSUM
:Owner_ALL:    Tammy Mark Karl Lisa Don
:Status_ALL:   "In progress" "Not started yet" "Finished" ""
:Approved_ALL: "[ ]" "[X]"
@end example

@noindent
最初の列、@samp{%25ITEM}はその項目の25文字を意味します。すなわち見出しの@:です。
おそらく常に@samp{ITEM}指示子を持つ列定義をはじめるべきでしょう。その他の指示子は
許容値の名前のリストを持つ列@samp{Owner}、4つの異なる利用可能な値を持つ@samp{Status}、
チェックボックスフィールドを持つ@samp{Approved}を生成します。@samp{%}文字の後に幅が与
えられていないとき、列は全ての値を完全に表示するために必要な幅と同じぐらい正
確に広くなります。@samp{Approved}列は修正れたタイトル(クエスチョンマークのある
@samp{Approved?})を持っています。サマリは、HH:MMのように表現する持続時間を追加す
ることで@samp{Time_Estimete}を、全ての子がチェックされているなら@samp{[X]}を提供するこ
とで@samp{Approved}を作ります。@samp{CLOCKSUM}は特別で、サブツリーにあるCLOCKインター
バルの合計をリストします。

@node カラムビューの利用, カラム表示の保存, カラムの定義, カラムビュー
@subsection カラムビューの利用

@table @kbd
@tsubheading{カラムビューのオン・オフ} @orgcmd{C-c C-x C-c,org-columns}
@vindex org-columns-default-format
カラムビューを有効とします。カーソルがそのファイルの最初の見出しより前
にあるならば、カラムビューは@code{#+COLUMNS}定義を使う事によりファイル全体
に対して有効となります。カーソルがアウトラインの内側のどこかにあるなら
ば、このコマンドはフォーマットを定義する@code{:COLUMNS:}プロパティをポイン
トから上部の階層に向かって検索します。1つ見つかったとき、カラムビュー
テーブルは@code{:COLUMNS:}プロパティを含むエントリではじまるツリー用に設立
されます。そのようなプロパティが見付からないときは、フォーマットは
@code{#+COLUMNS}行もしくは、変数@code{org-columns-default-format}から取得され、
カラムビューは現在のエントリとそのサブツリーのために設置されます。
@orgcmd{r,org-columns-redo}バッファにある最近作られた変更を反映するためにカラ
ムビューを再生成します。@orgcmd{g,org-columns-redo}@kbd{r}と同じです。
@orgcmd{q,org-columns-quit}カラムビューを抜けます。@tsubheading{値を編集する}
@item @key{left} @key{right} @key{up} @key{down}
フィールドからフィールドへカラムビューを通じて移動します。
@kindex S-@key{left}
@kindex S-@key{right}
@item S-@key{left}/@key{right}
フィールドの次と前の許可値を切り替えます。このために、プロパティの指定
された許可値を持つ必要があります。
@item 1..9,0
直接にN番目の許可値を選択します。@kbd{0}は10番目の値を選択します。
@orgcmdkkcc{n,p,org-columns-next-allowed-value,org-columns-previous-allowed-value}@kbd{S-@key{left}/@key{right}}と同じです。@orgcmd{e,org-columns-edit-value}ポイント下のプロパティを編集します。特別なプロパティでは通常そのプロパティを変更するために使うのと同じインタフェースを呼び出します。例えば、TAGSプロパティを編集するとき、タグ補完や高速選択インタフェースがポップアップします。@orgcmd{C-c C-c,org-columns-set-tags-or-toggle}チェックボックスがあるならば、それを切り替えます。@orgcmd{v,org-columns-show-value}このプロパティの完全な値を表示します。列の幅がその値よりも小さいときに便利です。@orgcmd{a,org-columns-edit-allowed}このプロパティの許可値のリストを編集します。リストが階層で見つかるならば、修正された値はそこに保存されます。リストが見つからないならば、新しい値は現在のカラムビューの一部である最初のエントリに保存されます。@tsubheading{テーブル構造を編集する}@orgcmdkkcc{<,>,org-columns-narrow,org-columns-widen}1文字分列を狭く・広くする@orgcmd{S-M-@key{right},org-columns-new}現在の列の左に新しい列を挿入する。@orgcmd{S-M-@key{left},org-columns-delete}現在の列を削除する。
@end table

@node カラム表示の保存, , カラムビューの利用, カラムビュー
@subsection カラム表示の保存

カラムビューはバッファへのオーバレイのみなので、直接にエクスポートや印字がで
きません。カラムビューをキャプチャしたいならば、@code{columnview}ダイナミックビュ
ー(@pxref{ダイナミックブロック})を使って下さい。このブロックのフレームは以下のよう
に見えます。

@cindex #+BEGIN, columnview
@example
* The column view
#+BEGIN: columnview :hlines 1 :id "label"

#+END:
@end example

@noindent
ダイナミックブロックを更新するには以下のコマンドを使用します。

@table @code
@item :id
これは最も重要なパラメーターです。カラムビューはある(サブ)ツリーによく
ローカライズされる機能であり、キャプチャブロックはファイル内の異なる位
置にあるかもしれません。キャプチャするビューをもつツリーを識別するため
に、4つの値を使えます。
@cindex property, ID
@example
local     @r{キャプチャブロックに位置するツリーを使います。}
global    @r{そのファイル内の全ての見出しを含む、}
          @r{グローバルビューを作ります。}
"file:@var{path-to-file}"
          @r{このファイルの一番上のカラムビューを実行します。}
"@var{ID}"      @r{値@i{label}である@code{:ID:}プロパティを}
          @r{持つツリーにあるカラムビューを呼び出します。現在の}
          @r{エントリ用にグローバルにユニーグなIDを作り、}
          @r{kill-ringにそれをコピーするために}
          @r{@kbd{M-x org-id-copy}を使えます。}
@end example
@item :hlines
@code{t}のとき、全ての行の後に横線を挿入します。数値@var{N}のとき、レベル
@code{<= @var{N}}を持つ各見出しの前に縦線を挿入します。
@item :vlines
@code{t}に設定するとき、列グループに縦線を強制します。
@item :maxlevel
数値を設定すると、そのレベル以下のエントリをキャプチャしません。
@item :skip-empty-rows
@code{t}に設定すると、カラムビューの空でない指定子が@code{ITEM}のみである行をス
キップします。

@end table

@noindent
次のコマンドはダイナミックブロックを挿入、更新します。

@table @kbd
@orgcmd{C-c C-x i,org-insert-columns-dblock}カラムビューをキャプチャするダイ
ナミックブロックを挿入します。そのビューのスコープやIDの入力を促されま
す。@orgcmdkkc{C-c C-c,C-c C-x C-u,org-dblock-update}ポイント下のダイナミックブ
ロックを更新します。カーソルはダイナミックブロクの@code{#+BEGIN}行にある必
要があります。@orgcmd{C-u C-c C-x C-u,org-update-all-dblocks}全てのダイナミッ
クブロックを更新します(@pxref{ダイナミックブロック})。複数のクロックテーブル
ブロックや列キャプチャブロック、その他のダイナミックブロックがバッファ
にあるとき便利です。
@end table

カラムビューテーブルに計算式を追加し、テーブルの前にプロットする命令を追加で
きます。これらはブロックの更新があっても生き残ります。テーブルの後に
@code{#+TBLFM:}があるならば、テーブルは実際に更新の後に自動的に実際に再計算されま
す。

テーブルの中でプロパティ値を処理したりキャプチャする別の方法はEric
Schulteの@file{org-collector.el}によりできます。それは寄付されたパッケージ
@footnote{寄付されたパッケージはEmacsの一部ではありませんがOrgのメインの配布物と共に
配布されます(@uref{http://orgmode.org}を訪ずれて下さい)。}です。あるスコープにあ
るエントリからプロパティを集めるための一般的なAPIやテーブルやダイナミックブ
ロックの中に挿入する前にそれらの値を処理する任意のLisp式を提供します。

@node プロパティAPI, , カラムビュー, プロパティとカラム
@section プロパティAPI
@cindex プロパティ（API）
@cindex プロパティのためのAPI

プロパティにアクセス、変更するための完全なAPIがあります。このAPIはプロパティ
と共に動作するために、また、それらを元とした機能を実装するためにEmacs
Lispプログラムから使われます。詳細な情報は@ref{プロパティAPIを使う}を参照して下
さい。

@node 日付や時間, キャプチャ／再配置／アーカイブ, プロパティとカラム, Top
@chapter 日付と時刻
@cindex 日付
@cindex 時刻
@cindex タイムスタンプ
@cindex 日付スタンプ

プロジェクトのプランニングを補助するため、TODOアイテムは日付または時刻でラベ
リングすることができます。このような形でフォーマットされた日付および時刻の情
報を含む文字列はOrg-modeでは@emph{タイムスタンプ}と呼ばれています。一般的な用法で
は、タイムスタンプは何かを作成したときや最後に変更したときの記録を示しますの
で、若干紛らわしいかもしれませんが、Org-modeではタイムスタンプという用語をよ
り広い意味で用います。

@menu
* タイムスタンプ::    ツリーに時間の割り当て
* タイムスタンプの作成::  タイムスタンプを挿入するコマンド
* デッドラインとスケジュール::  作業計画をたてる
* 作業に費やした時間の計測::  タスクに費やす時間を追跡する
* 工数の見積もり::    事前に作業活動を計画する
* 相対時間タイマー::  実行中のタイマーに関する注意
* カウントダウンタイマー::  タスクのカウントダウンタイマーを起動する
@end menu


@node タイムスタンプ, タイムスタンプの作成, 日付や時間, 日付や時間
@section タイムスタンプ、デッドラインおよびスケジューリング
@cindex タイムスタンプ
@cindex 時間間隔、時刻
@cindex 日付スタンプ
@cindex デッドライン
@cindex スケジューリング

タイムスタンプは、例えば@samp{<2003-09-16 Tue>}、@samp{<2003-09-16 Tue 09:39>}、
@samp{<2003-09-16 Tue 12:00-12:30>}といった独自形式での日付（場合によっては時刻お
よび時間間隔を含む）の指定方法です@footnote{この表記は標準的なISO8601の日付、時刻フォ
ーマットをもとに考案されています。代替フォーマットの使用については、
@ref{カスタムタイムフォーマット}を参照してください。}。タイムスタンプはOrgツリー
構造の見出し、本文のいずれにも挿入できます。タイムスタンプを指定することによ
り、指定された日付のアジェンダ(@pxref{毎週／毎日のアジェンダ})にそのエントリーが表
示されます。その際には以下の区別が行われます。

@table @code
@item プレーンなタイムスタンプ、イベント、アポイント
@cindex タイムスタンプ
項目に対して単一の日付または時刻を割り当てるシンプルなタイムスタンプで
す。紙の予定表に予定あるいはイベントを記入するのとほぼ同じ感覚です。タ
イムラインおよびアジェンダを表示すると、プレーンなタイムスタンプが指定
されたエントリーの見出しはまさにその指定された日付に表示されます。

@example
* ピーターと映画を見に行く<2006-11-01 Wed 19:15>
* 気候変動についてのディスカッション<2006-11-02 Thu 20:00-22:00>
@end example

@item リピート間隔を指定したタイムスタンプ
@cindex タイムスタンプ、リピート間隔
タイムスタンプには@emph{リピート間隔}を含めることができます。すなわち単一の
日時だけでなく、N日(d)、N週間(w)、Nヶ月(m)あるいはN年(y)といった一定の
間隔で繰り返すようなケースに対応しています。例えば、毎週水曜日のアジェ
ンダに表示する場合は以下のようになります。

@example
* 学校までサムを迎えに行く<2007-05-16 Wed 12:30 +1w>
@end example

@item ダイアリー形式のS式項目
より複雑な日付の指定方法として、Org-modeではEmacsのcalendarまたはdiary
パッケージで実装されているS式のダイアリー項目を使用することができます
。例えば以下のような形式です。

@example
* 毎月第2木曜日のオタクの集まり
  <%%(diary-float t 4 2)>
@end example

@item 日付または時刻の間隔
@cindex 時間間隔
@cindex 日付の間隔
2つのタイムスタンプを@samp{--}でつなげることにより、時間間隔を表現できます
。時間間隔の指定されたヘッドラインは、間隔の始めと終わりの日、およびそ
の間の現在表示されている日付の項目に表示されます。以下のような形です。

@example
** アムステルダムでのミーティング
   <2004-08-23 Mon>--<2004-08-26 Thu>
@end example

@item アクティブでないタイムスタンプ
@cindex タイムスタンプ、アクティブでない
@cindex アクティブでないタイムスタンプ
プレーンなタイムスタンプと同様ですが、<>ではなく[]で囲むことによりアク
ティブでないタイムスタンプとなります。このようなタイムスタンプが指定さ
れたエントリーは、アジェンダに表示@emph{されません}。

@example
* ジリアンが5度目の遅刻　[2006-11-01 Wed]
@end example

@end table

@node タイムスタンプの作成, デッドラインとスケジュール, タイムスタンプ, 日付や時間
@section タイムスタンプの作成
@cindex タイムスタンプの作成
@cindex タイムスタンプ、作成

Org-modeがタイムスタンプを認識するためには、特定のフォーマットを用いる必要が
あります。以下のコマンドのいずれを用いても正しいフォーマットでタイムスタンプ
を生成することができます。

@table @kbd
@c
@c
@orgcmd{C-c .,org-time-stamp}日付を入力して、それに対応するタイムスタンプを挿
入します。既にバッファ内に存在するタイムスタンプにカーソルが置かれてい
る場合は、このコマンドは新たなタイムスタンプを挿入する代わりに、既にあ
るタイムスタンプを変更します。このコマンドを2回連続で使用すると、時間
間隔を指定することができます。@orgcmd{C-c !,org-time-stamp-inactive}コマンド
@kbd{C-c .}と同様ですが、アクティブでない（アジェンダのエントリーに反映さ
れない）タイムスタンプを生成します。
@kindex C-u C-c .
@kindex C-u C-c !
@item C-u C-c .
@itemx C-u C-c !
@vindex org-time-stamp-rounding-minutes
@c
@c
@c
@c
@c
@c
@kbd{C-c .}および@kbd{C-c !}と同様ですが、日付と時刻を含む代替フォーマットを使
用します。標準では、時刻は5分間隔で丸められます。
@code{org-time-stamp-rounding-minutes}のオプションを参照して下さい。
@orgcmd{C-c <,org-date-from-calendar}カレンダーのカーソルに対応したタイムスタ
ンプを挿入します。@orgcmd{C-c >,org-goto-calendar}現在時刻のEmacsカレンダーに
アクセスします。現在の行に既にタイムスタンプが存在する場合は、それに対
応する日付にアクセスします。@orgcmd{C-c C-o,org-open-at-point}タイムスタンプ
および時間間隔で指定された日付でアジェンダにアクセスします
(@pxref{毎週／毎日のアジェンダ})。
@orgcmdkkcc{S-@key{left},S-@key{right},org-timestamp-down-day,org-timestamp-up-day}カーソ
ル一の日付を1日変更します。このキーバインドはシフト選択およびそれに関
連するモードと衝突します(@pxref{衝突})。
@orgcmdkkcc{S-@key{up},S-@key{down},org-timestamp-up,org-timestamp-down-down}カーソルのあ
るタイムスタンプの項目を変更します。カーソルが年、月、日、時間あるいは
分の上に置かれている場合に使用できます。例えば、タイムスタンプが
@samp{15:30-16:30}のように時間間隔を含む場合、左の時刻を変更すると自動的に
右の時刻も変更され、間隔は一定の長さに保たれます。間隔の長さを変更する
には、右の時刻を変更して下さい。ただし、カーソルがタイムスタンプではな
く見出し上にある時には、同じキー操作により項目の優先度が変更されますの
で気をつけて下さい(@pxref{プロパティ})。このキーバインドはシフト選択および関
連するモードとも衝突します(@pxref{衝突})。@orgcmd{C-c C-y,org-evaluate-time-range}
@cindex 時間間隔の評価
開始日時と終了日時の差を計算することにより、時間間隔を計算します。前置
引数を指定することにより、計算結果をタイムスタンプの後に挿入できます（
テーブルの中では隣の列に挿入されます）。
@end table


@menu
* 日付／時間プロンプト::  日付と時刻入力のサポート
* カスタムタイムフォーマット::  日付を異なる見た目にする
@end menu

@node 日付／時間プロンプト, カスタムタイムフォーマット, タイムスタンプの作成, タイムスタンプの作成
@subsection 日付／時間プロンプト
@cindex 日付、ミニバッファでの読み込み
@cindex 時刻、ミニバッファでの読み込み

@vindex org-read-date-prefer-future
Org-modeが日付または時刻をプロンプトに表示するとき、標準では標準フォーマット
による形式が表示されるため、そのフォーマットで入力することが必須だと勘違いし
そうになります。ところが、実際には日付または時刻の情報を含む任意の文字列を入
力することができ、Org-modeはかなり利口に入力された時間情報を解釈します。例え
ば、@kbd{C-y}により電子メールの文面からコピーした文字列（複数行でも可）を挿入す
ることができます。Org-modeは文面の中の時間情報を見つけ出し、そこで指定されて
いない情報は@emph{デフォルトの日付時刻}を用います。デフォルトは通常は現在の日付お
よび時刻ですが、既にあるタイムスタンプを変更する場合や、時間間隔の2つ目の項
目を入力する場合には、バッファ内のタイムスタンプから情報が取得されます。情報
を解釈する際に、Org-modeは多くの場合では入力したい時間が未来の時間であると推
測します。例えば年月の情報を省略して、今日@i{より前}の時刻を指定しようとすると、
Org-modeは未来の時刻を意図しているものと推測します
@footnote{@code{org-read-date-prefer-future}の変数を参照。この変数@code{time}に該当する変数を変
更することにより、現在時刻より前の時刻を明日にシフトすることも可能です。}。
日付が自動的に未来にシフトされた場合、プロンプトには@samp{(=>F)}が表示されます。

例えば、今日が@b{2006年6月13日}であるとしたとき、以下の左ような入力は右のように
解釈されます。Org-modeにより推定された部分を@b{太字}で示します。

@example
3-2-5         @result{} 2003-02-05
2/5/3         @result{} 2003-02-05
14            @result{} @b{2006}-@b{06}-14
12            @result{} @b{2006}-@b{07}-12
2/5           @result{} @b{2007}-02-05
Fri           @result{} 直近の金曜日(基準日かそれより後)
sep 15        @result{} @b{2006}-09-15
feb 15        @result{} @b{2007}-02-15
sep 12 9      @result{} 2009-09-12
12:45         @result{} @b{2006}-@b{06}-@b{13} 12:45
22 sept 0:34  @result{} @b{2006}-09-22 0:34
w4            @result{} 現在の年（@b{2006}年）のISO週番号
2012 w4 fri   @result{} 2012年のISO4週目の火曜日の日付
2012-w04-5    @result{} 上と同様
@end example

さらに、相対的な日付を入力するための方法として、入力の@emph{最初に}プラスまたはマ
イナス記号、数値および文字([dwmy])により日、週、月あるいは年の変化を指定する
方法があります。単一のプラス/マイナスを入力すると、常に今日に対する相対的な
日付が指定されます。2つのプラスまたはマイナスが入力されると、標準の日付に対
する相対値となります。一文字の代わりに時間に関する省略文字列を指定すると、N
番目の該当する日が指定されます。以下に例を示します。@:

@example
+0            @result{} 今日
.             @result{} 今日
+4d           @result{} 今日から4日後
+4            @result{} 上と同様
+2w           @result{} 今日から2週間後
++5           @result{} 標準日時から5日後
+2tue         @result{} 今日から数えて2回目の火曜日
@end example

@vindex parse-time-months
@vindex parse-time-weekdays
この機能では、英語の月および曜日の省略記法に対応しています。省略しない記法や
他の言語の記法を使用したい場合には、変数@code{parse-time-months}および
@code{parse-time-weekdays}を変更して下さい。

時間間隔は、開始時刻と終了時刻を入力するか、開始時刻とその継続時間(HH:MMの形
式)を入力することにより指定できます。前者の場合は分離記号として`-'あるいは
`-@{@}-'を使用し、後者の場合は分離記号として'+'を使用して下さい。例えば以下
の通りです。@:

@example
11am-1:15pm    @result{} 11:00-13:15
11am--1:15pm   @result{} 上と同様
11am+2:15      @result{} 上と同様
@end example

@cindex カレンダー、日付選択のため
@vindex org-popup-calendar-for-date-prompt
ミニバッファのプロンプトと並行して、カレンダーがポップアップします@footnote{カレンダ
ーの表示が不要の場合、変数@code{org-popup-calendar-for-date-prompt}を変更して下さ
い。}。カレンダー内の日付をクリックするか、@key{RET}を入力することにより日付のプ
ロンプトを抜けると、カレンダーで選択した日付とプロンプトで入力された情報が組
み合わされます。カレンダーはミニバッファから自由に操作することがきます。

@kindex <
@kindex >
@kindex M-v
@kindex C-v
@kindex mouse-1
@kindex S-@key{right}
@kindex S-@key{left}
@kindex S-@key{down}
@kindex S-@key{up}
@kindex M-S-@key{right}
@kindex M-S-@key{left}
@kindex @key{RET}
@example
@key{RET}           @r{カレンダーのカーソル地点の日付を選択する。}
mouse-1        @r{クリックにより日付を選択する。}
S-@key{right}/@key{left}     @r{1日分進める/戻る}
S-@key{down}/@key{up}     @r{1週間分進める/戻る}
M-S-@key{right}/@key{left}   @r{1ヶ月分進める/戻る}
> / <          @r{カレンダーを1ヶ月前/後ろにスクロールする}
M-v / C-v      @r{カレンダーを3ヶ月前/後ろにスクロールする}
@end example

@vindex org-read-date-display-live
文章の説明では、日付時刻プロンプトの動作は複雑に思えるかもしれませんが、徐々
に慣れてくると、これ以外の方法で日付および時刻を入力することのほうが面倒に感
じることでしょう。動作の仕組みに対する理解を助けるため、入力された情報に対す
るその時点での解釈がミニバッファに表示されます。@footnote{もしミニバッファの表示が目
障りな場合は、@code{org-read-date-display-live}で表示しないよう設定することができ
ます。}。

@node カスタムタイムフォーマット, , 日付／時間プロンプト, タイムスタンプの作成
@subsection カスタムタイムフォーマット
@cindex カスタム日付時間フォーマット
@cindex 時間フォーマット、カスタム
@cindex 日付フォーマット、カスタム

@vindex org-display-custom-times
@vindex org-time-stamp-custom-formats
日付や時間を表現するため、Org-modeはISO8601で定義されているような標準的なISO
の記法を使用しています。もしこの記法に不慣れで、別の日付や時間の記法のほうが
好みである場合は、変数@code{org-display-custom-times}および
@code{org-time-stamp-custom-formats}をカスタマイズすることができます。

@table @kbd
@orgcmd{C-c C-x C-t,org-toggle-time-stamp-overlays}カスタムフォーマットの日付
および時間の表示をトグルします。
@end table

@noindent
Org-modeは文字列のスキャンニングのためにデフォルトのフォーマットを必要とする
ため、カスタムフォーマットの日付および時刻は標準フォーマットを@emph{置き換えませ
ん}。その代わりに、テキストのプロパティを用いて標準フォーマットに@emph{上書きされ
ます}。これが原因で以下のような動作が生じます。
@itemize @bullet
@item
タイムスタンプの上にカーソルを置くことはできなくなり、その前後にしかカ
ーソルが移動しなくなります。
@item
@kbd{S-@key{up}/@key{down}}のキー操作は、タイムスタンプの各要素を変更するために使
用できなくなります。カーソルがスタンプの前にある場合、@kbd{S-@key{up}/@key{down}}
によりスタンプを1日だけ変更します。これは@kbd{S-@key{left}/@key{right}}と同様です
。スタンプの後ろにある場合、時間が1ヶ月ずつ変更されます。
@item
タイムスタンプが時間間隔や繰り返し時刻を含む場合、これらは上書きされず
に元の形式のままバッファに表示されます。
@item
タイムスタンプを一文字ずつ消去した場合、(隠れた)ISO標準フォーマット文
字列の@emph{全て}を削除した場合のみカスタムフォーマットのタイムスタンプが消
去されます。
@item
もし、カスタムフォーマットのタイムスタンプが標準フォーマットより長く、
テーブル内で用いられている場合、テーブルの整形が崩れます。標準フォーマ
ットより短い場合には、期待通りに動作します。
@end itemize


@node デッドラインとスケジュール, 作業に費やした時間の計測, タイムスタンプの作成, 日付や時間
@section デッドラインとスケジュール

プランニングを補助するため、タイムスタンプの前に所定のキーワードを置くことが
できます。

@table @code
@item DEADLINE
@cindex DEADLINEキーワード

意味:タスク(多くの場合はTODOアイテムですが、それに限りません)はタイム
スタンプで示された日のうちに終了するものと見なされます。

@vindex org-deadline-warning-days
デッドラインが付けられた場合は、そのタスクはアジェンダの中に記載されま
す。それに加えて、@emph{今日}のアジェンダはデッドラインが近づいたり、それを
超過したりした場合に警告を発します。警告は期限の
@code{org-deadline-warning-days}だけ前から表示され、エントリがDONEとされる
までは消えません。以下に例を示します。

@example
*** TODO ガイド誌の地球についての記事を書く。
    担当編集者は[[bbdb:Ford Prefect]]
    DEADLINE: <2004-02-29 Sun>
@end example

以下の構文を用いることにより、個別のデッドラインについて異なる警告のリ
ードタイムを指定することができます。以下は5日間の警告期間を指定する場
合の例です@code{DEADLINE: <2004-02-29 Sun -5d>}。

@item SCHEDULED
@cindex SCHEDULEDキーワード

意味:指定された日に、そのタスクに取りかかる予定であることを示します。

@vindex org-agenda-skip-scheduled-if-done
見出しは指定された日付の下に記載されます@footnote{項目がDONEとマークされた場合
でも、指定日の項目に表示され続けます。この設定が好みでなければ、変数
@code{org-agenda-skip-scheduled-if-done}を指定して下さい}。それに加えて、ス
ケジューリングされた日付を超過した場合には@emph{今日}のリストにエントリが
DONEとなるまでリマインダが表示され続けます。すなわち、タスクは完了する
まで自動的に後回しにされます。

@example
*** TODO トリリアンに大晦日のデートについて電話する。
    SCHEDULED: <2004-12-25 Sat>
@end example

@noindent
@b{重要:}Org-modeで項目をスケジューリングすることは、@i{ミーティングをスケジュ
ーリングする}ことと同様であるという理解は正しく@i{ありません}。ミーティン
グをセットするのは単なるアポイントですが、このような場合はエントリーに
はプレーンなタイムスタンプを使用し、日付が来れば項目が表示されるように
設定するべきです。これはユーザーがしばしば誤解する点です。Org-modeでは
@i{スケジューリング}は何らかのアクションアイテムに取りかかる際に、日付を設
定することを意味します。
@end table

@c
@c
スケジューリングやデッドラインの項目には、繰り返しを含むタイムスタンプを使用
することが可能です。Org-modeは、タイムスタンプが繰り返し日付の@i{直近}の日付を表
すものと推測して事前あるいは事後の警告を発します。しかし、スケジューリングや
デッドラインにおいては@code{<%%(diary-float t 42)>}のような日記のS式項目は限定的
にしか使用できません。Org-modeはこれらS式項目の内部構造について十分理解して
いないため、事前および事後の警告を発することはできません。ただし、S式項目と
一致したそれぞれの日付に項目を表示することは行われます。

@menu
* デッドライン／スケジュールを挿入::  計画項目
* 繰り返されるタスク::  何度も現れる項目
@end menu

@node デッドライン／スケジュールを挿入, 繰り返されるタスク, デッドラインとスケジュール, デッドラインとスケジュール
@subsection デッドラインおよびスケジュールの挿入

以下のコマンドにより、項目にデッドラインまたはスケジュールを瞬時に挿入
@footnote{@samp{SCHEDULED}あるいは@samp{DEADLINE}の付いた日付が見出しのすぐ下の行に挿入されます
。見出しとこの行の間には文字を記入してはいけません。}することができます。

@table @kbd
@c
@c FIXME Any CLOSED timestamp will be removed.????????
@c
@c
@orgcmd{C-c C-d,org-deadline}タイムスタンプと@samp{DEADLINE}キーワードを挿入します
。挿入は見出しの直下の行に対して行われます。前置引数を伴って呼ばれた場
合は、エントリーから既に存在するデッドラインが消去されます。変数
@code{org-log-redeadline}@footnote{対応する@code{#+STARTUP}キーワード@code{logredeadline}、
@code{lognoteredeadline}、および@code{nologredeadline}}に対応して、既に存在する
デッドラインを変更する際にノートをとることができます。
@orgcmd{C-c C-s,org-schedule}タイムスタンプと@samp{SCHEDULED}キーワードを挿入しま
す。挿入は見出しの直下の行に対して行われます。CLOSEDのタイムスタンプは
全て消去されます。前置引数を伴って呼ばれた場合は、エントリーからスケジ
ューリングの日付が消去されます。変数@code{org-log-reschedule}@footnote{対応する
@code{#+STARTUP}キーワード@code{logredeadline}、@code{lognoteredeadline}、および
@code{nologredeadline}}に対応して、既に存在するスケジューリングを変更する際
にノートをとることができます。
@orgcmd{C-c C-x C-k,org-mark-entry-for-agenda-action}
@kindex k a
@kindex k s
@c
現在の項目をアジェンダのアクションのためにマークします。このように項目
をマークした後で、アジェンダまたはカレンダーを開いて適切な日を探すこと
ができます。選択した日付の上にカーソルを置いて@kbd{k s}あるいは@kbd{k d}を入力
することにより、マークされた項目にスケジュールを設定できます。
@orgcmd{C-c / d,org-check-deadlines}
@cindex 抽出されたツリー、デッドラインのため
@vindex org-deadline-warning-days
@c
@c
全てのデッドラインのうち、既に過ぎているものと
@code{org-deadline-warning-days}以内に期限となるものを抽出したツリーを作成
します。前置引数@kbd{C-u}により、ファイル内の全てのデッドラインを表示しま
す。前置引数で数値を指定すると、指定した分だけ先のデッドラインを表示し
ます。例えば、@kbd{C-1 C-c / d}とすると明日期限となる全てのデッドラインを
表示します。@orgcmd{C-c / b,org-check-before-date}指定された日より前のデッド
ラインを抽出したツリーを作成します。@orgcmd{C-c / a,org-check-after-date}指定
された日より後のデッドラインを抽出したツリーを作成します。
@end table

@node 繰り返されるタスク, , デッドライン／スケジュールを挿入, デッドラインとスケジュール
@subsection 繰り返されるタスク
@cindex タスク、繰り返し
@cindex 繰り返しタスク

タスクの中には、何度も繰り返し行うものがあります。Org-modeでは、そのようなタ
スクの管理を助けるため、通常あるいはDEADLINE、SCHEDULEDのタイムスタンプに対
してリピーターと呼ばれる機能を提供しています。以下の例を参照して下さい。
@example
** TODO 家賃の支払い
   DEADLINE: <2005-10-01 Sat +1m>
@end example
@noindent
この中で@code{+1m}がリピーターと呼ばれるもので、そのタスクが<2005-10-01>のデッド
ラインを持つと同時に、その日から一週間ごとに繰り返すことを意味します。デッド
ラインエントリーに対してリピーターと警告期間の両方を指定する必要がある場合に
は、@code{DEADLINE: <2005-10-01 Sat +1m -3d>}のようにリピーターを先に書き、警告期
間を後に書きます。

@vindex org-todo-repeat-to-state
デッドラインおよびスケジューリングされた項目は期限を過ぎた場合にはアジェンダ
上にエントリーが作成されるため、項目が終了した場合にはそのようなエントリは実
施済みとマークできることが必要です。DEADLINEあるいはSCHEDULEDのTODOエントリ
ーをDONEとマークした時には、アジェンダ上でのエントリーは作成されなくなります
。一方で、問題となるのは繰り返し項目の@emph{次の}日時も同時にアクティブでなくなっ
てしまうことです。Org-modeでは、このような状況に対して以下のように対処します
。繰り返しのエントリーをDONEに変更しようとした場合(@kbd{C-c C-t}などにより)、繰
り返しタイムスタンプの基準時刻が一つ分シフトされ、すぐにエントリーの状態が
TODOに戻されます@footnote{実際には、変更される状態は@code{REPEAT_TO_STATE}プロパティ或いは
変数@code{org-todo-repeat-to-state}によって決められます。これらが指定されていない
場合は、デフォルトとしてTODO状態に戻ります。}。上の例では、DONEの状態にする
ことにより日付が以下のように変更されます。

@example
** TODO 家賃の支払い
   DEADLINE: <2005-11-01 Tue +1m>
@end example

@vindex org-log-repeat
デッドラインの下にタイムスタンプが追加され@footnote{この部分の動作は、オプション
@code{org-log-repeat}、あるいは@code{#+STARTUP}オプションの@code{logrepeat}、
@code{lognoterepeat}、@code{nologrepeat}により変更することができます。@code{lognoterepeat}
を指定した場合には、メモを入力するように促されます。}、これにより前の時刻の
デッドラインについて実際に行動したことが記録されます。

日付がシフトされた結果として、このエントリーはアジェンダ上の過去の日付からは
見えなくなりますが、将来の日付はアジェンダ上で確認することができます。

@samp{+1m}の繰り返し指定により、日付は常に1ヶ月きっちりシフトされます。そのため、
例えば家賃を3ヶ月支払っていない場合には、一度このエントリーをDONEにしたとし
ても、相変わらず期限を過ぎたデッドラインと判断されます。タスクの性質によって
、この方法が常に適切な処理方法とは限りません。例えば、父親と連絡をとるのを3
週間忘れてしまった場合、それを埋め合わせるために一日に3回電話をすることはな
いでしょう。さらに、バッテリーの充電のように、最後に行ってから一定時間@i{経過後}
に常に繰り返す必要がある場合もあります。このようなタスクについてはOrg-modeは
専用の反復演算子@code{++}および@code{.+}を用意しています。例えば以下の通りです。

@example
** TODO 父に電話
   DEADLINE: <2008-02-10 Sun ++1w>
   この項目をDONEとすると、日付が一週間シフトされ、同時にタスクが
   行われるまでは将来の全ての日曜日に対して項目がシフトされます。
   土曜日に電話をしたとしても、次の日曜日にシフトされます。
** TODO 火災報知器の電池をチェックする
   DEADLINE: <2005-11-01 Tue .+1m>
   この項目をDONEとすると、確認した日のちょうど1ヶ月後にシフトされます。
@end example

同じタスクに対して、スケジューリングとデッドラインの情報を両方付けることがで
きます。この場合には、両方の繰り返し間隔は同じになりますので、注意して下さい
。

繰り返し演算子を使わない代替的な方法の一つとして、タスクサブツリーのコピーを
いくつか作成し、それぞれのコピーに対してシフトされた時刻を指定する方法があり
ます。そのために@kbd{C-c C-x c}コマンドがあります。この機能は
@ref{見出し位置と階層の変更}で解説されています。


@node 作業に費やした時間の計測, 工数の見積もり, デッドラインとスケジュール, 日付や時間
@section 作業に費やした時間の計測
@cindex 時間を計測する
@cindex 時間の計測

Org-modeでは、プロジェクトの中で特定のタスクを実行するのにかかった時間を計測
することができます。ある項目について取りかかる時に、計測を開始します。そのタ
スクを中断するときやタスクが終了した時に計測が終了し、対応する時間間隔が記録
されます。同時に、あるプロジェクトの全てのサブツリーでかかった時間の合計が計
算されます。さらに、最近に時間が計測されたタスクが記憶されているため、その時
点で取りかかっている複数のタスク間を素早く移動することができます。

Emacsセッションでの経過時間の履歴を保存するためには、以下のコマンドを使いま
す。
@lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
@end lisp
Emacsの再開後に新しいタスクの計測を始めると、不完全な時計@footnote{Emacsの外でタスク
に取りかかっていたという想定で時計を再開する場合は、
@code{(setq org-clock-persist t)}を使用して下さい。}が表示され(@pxref{空き時間の解決})
、それについて何をするかを入力するように促されます。

@menu
* 計測コマンド::       時計の開始と終了
* クロックテーブル::  詳細な報告
* 空き時間の解決::    空いた時間を解決する
@end menu

@node 計測コマンド, クロックテーブル, 作業に費やした時間の計測, 作業に費やした時間の計測
@subsection 計測コマンド

@table @kbd
@orgcmd{C-c C-x C-i,org-clock-in}
@vindex org-clock-into-drawer
現在の項目に対して、時間の計測を開始します（クロックイン）。これにより
CLOCKキーワードとともにタイムスタンプが挿入されます。最初の計測でない
場合には、複数のCLOCK行が表示され、@code{:LOGBOOK:}という引き出しに格納され
ます(変数@code{org-clock-into-drawer}についても参照のこと)。前置引数@kbd{C-u}と
共に呼ばれた場合は、最近時間が計測されたタスクのリストからタスクを選択
します。2個の前置引数@kbd{C-u C-u}が入力された場合は、現在位置のタスクの計
測を開始し、そのタスクをデフォルトに指定します。デフォルトのタスクは、
時間計測の選択をする場合に常にリストの中に表示され、文字@kbd{d}が付けられ
ます。@*
@cindex プロパティ:CLOCK_MODELINE_TOTAL
@cindex プロパティ:LAST_REPEAT
@vindex org-clock-modeline-total
@c
時間を計測している間は、現在の計測時間とタスクの名前がモード行に表示さ
れます。表示される計測時間はこのタスクとその子タスクについての全ての時
間です。タスクが工数の見積もり(@pxref{工数の見積もり})を含む場合には、モード
行は見積もりに対する現在の経過時間を表示します@footnote{「その場で」工数の見積
もりを追加するには、その機能を持つ関数を変数
@code{org-clock-in-prepare-hook}にフックして下さい}。タスクが繰り返しを含む
場合には、そのタスクの最近のリセットからの経過時間@footnote{プロパティ
@code{LAST_REPEAT}により記録}のみが計測されます。表示される時間について変更
したい場合には、プロパティ@code{CLOCK_MODELINE_TOTAL}を変更します。この中に
は現在計測中の時刻のみ表示する@code{current}、今日計測された全ての時間を表
示する@code{today}(変数@code{org-extend-today-until}についても参照)、全ての時間
を表示する@code{all}、デフォルトの設定である@code{auto}などがあります@footnote{変数
@code{org-clock-modeline-total}についても参照}。@*モード行を@kbd{mouse-1}でクリックすることにより、メニューと時間計測のオプシ
ョンがポップアップします。@orgcmd{C-c C-x C-o,org-clock-out}
@vindex org-log-note-clock-out
時間の計測を終了します（クロックアウト）。これにより、時間計測が開始さ
れたのと同じ場所にもう一つのタイムスタンプが挿入されます。同時に、計測
された時間間隔が開始時刻と終了時刻の後に@samp{=> HH:MM}の形式で挿入されます
。クロックアウトのタイムスタンプ作成時にノートを追加するには、変数
@code{org-log-note-clock-out}を参照して下さい@footnote{これに対応するバッファ内の設
定は@code{#+STARTUP: lognoteclock-out}です。}。
@orgcmd{C-c C-x C-e,org-clock-modify-effort-estimate}現在時間を計測しているタ
スクについて、工数見積もりをアップデートします。
@kindex C-c C-y
@kindex C-c C-c
@orgcmdkkc{C-c C-c,C-c C-y,org-evaluate-time-range}タイムスタンプの一つを変更し
た後で、時間間隔を更新します。これはタイムスタンプを手動で変更した場合
にのみ必要です。@kbd{S-@key{cursor}}キーにより変更した場合には、自動的に再計算
されます。@orgcmd{C-c C-t,org-todo}TODOの項目をDONEに変更することにより、その
項目で時間が計測されている場合には自動的に停止します。
@orgcmd{C-c C-x C-x,org-clock-cancel}現在の時間計測をキャンセルします。これは
間違って時間を計り始めてしまった場合や、結果的に意図したタスク以外を行
ってしまった場合に便利です。@orgcmd{C-c C-x C-j,org-clock-goto}現在クロックイ
ン中のタスクの見出しにジャンプします。前置引数@kbd{C-u}により、最近時間が
計測されたタスクから目的のタスクを選択します。
@orgcmd{C-c C-x C-d,org-clock-display}
@vindex org-remove-highlights-with-change
現在のバッファの各サブツリーからの時間のサマリーを作成します。これによ
りそれぞれの見出しの後ろに時間が上書きされ、その見出しの中で下位の見出
しも含めて記録された時間の合計が表示されます。表示の切り替えにより、ツ
リーの各項目を確認できますが、バッファを変更した場合や@kbd{C-c C-c}を入力
した場合は時間の上書きは消えてしまいます(変数
@code{org-remove-highlights-with-change})を参照)。
@end table

タイムライン(@pxref{タイムライン})およびアジェンダ(@pxref{毎週／毎日のアジェンダ})の中で
キー@kbd{l}を入力することにより、その日のうちに完了したタスクがどれかを表示する
ことができます。

@node クロックテーブル, 空き時間の解決, 計測コマンド, 作業に費やした時間の計測
@subsection クロックテーブル
@cindex クロックテーブル、動的なブロック
@cindex レポート、計測された時間

Org-modeは、時間計測の情報をもとにかなり詳細なレポートを作成することができま
す。このようなレポートは@emph{クロックテーブル}と呼ばれており、その名の通り
Org-modeのテーブルまたはその組み合わせにより作成されます。

@table @kbd
@orgcmd{C-c C-x C-r,org-clock-report}現在のファイルにOrg-modeテーブル形式の計
測時間レポートを含む動的ブロック(@pxref{ダイナミックブロック})を挿入します。
前置引数とともに呼ばれた場合は、現在の文書の最初のクロックテーブルに移
動し、それを更新します。@orgcmdkkc{C-c C-c,C-c C-x C-u,org-dblock-update}現在位
置の動的ブロックを更新します。カーソル位置は動的ブロックの@code{#+BEGIN}行
の中に位置している必要があります。@orgkey{C-u C-c C-x C-u}全ての動的ブロック
を更新します(@pxref{ダイナミックブロック})。この機能はバッファ内で複数のクロ
ックテーブルが存在する場合に有用です。
@orgcmdkxkc{S-@key{left},S-@key{right},org-clocktable-try-shift}現在の@code{:block}の時間間隔
を変更し、テーブルを更新します。このコマンドを使用するには、カーソルが
@code{#+BEGIN: clocktable}行にある必要があります。例えば@code{:block}が@code{today}の
場合、このコマンドにより@code{today-1}にシフトされます。
@end table


以下に、@kbd{C-c C-x C-r}コマンドによりバッファに挿入されるクロックテーブルのフ
レームの例を示します。

@cindex #+BEGIN, clocktable
@example
#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
#+END: clocktable
@end example
@noindent
@vindex org-clocktable-defaults
@samp{BEGIN}行には、レポートの対象範囲、構造およびフォーマットを定めるオプション
を指定します。これらのデフォルト値は変数@code{org-clocktable-defaults}により変更
することができます。

@noindent
まず、時間が計測されたエントリのうちどれが選択されるかを定めるオプションがあ
ります。
@example
:maxlevel    @r{テーブルに表示される最大の深さレベル。}
             @r{これより深いレベルの時間は上位レベルに積算されて表示される。}
:scope       @r{対象とするスコープ。以下のうちいずれかを指定する。}
             nil        @r{現在のバッファ、或いはナローされた領域}
             file       @r{現在のバッファ全体}
             subtree    @r{クロックテーブルのあるサブツリー内}
             tree@var{N}      @r{周囲のレベル@var{N}のツリー、例えば@code{tree3}}
             tree       @r{周囲のレベル1のツリー}
             agenda     @r{アジェンダファイル群の全体}
             ("file"..) @r{指定されたファイルをスキャンする}
             file-with-archives    @r{現在のファイルとそのアーカイブ}
             agenda-with-archives  @r{アーカイブを含む全てのアジェンダファイル}
:block       @r{対象とする時間範囲、この範囲は絶対時間または現在からの相対時間}
             @r{で表記され、以下のいずれかのフォーマットに従う。}
             2007-12-31    @r{2007年の大晦日}
             2007-12       @r{2007年12月}
             2007-W50      @r{2007年のISO週で50週目}
             2007-Q2       @r{2007年の第二四半期}
             2007          @r{2007年}
             today, yesterday, today-@var{N}          @r{相対的な日指定}
             thisweek, lastweek, thisweek-@var{N}     @r{相対的な週指定}
             thismonth, lastmonth, thismonth-@var{N}  @r{相対的な月指定}
             thisyear, lastyear, thisyear-@var{N}     @r{相対的な年指定}
             @r{@kbd{S-@key{left}/@key{right}}キーにより間隔をシフトすることができる。}
:tstart      @r{対象となる時間の始まりを示す文字列}
:tend        @r{対象となる時間の終わりを示す文字列}
:step        @r{テーブルをまとめる間隔。@code{week}または@code{day}を指定。}
             @r{この機能を使うには、@code{:block}、@code{:tstart}、@code{:tend}のいずれかを指定
する必要がある。}
:stepskip0   @r{時間間隔がゼロの項目を表示しない。}
:fileskip0   @r{時間間隔がゼロのファイルについて、テーブルに表示しない。}
:tags        @r{特定のタグがついたエントリのみ収集の対象とする。}
@end example

さらに、テーブルのフォーマットを指定するためのオプションがあります。これらの
オプションは関数@code{org-clocktable-write-default}により解釈されますが、パラメー
ター@code{:formatter}により解釈のためのユーザー独自の関数を指定することができます
。
@example
:emphasize   @r{値が@code{t}の場合、レベル1およびレベル2の項目を強調表示します。}
:lang        @r{項目名のセル(例えば"Task")で用いる言語@footnote{言語に関する項目は、変数
@code{org-clock-clocktable-language-setup}により設定することができます。}。}
:link        @r{テーブルの見出しの項目と元のファイルでの位置をリンクする。}
:narrow      @r{Org-modeのテーブルの見出し列の幅の上限を決める整数。}
             @r{@samp{50!}のように指定すると、エクスポート時にも見出しが短縮表示され
る。}
:indent      @r{各見出しフィールドをそのレベルに合わせてインデントする。}
:tcolumns    @r{時間を表示するために使われる列の数。この値が@code{:maxlevel}より小さ
い場合、}
             @r{それより下位のレベルは一つの列に合わせて表示される。}
:level       @r{レベル番号を示す列を含めるかどうか指定する。}
:compact     @r{コンパクトに表示する。
@code{:level nil :indent t :narrow 40! :tcolumns 1}}
             @r{の短縮表現で、明示的に@code{:narrow}で指定されなければ、全ての変数は
上書きされる。}
:timestamp   @r{エントリのタイムスタンプが存在する場合には、それを表示する。
SCHEDULED、}
             @r{DEADLINE、TIMESTAMP、TIMESTAMP_IAの順に探索される。}
:formula     @r{追加的な@code{#+TBLFM}の内容。通常の形式に追加されて評価される。}
             @r{特殊なケースとして、@samp{:formula %}を追加すると経過時間の割合行が追
加される。}
             @r{ここで形式をしていしない場合は、クロックテーブルの下に存在する形
式が}
             @r{アップデートされずに評価される。}
:formatter   @r{時刻データをフォーマットし、バッファに表示するための関数。}
@end example
現在のレベル1のツリーについて、当日分の時間サマリーを得る場合は以下のように
指定します。
@example
#+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
#+END: clocktable
@end example
@noindent
明示的に時間間隔を指定する場合には、以下のように記述します@footnote{全てのパラメータ
ーは単一行で指定する必要があるので注意して下さい。この例ではマニュアルの文字
幅の制約のために改行が入っています。}。
@example
#+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                    :tend "<2006-08-10 Thu 12:00>"
#+END: clocktable
@end example
現在のサブツリーでの経過時間のまとめを%表示するには、以下のように記述します
。
@example
#+BEGIN: clocktable :scope subtree :link t :formula %
#+END: clocktable
@end example
ここ1週間で計測された時間をコンパクトな幅で表示するには、以下のようにします
。
@example
#+BEGIN: clocktable :scope agenda :block lastweek :compact t
#+END: clocktable
@end example

@node 空き時間の解決, , クロックテーブル, 作業に費やした時間の計測
@subsection 空き時間の解決
@cindex 休止時間を解決する

@cindex 休止、解決、空き時間
ある項目について作業を開始したあとで、例えば電話を取る場合などで一時的にコン
ピュータの前を離れると、その時間について現在の経過時間から差し引いたり、他の
項目に加えたりして「解決」する必要が生じます。

@vindex org-clock-idle-time
変数@code{org-clock-idle-time}を適当な整数値(例えば10や15)に設定することにより、
設定時間を超える休止のあとで戻ってきた場合にEmacsはアラートを出し、その休止
時間をどのように処理するか尋ねます@footnote{Mac OS Xのコンピュータでは、Emacsの休止時
間だけでなくユーザーが実際に休止した時間を計測します。X11では、Org-modeのgit
ディストリビューションから入手できるユーティリティプログラム@file{x11idle.c}をイ
ンストールすることにより、同様に全体の休止時間を計測することができます。その
他のシステムでは、休止時間はEmacsが休止していた時間のみを表します。}。休止か
ら戻った時点で幾つか質問が表示され、実際にどの程度休止時間があったか（その時
点までの計測時間が随時表示されます）を入力すると同時に、休止の扱いについて以
下のような選択が可能です。

@table @kbd
@item k
休止時間として計測された時間の一部または全てをタスクの計測時間として保
持する場合には、@kbd{k}を押します。Org-modeは何分間保持するか尋ねます。
@key{RET}キーを押すことにより全ての時間が保持され、タスクの計測時間は変更
されません。数値を指定すると、指定した分数だけ時間が保持されます。
@item K
シフトキーと共に@kbd{K}を押した場合、入力された分数だけ時間を保持すると同
時にただちに現在のタスクの計測を中止します。全ての休止時間を保持する場
合、これは単にタスクの計測を中止したのと同じことになります。
@item s
休止時間を保持しない場合には、@kbd{s}を押すことにより計測時間から全ての休
止時間が差し引かれ、戻ってきた時点から再開されます。
@item S
休止時間を保持せず、休止開始時の時刻で時間の計測を止める場合には、シフ
トキーと共に@kbd{S}を押して下さい。シフトキーを使うと、いずれのオプション
でも時間の計測が中止されるということを覚えておいて下さい。
@item C
時間計測そのものをキャンセルする場合は、@kbd{C}を押して下さい。キャンセル
しない場合でも、時間が引かれた結果の残り時間が1分未満である場合には、
中身の無いエントリでログが見づらくなるのを防ぐため、時間計測はやはりキ
ャンセルされますので注意して下さい。
@end table

空き時間について、現在の計測時間から差し引いたあとで別の計測項目に追加したい
場合にはどうすれば良いでしょうか。その場合は、差し引いたあとに単純に次のタス
クの計測を開始して下さい。Org-modeは差し引かれた時間があることを記憶していて
、次の時間計測を始める際にその時間を足し込むかを尋ねます。

次のようなケースでも、時間解決機能が魔法のような働きをします。あなたがタスク
の時間計測をしながらご機嫌に作業をすすめていると、突然飼い猫がネズミを追いか
けて、それを見たハムスターが驚いてUPSの電源装置に衝突してしまったとしましょ
う!あなたは全てのバッファを失うことになりますが、オートセーブ機能のおかげで
Org-modeで行った最近の変更は保持され、途中であった時間計測の時間も保持されて
います。

Emacsを再開してタスクの計測を開始すると、Org-modeは最後のセッションで計測が
終了されていない半端の時間計測があることに気がつきます。そのようなタスクにつ
いては、計測の開始時刻を不明な時刻の始点として、その間の時間をどのように解決
するかについて尋ねます。その際の考え方や挙動は空き時間の処理方法と全く同じで
、単に空き時間ではなくリカバリの際に発生しているだけなのです。

Org-modeのアジェンダが半端時間を絶えずチェックしているファイルのリストは、
@kbd{M-x org-resolve-clocks}により確認することができます。

@node 工数の見積もり, 相対時間タイマー, 作業に費やした時間の計測, 日付や時間
@section 工数の見積もり
@cindex 工数の見積もり

@cindex プロパティ、工数
@vindex org-effort-property
詳細な作業計画を立てて仕事を行いたい場合や、仕事の工数の見積もりを作成する必
要がある場合には、エントリに工数見積もりを割り当てたいと思うかもしれません。
また、同時に時間の計測を行う場合には、あとで見積もった時間数と実際にかかった
時間を比較したいと思うかもしれません。それは見積もりの精度を上げる良い方法で
もあります。工数の見積もりは専用のプロパティである@samp{Effort}に保存されます
@footnote{使用されるプロパティは、変数@code{org-effort-property}で変更することができます}
。エントリに工数を追加するには、以下のようなコマンドを用います。

@table @kbd
@orgcmd{C-c C-x e,org-set-effort}現在のエントリについて工数の見積もりを行いま
す。前置引数に数値を指定することにより、N番目の数値に指定します(下記の
例を参照)。このコマンドはアジェンダからも@kbd{e}キーを押すことによりアクセ
スできます。@orgcmd{C-c C-x C-e,org-clock-modify-effort-estimate}現在時間が計
測されている項目の工数見積もりを変更します。
@end table

明らかなように、工数見積もりを行う最善の方法はカラムビュー(@pxref{カラムビュー})を
用いることです。個別の項目についての工数見積もりから始めて、@code{COLUMNS}フォー
マットによりこれらの値と実際の計測時間(時間の計測を行いたい場合)を同時に表示
します。例えば、あるバッファについて以下のように指定できます。

@example
#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00
#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort)@{:@} %CLOCKSUM
@end example

@noindent
@vindex org-global-properties
@vindex org-columns-default-format
さらに良い方法としては、変数@code{org-global-properties}あるいは
@code{org-columns-default-format}をカスタマイズすることにより、これらの数値をグロ
ーバルに指定できます。特にこの指定をアジェンダで使用したい場合には、グローバ
ルな指定を行うことが推奨されます。

個別の項目について見積もりを割り当てるには、カラムモードに移行し、
@kbd{S-@key{right}}および@kbd{S-@key{left}}を使うことにより値を変更します。入力された数値は
すぐに階層構造で足し合わされます。その隣の列には計測された時間が表示されるこ
とになります。

@vindex org-agenda-columns-add-appointments-to-effort-sum
日別あるいは週別のアジェンダでカラムビューに移行すると、工数の列は各日につい
ての工数見積もりを足し合わせて表示され@footnote{単準なリストを階層的に足し合わせる際
には落とし穴があります(@pxref{アジェンダのカラム表示})。}、これを用いてスケジュー
ルの空きを見つけることができます。その日の作業について全体像をつかみたい場合
には、オプション@code{org-agenda-columns-add-appointments-to-effort-sum}を指定す
ることができます。時間間隔が指定されているアポイントで、その日に発生するもの
についても負荷見積もりに加算して表示されます。

工数見積もりは、アジェンダ内で@kbd{/}を押すことによりアジェンダの2次的なフィルタ
リングに用いることができます(@pxref{アジェンダのコマンド})。このような見積もりを確
実に行えば、2、3回キーを押すことにより空いている時間間隔に合うように項目を絞
り込むことができます。

@node 相対時間タイマー, カウントダウンタイマー, 工数の見積もり, 日付や時間
@section 相対時間タイマーを使ったノート作成
@cindex 相対時間タイマー

例えば会議やビデオ閲覧時にノートをとる際など、開始時からの経過時間がわかると
便利な場合があります。Org-modeはそのような場合に使える相対時間タイマー機能を
持っており、時間を含むノートを簡単に作ることができます。

@table @kbd
@c for key sequences with a comma, command name macros fail :(
@orgcmd{C-c C-x .,org-timer}バッファに相対時間タイマーを挿入します。最初に使
う際にはタイマーが開始されます。前置引数と共に呼ばれた場合には、タイマ
ーがリスタートされます。@orgcmd{C-c C-x -,org-timer-item}現在の相対時刻での記
述項目を挿入します。前置引数と共に呼ばれた場合は、タイマーの時刻が0に
リセットされます。@orgcmd{M-@key{RET},org-insert-heading}タイマーリストが既に開始
されている場合は@kbd{M-@key{RET}}で新しいタイマー項目を追加することもできます
。
@kindex C-c C-x ,
@item C-c C-x ,
@c removed the sentence because it is redundant to the following item
タイマーを一時停止します。一時停止されている場合には再開します
 (@command{org-timer-pause-or-continue})。
@kindex C-u C-c C-x ,
@item C-u C-c C-x ,
タイマーを停止します。これを実行した後には古いタイマーを再開することは
できず、新しいタイマーの作成のみが可能です。このコマンドによりモード行
からもタイマーが削除されます。@orgcmd{C-c C-x 0,org-timer-start}バッファに何
も挿入せずにタイマーをリセットします。デフォルトではタイマーは0にリセ
ットされますが、前置引数@kbd{C-u}と共に呼ばれた場合は、指定された時間から
タイマーが始められます。ユーザーは開始時間を入力するよう促されます。同
じ位置に既にタイマー文字列がある場合には、その時間がデフォルトとして指
定されます。そのため、このコマンドは休憩時間のあとなどでノート取りを再
開する場合などに用いることができます。2つの前置引数@kbd{C-u C-u}と共に呼ば
れた場合は、アクティブなリージョンにある全てのタイマー文字列を一定の時
間だけ変化させます。これはタイマーを正しい時刻に開始できなかった場合、
タイマー文字列を一度に修正する場合に使用できます。
@end table

@node カウントダウンタイマー, , 相対時間タイマー, 日付や時間
@section カウントダウンタイマー
@cindex カウントダウンタイマー
@kindex C-c C-x ;
@kindex ;

Org-modeバッファから@code{org-timer-set-timer}を呼ぶことにより、カウントダウンタ
イマーが利用できます。アジェンダバッファの場合は@key{;}、その他は@key{C-c C-x ;}によ
り実行できます。

@code{org-timer-set-timer}により、ユーザーに時間間隔を入力するように促し、モード
行にカウントダウンタイマーを表示します。@code{org-timer-default-timer}によりデフ
ォルトのカウントダウン値を設定します。前置引数で数値を指定することで、デフォ
ルトの値が上書きされます。

@node キャプチャ／再配置／アーカイブ, アジェンダビュー, 日付や時間, Top
@chapter キャプチャ／再配置／アーカイブ
@cindex キャプチャ

管理システムにおける重要な点の一つとして、新しいアイディアやタスクを素早くキ
ャプチャし、それらを参考資料と連携する能力があることです。Org-modeでは@i{キャプ
チャ}と呼ばれるプロセスを用いて行います。また、タスクに関係するファイル
(@i{attachments})を特別なディレクトリに保存することがも可能です。一度システムへ
取り込むと、タスクとプロジェクトを移動させる必要があります。完了したプロジェ
クトツリーをアーカイブファイルへ移動することで、システムをコンパクトで速く保
つことが可能です。

@menu
* キャプチャ::          新しいものをキャプチャする
* 添付::                   タスクにファイルを追加する
* RSSフィード::          RSSフィードから取り込む
* プロトコル::          外部（e.g. @:
                               ブラウザ）からEmacsとOrg-modeにアクセスする
* ノートの再配置::    別な場所にツリーを移動する
* アーカイブ::          完了したプロジェクトの扱い方
@end menu

@node キャプチャ, 添付, キャプチャ／再配置／アーカイブ, キャプチャ／再配置／アーカイブ
@section キャプチャ
@cindex キャプチャ

Org-modeでは、新しいアイテムをキャプチャする方法はJohn
Wiegleyによる素晴らしいrememberパッケージから多くのアイディアを得ています。
バージョン6.36のOrg-modeまでは@file{remember.el}用の特別な設定を使っていました。
@file{org-remember.el}は従来の設定との逆互換性のため、まだOrg-modeの一部です。
org-rememberに関するドキュメントは@url{http://orgmode.org/org-remember.pdf}にあ
ります。

ここで述べる新しいキャプチャのための設定が好ましく、新しいユーザーはこれを使
用するべきです。あなたの@code{org-remember-templates}を変換する場合は以下のコマン
ドを実行します。
@example
@kbd{M-x org-capture-import-remember-templates @key{RET}}
@end example
@noindent
そして新しい変数を@kbd{M-x customize-variable org-capture-templates}でカスタマイ
ズし、結果を確認してから保存してください。これにより、新しい仕組みになれるま
ではリメンバーとキャプチャの両方を使うことができます。

キャプチャはワークフローにおいて小さい割り込みで素早くノートを保存することが
できます。キャプチャの基本的なプロセスはリメンバーととても良く似ていますが、
Org-modeはそれをテンプレートなどで強化しました。

@menu
* キャプチャの設定::  キャプチャされたノートが保存される場所
* キャプチャの使用::  キャプチャの実行と中止コマンド
* キャプチャテンプレート::  異なるタイプのテンプレートを定義する
@end menu

@node キャプチャの設定, キャプチャの使用, キャプチャ, キャプチャ
@subsection キャプチャの設定

以下のカスタマイズはノートを取るデフォルトのファイルと新しい素材をキャプチャ
するためのグローバルなキー@footnote{自分のキーを選択して下さい。@kbd{C-c c}はただの提案で
す。}

@vindex org-default-notes-file
@example
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
@end example

@node キャプチャの使用, キャプチャテンプレート, キャプチャの設定, キャプチャ
@subsection キャプチャの使用

@table @kbd
@orgcmd{C-c c,org-capture}@code{org-caputre}コマンドを呼びます。このキーバインドは
グローバルで、デフォルトではアクティブになっておらず、インストールする
必要があることに注意が必要です。もしテンプレートがあるならば
@cindex date tree
defined @pxref{キャプチャテンプレート}, これらのテンプレートの選択か、デフォ
ルトのテンプレートを使用した新しい Org
アウトラインノードが使用されます。

@orgcmd{C-c C-c,org-capture-finalize}キャプチャバッファに情報を入力し終わった
ら、@kbd{C-c C-c}はキャプチャプロセスの前に設定されたウィンドウへ戻します
。これによってこれ以上気を散らさずに作業を再開することができます。前置
引数と一緒に呼ばれた場合は、仕上げをしたあとキャプチャした項目へ移動します。

@orgcmd{C-c C-w,org-capture-refile}ノートを別の場所に差し替える
(@pxref{ノートの再配置})ことでキャプチャプロセスを仕上げます。これは通常の差
し替えコマンドが実行されることを認識してください。したがってこのコマン
ドを実行するときのカーソル位置が重要です。もし親や小を持つツリーを挿入
する場合、まずカーソルを親へ移動してください。このコマンドに渡された接
頭辞引数はすべて@code{org-refile}コマンドに渡されます。

@orgcmd{C-c C-k,org-capture-kill}キャプチャプロセスをアボートして前の状態へ戻
ります。

@end table

@code{org-capture}をアジェンダから@kbd{k c}キーの組合せを用いた特別な方法で呼ぶことも
できます。この方法では、選択されたキャプチャテンプレートに挿入されるタイムス
タンプは、現在の日付ではなくアジェンダ内のカーソルがある位置の日付がデフォル
トになります。

最後にキャプチャが保存された場所を探すには、@code{org-capture}をプレフィックスコ
マンドと一緒に使用します。

@table @kbd
@orgkey{C-u C-c c}
キャプチャテンプレートが対象としている場所に移動します。テンプレートの
選択は通常と同じように行います。@orgkey{C-u C-u C-c c}
バッファ内で最後に保存したキャプチャアイテムの場所に移動します。
@end table

@node キャプチャテンプレート, , キャプチャの使用, キャプチャ
@subsection キャプチャテンプレート
@cindex キャプチャテンプレート

テンプレートは異なる種類のキャプチャアイテムや、異なる場所へ使用することがで
きます。最も簡単にそのようなテンプレートを作る方法、カスタマイズインターフェ
ースを通じて行うことです。

@table @kbd
@orgkey{C-c c C} @code{org-capture-templates}変数のカスタマイズを行います。
@end table

テンプレート定義の正式な説明の前に、例を挙げます。一般的なTODOエントリーを作
成する場合を考えます。また、これらのエントリーは@file{~/org/gtd.org}の中にある見
出し@samp{Tasks}の下に作成され、@file{journal.org}内のデートツリーはジャーナルエントリ
ーがキャプチャされます。このような場合の設定は以下のようになります。

@example
(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
        "* TODO %?
  %i
  %a")
   ("j" "Journal" entry (file+datetree "~/org/journal.org")
        "* %?
Entered on %U
  %i
  %a")))
@end example

@noindent
ここで@kbd{C-c c t}を押すと、Org-modeはこのようなテンプレートを用意します。
@example
* TODO
  [[file:@var{lint to where you initiated capture}]]
@end example

@noindent
テンプレートが展開される際、@code{%a}はキャプチャコマンドを呼んだ場所へのリンクに
変換されます。これは例えばメールからタスクを登録する時にとても役立ちます。タ
スクの定義を埋め、@code{C-c C-c}を押すとOrg-modeはキャプチャ動作を始めた場所へま
た連れ戻してくれます。

特定のテンプレートを対話的な選択なしに用いてキャプチャする特別なキーを定義す
るには、以下のようにキーバインドを作成できます。

@lisp
(define-key global-map "\C-cx\n"
  (lambda () (interactive) (org-capture nil "x")))
@end lisp

@menu
* テンプレートの要素::  完全なテンプレート入力のために必要なこと
* テンプレートの拡張::  時刻と条件についての情報を書き込む
@end menu

@node テンプレートの要素, テンプレートの拡張, キャプチャテンプレート, キャプチャテンプレート
@subsubsection テンプレートの要素

それではテンプレートを定義するための要素について述べています。
@code{org-capture-templates}中にあるそれぞれのエントリーは以下の項目から構成され
るリストです。

@table @code
@item keys
キーは文字列で示されるテンプレートを文字だけで選択します。例えば、
@code{"a"}はaキーだけで選択するテンプレートであり、@code{"bt"}は２つのキーで選択
します。幾つかのキーを使う場合、同じ接頭辞キーを持つキーはリストの中で
連続している必要があり、以下に例をあげるような、接頭辞キーを表す２つの
要素を持つエントリーをその前に置きます。
@example
         ("b" "買い物リストのためのテンプレート")
@end example
@noindent
もし@kbd{C}キーにテンプレートを定義していなければ、このキーでこの複雑な変
数のカスタマイズバッファを開きます。

@item description
選択時に表示されるテンプレートの短い説明文。

@item type
エントリーの種類をシンボルで表します。正しい値は以下の通りです。
@table @code
@item entry
見出しのついたOrg-modeのノード。対象エントリーの子かトップレベルのエン
トリーとして書き込まれます。対象のファイルはOrg-modeのファイルでなけれ
ばならなりません。
@item item
対象の場所の最初にある単純なリストへ書き込まれる単純なリストの項目。対
象のファイルはOrg-modeのファイルでなければならなりません。
@item checkitem
チェックボックス項目。これは単純なリストとデフォルトのテンプレートが異
なるだけです。
@item table-line
対象の場所にある最初のテーブルへ追加する新しい行。行が追加される場所は
@code{:prepend}と@code{:table-line-pos}プロパティに依存します。(下記参照)
@item plain
そのまま挿入される文章
@end table

@item target
@vindex org-default-notes-file
キャプチャされた項目が挿入されるべき場所の指定。Org-modeファイルでは、通常タ
ーゲットはノードで定義されます。エントリーはこのノードの子になります。他のタ
イプはこのノードの本文にあるテーブルやリストに追加されます。多くのターゲット
の指定にはファイル名が含まれます。もしファイル名が空の文字列だった場合、
@code{org-default-notes-file}がデフォルトになります。ファイルは変数や関数、Emacs
Lispのフォームでも与えられます。

正しい値は以下の通りです。
@table @code
@item (file "path/to/file")
文章はこのファイルの先頭か最後に挿入されます。

@item (id "現存するorgエントリーのid")
このエントリーの子として、もしくはこのエントリの本文として記入します。

@item (file+headline "path/to/file" "node headline")
対象の見出しがファイル中で一つしか無い場合の速い設定。

@item (file+olp "path/to/file" "Leval 1 heading" "Leval 2" ...)
唯一でない見出しの場合、フルパスの方が安全です。

@item (file+regexp  "path/to/file" "regexp to find location")
カーソルの位置に正規表現を使った場合。

@item (file+datatree "path/to/file")
今日の日付で日付ツリーの見出しを作ります。

@item (file+datetree+prompt "path/to/file")
promptで与えられた日付で日付ツリーの見出しを作ります。

@item (file+function "path/to/file" function-finding-location)
ファイルの中で正しい場所を見つける関数

@item (clock)
ファイル中で現在時間を測っているエントリー。

@item (function function-finding-location)
一般的な方法、ファイルと場所を見つける自分の関数を書く方法。
@end table

@item template
キャプチャする項目を作るテンプレート。もし空にした場合、デフォルトのテンプレ
ートを使用します。もしエスケープコードを付加した文字列の場合、キャプチャされ
た時の時間と状況に依存して置換されます。エスケープされた文字列はテンプレート
ファイルからロードされ、特別な構文@code{(file "path/to/template")}を使用します。
詳細をいかに示します。

@item properties
エントリーの残りは追加オプションのプロパティリストです。理解できるプロパティ
は
@table @code
@item :prepend
通常新しくキャプチャされた情報は対象の場所(最後の子、最後のテーブル、
最後のリスト項目...)に追加されます。このプロパティを設定することで変更
します。

@item :immediate-finish
セットされると情報の編集を行わなず、追加だけを直ちに行います。テンプレ
ートが自動的に追加できる情報だけを必要とする場合だけ意味を成します。

@item :empty-lines
新しい項目の前後に挿入する行の数をこれに設定します。デフォルトは０で、
通常の他の値は１です。

@item :clock-in
この項目の時計を開始します。

@item :clock-keep
キャプチャしたエントリーを追加しても時計を動かし続けます。

@item :clock-resume
もし時計を割り込むキャプチャを始めた場合、キャプチャ終了時に時計を再開
します。@code{:clock-keep}は@code{:clock-resume}より優先されることに注意が必要で
す。もしどちらの設定も@code{t}に設定された場合、現在の時計が動き、一つ前の
時計は再開されません。

@item :unnarrowed
対象とするバッファの幅を狭めず、単純にフルバッファで表示します。デフォ
ルトでは幅を狭くし、新しい内容だけが表示されます。

@item :kill-buffer
対象のファイルがキャプチャ時にまだ読み込まれていなかった場合、キャプチ
ャ終了時に再びバッファを閉じます。
@end table
@end table

@node テンプレートの拡張, , テンプレートの要素, キャプチャテンプレート
@subsubsection テンプレートの拡張

テンプレート自身の中では、特別な@kbd{%}-エスケープ@footnote{もしこれらの文字通りの並びが
必要な場合は、@kbd{%}をバックスラッシュでエスケープすること}によって動的に内容を
挿入できます。

@comment SJE: should these sentences terminate in period?
@smallexample
%^@{@var{prompt}@} @r{ユーザーに文字列を入力させこの順序と置換します。}
            @r{デフォルトの値と補完テーブルは以下のように指定します。}
            @r{%^@{prompt|デフォルト値|補完2|補完3...@}}
            @r{矢印キーで入力の履歴をたどることができます。}
%a          @r{注釈、通常は@code{org-store-link}で作成されたリンク}
%A          @r{@code{%a}と同様、しかし説明部分への入力を行います。}
%i          @r{初期の内容、キャプチャが呼ばれた時にアクティブに}
            @r{なっているリージョン全体。}
            @r{全体のテキストは@code{%i}自身と同じ様にインデントされます。}
%t          @r{タイムスタンプ、日付のみ}
%T          @r{時間と日付からなるタイムスタンプ}
%u, %U      @r{上記と同じだが、不活性なタイムスタンプ}
%^t         @r{@code{%t}と同じだが、日付の入力を行います。@code{%^T}、@code{%^u}、@code{%^U}と似てい
ます。}
            @r{プロンプトを@code{%^@{Birthday@}t}の様に定義できます。}
%n          @r{ユーザーネーム(@code{user-full-name}から取ってきます)}
%c          @r{現在のキルリングの先頭}
%x          @r{Xクリップボードの内容}
%^C         @r{キルかクリップどちらを使うか対話的に選択します。}
%^L         @r{@code{%^C}と同様だが、リンクとして挿入します。}
%k          @r{現在計時しているタスクのタイトル。}
%K          @r{現在計時しているタスクへのリンク。}
%f          @r{org-captureが呼ばれた時に現在のバッファで表示していたファイル。}
%F          @r{@code{%f}と同様だが、フルパスを含んでいます。}
%^g         @r{タグの入力を対象ファイル中のタグから補完して入力します。}
%^G         @r{タグの入力をアジェンダファイルすべてから補完して入力します。}
%^@{@var{prop}@}p   @r{ユーザーに@var{prop}プロパティの値の入力を行わせます。}
%:keyword   @r{あるリンクのタイプを指示する特定の情報}
%[@var{file}]     @r{@var{file}で与えられるファイルへ内容を挿入します。}
%(@var{sexp})     @r{@var{sexp}で与えられるElispを評価してその結果と入れ替えます。}
@end smallexample

@noindent
リンクのタイプを指定するため、以下のキーワードが定義@footnote{もしあなたが自分のリン
クタイプを定義しているならば(@pxref{ハイパーリンクのタイプの追加})、
@code{org-store-link-props}に保存されているいずれのプロパティもキャプチャテンプレ
ート中に同じ方法でアクセス可能です。}されています。

@vindex org-from-is-user-regexp
@smallexample
リンクタイプ       |  使用可能なキーワード
-------------------+----------------------------------------------
bbdb                    |  %:name %:company
irc                     |  %:server %:port %:nick
vm, wl, mh, mew, rmail  |  %:type %:subject %:message-id
                        |  %:from %:fromname %:fromaddress
                        |  %:to   %:toname   %:toaddress
                        |  %:date @r{(ヘッダーメッセージ中にあるメッセージの日付
)}
                        |  %:date-timestamp @r{(アクティブなタイムスタンプとして
の日付)}
                        |  %:date-timestamp-inactive @r{(アクティブでないタイム
スタンプとしての日付)}
                        |  %:fromto @r{(\"to NAME\"か\"from NAME\"のどちらか
)@footnote{これはユーザーではなく常に他人になる。@code{org-from-is-user-regexp}を参照する
こと。}}
gnus                    |  %:group, @r{メッセージとそれに加えてすべてのemailフィ
ールドのため。}
w3, w3m                 |  %:url
info                    |  %:file %:node
calendar                |  %:date
@end smallexample

@noindent
テンプレート展開後のカーソル位置のために以下を用います。

@smallexample
%?          @r{テンプレートを完了したあと、カーソル位置をここに移動します。}
@end smallexample


@node 添付, RSSフィード, キャプチャ, キャプチャ／再配置／アーカイブ
@section 添付
@cindex attachments

@vindex org-attach-directory
参照すべきものをアウトラインノートやタスクと連携させることは大抵役立ちます。
小さなプレーンテキストの塊は単純にプロジェクトのサブツリーとして保存可能です
。ハイパーリンク(@pxref{ハイパーリンク})はあなたのコンピュータやクラウドなどにある
ファイル、例えばプロジェクトに関連するemailやソースコードファイルとの連携を
確立します。その他の方法として、@i{attachments}があります。これはアウトラインノ
ードの属するディレクトリにあるファイルです。これらのディレクトリは@file{data}ディ
レクトリの中に位置し、あなたのOrgファイルが保存されているディレクトリと同じ
ディレクトリの中にある@footnote{もしエントリーやOrgファイルを他のディレクトリに移動し
た場合、@code{org-attach-directory}が絶対パスを含むように設定する必要があります。
}。もしこのディレクトリを@code{git init}で初期化した場合、Org-modeは変更点を見つ
けた時に自動的にそれらをコミットします。添付システムはJohn
Wiegleyの貢献によってOrg-modeへ追加されました。

もしそれがより良い方法に思える場合は、エントリーへディレクトリを添付すること
も自身の選択で可能です。子エントリーは親から添付ディレクトリを受け継ぐため、
サブツリー全体が同じ添付ディレクトリを使うことになります。

@noindent
以下のコマンドはプロパティを操作する助けとなります。

@table @kbd

@orgcmd{C-c C-a,org-attach}
添付システムに関連するコマンドのコマンド選択画面。これらのキーのあとに
、コマンドのリストが表示され、コマンドを選択するために更にキーを押す必
要があります。

@table @kbd
@orgcmdtkc{a,C-c C-a a,org-attach-attach}
@vindex org-attach-method
ファイルを選択してそれをタスクの添付ディレクトリへ移動します。ファイル
は@code{org-attach-method}によって複製、移動、リンクされます。ハードリンク
はすべてのシステムでサポートされていないことに注意が必要です。

@kindex C-c C-a c
@kindex C-c C-a m
@kindex C-c C-a l
@item c/m/l
コピー/移動/リンクメソッドを使ってファイルを添付します。ハードリンクは
すべてのシステムでサポートされていないことに注意が必要です。

@orgcmdtkc{n,C-c C-a n,org-attach-new} Emacsのバッファとして新しい添付を作成しま
す。

@orgcmdtkc{z,C-c C-a z,org-attach-sync}
あなた自身で添付を追加した場合に、現在のタスクをその添付ディレクトリと
同期します。

@orgcmdtkc{o,C-c C-a o,org-attach-open}
@vindex org-file-apps
現在のタスクに関する添付を開きます。もし１つ以上ある場合は、まずファイ
ル名を入力させます。開き方は@code{org-file-apps}に従います。詳細は、ハイパ
ーリンクを辿るための情報(@pxref{リンクの扱い})を参照してください。

@orgcmdtkc{O,C-c C-a O,org-attach-open-in-emacs}
これも添付を開きますが、強制的にファイルをEmacsを用います。

@orgcmdtkc{f,C-c C-a f,org-attach-reveal} 現在のタスクの添付ディレクトリを開きま
す。

@orgcmdtkc{F,C-c C-a F,org-attach-reveal-in-emacs}
これもディレクトリを開きますが、強制的にEmacs内で@command{dired}を用います。

@orgcmdtkc{d,C-c C-a d,org-attach-delete-one} 添付の１つを選択し削除します。

@orgcmdtkc{D,C-c C-a D,org-attach-delete-all}
タスクに関連する添付をすべて削除します。安全な方法は@command{dired}を用いてデ
ィレクトリを開き、そこから削除する方法です。

@orgcmdtkc{s,C-c C-a s, org-attach-set-directory}
@cindex proverty, ATTACH_DIR
特定のディレクトリをエントリーの添付ディレクトリーに指定します。これは
ディレクトリのパスを@code{ATTAH_DIR}プロパティに代入することで動作します。

@orgcmdtkc{i,C-c C-a i,org-attach-set-inherit}
@cindex proverty, ATTACH_DIR_INTERIT
@code{ATTACH_DIR_INHERIT}プロパティをセットします。これによって子も親と同じ
ディレクトリを添付として使用します。
@end table
@end table

@node RSSフィード, プロトコル, 添付, キャプチャ／再配置／アーカイブ
@section RSSフィード
@cindex RSSフィード
@cindex Atom feeds

Org-modeはエントリーの追加や変更をRSSフィードとAtomフィードの情報を元に行う
ことができます。この機能を使ってプロダクトフィードのなかからそれぞれの新しい
プロダクトに対してタスクを作ることも可能です。もしくは、携帯電話を対象とした
Web上のノート作成サービスをOrg-modeのタスクにインポートできます。フィードに
アクセスするには、@code{org-feed-alist}を設定します。この変数のドキュメント文字列
に詳細はあります。以下に例をしまします。

@example
(setq org-feed-alist
     '(("Slashdot"
         "http://rss.slashdot.org/Slashdot/slashdot"
         "~/txt/org/feeds.org" "Slashdot Entries")))
@end example

@noindent
この例は、以下のコマンドが使われるたびに、@code{rss.slashdot.org}で提供されている
フィードの新しいアイテムから、@file{~/org/feeds.org}ファイル内に
@samp{Slashdot Entries}をヘッダーにもつ新しいエントリーを生成します。

@table @kbd
@orgcmd{C-c C-x g,org-feed-update-all}
@item C-c C-x g
@code{org-feed-alist}に設定されたフィードからアイテムを収集し、上記のように
振る舞う。@orgcmd{C-c C-x G,org-feed-goto-inbox}はフィード名を入力し、そのフ
ィードに設定されたインボックスへ移動します。
@end table

幾つかの見出しでは、Org-modeは@samp{FEEDSTATUS}という引き出しを作成します。これは
フィード中にあるアイテムのステータス情報を保存しています。なんども同じアイテ
ムが追加されないためには、@samp{FEEDSTATUS}をファイルの引き出しの中に追加すること
が必要です。

@example
#+DRAWERS: LOGBOOK PROPERTIES FEEDSTATUS
@end example

Atomフィードの読み方などのより詳しい情報は、@file{org-feed.el}を御覧ください。ま
た、@code{org-feed-alist}のドキュメント文字列もあります。

@node プロトコル, ノートの再配置, RSSフィード, キャプチャ／再配置／アーカイブ
@section 外部アクセスのためのプロトコル
@cindex protocols, for external access
@cindex emacsserver

Org-modeを扱うためのプロトコルを外部のアプリケーションから、@file{emacsserver}を
通じてEmacsに渡すことができます。例えば、ウェブブラウザーのブックマークをキ
ャプチャ(@pxref{キャプチャ})を使って現在のページへのリンクとしてOrg-modeに送り、新
しいノートを作るように設定できます。または、Emacsに現在ウェブブラウザーで開
いているウェブサイトのローカルにあるソースファイルを開くようなブックマークを
作ることも出来ます。詳細な説明や設定方法は
@uref{http://orgmode.org/worg/org-contrib/org-protocol.php}を御覧ください。

@node ノートの再配置, アーカイブ, プロトコル, キャプチャ／再配置／アーカイブ
@section ノートの再配置
@cindex refiling notes

キャプチャしたデータを見なおしているとき、幾つかのエントリーをプロジェクトな
どの異なるリストへ移動したい時があるでしょう。カットし、正しい位置をさがし、
ノートを貼り付けるのは面倒です。これを単純にするには、以下に示す特別なコマン
ドを使います。

@table @kbd
@orgcmd{C-c C-w,org-refile}
@vindex org-reverse-note-order
@vindex org-refile-targets
@vindex org-refile-use-outline-path
@vindex org-outline-path-complete-in-steps
@vindex org-refile-allow-creating-parent-nodes
@vindex org-log-refile
@vindex org-refile-use-cache
エントリーや現在のリージョンをリファイルします。このコマンドはエントリ
ーをリファイルする場所を求め、補完とともに１つ選択させます。アイテム(
またはリージョン内のアイテム)は対象の見出しの下にサブアイテムとして挿
入されます。@code{org-reverse-note-order}に依存して、サブアイテムの先頭か最
後のどちらかに挿入されます。@*
デフォルトでは、現在のバッファのレベル１の見出しすべては対象と考えられ
ますが、いくつものファイルにまたがった複雑な定義もすることが可能です。
詳細は@code{org-refile-targets}変数をご覧ください。もし場所をアウトラインの
パスをファイルパスのような補完で選択したければ、
@code{org-refile-use-outline-path}と@code{org-outline-path-complete-in-steps}変
数をご覧ください。もしリファイルするノードの親ノードをその場で作れるよ
うにしたいときは、@code{org-refile-allow-creating-parent-nodes}変数をご覧く
ださい。@code{org-log-refile}変数@footnote{@code{#+STARTUP}キーワード、@code{logfile}、
@code{lognoterefile}、そして@code{nologrefile}に対応している。}がセットされてい
る場合、タイムスタンプやノートがエントリーがリファイルされたときに記録
されます。@orgkey{C-u C-c C-w}　リファイルのインターフェースを見出しのジャン
プに使います。
@orgcmd{C-u C-u C-c C-w,org-refile-goto-last-stored} @code{org-refile}が最後に木を
移動させた場所に移動します。
@item C-2 C-c C-w
現在計時しているアイテムの子としてリファイルします。
@item C-0 C-c C-w @ @r{or} @ C-u C-u C-u C-c C-w

@orgcmdtkc{C-0 C-c C-w @ @r{or} @ C-u C-u C-u C-c C-w,C-0 C-c C-w,org-refile-cache-clear}

対象のキャッシュを削除します。リファイル対象のキャッシュは
@code{org-refile-use-cache}を設定することで設定します。コマンドに新しい対象
を見せるために、このコマンドでキャッシュを削除する必要があります。
@end table

@node アーカイブ, , ノートの再配置, キャプチャ／再配置／アーカイブ
@section アーカイブ
@cindex archiving

(サブ)ツリーとして表現されたプロジェクトが終わった時、ツリーを外に移動し、そ
れがアジェンダに現れない様にしたいでしょう。アーカイブは活動中のファイルをコ
ンパクトにし、アジェンダビューを作るようなグローバルな検索を早くするために重
要です。

@table @kbd
@orgcmd{C-c C-x C-a,org-archive-subtree-default}
@vindex org-archive-default-command
現在のエントリーを@code{org-archive-default-command}変数で指定されたコマン
ドを使ってアーカイブします。
@end table

@menu
* サブツリーを移動する::  アーカイブファイルにツリーを移動する
* ファイル内部でのアーカイブ::  アーカイブタグを付けてファイル内に残す
@end menu

@node サブツリーを移動する, ファイル内部でのアーカイブ, アーカイブ, アーカイブ
@subsection ツリーをアーカイブファイルへ移動
@cindex external archiving

もっとも一般的なアーカイブアクションはプロジェクトを他のファイル、アーカイブ
ファイル、へ移動させることです。

@table @kbd
@orgcmdkskc{C-c C-x C-s,C-c $,org-archive-subtree}
@vindex org-archive-location
カーソルの場所から始まるサブツリーを@code{org-archive-location}で与えられる
場所にアーカイブします。@orgkey{C-u C-c C-x C-s}
現在の見出しにある子がアーカイブへ移動可能か調べます。これを行うために
は、それぞれのサブツリーがオープンなTODOエントリーとしてチェックされて
いる必要がります。もし１つも見つからなければ、コマンドはこれをアーカイ
ブの場所へ移動するか訪ねてきます。もしコマンドが入力されたときに、カー
ソルがへっどらいんで@emph{ない}場合、レベル１のツリーがチェックされます。
@end table

@cindex archive locations
通常のアーカイブ場所は現在のファイルと同じディレクトリにある、現在のファイル
名に@file{_archive}を付加した名前のファイルです。これを変更するための情報や例は、
@code{org-archive-location}変数のドキュメント文字列をご覧ください。以下に示すよう
な、バッファ内でこれを変更するためのオプションもあります@footnote{後方互換性のために
、もしこれらの行がファイル中にいくつか存在する場合、それ以下のテキストのアー
カイブ場所をそれぞれ指定します。最初の行はその定義以前のすべてのテキストに適
応されます。しかし、この方法は文書のアウトライン構造と互換性が無く、@emph{全く}推
奨されません。複数のアーカイブ場所をバッファ内で設定する正しい方法は、プロパ
ティを使う方法です。}。

@cindex #+ARCHIVE
@example
#+ARCHIVE: %s_done::
@end example

@cindex プロパティ（ARCHIVE）
@noindent
もしあるエントリー又は(サブ)ツリーに対して特別なアーカイブ場所を指定したいと
きには、エントリーに@code{:ARCHIVE:}プロパティを場所を値として与えてください
(@pxref{プロパティとカラム})。

@vindex org-archive-save-context-info
もしサブツリーが移動した場合、エントリーが移動してきたファイル、アーカイブし
たときのアウトラインパスなどのコンテクスト情報が記録されます。
@code{org-archive-save-context-info}変数を設定することで追加される情報の量を調整
します。


@node ファイル内部でのアーカイブ, , サブツリーを移動する, アーカイブ
@subsection ファイル内部でのアーカイブ

もし異なるファイルへサブツリーを移動させずに、それをアジェンダビューで非表示
にしたいなら、@code{ARCHIVE tag}を使うことができます。

ARCHIVE タグ(@pxref{タグ})でマークされている見出しはアウトラインツリー内の場所に留
まりますが、下記のような振る舞いをします。
@itemize @minus
@item
@vindex org-sycle-open-archived-trees
表示を切り替えるコマンド(@pxref{表示、非表示の切り替え})では開くことはできま
せん。アーカイブしたサブツリーを強制的に切り替えるには@kbd{C-@key{TAB}}を使う
か、@code{org-cycle-open-archived-trees}オプションを設定します。また、
@code{show-all}などの通常のアウトラインコマンドはアーカイブしたサブツリーも
開きます。
@item
@vindex org-sparse-tree-open-archived-trees
ツリーの抽出を行う過程で(@pxref{ツリーの抽出})、アーカイブしたサブツリー内で
マッチしたものは@code{org-suparse-tree-open-archived-trees}オプションを設定
しない限り現れません。
@item
@vindex org-agenda-skip-archived-trees
アジェンダビューの抽出を行う過程で(@pxref{アジェンダビュー})、アーカイブした
ツリーの内容は、@code{org-agenda-skip-archived-trees}を設定した場合は無視さ
れ、設定されない場合は常に表示されます。アジェンダでは、@kbd{v a}を押すこ
とで一時的にアーカイブを含むことができます。
@item
@vindex org-export-with-archived-trees
アーカイブされたツリーは見出し以外はエクスポートされません
(@pxref{エクスポート})。@code{org-export-with-archived-trees}変数を使って詳細な設
定は行なってください。
@item
@vindex org-columns-skip-archived-trees
アーカイブしたツリーは@code{org-columns-skip-archived-trees}変数が@code{nil}に設
定されない限りカラムビューから除外されます。
@end itemize

以下に示すコマンドがARCHIVEタグの編集に役立ちます。

@table @kbd
@orgcmd{C-c C-x a,org-toggle-archive-tag}現在の見出しのARCHIVEタグをトグルす
る。もしタグが設定されているならば、見出しは
shadowed faceに変更され、以下のサブツリーは隠されます。@orgkey{C-u C-c C-x a}
現在の見出しが持つ直接の子がアーカイブされるべきかチェックする。これを
おこなうには、それぞれのサブツリーがオープンなTODOエントリーかチェック
される。もし何も見つからなかった場合、コマンドは子にARCHIVEタグをセッ
トする。カーソルがコマンド実行時に見出し上に@emph{無い}場合、レベル１のツリ
ーがチェックされる。@orgcmd{C-@kbd{TAB},org-force-cycle-archived}もしARCHIVEタグ
がついていてもツリーの切り替えを行う
@orgcmd{C-c C-x A,org-archive-to-archive-sibling}現在のエントリーを@emph{アーカイ
ブ兄弟}に移動する。これは見出しが@samp{Archive}か@samp{ARCHIVE}タグの付いたエン
トリーの兄弟である。このエントリーはこの兄弟の子になる。そのため、継承
したタグやアウトライン内のだいたいな位置など、従来の状況は保ち続けている。
@end table


@node アジェンダビュー, マークアップ, キャプチャ／再配置／アーカイブ, Top
@chapter アジェンダビュー
@cindex アジェンダビュー

Org-modeで作業した結果、TODOアイテム、タイムスタンプのついたアイテム、タグの
付いた見出しなどが、1つのファイル、あるいはいくつものファイルにまたがって、
撒き散らされることとなります。ある特定の日に重要な、実際に動いているアイテム
やイベントの全体像を把握するためには、ひとつの管理された方法で、これらの情報
を集めたり、並び替えたりしながら、表示することが必要です。

Org-modeでは、いろいろな基準によってアイテムを選択することが可能であり、独立
したバッファにそれらのアイテムを表示させることができます。７つの異なるビュー
のタイプが用意されています。：

@itemize @bullet
@item
@emph{アジェンダ}　カレンダーのように指定した日付の情報を表示します、
@item
@emph{TODOリスト}　未完了のアクションアイテムをカバーします、
@item
@emph{マッチビュー}　関連づけられているタグやプロパティ、TODOの状態に基づい
て見出しを表示します、
@item
@emph{タイムラインビュー}　1つのOrg-modeのファイルの中に含まれている全ての
イベントを時間順のビューに表示します、
@item
a @emph{テキストの検索ビュー}　複数のファイルの中かから、指定したキーワード
を含んでいるすべてのエントリーを表示します、
@item
a @emph{詳細が未決定のプロジェクトビュー}　現在作業が進んでいないプロジェク
トを表示します。そして、
@item
@emph{カスタムビュー}　特別な検索や異なるビューの組合せによるビューです。
@end itemize

@noindent
抽出された情報は特別な@emph{アジェンダバッファ}に表示されます。このバッファはリー
ドオンリーですが、オリジナルのOrg-modeファイルにジャンプしたり、オリジナルの
ファイルを間接的に編集することができます。

@vindex org-agenda-window-setup
@vindex org-agenda-restore-windows-after-quit
２つの変数によって、アジェンダバッファをどのように表示するか、アジェンダが存
在したときに、ウインドウの設定を元に戻すかどうかをコントロールします。；
@code{org-agenda-window-setup}と@code{org-agenda-restore-windows-after-quit}.

@menu
* アジェンダファイル::  アジェンダ生成のために探索されるファイル
* アジェンダのコマンド選択::  アジェンダビューへのキーボードアクセス
* 組み込みのアジェンダビュー::  すぐに使える機能に何があるでしょう？
* 表示とソート::       表示のためにどのようにアジェンダ項目が準備されるのか
* アジェンダのコマンド::  タスクツリーのリモート編集
* カスタムアジェンダビュー::  特別な検索とビューを定義する
* アジェンダビューの出力::  ビューをファイルに書き出す
* アジェンダのカラム表示::  収集したエントリーのためにコラムビューを使用する
@end menu

@node アジェンダファイル, アジェンダのコマンド選択, アジェンダビュー, アジェンダビュー
@section アジェンダファイル
@cindex アジェンダファイル
@cindex アジェンダ用のファイル

@vindex org-agenda-files
表示される情報は、通常すべての@emph{アジェンダファイル}から収集されます。アジェン
ダファイルは@code{org-agenda-files}@footnote{もしもその変数の値がリストではなく、単独のフ
ァイル名の場合には、その外部ファイルの中に記載されているアジェンダファイルの
名前となります。}変数にリスト化されたファイルが対象となります。もしもこのリ
ストの中にディレクトリ名が記載されていたら、
そのディレクトリの中にある@file{.org}という拡張子がついた全てのファイルが、アジェ
ンダファイルの対象となります。

したがって、たとえあなたが1つのOrg-modeファイルでしか作業をしていなくても、
このファイルをそのリスト@footnote{コマンド選択画面を使用しているときに、コマンドを選
択する前に、@kbd{<}を押すと、編集中のファイルに対するコマンドが制限されて、次の
コマンド選択画面でコマンドが入力されるまで、@code{org-agenda-files}は無視されます
。}に記載したことになるでしょう。@code{org-agenda-files}をカスタマイズすることが
可能で、しかも以下に述べるコマンドを通して簡単な方法で維持することができます
。

@cindex ファイル、アジェンダリストに追加する
@table @kbd
@orgcmd{C-c [,org-agenda-file-to-front}　アジェンダファイルのリストに編集中の
ファイルを追加する。そのファイルは、リストの先頭に追加される。もしも既
にリストに存在していたら、先頭に移動する。前置引数をつけることで、リス
トの最後に追加／移動する。@orgcmd{C-c ],org-remove-file}　編集中のファイルを
アジェンダファイルのリストから削除する。
@kindex C-,
@orgcmd{C-',org-cycle-agenda-files}
@itemx C-,
アジェンダファイルのリストに従って、1つのファイルから次のファイルへと
切り替える。
@kindex M-x org-iswitchb
@item M-x org-iswitchb
@code{iswitchb}と似たようなインターフェースでOrg-modeのバッファの間を切り替
えるコマンド。
@end table

@noindent
Org-modeメニューには、現時点のファイルのリストが含まれており、その中のファイ
ルに移動するのに役立ちます。

もしもこのリストに載っているファイルではなく、作業中のアジェンダファイルに焦
点をあてたかったり、リストにあるファイルのまさにひとつのファイルに焦点をあて
たかったり、はたまたあるファイルの中のあるサブツリーに焦点をあてたかったりし
たいときは、いくつかの方法が用意されています。単一のアジェンダコマンドとして
、コマンド選択画面上
(@pxref{アジェンダのコマンド選択})で@kbd{<}を1回ないし数回押すとよいのです。アジェンダ
の対象をある限定した期間に絞り込むために以下のコマンドが用意されています。：

@table @kbd
@orgcmd{C-c C-x <,org-agenda-set-restriction-lock}アジェンダの対象を現在カー
ソルが置かれているサブツリーに固定的に制限します。前置引数をつけたり、
ファイルの最初の見出しよりも前にカーソルが置かれているときには、アジェ
ンダの対象範囲はファイル全体になります。この制約は@kbd{C-c C-x >}を実行し
て取り除くか、@kbd{<}または@kbd{>}をアジェンダのコマンド選択画面上で入力するま
では維持します。もしもウインドウ上にアジェンダビューが表示されているな
らば、あたらしい制約が即座に効果を及ぼします。
@orgcmd{C-c C-x >,org-agenda-remove-restriction-lock}@kbd{C-c C-x <}で作成された
固定する制限を削除します。
@end table

@noindent
@file{speedbar.el}を併用しているときは、Speedbarのフレームの中で以下のコマンドを
使用することができます。
@table @kbd
@orgcmdtkc{< @r{in the speedbar frame},<,org-speedbar-set-agenda-restriction}　
Speedbarのフレームの中で、1つのOrg-modeファイルか、そのファイルのサブ
ツリーの一つか、カーソルの置かれているアイテムに対応してアジェンダを恒
久的に限定します。もしもアジェンダビューが表示されているウインドウがあ
るならば、限定箇所が変更されると即座に反映する。
@orgcmdtkc{> @r{in the speedbar frame},>,org-agenda-remove-restriction-lock}　制限を
ふたたび解除する。
@end table

@node アジェンダのコマンド選択, 組み込みのアジェンダビュー, アジェンダファイル, アジェンダビュー
@section アジェンダのコマンド選択画面
@cindex アジェンダのコマンド選択画面
@cindex アジェンダのコマンドを選択する
グローバルなキーと結びついている、コマンド選択画面を通してそのビューは作成さ
れます。---例えば、@kbd{C-c a}
(@pxref{インストール})のように。以下のように、コマンド選択画面にアクセスする方法と
して@kbd{C-c a}を想定しており、キーボードでコマンドにアクセスするためのリストが
表示されています。@kbd{C-c a}を入力した後、コマンドを実行するために、次に入力す
る文字を要求します。コマンド選択画面では以下に記載するデフォルトのコマンドが
提供されています。
@table @kbd
@item a
カレンダーのようなアジェンダを作成します。(@pxref{毎週／毎日のアジェンダ})
@item t @r{/} T
すべてのTODOアイテムのリストを作成します。 (@pxref{グローバルなTODOリスト})
@item m @r{/} M
タグの表記にマッチした見出しのリストを作成します。
(@pxref{タグとプロパティとのマッチング})
@item L
カレントバッファ用のタイムラインのビューを作成します。(@pxref{タイムライン})
@item s
そのエントリーに存在するしないにかかわらず、and/orという正規表現による
キーワードの論理式で選択したエントリのリストを作成します。
@item /
@vindex org-agenda-text-search-extra-files
すべてのアジェンダファイルと@code{org-agenda-text-search-extra-files}の中で
リスト化かれているファイルの中から正規表現を用いて検索します。これは
Emacsの@code{multi-occur}というコマンドを使用します。前置引数をつけると、そ
れぞれのマッチした行の状況の数をしていすることができます。デフォルトは
1となっています。
@item # @r{/} !
詳細が未決定のプロジェクトのリストを作成します。
(@pxref{詳細が未決定なプロジェクト})
@item <
カレントバッファ@footnote{逆の互換性として、@kbd{1}をカレントバッファを制限するため
に入力することもできます。}に対してアジェンダコマンドを制限します。
@kbd{<}を入力したあと、コマンドを選択するために文字を入力する必要がありま
す。
@item < <
もしもアクティブなリージョンがあるときは、以下のようなアジェンダコマン
ドがそのリージョンに限定されます。一方、カレントのサブツリー@footnote{逆の互換
性として、カレントリージョンまたはカレントサブツリーに限定するために
@kbd{0}を入力することもできます。.}に限定することもできます。@kbd{< <}を入力し
たあと、コマンドを選択する文字を入力する必要があります。
@end table

あなたは、あたかもデフォルトのコマンドのように、コマンド選択画面でアクセスす
るカスタムコマンドを定義することもできます。複数のブロックを同時に含めた拡張
されたアジェンダバッファを作成する可能性を含んでいます。例えば週のアジェンダ
、グローバルなTODOリスト、そして多数の特定タグの検索など。
@xref{アジェンダのカラム表示}.

@node 組み込みのアジェンダビュー, 表示とソート, アジェンダのコマンド選択, アジェンダビュー
@section アジェンダに組み込まれているビュー

このセクションではビルトインビューについて説明します。

@menu
* 毎週／毎日のアジェンダ::  現在のタスクが表示されたカレンダーのページ
* グローバルなTODOリスト::  全ての未完了アクション項目
* タグとプロパティとのマッチング::  微調整された検索での構造化された情報
* タイムライン::       単一ファイルでの時間順のビュー
* 検索ビュー::          文章の中を検索してエントリーを見つける
* 詳細が未決定なプロジェクト::  レビューが必要なプロジェクトを見つける
@end menu

@node 毎週／毎日のアジェンダ, グローバルなTODOリスト, 組み込みのアジェンダビュー, 組み込みのアジェンダビュー
@subsection 毎週／毎日のアジェンダ
@cindex アジェンダ
@cindex 1週間のアジェンダ
@cindex 1日のアジェンダ

1週間の／1日の@emph{アジェンダ}の目的は、その週あるいはその日のタスクをすべて表示
して、紙のアジェンダのページのように、実行に移すことです。

@table @kbd
@cindex org-agenda, command
@orgcmd{C-c a a,org-agenda-list}　Org-modeのファイルのリストの中からその週の
予定を収集するものです。予定はそれぞれの日に表示されます。（
@kbd{C-u 2 1 C-c a a}のように)前置引数に数字をつけて@footnote{逆方向の互換性のため
に、普遍的な前置引数@kbd{C-u}をつけることでアジェンダ（予定表）より上に、
TODOリストを書き出すことができます。この機能は軽視されており、専用の
TODOリストやブロックアジェンダ(@pxref{ブロックアジェンダ}).をその代わりに利
用することが多いです。}表示する日数を設定することができます。
@end table

@vindex org-agenda-span
@vindex org-agenda-ndays
表示されるデフォルトの日数は、@code{org-agenda-span}(あるいは古くさくなってしまい
ましたが@code{org-agenda-ndays})という変数で設定します。この変数は、アジェンダの
中でデフォルトとして確認したい日数、あるいは、期間を示す@code{day}、@code{week}、
@code{month}や@code{year}といった期間を示す名前をつけて設定します。

アジェンダバッファからリモートで編集するとは、例えば、アジェンダバッファの中
でデッドラインやアポイントメントの日付を変更することができるという意味です。
アジェンダバッファの中で利用できるコマンドは、@ref{アジェンダのコマンド}の中で一
覧表にしています。

@subsubheading カレンダー／日記の統合
@cindex カレンダーの統合
@cindex 日記の統合

Emacsには、Edward
M.
Reingoldによって開発されたカレンダーと日記の機能があります。カレンダーでは、
国や文化の異なる祝祭日を備えた3ヵ月分のカレンダーが表示されます。日記には記
念日、月の満ち欠け、日の出日の入り、繰り返しの予定（隔週、隔月）などを記録し
ておくことができます。このような機能は、Org-modeに対して大変補完的な関係にあ
ります。日記とOrg-modeの出力を結びつけることは大変有益です。

Emacsの日記からOrg-modeのアジェンダに項目を落とし込むために、あなたは次のよ
うに変数を設定するだけです。

@lisp
(setq org-agenda-include-diary t)
@end lisp

@noindent
その後、すべてが自動的に行われます。祝祭日や記念日などを含むすべての項目は、
Org-modeで作成されるジェンダバッファに取り込むことができます。日記に記録され
ている項目を編集するために、アジェンダバッファ上で@key{SPC}、
@key{TAB}、及び
@key{RET}を入力することで、日記のファイルにジャンプすることができます。その日に
新しいエントリーを挿入する@kbd{i}というコマンドはアジェンダバッファ上で動作しま
す。あたかも、日の出日の入りの時刻を表示したり、月の満ち欠けの状態を表示した
り、他の暦に変換するための、@kbd{S}、@kbd{M}、および@kbd{C}というコマンドと同様です。
@kbd{c}はカレンダーとアジェンダの間を行ったり来たりすることができます。

もしもあなたが日記をS式項目と祝祭日だけで使用しているのならば、上のような設
定をするよりも、Org-modeファイルに直接コピーしたり移動したりしたほうが手っ取
り早いです。Org-modeは日記形式のS式項目を評価し、しかもより早く、というのは
、最初にカレンダーを表示するという負荷がかからないからです。S式項目は左端か
ら記述し、式の前にスペースが入ってはいけないことに注意してください。たとえば
、あるOrg-modeファイルについての、以下にのべるセグメントが処理され、項目がア
ジェンダの中に作成されます。

@example
* Birthdays and similar stuff
#+CATEGORY: Holiday
%%(org-calendar-holiday)   ; special function for holiday names
#+CATEGORY: Ann
%%(diary-anniversary  5 14 1956)@footnote{Note that the order of the arguments (month, day, year) depends on the setting of @code{calendar-date-style}.} Arthur Dent is %d years old
%%(diary-anniversary 10  2 1869) Mahatma Gandhi would be %d years old
@end example

@subsubheading Anniversaries from BBDB
@cindex BBDB, anniversaries
@cindex anniversaries, from BBDB

もしもBig Brothers
Databaseを使用して連絡先を管理しているのならば、あなたは先に述べたのと同様に
、独立したOrg-modeのファイルや日記のファイルに登録するよりも、BBDBの中に記念
日を登録したいと考えるでしょう。Org-modeはこれもサポートしており、アジェンダ
の一部としてBBDBの記念日を表示することができます。そのために必要なことは、以
下のような記述をアジェンダファイルに行うことです。

@example
* Anniversaries
  :PROPERTIES:
  :CATEGORY: Anniv
  :END:
%%(org-bbdb-anniversaries)
@end example

それからBBDBのデータレコードのための記念日の定義に取り掛かることができます。
基本的には、BBDBのレコードの中にカーソルを置いて、@kbd{C-o anniversary @key{RET}}を
実行し、それから日付を@code{YYYY-MM-DD}または@code{MM-DD}の形式で記入し、半角スペース
に続けて記念日の種類(@samp{birthday}、@samp{wedding}、または定型句)のクラスを記入しま
す。もしもクラスを省略した場合は、デフォルトでは@samp{birthday}であるとみなします
。いくつかの例を書いてみました。@file{org-bbdb.el}ファイルの先頭のところにもう少
し詳しい説明が書いてあります。

@example
1973-06-22
06-22
1955-08-02 wedding
2008-04-14 %s released version 6.01 of org-mode, %d years ago
@end example

BBDBを変更したり、Emacsのセッションで最初にアジェンダを表示したとき後は、ア
ジェンダの表示が少し遅くなるかもしれません。というのはOrg-modeが記念日のハッ
シュデータを更新するからです。しかしながら、そのことについていうと非常に早い
といえます。実際Org-modeの日記ファイルに@samp{%%(diary-anniversary)}のエントリー
を長々と書き連ねた場合よりもずっと早いと言えるでしょう。

@subsubheading Appointment reminders
@cindex @file{appt.el}
@cindex appointment reminders

Org-modeはEmacsの予定を通知する機能と連携しています。あなたのアジェンダファ
イルに含まれているすべてのアポイントを追加するために、@code{org-agenda-to-appt}コ
マンドを使います。このコマンドはあなたの予定のリストにフィルターをかけ、特別
なカテゴリーに属しているものや正規表現の検索に合致したものを追加します。詳細
はドキュメント文字列を参照してください。

@node グローバルなTODOリスト, タグとプロパティとのマッチング, 毎週／毎日のアジェンダ, 組み込みのアジェンダビュー
@subsection The global TODO list
@cindex global TODO list
@cindex TODO list, global

グローバルなTODOリストには、形式を整えられ、1つの場所に集められたすべての未
完了のTODOアイテムが含まれています。

@table @kbd
@orgcmd{C-c a t,org-todo-list}　グローバルなTODOリストを表示します。これはす
べてのアジェンダファイル(@pxref{アジェンダビュー})からTODOアイテムを１つのバ
ッファに集約します。デフォルトでは、このアイテムのリストはDONEという状
態ではないアイテムです。そのバッファは@code{agenda-mode}となり、そのバッフ
ァからTODOアイテムを直接調べたり操作したりするコマンドが用意されていま
す(@pxref{アジェンダのコマンド})。
@cindex TODO keyword matching
@vindex org-todo-keywords
上と似ていますが、指定したTODOキーワードと合致したものを表示します。同
じことを前置引数をつけて@kbd{C-c a t}を実行することでも指定できます。キー
ワードの入力を促す指示が表示され、そして複数のキーワードを論理式ORとい
う意味で@samp{|}で区切って指定することができます。数字付きの前置引数をつけ
ると@code{org-todo-keywords}の中のN番目のキーワードを選択することができます
。
@kindex r
@kbd{r}キーをアジェンダバッファで使用するとバッファの再構成が行われます。
たとえば@kbd{3 r}というように、前置引数をつけてこのコマンドを実行すると選
択したTODOキーワードが変更することができます。もしも特定のキーワードを
使って検索することが多い場合は、カスタムコマンドを定義することもできま
す(@pxref{アジェンダのコマンド選択})。@*特定のTODOキーワードと合致するものを検索するのは、タグ検索の１機能として行
うこともできます(@pxref{タグの検索})。
@end table

リモートでTODOアイテムを編集するということの意味は、1つのキーを入力すること
でTODOエントリーの状態を変更できるということです。TODOリストの中で利用できる
コマンドは@ref{アジェンダのコマンド}の記述を参考にしてください。

@cindex sublevels, inclusion into TODO list
通常グローバルなTODOリストには、TODOキーワードのついたすべて見出しが表示され
ます。このリストは大変長いものになる場合もあります。それをコンパクトにするに
は２つの方法があります。
@itemize @minus
@item
@vindex org-agenda-todo-ignore-scheduled
@vindex org-agenda-todo-ignore-deadlines
@vindex org-agenda-todo-ignore-timestamp
@vindex org-agenda-todo-ignore-with-date
TODOアイテムが、実行するために@emph{scheduled}となっている、あるいは、もは
や@emph{open}となっている@emph{deadline}(@pxref{タイムスタンプ})を持っているかどうかを
確認したい人もいるでしょう。@code{org-agenda-todo-ignore-scheduled}、
@code{org-agenda-todo-ignore-deadlines}、@code{org-agenda-todo-ignore-timestamp}
および／または@code{org-agenda-todo-ignore-with-date}という変数を設定し、グ
ローバルなTODOリストから取り除くことができます。
@item
@vindex org-agenda-todo-list-sublevels
TODOアイテムがサブタスクにブレイクダウンされた下位のレベルを持っている
かもしれません。そういった場合は、最上位のTODOの見出しを表示すれば十分
で、グローバルなリストからは下位のレベルの項目は省略してもよい場合があ
ります。そういったときは@code{org-agenda-todo-list-sublevels}変数を設定する
ことで可能となります
@end itemize

@node タグとプロパティとのマッチング, タイムライン, グローバルなTODOリスト, 組み込みのアジェンダビュー
@subsection タグとプロパティとのマッチング
@cindex matching, of tags
@cindex matching, of properties
@cindex tags view
@cindex match view

アジェンダファイルの中の見出しに@emph{tags}(@pxref{タグ})がついていたり、あるいは属性
(@pxref{プロパティとカラム})がついていたときは、このメタデータに基づいて見出しを選
択し、アジェンダバッファに収集することができます。この項で述べている検索構文
は@kbd{C-c / m}を用いたツリーの抽出を行うときも適用できます。

@table @kbd
@orgcmd{C-c a m,org-tags-view}　一組のタグのセットに合致したすべての見出しの
リストを作成します。選択の基準の入力を指示するコマンドでタグのついた論
理式による表現で記入します。例えば、@samp{+work+urgent-withboss}あるいは
@samp{work|home}
というように(@pxref{タグ})。もしも特定の検索をよく行うならばそのためのカスタ
ムコマンドを定義することができます(@pxref{アジェンダのコマンド選択})。
@orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
@vindex org-agenda-tags-todo-honor-ignore-options
@kbd{C-c a m}と似ていますが、not-DONEの状態にあるTODOアイテムの見出しから
選択するもので、自動的にサブアイテムもチェックします
(@code{org-tags-match-list-sublevels}変数参照)。予定／期限のついたアイテム
を除外するには@code{org-agenda-tags-todo-honor-ignore-options}の変数を参照
してください。特定のTODOキーワードをタグの一致と一緒に指定することも可
能です。@ref{タグの検索}を参照してください。
@end table

タグのリストで利用できるコマンドは@ref{アジェンダのコマンド}のところで説明してい
ます。

@subsubheading Match syntax

@cindex Boolean logic, for tag/property searches
検索文字列ではANDの意味で@samp{&}、ORの意味で@samp{|}という論理式を使うことができます
。@samp{&}は@samp{|}よりも強く結びつけます。括弧（
）は現在準備されていません。検索のどの要素も、タグそのものか、正規表現でマッ
チしたタグか、あるいは@code{PROPERTY OPERATOR VALUE}のような属性値にアクセスして
比較操作のできる値のいずれかになります。どの要素も@samp{-}を先頭につけてそれ以外
のものを表現するか、@samp{+}を先頭につけてポジティブな選択を行う、というような糖
衣構文（簡便な構文）で表現します。@samp{&}でANDを取り扱うことは@samp{+}、@samp{-}で表現でき
るもののオプションです。下にタグだけをつかったいくつかの例を挙げておきました
。

@table @samp
@item +work-boss
@samp{:work:}というタグがついているが、@samp{:boss:}というタグがついていない見出
しを選択します。
@item work|laptop
@samp{:work:}または@samp{:laptop:}というタグがついたものを選択します。
@item work|laptop+night
前の文と同じですが、@samp{:laptop:}の行には、同時に@samp{:night:}というタグが付
いている必要があります。
@end table

@cindex regular expressions, with tags search
タグの代わりに、大括弧でくくられた正規表現により指定をすることもできます。例
えば、@samp{work+@{^boss.*@}}と指定すると、@samp{:work:}というタグのついた見出しで
@samp{boss}という単語で@i{starting}するタグがついているものに一致します。

@cindex TODO keyword matching, with tags search
@cindex level, require for tags/property match
@cindex category, require for tags/property match
@vindex org-odd-levels-only
タグとマッチするものを探すと同時に属性(@pxref{プロパティとカラム})の検索をすること
も可能です。属性としては実際の属性のほかに、他のメタデータで表現された特別な
属性(@pxref{スペシャルプロパティ})にも対応しています。例えば、そのエントリーの中の
TODOキーワードで表現された@code{TODO}という「属性」。あるいは、そのエントリーの階
層を示す@code{LEVEL}という「属性」などです。そのため、@samp{+LEVEL=3+boss-TODO="DONE"}
という検索式は、第3階層のすべての見出しの中で、@samp{boss}というタグがついており
、TODOキーワードがDONEでは@samp{ない}もののリストを表示します。
@code{org-odd-levels-only}という設定がなされているバッファでは@samp{LEVEL}は＊の数を数
えるのではなく、@samp{LEVEL=2}（2番目）
の階層は＊が３つある階層が該当します。

いくつかの例を紹介します。
@table @samp
@item work+TODO="WAITING"
@samp{:work:}というタグがあるTODO行のうち、特にTODOキーワードが@samp{WAITING}と
なっている行を選択します。
@item work+TODO="WAITING"|home+TODO="WAITING"
workとhomeというタグがついているWaitingとなっているタスク
@end table

属性の検索では、多数の異なる操作で属性の値をテストすることができます。複雑な
例を挙げます。

@example
+work-boss+PRIORITY="A"+Coffee="unlimited"+Effort<2         \
         +With=@{Sarah\|Denny@}+SCHEDULED>="<2008-10-11>"
@end example

@noindent
比較のタイプは比較の値がどのように書かれているかによります。
@itemize @minus
@item
比較する値が普通の数字ならば、数値の比較が行われ、@samp{<}、@samp{=}、@samp{>}、@samp{<=}
、@samp{>=}、および@samp{<>}という操作が可能です。
@item
比較する対象がダブルクォーテーションで囲まれている場合は、文字列の比較
が行われ、前項と同じ操作が可能です。
@item
もしも比較対象が、(@samp{DEADLINE<="<2008-12-24 18:30>"}のように)、ダブルク
ォーテーション@emph{および}角括弧<>で囲まれていた場合は、両方の値がOrg-mode
流の標準的な日付・時刻の指定であると仮定し、それにそって比較を行います
。いくつかの特別な値があります。@code{"<now>"}は（時刻も含めた）現在を示し
、@code{"<today>"}、@code{"<tomorrow>"}はそれらの日の0:00つまり、@:時刻の指定が
ないことを表します。同様に、@code{"<+5d>"}または@code{"<-2m>"}というような文字列
は、それぞれ日、週、月、年を示す、@code{d}、@code{w}、@code{m}、@code{y}という単位がついて
いるものとして使用されます。
@item
もしも比較対象が中括弧｛｝でくくられていて、正規表現での比較がなされる
ときは、@samp{=}は一致していることを示し、@samp{<>}は一致していないことを示しま
す。
@end itemize

そのため、例に掲げた検索文字列の意味は、@samp{:work:}というタグがつけられているが
、@samp{:boss:}というタグはついておらず、また、優先順位の値が@samp{A}であり、
@samp{:Coffee:}が@samp{unlimited}という値であり、@samp{Effort}
属性が数値で２より小さく、@samp{:With:}の値が@samp{Sarah\|Denny}であり、スケジュールが
2008年10月11日もしくはそれ以降に予約されたものを示しています。

TODO、LEVEL、CATEGORYを検索するときは短時間ですみます。それ以外の属性を検索
するときはいささか時間がかかります。しかしながら、一度高い代償を払って1つの
プロパティを検索したら、他の属性を追加して再び検索するときは安くあがります。

検索の際にOrg-modeで属性の継承という機能を使用するように設定することができま
すが、相当検索スピードが落ちることを覚悟してください。詳細は
@ref{プロパティの継承}参照。

逆互換として、さらにまたタイプのスピードを上げるために、検索においてTODOの状
態をテストする別の方法があります。このためには、検索文字列（それは@samp{|}で結合
された複数の用語が含まれていると思いますが）のタグ・属性検索の部分を@samp{/}を使
って終了させ、TODOキーワードを論理式で結んで指定します。その構文はタグの検索
で使用したのと似ていますが、よく考えて適用する必要があります。例えば、複数の
TODOキーワードが存在することを検索するには論理式のANDで結びつけても意味があ
りません。しかしながら、@emph{negative selection}（存在しないことを選択する場合）
では「AND」で結合することは意味を持ちます。これを確かめるには、実際にいくつ
かのTODOキーワードで、@kbd{C-c a M}を用いて確認するだけです（そのほうがスピード
アップできます）。あるいはスラッシュのあとに@samp{!}を記入して同時にTODOの部分を
開始します。@kbd{C-c a M}または@samp{/!}を使用したときは、DONEの状態にあるTODOキーワ
ードを検索することはできません。例えば、

@table @samp
@item work/WAITING
@samp{work+TODO="WAITING"}と同じ
@item work/!-WAITING-NEXT
@samp{:work:}を選択。ただしTODO行では@samp{WAITING}と@samp{NEXT}のどちらのタグもつい
ていないもの
@item work/!+WAITING|+NEXT
@samp{:work:}を選択。TODO行に@samp{WAITING}か@samp{NEXT}かどちらかのタグがついている
もの。
@end table

@node タイムライン, 検索ビュー, タグとプロパティとのマッチング, 組み込みのアジェンダビュー
@subsection Timeline for a single file
@cindex timeline, single file
@cindex 時間順に並べたビュー

タイムラインはひとつのOrg-modeファイルの中から@emph{time-sorted view}（時間順のビ
ュー）ですべてのタイムスタンプのついたアイテムをまとめてて表示します。このコ
マンドの主な目的は、あるプロジェクトに含まれているイベント全体の概要をつかむ
ためにあります。

@table @kbd
@orgcmd{C-c a L,org-timeline}すべてのタイムスタンプの付いたアイテムについて、
Org-modeファイルの中で時間順のビューを提供します。@kbd{C-u}という前置引数
をつけて呼び出したときは、現在の日付の時点で、すべての未完了のTODOエン
トリー（予約されているものも、そうでないものも）を一覧にします。
@end table

@noindent
タイムラインのバッファで利用できるコマンドは、@ref{アジェンダのコマンド}にリスト
化されています。

@node 検索ビュー, 詳細が未決定なプロジェクト, タイムライン, 組み込みのアジェンダビュー
@subsection 検索ビュー
@cindex 検索ビュー
@cindex text search
@cindex searching, for text

アジェンダのビューではOrg-modeのエントリーに対する一般的なテキスト検索機能を
持っています。これはノートを探すのに特に役に立ちます。

@table @kbd
@orgcmd{C-c a s,org-search-view}　このコマンドは特別な検索のためのもので、論
理式を使って、文字列または特定の単語に合致するエントリーを選択します。
@end table
例えば、@samp{computer equipment}という検索文字列は、@samp{computer equipment}という1
つの文字列が含まれているエントリーを検索するでしょう。もしも、２つの単語が、
1つ以上のスペースまたは改行で分かれていても、依然として一致するものを検索す
るでしょう。検索ビューでは、エントリーの中にある特別なキーワードについて論理
式を使って検索することもできます。@samp{+computer +wifi -ethernet -@{8\.11[bg]@}}
という検索文字列では、次のようなノートエントリーを検索します。@code{computer}と
@code{wifi}というキーワードを含んでおり、@code{ethernet}というキーワードは含まれておら
ず、@code{8\.11[bg]}という正規表現を含んでいない、すなわち8.11bおよび
8.11gともに含まれていないという意味ですが、エントリーを検索します。最初の
@samp{+}は単語検索を開始するために必要ですが、ほかの@samp{+}はオプションです。詳しく知
りたい場合は、@code{org-search-view}というコマンドのドキュメント文字列を参照して
ください。

@vindex org-agenda-text-search-extra-files
アジェンダファイルに加えて、このコマンドは
@code{org-agenda-text-search-extra-files}の中で一覧になっているファイルもまた検索
するということに注意してください。

@node 詳細が未決定なプロジェクト, , 検索ビュー, 組み込みのアジェンダビュー
@subsection 詳細が未決定なプロジェクト
@pindex GTD, Getting Things Done

もしもあなたが、以下に述べるようなDavid
Allen氏のGTDのようなシステムであなたの仕事を管理しているならば、あなたが抱え
ている「義務」のひとつは、すべてのプロジェクトが進んでいるかを明確にするため
に、レビューを定期的に行うことです。@emph{詳細が未決定}のプロジェクトは、次の行動
が何も定義がされていないため、Org-modeが提示するTODOリストに、全く何も表示さ
れることがないのです。レビューをする際に、そういったプロジェクトを明確にし、
それらのプロジェクトための次の行動を定義することが必要です。

@table @kbd
@orgcmd{C-c a #,org-agenda-list-stuck-projects}　詳細が未決定のプロジェクトリ
スト
@kindex C-c a !
@item C-c a !
@vindex org-stuck-projects
@code{org-stuck-projects}の変数をカスタマイズすることで何が詳細が未決定のプ
ロジェクトで、どうやったらそういうプロジェクトを発見できるかを定義する
ことができます。
@end table

あなたは九分九厘このコマンドが機能するために、このビューを定義する必要があり
ます。あらかじめビルトインされているデフォルトの設定では、すべてのあなたのプ
ロジェクトは第2階層の見出しに記述されており、あるプロジェクトが未決定である
とはいえない状況とは、すくなくとも1つのエントリーにTODOまたはNEXTまたは
NEXTACTIONという印がつけられている場合です。

Org-modeを使う際に、あなた自身の方法でアプローチするとして、PROJECTというタ
グがあるものをプロジェクトと定義し、プロジェクトがまだ検討する段階にないとい
うことを示すためにTODOキーワードでMAYBEと書いているものと仮定しましょう。さ
らにTODOキーワードでDONEという印の付いたものは完了したプロジェクトであると仮
定しましょう。そしてまたNEXTもしくはTODOと書かれたものはNextActionであると仮
定しましょう。@@SHOPというタグがついたときはNEXTというタグが付いていなくても
、ショッピングに行くという次の行動を示しているとします。最終的に、もしもプロ
ジェクトにIGNORE（無視）という特別なキーワードがどこかについていたら、それは
リストに表示されないものとします。このようなケースの場合、タグ・
TODO@footnote{@xref{タグの検索}.}が@samp{+PROJECT/-MAYBE-DONE}とマッチし、さらにサブツリーに
TODO、NEXT、@@SHOP、およびIGNOREというタグが付いているようなプロジェクトは、
詳細が未決定のプロジェクトではないといえます。このようなカスタマイズを正しく
定義するには、

@lisp
(setq org-stuck-projects
      '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@@SHOP")
                               "\\<IGNORE\\>"))
@end lisp

もしもあるプロジェクトが詳細が未決定のプロジェクトではないと定義されたならば
、そのエントリーのサブツリーは依然として詳細が未決定のプロジェクトとして検索
されるということに注意してください。

@node 表示とソート, アジェンダのコマンド, 組み込みのアジェンダビュー, アジェンダビュー
@section 表示とソート
@cindex presentation, of agenda items

@vindex org-agenda-prefix-format
@vindex org-agenda-tags-column
アジェンダビューにアイテムが表示される前に、Org-modeではそのアイテムを表示し
並び替える準備を行っています。それぞれのアイテムは1行を占めます。その行には
その項目の@emph{category}
(@pxref{カテゴリ})を含んだ@emph{prefix}とそれ以外の重要な情報を含んでいます。あなたは
@code{org-agenda-tags-column}を使って表示されるコラムタグをカスタマイズすることが
できます。@code{org-agenda-prefix-format}のオプションを使用して前置引数をカスタマ
イズすることができます。この前置引数は、そのアイテムに関連するアウトラインの
見出しの最新のバージョンに従います。

@menu
* カテゴリ::             全てのタスクが同じであるとは限らない
* 時刻の仕様::          アジェンダはどうやって時間を知るか
* アジェンダの項目をソートする::  物事の順番
@end menu

@node カテゴリ, 時刻の仕様, 表示とソート, 表示とソート
@subsection カテゴリ

@cindex category
@cindex #+CATEGORY
カテゴリーとは、それぞれのアジェンダアイテムに割り当てられた幅の広いラベルで
す。デフォルトでは、カテゴリーはファイルの名前から単純に作成されます。しかし
、バッファ上で特別な行を足すことでそれを指定することができます。@footnote{逆に言うと
、以下のような動作も生じます。もしも1つのファイルの中に、いくつかののそうい
う行が存在するならば、それよりも下の行にあるテキストに、そのカテゴリーをそれ
ぞれ指定することになります。最初のカテゴリーは、その最初のCATEGORYの行はより
も前にあるどのテキストにも適用されます。しかしながら、@emph{strongly}という手法を
使うことは、文書のアウトライン構造と非互換であることを、@emph{強く}非難することに
なります。複数のカテゴリーをバッファの中で設定する正しい方法は属性を使用する
ことです。.}

@example
#+CATEGORY: Thesis
@end example

@noindent
@cindex プロパティ（CATEGORY）
もしもあなたが、1つのエントリーもしくは1つの（サブ）ツリーに特別なCATEGORYを
持たせたいと望むのならば、そのエントリーに、値として適用したいと思っている特
別なカテゴリーを@code{:CATEGORY:}という属性に設定しなさい。

@noindent
アジェンダバッファの表示は、そのカテゴリーが10文字以上長くしない方が見栄えが
良いです。

@noindent
あなたは@code{org-agenda-category-icon-alist}変数をカスタマイズすることで、カテゴ
リーにアイコンを設定することができます。

@node 時刻の仕様, アジェンダの項目をソートする, カテゴリ, 表示とソート
@subsection 時刻の仕様
@cindex time-of-day specification

@c
Org-modeは時刻の仕様に基づいて、それぞれのアジェンダアイテムをチェックします
。時刻は、例えば、@w{@samp{<2005-05-10 Tue 19:00>}}のように、アジェンダの中に含まれ
ているものをトリガーとしたタイムスタンプの一部です。時間の幅は２つのタイムス
タンプで指定され、例えば@w{@samp{<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>}}の
ように記載されます。

そのエントリー自身の見出しの中で、時刻（時間）はプレーンなテキストとして（
@samp{12:45}や@samp{8:30-1pm})のように表示されます。もしもアジェンダがEmacsのダイアリ
ー(@pxref{毎週／毎日のアジェンダ})と一体化されていたときは、ダイアリーのエントリー
の中で指定した時間は、同様に認識されます。

アジェンダの表示のために、Org-modeは時間を引き出し、前置引数の一部として標準
的な24時間のフォーマットでそれを表示します。前の段落に書かれた時間の例は、ア
ジェンダの中で結局以下のように表示されます。

@example
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   19:00...... The Vogon reads his poem
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
@end example

@cindex time grid
もしもアジェンダが一日モードであるならば、あるいは今日を表示しているならば、
時間設定されたエントリーは、次のような時間のグリッドに埋め込まれます。

@example
    8:00...... ------------------
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   10:00...... ------------------
   12:00...... ------------------
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   14:00...... ------------------
   16:00...... ------------------
   18:00...... ------------------
   19:00...... The Vogon reads his poem
   20:00...... ------------------
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
@end example

@vindex org-agenda-use-time-grid
@vindex org-agenda-time-grid
時間のグリッドは、@code{org-agenda-use-time-grid}変数で表示したりしなかったさせる
ことができます。そしてまた@code{org-agenda-time-grid}で設定をすることができます。

@node アジェンダの項目をソートする, , 時刻の仕様, 表示とソート
@subsection アジェンダの項目をソートする
@cindex sorting, of agenda items
@cindex priorities, of agenda items
ビューに書き出される前に、各アイテムは並び替えが行われます。この並び替えはビ
ューのタイプによって決まります。
@itemize @bullet
@item
@vindex org-agenda-files
一日／一週間のアジェンダでは、それぞれの日の各アイテムは順番に並びます
。デフォルトの順番は、明示的に日付と時刻の指定を含んでいるアイテムを、
最初に集めます。これらのアイテムは、その日の@emph{スケジュール}に応じて、リ
ストの最初から順番に表示されます。その次に、各アイテムは
@code{org-agenda-files}によって決められた順番に、カテゴリーごとにグループ分
けされます。それぞれのカテゴリーの中で、各アイテムは優先順位
(@pxref{プロパティ})に従って並び替えられます。優先順位は基本的な優先順位で構
成されます（優先順位@samp{A}ならば2000、@samp{B}ならば1000、@samp{C}ならば0として）。
さらに、予定あるいはデッドラインを過ぎているアイテムのウエイトが追加さ
れます。
@item
TODOリストでは、各アイテムはカテゴリーの順番に並び替えられますが、各カ
テゴリーの中では、優先順位(@pxref{プロパティ})によって並び替えられます。優先
順位は、優先順位の記号に従って並べ替えられます。さらに、アイテムが実行
する日あるいは予約した日にどれだけ近いかということも考慮されます。
@item
タグでの一致については、項目は並び替えは行われず、アジェンダファイルの
中で一致した項目が発見された順番に従って表示されるのみです。
@end itemize

@vindex org-agenda-sorting-strategy
並び替えは、@code{org-agenda-sorting-strategy}変数でカスタマイズすることができま
す。そして、並び替えはそのエントリーの工数の見積りに基づく評価も含まれます。

@node アジェンダのコマンド, カスタムアジェンダビュー, 表示とソート, アジェンダビュー
@section Commands in the agenda buffer
@cindex commands, in agenda buffer

アジェンダバッファでのエントリーは、その項目が作成されたOrg-modeファイルと日
記ファイルの間でリンクされます。アジェンダバッファでは編集することはできませ
んが、コマンドを使って、そのエントリーがある場所を表示したり、ジャンプして、
アジェンダバッファから「遠隔的に」Org-modeファイルを編集することができます。
この方法で、すべての情報は１度書き込めばよく、あなたがアジェンダとノートのフ
ァイルが別の情報になるというリスクを避けることができます。

いくつかのコマンドはアジェンダの行上でマウスをクリックすることで実行されます
。それ以外のコマンドは、必要とされる行の中にカーソルが置かれている必要があり
ます。

@table @kbd
@tsubheading{Motion}
@cindex motion commands in agenda
@c
@c
@c
@c
@orgcmd{n,org-agenda-next-line}　次の行へ(@key{up}及び@kbd{C-p}と同じ)。
@orgcmd{p,org-agenda-previous-line}　次の行へ(@key{down}及び@kbd{C-n}と同じ)。
@tsubheading{View/Go to Org file}　@orgcmdkkc{@key{SPC},mouse-3,org-agenda-show-and-scroll-up}　
そのアイテムのオリジナルの場所を別のウインドウで表示する。前置引数を使
うことで、見出しだけでなく、アウトライン上にエントリー全体を明確に表示
する。@orgcmd{L,org-agenda-recenter}　オリジナルの場所を表示し、ウインドウの
センターに再配置する。@orgcmdkkc{@key{TAB},mouse-2,org-agenda-goto}　別のウインドウ
でそのアイテムのオリジナルの場所に移動する。
@orgcmd{@key{RET},org-agenda-switch-to}　そのアイテムのオリジナルの場所に移動し、
他のウインドウは削除する。@orgcmd{F,org-agenda-follow-mode}
@vindex org-agenda-start-with-follow-mode
@c
Followモードをトグルする。Followモードではアジェンダバッファ上でカーソ
ルを動かすと、Org-modeファイルの中で、別のウインドウ上で対応する場所を
表示する。新しいアジェンダバッファの中でこのモードの初期設定値は、
@code{org-agenda-start-with-follow-mode}変数で設定することができる。
@orgcmd{C-c C-x b,org-agenda-tree-to-indirect-buffer}　間接的なバッファの中で
カレントアイテムのサブツリー全体を表示する。数値付きの前置引数Nをつける
と、第N階層まで階層を上がり、そのツリーを取得する。もしもNがマイナスな
らば、多くの階層まで上がる。@kbd{C-u}という前置引数を付けた場合は、既に使
われた間接的バッファは消去されない。

@orgcmd{C-c C-o,org-agenda-open-link}　エントリーの中にあるリンクをフォローす
る。この機能は、参照されているOrg-modeのノードに属しているテキストの中
に含まれているいくつかのリンクの中から選択するという機能を提供する。も
しもリンクが1つしかない場合は、選択画面を表示せずに、そこにリンクを貼る。

@tsubheading{Change display}
@cindex display changing, in agenda
@kindex o
@item o
@c
他のウインドウを削除します。
@orgcmdkskc{v d,d,org-aganda-day-view} @xorgcmdkskc{v w,w,org-aganda-day-view} @xorgcmd{v m,org-agenda-month-view} @xorgcmd{v y,org-agenda-month-year} @xorgcmd{v SPC,org-agenda-reset-view}
@vindex org-agenda-span
@c
@c
@c
@c
@c
@c
@c
日／週／月／年のビューを切り替えます。日または週にビューを切り替えたと
きは、この設定は、それに続くアジェンダの更新ついてのデフォルトの設定と
なります。月および年のビューは、作成するために時間を要するので、デフォ
ルトとはしていません。数字の付いた前置引数をつけると、その年、ISOの週
、月、年の指定した日に直接ジャンプします。例えば@kbd{32 d}と書いたときは2
月1日、@kbd{9 w}と書いたらISOの週番号が9を指します。日、週あるいは月のビュ
ーを設定したときは、1年は同様に前置引数の中でコード化されます。例えば
、@kbd{200712 w}と書いたときは2007年の第12週にジャンプするでしょう。もしも
そのような年の指定を、1桁もしくは2桁の数字で行いたいたときは、1938年か
ら2037年の間に位置づけられます。@kbd{v @key{SPC}}によって、@code{org-agenda-span}で
の設定をリセットすることができます。@orgcmd{f,org-agenda-later}　時間を前の日
付の表示へと遡ります。@orgcmd{.,org-agenda-goto-today}　今日へ移動します。
@orgcmd{j,org-agenda-goto-date}　日付の選択画面でその日に移動します。
@orgcmd{J,org-agenda-clock-goto}　@i{アジェンダバッファの中}で現在時間を計測中の
タスクに移動します。@orgcmd{D,org-agenda-toggle-diary}　日記のエントリーに含
めるかどうかトグルします。参照@ref{毎週／毎日のアジェンダ
}.@orgcmdkskc{v l,l,org-agenda-log-mode}
@kindex v L
@vindex org-log-done
@vindex org-agenda-log-mode-items
@c
@c
@c
Logbook modeにするかどうかをトグルします。Logbook modeの中では、ログの
取得中に(変数
@code{org-log-done})DONEと印が付けられたエントリーが、その日の時刻を持って
いるエントリーとして、アジェンダの中に表示されます。
@code{org-agenda-log-mode-items}変数を用いてlogモードに含まれるエントリーの
タイプを設定することができます。@kbd{C-u}という前置引数をつけて呼び出すと
、状態の変化を含め、すべてのおこりうるlogbookのエントリーを表示できる
でしょう。@kbd{C-u C-u}という2つの前置引数をつけて呼び出すと、ログの情報の
みが表示され、それ以外は表示されません。@kbd{v L}は、@kbd{C-u v l}と等価です。
@orgcmdkskc{v [,[,org-agenda-manipulate-query-add}　現在のビューに、不活性のタイ
ムスタンプを含めます。週／日のアジェンダとタイムラインビューのみです。
@orgcmd{v a,org-agenda-archives-mode} @xorgcmd{v A,org-agenda-archives-mode 'files}　
Archivesモードをトグルします。Archivesモードでは、@code{ARCHIVED}と印された
ツリーもまたアジェンダを作成するときにスキャンされます。大文字の@kbd{A}を
使用したときは、全てのアーカイブファイルを含みます。archives
modeから出るためには、再度@kbd{v a}を押してください。
@orgcmdkskc{v R,R,org-agenda-clockreport-mode}
@vindex org-agenda-start-with-clockreport-mode
@c
Clockreportモードをトグルします。Clockreportモードでは、日／週のアジェ
ンダは、時間軸のための時刻のついた表を表示し、カレントのアジェンダビュ
ーでカバーされる範囲をファイルします。新しいアジェンダバッファの中で、
このモードの初期設定は、@code{org-agenda-start-with-clockreport-mode}変数で
設定することができます。このモードをトグル(すなわち@:
@kbd{C-u R})している時に、前置引数を使用することで、アジェンダフィルター
@footnote{ここではタグフィルターだけが有効です。工数のフィルターは無視されます
。}によって隠されているエントリーからの情報を表示しないでしょう。
@orgcmdkskc{v E,E,org-agenda-entry-text-mode}
@vindex org-agenda-start-with-entry-text-mode
@vindex org-agenda-entry-text-maxlines
@c
entry text modeをトグルします。entry text
modeでは、アジェンダ行によって参照されているOrg-modeのアウトラインのノ
ードから、多数の行が、その行の下に表示されるでしょう。最大の行数は、
@code{org-agenda-entry-text-maxlines}変数で指定します。数値付きの前置引数を
付けて、このコマンドを呼び出すと、前置引数の値の数によって、即座に修正
されます。@orgcmd{G,org-agenda-toggle-time-grid}
@vindex org-agenda-use-time-grid
@vindex org-agenda-time-grid
@c
@c
@c
時間のグリッドの表示をトグルします。@code{org-agenda-use-time-grid}と
@code{org-agenda-time-grid}変数を参照してください。@orgcmd{r,org-agenda-rodo}　ア
ジェンダバッファを再構築する。例えば、@kbd{S-@key{left}}と@kbd{S-@key{right}}を使って
、アイテムのタイムスタンプを改修したあと、その変更を反映するために。そ
のバッファがグローバルなTODOリストの場合は、指定したTODOキーワードを選
択できるリストを作成するために、前置引数を解釈します。
@orgcmd{g,org-agenda-rodo}　カレントのEmacsのセッションにおいて、すべての
Org-modeのバッファを保存します。あわせてIDの場所も。
@orgcmd{C-c C-x C-c,org-agenda-columns}
@vindex org-columns-default-format
アジェンダバッファの中でカラムビュー(@pxref{カラムビュー})を作成します。カラ
ムビューのフォーマットは、その時点のエントリーから作成され、あるいは(
もしも、その時点でエントリーが存在しないなら)、アジェンダビューの最初
のエントリーから作成されます。そのエントリーのためのフォーマットが何で
あれ、(プロパティから、@code{#+COLUMNS}という行から、あるいは
@code{org-columns-default-format}変数のデフォルトから作成された)オリジナル
のバッファに存在しているエントリーのフォーマットがアジェンダで使用されます。

@orgcmd{C-c C-x >,org-agenda-remove-restriction-lock}　もしもファイルまたはサ
ブツリーをその時点で制限しているならば、アジェンダをロックする制限を取
り除きます。
(@pxref{アジェンダファイル}).

@tsubheading{Secondary filtering and query editing}
@cindex filtering, by tag and effort, in agenda
@cindex tag filtering, in agenda
@cindex effort filtering, in agenda
@cindex query editing, in agenda

@orgcmd{/,org-agenda-filter-by-tag}
@vindex org-agenda-filter-preset
タグおよび（または）工数の見積りに対して、カレントのアジェンダビューに
フィルターをかけます。これとカスタムなアジェンダコマンドとの間の差異は
、このフィルターが非常に早いということです。このため、あなたは、アジェ
ンダ（注１）を再表示することなく、異なるフィルターの間を素早く切り替え
ることができます。@footnote{カスタムコマンドによって、オプションとして
@code{org-agenda-filter-preset}変数と結びつけることで、フィルターを事前にセ
ットすることができます。このフィルターは、ビューに適用されます。そして
、リフレッシュや２番目のフィルターを通して、基本的なフィルターとして存
続します。このフィルターは、アジェンダのブロックの中で、アジェンダビュ
ー全体のグローバルなプロパティです。この設定を行うためには、個別のブロ
ックのセクションではなく、グローバルオプションのセクションで行います。}

タグ選択の文字を入力しましょう。@key{SPC}はタグの全てを意味しています。入
力部分で@key{TAB}を押すと、選択するタグの補完機能を使用できます(すべてのタ
グに選択用の文字が指定されているとはかぎりません)。そして、そのコマン
ドは、このタグを含んでいないか継承していないエントリーを全て隠します。
前置引数をつけて呼び出した場合は、そのタグを持っているエントリーを削除
さえしてしまいます。入力部で2番目の@kbd{/}はフィルターを終了し、隠されてい
るエントリーを再度出現させます。もしも最初に入力したキーが、@kbd{+}または
@kbd{-}ならば、前のフィルターは、選択された新たなタグの要求あるいは禁止に
応じて、幅を狭くします。@kbd{/}の後に、@kbd{+}あるいは@kbd{-}を入力する代わりに、
@kbd{\}
コマンドを即座に使用することもできます。

@vindex org-sort-agenda-noeffort-is-high
工数見積のフィルターをかけるために、予め認められている汎用的な工数を設
定すべきです。例えば
@lisp
(setq org-global-properties
    '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
@end lisp
あなたは、@kbd{<}、@kbd{>}および@kbd{=}のひとつの操作を最初に入力することで、工数
のためのフィルターをかけることができます。それから、あらかじめ認められ
た値のリストの中で、工数見積りのインデックスの数字を入力します。そこで
は@kbd{0}は１０番目の値を意味します。フィルターは選択された値よりも、以下
、イコール、以上であるかによって限定されます。もしも0-9のキーがタグへ
のアクセスキーとして使用されていないならば、単純にあなたは操作コマンド
を利用することなく、直接インデックスとなる数字を入力するだけです。この
場合@kbd{<}が仮定されます。操作のアプリケーションのために、定義された工数
がないエントリーでは、@code{org-sort-agenda-noeffort-is-high}変数の値に従っ
て取り扱われます。工数の定義のないタスクにフィルターをかけるには、@kbd{?}
を操作の値として入力します。

Org-modeはまた、コンテクストに対応したタグのフィルターを自動的にサポー
トしています。もしも、@code{org-agenda-auto-exclude-function}変数の値が、ユ
ーザーが定義した機能に設定されているときは、その機能によって、どのよう
なタグがアジェンダから自動的に排除されるかを決定します。一度この機能が
設定されると、それによって、@kbd{/}コマンドは、@kbd{RET}
をサブのオプションキーとして受け付け、自動的に排除ロジックを走らせます
。例えば、いってみれば、ネットワークへのアクセスを必要とするタスクを定
義するために@code{Net}というタグ、街での用事のために@code{Errand}というタグ、電
話を掛けなければならないときに@code{Call}というタグを使用しているとします。
あなたは、インターネットを利用できるかどうか、仕事時間外にあるかどうか
、このような状況に基づいて、これらのタグを自動的に排除することができる
のです。

@lisp
@group
(defun org-my-auto-exclude-function (tag)
  (and (cond
        ((string= tag "Net")
         (/= 0 (call-process "/sbin/ping" nil nil nil
                             "-c1" "-q" "-t1" "mail.gnu.org")))
        ((or (string= tag "Errand") (string= tag "Call"))
         (let ((hour (nth 2 (decode-time))))
           (or (< hour 8) (> hour 21)))))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
@end group
@end lisp

@orgcmd{\\,org-agenda-filter-by-tag-refine}追加の条件によってカレントのアジェ
ンダフィルターをナローイングします。前置引数を用いてコマンドを呼び出し
たときは、まさにタグがついているエントリー、あるいは工数の基準にまさに
合致するエントリーを削除する。@kbd{/}コマンドのあとの最初のキーとして、
@kbd{+}あるいは@kbd{-}を押すことで同様の効果を達成することができる。

@c
@kindex [
@kindex ]
@kindex @{
@kindex @}
@item [ ] @{ @}
@table @i
@item @r{in} search view
新しい検索の単語(@kbd{[}と@kbd{]})、あるいは新しい正規表現(@kbd{@{}と@kbd{@}})をクエリ
文字列に追加する。開いた角括弧／大括弧は、@samp{+}という接頭辞のついたポジ
ティブな検索用語を追加する。この検索用語は、@i{必ず}そのエントリーに発生／
合致しなければならないことを示す。閉じた角括弧／大括弧は、ネガティブな
検索用語を追加し、それは、選択されているエントリーの中で、@i{絶対に}発生／
合致しないということである。
@end table

@tsubheading{Remote editing}
@cindex remote editing, from agenda

@item 0-9
@c
Digit argument.
@cindex undoing remote-editing events
@cindex remote editing, undo
@c
@c
@c
@orgcmd{C-_,org-agenda-undo}　外部の編集コマンドでの変更を元に戻す。この変更はアジ
ェンダバッファと外部のバッファの両方を元に戻す。@orgcmd{t,org-agenda-todo}　アイテ
ムのTODOのステータスを変更する。アジェンダファイルでもオリジナルのOrgファイ
ルでも有効である。@orgcmd{C-S-@key{right},org-agenda-todo-nextset}
@orgcmd{C-S-@key{left},org-agenda-todo-previousset}　次／前のTODOキーワードのセットへと
切り替える。@orgcmd{C-k,org-agenda-kill}
@vindex org-agenda-confirm-kill
@c
@c
オリジナルのOrgファイルの中で、そのアイテムが属しているサブツリー全体と共に
、カレントのアジェンダアイテムを削除する。もしも外部ファイルの削除するテキス
トが１行以上ならば、削除を行うには、ユーザーが指定する必要がある。
@code{org-agenda-confirm-kill}変数を参照のこと。@orgcmd{C-c C-w,org-agenda-refile}　その
時点でそのエントリーを差し替える。
@orgcmdkskc{C-c C-x C-a,a,org-agenda-archive-default-with-confirmation}
@vindex org-archive-default-command
@c
@c
@c
@c
@code{org-archive-default-command}に設定されたデフォルトのアーカイブコマンドを使
用して、その時点でエントリーに対応したサブツリーをアーカイブする。@code{a}キーを
使用したときは、承認が必要である。@orgcmd{C-c C-x a,org-agenda-toggle-archive-tag}
　カレントの見出しのためのARCHIVEタグをトグルする。
@orgcmd{C-c C-x A,org-agenda-archive-to-archive-sibling}　カレントエントリーに対応
したサブツリーを、@emph{アーカイブファイル}に移動する。
@orgcmdkskc{C-c C-x C-s,$,org-agenda-archive}　カレントの見出しに対応したサブツリーをア
ーカイブする。これは、設定されたアーカイブの場所に、多くの場合それは異なるフ
ァイルであるが、エントリーを移動することを意味している。
@orgcmd{T,org-agenda-show-tags}
@vindex org-agenda-show-inherited-tags
@c
@c
カレントアイテムと関連づけられたすべてのタグを表示する。もしも、あなたたが
@code{org-agenda-show-inherited-tags}機能を停止しているにもかかわらず、依然として
、たびたび見出しのすべてのタグを確認したいというときに役に立つ。
@orgcmd{:,org-agenda-set-tags}　カレントの見出しにタグを設定する。もしもアジェンダ
の中にアクティブなリージョンがあるときは、そのリージョンの中ですべての見出し
用としてタグを変更する。
@kindex ,
@item ,
@c
@c
@c
@c
カレントアイテムに優先順位を設定する。(@command{org-agenda-priority})　Org-modeは優
先順位を表す文字を指示します。もしも、@key{SPC}を使って返答すると、優先順位のク
ッキーがそのエントリーから取り除かれる。@orgcmd{P,org-agenda-show-priority}　カレン
トアイテムの優先順位の重み付けを表示する。@orgcmdkkc{+,S-@key{up},org-agenda-priority-up}
　カレントアイテムの優先順位を高くする。優先順位はオリジナルのバッファで変更
される。しかしアジェンダ上では並び替えの更新は行われない。このためには、@kbd{r}
キーを使用する。@orgcmdkkc{-,S-@key{down},org-agenda-priority-down}
　カレントアイテムの優先順位を低くする。@orgcmdkkc{z,C-c C-z,org-agenda-add-note}
@vindex org-log-into-drawer
@c
@c
@c
@c
そのエントリーにのノートを追加する。このノートは記録され、ノートが置かれてい
る状態を変更した同じ場所にファイルされる。@code{org-log-into-drawer}によって、こ
れは引き出しの中に入る。@orgcmd{C-c C-a,org-attach}　すべてのコマンドの選択画面は、
付属するものに関連づけられる。@orgcmd{C-c C-s,org-agenda-schedule}　このアイテムを
予約する。前置引数をつけると、予約のタイムスタンプが削除される。
@orgcmd{C-c C-d,org-agenda-deadline}　このアイテムにデッドラインを設定する。前置引
数をつけるとデッドラインが削除される。@orgcmd{k,org-agenda-action}　カーソルの置か
れた日付に選択されたアイテムの日付を設定するための、アジェンダのアクション。
このコマンドはカレンダーでも動作する！コマンドは追加されたキーで入力する。
@example
m   @r{その地点でアクションのためにエントリーにマークする。複数のエントリーに対
しても可能である。}
    @r{Org-modeでは次を伴う@kbd{C-c C-x C-k}.}
d   @r{その時点の日付でマークされたエントリーのデッドラインを設定する。}
s   @r{その時点の日付でマークされたエントリーを予約する。}
r   @r{デフォルトの日付としてカーソルの日付とともに@code{org-capture}を呼び出す。}
@end example
@noindent
@c
@c
@c
@c
@c
@c
@c
アジェンダを更新した後に、@kbd{r}を押すと、コマンドの効果を確認できる。
@orgcmd{S-@key{right},org-agenda-do-date-later}　カレント行に関連づけられたタイムスタン
プを１日先に変更する。数値付きの前置引数をつけると、その数字の日数分だけ先に
変更する。例えば、@kbd{3 6 5 S-@key{right}}と入力すると１年先に変更される。@kbd{C-u}とい
う前置引数をつけると、１時間ずつ時間を変更する。もしもあなたが、同じコマンド
を即座に繰り返したいときは、前置変数を付けなくても１時間単位で変化し続けるで
しょう。二重の@kbd{C-u C-u}という前置引数をつけると、同様に分単位で変更される。
オリジナルのOrg-modeファイルの中でタイムスタンプは変更されるが、その変更はア
ジェンダバッファには直接は反映されない。バッファを更新するには、@kbd{r}または
@kbd{g}を使用する。@orgcmd{S-@key{left},org-agenda-do-date-earlier}　カレント行のに関連づけ
られたタイムスタンプを1日過去に変更する。@orgcmd{>,org-agenda-date-prompt}　カレン
ト行に関連づけられたタイムスタンプを変更する。@kbd{>}キーが選択される。というの
は、私のキーボード上では@kbd{S-.}と同じだからである。@orgcmd{I,org-agenda-clock-in}　カ
レントアイテムの時計をスタートする。もしもすでに時計が動いているのならば、ま
ずそれが停止する。@orgcmd{O,org-agenda-clock-out}　すでにスタートした時計を停止する
。@orgcmd{X,org-agenda-clock-cancel}　カレントで動いている時計をキャンセルする。
@orgcmd{J,org-agenda-clock-goto}　別のウインドウの中の動いている時計にジャンプする
。

@tsubheading{Bulk remote editing selected entries}
@cindex remote editing, bulk, from agenda

@c
@c
@c
@orgcmd{m,org-agenda-bulk-mark}　大量のアクションについて、その時点でエントリーにマ
ークをつける。前置引数を付けると、多くの連続したエントリーにマークをつける。
@orgcmd{U,org-agenda-bulk-remove-all-marks}　大量のアクションのマークを取り除く。
@orgcmd{U,org-agenda-bulk-remove-all-marks}　大量のアクションのためにマークがつけら
れたエントリーのマークを取り除く。@orgcmd{B,org-agenda-bulk-action}　大量のアクショ
ン。アジェンダの中ですべてのマークをつかられたエントリーについて実行する。こ
の機能では、適用されるアクションを選択するために、別のキーを入力する。@kbd{B}に
前置引数をつけると、@kbd{s}や@kbd{d}のコマンドをパスして、これらの特別なタイムスタン
プをまとめて取り除く。
@example
r  @r{１つのリフィル上のターゲットに入力しすべてのエントリーを移動する。そのエン
トリーは}
   @r{アジェンダ上には表示されなくなる。再表示(@kbd{g})によって再度表示される。}
$  @r{選択されているエントリーをすべてアーカイブする。}
A  @r{エントリーをアーカイブし、それぞれを所定のアーカイブ先に移動する。}
t  @r{TODOの状態を変更する。これはTODOキーワード1文字を入力し、そして}
   @r{選択されたエントリーすべての状態を変更する。それはブロックしているのを無視
し}
   @r{ログのノートを抑え込んで（タイムスタンプは別です）。}
+  @r{選択されたエントリーのすべてにタグを付加する。}
-  @r{選択されたエントリーのすべてから、タグのひとつを削除する。}
s  @r{すべてのアイテムに新しい日付で予約する。すでに予約がついていれば、日数分だ
け}
   @r{日付を更新する。入力欄でプラスを２つつけて何かの数字を最初に打つことで。}
   @r{例えば、@samp{++8d}とか@samp{++2w}のように。}
S  @r{N日を指定して、それぞれをリスケジュールする。Nは入力欄で指定する。前置引数
}
   @r{(@kbd{C-u B S})をつけることで、平日のみに指定できる。}
d  @r{指定した日をデッドラインとして設定する。}
@end example


@tsubheading{Calendar commands}
@cindex calendar commands, from agenda

@c
@c
@orgcmd{c,org-agenda-goto-calendar}　Emacsのカレンダーを開き、アジェンダのカーソル
の置かれている日付に移動します。@orgcmd{c,org-calendar-goto-agenda}　すでにカレンダ
ーの中にあるときは、カーソルの置かれている日付で計算し、Org-modeのアジェンダ
を表示します。
@cindex diary entries, creating from agenda
@orgcmd{i,org-agenda-diary-entry}
@vindex org-agenda-diary-file
カーソルの置かれている日付および（ブロックエントリーでは）マークされた日付を
使って、新しいエントリーを日記に書き込みます。この機能ではEmacsの日記ファイ
ル@footnote{@code{org-agenda-include-diary}が設定されているときは、このファイルはアジェン
ダ用に解析されます。}に追加することになります。ある意味では、カレンダーの
@kbd{i}コマンドと似た機能です。日記ファイルは別のウインドウにポップアップし、そ
こでエントリーを書き加えることができます。

@c
@c
@c
@c
もしもOrg-modeファイルに@code{org-agenda-diary-file}
を指定したならば、Org-modeではそのファイルの中に（Org-modeの構文を使って）日
記の代わりに、エントリーを作成することができます。ほとんどのエントリーは、日
付を元にしたアウトラインのツリーの中に記述されており、あとで過去の月／年の中
から予定をアーカイブするのを簡単にします。そのツリーは、@code{DATE_TREE}属性か、
最上位のエントリーとして、年という属性を持ったエントリーのもとに構築されてい
ます。Emacsでエントリーのテキストを入力するようプロンプトが表示されるでしょ
う。もしもあなたがそれを指示するならば、さらなる連携なく、
@code{org-agenda-diary-file}にそのエントリーを作成することになるでしょう。テキス
トを入力することなく、その入力欄で直接@key{RET}を入力したら、そのターゲットとな
るファイルがその場でのエントリーを終了させ、別のウインドウが表示されるでしょ
う。@kbd{k r}コマンドを参照してください。@orgcmd{M,org-agenda-phases-of-moon}　その日を
中心として3ヶ月間の月齢を表示する。@orgcmd{S,org-agenda-sunrise-sunset}　日の出と日
の入りを表示する。地理上の場所によって、カレンダーの変数が設定される。Emacs
のcalendarの章を参照のこと。@orgcmd{C,org-agenda-convert-date}　カーソルの置かれて
いる日付によって、多くの他の文化的・歴史的なカレンダーに変換する。
@orgcmd{H,org-agenda-holidays}　カーソルのある日付を中心に3ヶ月間の祝祭日を表示する
。

@item M-x org-export-icalendar-combine-agenda-files
すべてのアジェンダファイルからエントリーを含んだiCalendar形式のファイルにエ
クスポートする。これはグローバルに利用できるコマンドで、そしてまたアジェンダ
メニューの中で利用できるコマンドです。

@tsubheading{Exporting to a file} @orgcmd{C-x C-w,org-write-agenda}
@cindex アジェンダビューの出力
@cindex アジェンダビュー、エクスポート
@vindex org-agenda-exporter-settings
アジェンダビューを1つのファイルに書き出します。選択したファイル名の拡張子に
従って、そのビューは、HTML
(拡張子が@file{.html}または@file{.htm})、Postscript (拡張子@file{.ps})、PDF
(拡張子@file{.pdf})、そしてプレーンテキスト(その他の拡張子）などにエクスポートさ
れます。@kbd{C-u}という前置引数を用いてコマンドを呼び出したならば、即座に新しく
作成されたファイルが開きます。エクスポートの間に使用されている@file{ps-print}およ
び@file{htmlize}のためのオプションを設定するために、
@code{org-agenda-exporter-settings}変数を使用します。

@c
@tsubheading{Quit and Exit}　@orgcmd{q,org-agenda-quit}　アジェンダを終了し、アジェンダバッファ
を削除しますｓ。
@cindex agenda files, removing buffers
@orgcmd{x,org-agenda-exit}　アジェンダを終了し、アジェンダバッファとアジェンダを編
集するためにEmacsで読み込まれたすべてのバッファを削除する。Org-modeファイル
を読み込むためにユーザーによって作成されたバッファは削除されない。
@end table


@node カスタムアジェンダビュー, アジェンダビューの出力, アジェンダのコマンド, アジェンダビュー
@section カスタムアジェンダビュー
@cindex custom agenda views
@cindex agenda views, custom

カスタムアジェンダコマンドは２つの目的を提供する。ひとつはTODOとタグの検索を
使用して、保存と素早く頻繁にアクセスするため。もうひとつは、特別に合成したア
ジェンダバッファを作成するため。カスタムなアジェンダコマンドはデフォルトのコ
マンドと同様に、コマンド選択画面ディスパッチャー(@pxref{アジェンダのコマンド選択})
を通して利用できる。

@menu
* 検索式の保存::       一度入力し、何度も使う
* ブロックアジェンダ::  必要な事項をひとつのバッファに集める
* 設定オプション::    ルールを変更する
@end menu

@node 検索式の保存, ブロックアジェンダ, カスタムアジェンダビュー, カスタムアジェンダビュー
@subsection 検索式の保存

カスタム検索の最初のアプリケーションは、よく使われる検索式のためのキーボード
ショートカットを定義することです。それはアジェンダバッファの作成、またはツリ
ーの抽出（後者は言うまでもなくカレントバッファのみをカバーする）のどちらに対
してでも。
@kindex C-c a C
@vindex org-agenda-custom-commands
カスタムコマンドは、@code{org-agenda-custom-commands}変数で設定されます。あなたは
この変数をカスタマイズできます。例えば、@kbd{C-c a C}というように。またあなたは
@file{.emacs}にEmacsのLispを記述して直接設定することもできます。以下に述べる例は
すべての適正な検索タイプを含んでいます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("w" todo "WAITING")
        ("W" todo-tree "WAITING")
        ("u" tags "+boss-urgent")
        ("v" tags-todo "+boss-urgent")
        ("U" tags-tree "+boss-urgent")
        ("f" occur-tree "\\<FIXME\\>")
        ("h" . "HOME+Name tags searches") ; description for "h" prefix
        ("hl" tags "+home+Lisa")
        ("hp" tags "+home+Peter")
        ("hk" tags "+home+Kim")))
@end group
@end lisp

@noindent
それぞれのエントリーの頭文字は、コマンドにアクセスするために、コマンド選択画
面を呼び出す@kbd{C-c a}というコマンドの後に、入力しなければならないキーを定義し
ます。通常、これは1文字をあてますが、もしもあなたが似たようなコマンドをたく
さん持っていたら、あなたは2文字の組合せで定義することができます。その場合、
いくつかの組合せでは最初の文字が同じものとなり、前置引数@footnote{あなたは前置引数と
説明をつけて、コンソールのセルを挿入することで、前置引数のキーのための説明を
表示することができます。}.と同じように提供されます。2番目のパラメーターは検
索の種類を示し、マッチさせるために使われる文字列や正規表現がそれに続きます。
上の例ではそれゆえ以下のように定義します。

@table @kbd
@item C-c a w
TODOのキーワードとして、@samp{WAITING}となっているTODOエントリーのためのグ
ローバルな検索として。す。
@item C-c a W
同じような検索であるが、カレントバッファにのみ適用され、ツリーの抽出と
して検索結果を表示する。
@item C-c a u
@samp{:urgent:}ではなく@samp{:boss:}というタグがつけられた見出しのための、グロー
バルなタグ検索を行う。
@item C-c a v
@kbd{C-c a u}と同じ検索を行うが、TODOアイテムである見出しに対してのみ検索
を行うという制限がある。
@item C-c a U
@kbd{C-c a u}と同じ検索を行うが、カレントバッファに対してのみ検索を行い、
結果をツリーの抽出として表示する。
@item C-c a f
すべてのエントリーのうちで@samp{FIXME}という言葉を含んでいるものを検索して
ツリーの抽出を行う（くどいかもしれませんが、カレントバッファだけが対象
です）。
@item C-c a h
HOMEというタグ検索のためのコマンドの前置引数として、そこでは、タグ検索
の追加として、一つの名前(Lisa、Peter、またはKim)を選択するために、あな
たはさらに(@kbd{l}、@kbd{p}、または@kbd{k})というキーを追加入力する必要があります
。
@end table

@node ブロックアジェンダ, 設定オプション, 検索式の保存, カスタムアジェンダビュー
@subsection ブロックアジェンダ
@cindex block agenda
@cindex agenda, with block views

もう一つの可能性とは、アジェンダビューの構築です。そのビューは、@emph{様々な}コマ
ンドの結果で構成されており、それぞれのコマンドはアジェンダバッファの中の１つ
のブロックを作成します。利用できるコマンドは（@kbd{C-c a a}を実行して作成された
）一日または週間アジェンダのための@code{agenda}、（@kbd{C-c a t}を実行して作成された
）グローバルなtodoリストのための@code{alltodo}、そして上で議論してきた@code{todo}、
@code{tags}、@code{tags-todo}などの検索コマンドに含まれています。２つの例を挙げます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden")))
        ("o" "Agenda and Office-related tasks"
         ((agenda "")
          (tags-todo "work")
          (tags "office")))))
@end group
@end lisp

@noindent
これによって、家で精を出さなければならない用事に対するマルチブロックのビュー
を作成するために、@kbd{C-c a h}を定義します。アジェンダバッファには結果として、
その週の、@samp{home}というタグが含まれているすべてのTODOアイテムと、@samp{garden}とい
うタグがついたすべての行のためのアジェンダを含むことになります。最後に、
@kbd{C-c a o}というコマンドで、同様に、オフィスの作業についてのビューを得ること
ができます。

@node 設定オプション, , ブロックアジェンダ, カスタムアジェンダビュー
@subsection Setting options for custom commands
@cindex options, for custom agenda views

@vindex org-agenda-custom-commands
Org-modeはたくさんのアジェンダの構築や表示について調整する変数を含んでいます
。グローバルな変数では、カスタムコマンドも含めて、アジェンダの全てのコマンド
の動作を定義することができます。しかしながら、もしもあるひとつのカスタムビュ
ーについて、いくつかの設定を変更したいならば、それも可能です。オプションの設
定は変数名のリストに書き込むことが必要で、@code{org-agenda-custom-commands}の中に
、正しい位置に値を書き込む必要があります。例えば。

@lisp
@group
(setq org-agenda-custom-commands
      '(("w" todo "WAITING"
         ((org-agenda-sorting-strategy '(priority-down))
          (org-agenda-prefix-format "  Mixed: ")))
        ("U" tags-tree "+boss-urgent"
         ((org-show-following-heading nil)
          (org-show-hierarchy-above nil)))
        ("N" search ""
         ((org-agenda-files '("~org/notes.org"))
          (org-agenda-text-search-extra-files nil)))))
@end group
@end lisp

@noindent
こう書き込むことによって、@kbd{C-c a w}というコマンドは、優先順位によってのみ収
集したエントリーを並べ替えるでしょう。そのエントリーのカテゴリを設定する変わ
りに、例えば@samp{ Mixed: }という文字をprefixの形で書くことで変更することができま
す。@kbd{C-c a U}というタグでツリーを抽出するコマンドは、この結果、超コンパクト
となるでしょう。なぜならば、検索に合致した項目の上の階層の見出しも、合致した
項目の見出しもどちらも表示されないからです。@kbd{C-c a N}というコマンドは、１つ
のファイルに制限されたテキスト検索を実行します。

@vindex org-agenda-custom-commands
ブロックアジェンダを作成するコマンドセットのために、
@code{org-agenda-custom-commands}ではオプションの設定用に２つの別の場所を用意して
います。その設定の中にたったひとつのコマンドに有効なオプションを付け加えるこ
とも、その設定の中にすべてのコマンドに有効なオプションを付け加えることもでき
ます。前者のオプションは１つのコマンドエントリーを付け加える。後者のオプショ
ンは、コマンドエントリーのリストを書き込むことが必要です。ブロックアジェンダ
の例に戻ると(@pxref{ブロックアジェンダ})、@kbd{C-c a h}というコマンドで、並べ替えの順
序を優先順位の降順@code{priority-down}に変更することができますし、その中で「
GARDEN」というタグのついたものについては反対の順序、すなわち優先順位の昇順
@code{priority-up}に並べ替えることができるでしょう。このことは以下のように記述で
きます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("h" "Agenda and Home-related tasks"
         ((agenda)
          (tags-todo "home")
          (tags "garden"
                ((org-agenda-sorting-strategy '(priority-up)))))
         ((org-agenda-sorting-strategy '(priority-down))))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office")))))
@end group
@end lisp

おわかりだと思いますが、変数とカッコで囲んでいる設定はやや複雑なところがあり
ます。わかりにくいときは、カスタマイズのインターフェースとしてこの変数を設定
してください。これはカスタマイズの構造を完全にサポートしています。注意しなけ
ればならないのは、このインターフェースでオプションを設定するときに、@emph{変数}は
、Lispによる表現をとっているということです。そのため、もしもその変数が１つの
文字ならば、あなた自身でその変数の値に「”（ダブルクォート）」で囲む必要があ
るということです。


@node アジェンダビューの出力, アジェンダのカラム表示, カスタムアジェンダビュー, アジェンダビュー
@section アジェンダビューの出力
@cindex アジェンダビュー、エクスポート

もしもあなたが自分のコンピュータから離れているときは、いくつかのアジェンダの
バージョンを印刷して持ち歩くことは大変役に立ちます。Org-modeはカスタムアジェ
ンダビューをプレーンなテキスト、HTML@footnote{あなたはHrvoje Niksic氏の@file{htmlize.el}を
インストールする必要があります。}、Postscript、PDF@footnote{PDFの出力を作成するために
は、Ghostscriptの@file{ps2pdf}ユーティリティがシステムにインストールされている必
要があります。pdfファイルを選択するとポストスクリプトファイルも作成されます
。}、iCalenderファイルとしてエキスポートすることができます。もしも、ときどき
このようなことを実行するのならばコマンドを使用しましょう。

@table @kbd
@orgcmd{C-x C-w,org-write-agenda}
@cindex アジェンダビューの出力
@cindex アジェンダビュー、エクスポート
@vindex org-agenda-exporter-settings
アジェンダビューを１つのファイルに書き出します。選択したファイル名の拡
張子により、そのビューはHTML（拡張子が@file{.html}または@file{.htm}）、
Postscript（拡張子が@file{.ps}）、iCalendar（拡張子が@file{.ics}）、あるいはプレ
ーンなテキスト（何かほかの拡張子）としてエクスポートされます。エクスポ
ートの間に、@file{ps-print}のため、および@file{htmlize}のためにオプションを設定
するには、@code{org-agenda-exporter-settings}変数を使用します。例えば

@vindex org-agenda-add-entry-text-maxlines
@vindex htmlize-output-type
@vindex ps-number-of-columns
@vindex ps-landscape-mode
@lisp
(setq org-agenda-exporter-settings
      '((ps-number-of-columns 2)
        (ps-landscape-mode t)
        (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))
@end lisp
@end table

もしも、あなたがアジェンダビューをたびたびエクスポートする必要があるのならば
、アウトプットのファイルの名前@footnote{もしもあなたが週間アジェンダやグローバルな
TODOリストなどのような標準的なビューを保存したいならば、ファイル名を指定する
ことができるようにするために、それらのビューのためにカスタムなコマンドを定義
する必要があります。}のリストに、いくつかのカスタムなアジェンダのコマンドを
関連づけることができます。ここに一つの例があります。最初のものはアジェンダと
グローバルなTODOリストに対するカスタムなコマンドを定義しており、それらをエク
スポートするたくさんのファイルと一緒になっています。それから２つのブロックア
ジェンダコマンドを定義し、同様にそれらのためのファイル名を指定しています。フ
ァイル名は、現在作業しているディレクトリに対して相対パスにすることも絶対パス
にすることもできます。

@lisp
@group
(setq org-agenda-custom-commands
      '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
        ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
        ("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden"))
         nil
         ("~/views/home.html"))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office"))
         nil
         ("~/views/office.ps" "~/calendars/office.ics"))))
@end group
@end lisp

ファイル名の拡張子がエクスポートのタイプを決定します。もしも拡張子が@file{.html}
ならば、Org-modeは@file{htmlize.el}パッケージを使用し、バッファをHTMLに変換し、そ
のファイル名で保存します。もしも拡張子が@file{.ps}ならば、
@code{ps-print-buffer-with-faces}がPostscriptの出力をするために使用されます。もし
も拡張子が@file{.ics}ならば、iCalendarのエクスポートは、アジェンダを構成している
すべてのファイルにわたってエクスポートを実行し、現在アジェンダの中ではリスト
化されたエントリーのエクスポートに限定されます。ほかの拡張子がついた場合は、
プレーンなASCIIテキストファイルが作成されます。

エクスポートファイルは、非常に負荷が高いので、これらのコマンドの一つを相互に
影響するように使用している時は、出力されません。そのかわり、1ステップで@emph{すべ
て}の指定されたファイルを出力する特別なコマンドが用意されています。

@table @kbd
@orgcmd{C-c a e,org-store-agenda-views}　アジェンダに関連するエクスポートファ
イル名を持つすべてのアジェンダビューをエクスポートします。
@end table

あなたは、エクスポートコマンドのためのオプションの設定をするために。カスタム
アジェンダコマンドのオプションのセクションを使用することができます。例えば、

@lisp
(setq org-agenda-custom-commands
      '(("X" agenda ""
         ((ps-number-of-columns 2)
          (ps-landscape-mode t)
          (org-agenda-prefix-format " [ ] ")
          (org-agenda-with-colors nil)
          (org-agenda-remove-tags t))
         ("theagenda.ps"))))
@end lisp

@noindent
このコマンドは、Postscriptのエクスポートのために、２つのオプションを設定しま
す。横長のフォーマットで２段のプリントを作成するためです。出力されたページは
、２つにカットして、紙のアジェンダとして使えるようになります。もうひとつの設
定は、行頭のカテゴリーとスケジューリング情報を省き、その代わりにチェックのつ
いてないチェックボックスの項目となるようにアジェンダを修正します。私たちは各
行をコンパクトに表示するためにタグを省略したり、白黒プリンタのためにカラーを
使わない用にすることもできます。@code{org-agenda-exporter-settings}の中で指定する
設定もできますが、@code{org-agenda-custom-commands}での設定が優先します。

@noindent
コマンドラインで次のような設定を使用することができます。
@example
emacs -f org-batch-store-agenda-views -kill
@end example
@noindent
また、いくつかのパラメーター@footnote{引用の方法はあなたの使用しているシステムに依存
します。事例用のFAQを確認してください。}を修正する必要があります。
@example
emacs -eval '(org-batch-store-agenda-views                      \
              org-agenda-span month                             \
              org-agenda-start-day "2007-11-01"                 \
              org-agenda-include-diary nil                      \
              org-agenda-files (quote ("~/org/project.org")))'  \
      -kill
@end example
@noindent
どちらも@file{~/org/project.org}のファイルを対象として、日記のエントリーは除かれ
、30日以内に限定したアジェンダビューを作成します。

あなたは、他のプログラムで将来の進行過程を認める方法で、アジェンダの情報を絞
り込むことができます。詳細は@ref{アジェンダ情報の抽出},のノートの情報を参照して
ください。


@node アジェンダのカラム表示, , アジェンダビューの出力, アジェンダビュー
@section Using column view in the agenda
@cindex column view, in agenda
@cindex agenda, column view

カラムビュー(@pxref{カラムビュー})は、Org-modeファイルの階層構造の中に組み込まれて
いる属性を見たり編集したりするために通常は使われます。エントリーがある評価基
準で収集されているアジェンダから、カラムビューを使用することは大変便利です。

@table @kbd
@orgcmd{C-c C-x C-c,org-agenda-columns}　アジェンダの中でカラムビューに切り替
えます。
@end table

この属性がどのようなものか理解するために、アジェンダのエントリーはもはや適切
なアウトラインの環境ではなくなることを理解することが重要です。これによって以
下のようなことが生じます。

@enumerate
@item
@vindex org-columns-default-format
@vindex org-overriding-columns-format
Org-modeでは、どの@code{COLUMNS}のフォーマットを使用するか、決定する必要が
あります。アジェンダの中のエントリーは、異なるファイルから集められると
いうことと、ファイルが異なると@code{COLUMNS}のフォーマットも異なるというこ
とから、このことは些細な問題であるとはいえないのです。Org-modeは最初に
、@code{org-overriding-columns-format}変数がカレントで設定されているかどう
か、またそこからフォーマットを取り出すことができるかどうかチェックしま
す。一方、アジェンダの最初のアイテムに関連したフォーマットを使用するか
、もしもそのアイテムが特別なフォーマット（属性もしくはファイルの中で定
義された）を持たないならば、@code{org-columns-default-format}を使用します。
@item
@cindex 特別なプロパティ（CLOCKSUM）
もしも、どれかカラムに要約形式(@pxref{カラム・アトリビュート})が定義されてい
るならば、アジェンダでカラムビューに切り替えるときに、すべての関連する
アジェンダファイルを確認して、この属性の計算の更新を確実に行います。こ
のことは、特別な@code{CLOCKSUM}の属性が真であると設定されているということで
す。Org-modeはアジェンダの中で表示された値を合計するでしょう。一日／週
間アジェンダの中で、合計は1日をカバーしています。他のビューでは、ブロ
ック全体をカバーするのです。アジェンダでは同じエントリーを@emph{２度}表示し
たり（例えばスケジュールと期限というように）、同じ階層（例えば@emph{親}と
@emph{子}）から@emph{２つ}のエントリーを表示したりするかもしれない、ということを
理解することは重要なことです。これらの場合、アジェンダの中での要約は、
いくつかの値が二重にカウントされるという間違った結果を導く可能性があります。
@item
アジェンダの中のカラムビューが、@code{CLOCKSUM}を表示するときは、このアイテ
ムのためにいつでも時間計測全体に対応します。そのため1日/週間アジェンダ
において、カラムビューでリスト化された時間合計は、カレントのビューの外
側の時間から発生することになるかもしれません。この機能によって、あるタ
スクについて、計画された総工数を1つのカラムにリストにして、その値を比
較することができるので、優位性を持ちます。この機能はアジェンダのカラム
ビューにおける重要なアプリケーションのひとつです。もしもあなたが表示さ
れている期間の中の作業時間についての情報を得たいならば、clock
table mode（@kbd{R}をアジェンダの中で入力する）を使用してください。
@end enumerate


@node マークアップ, エクスポート, アジェンダビュー, Top
@chapter リッチエクスポートのためのマークアップ

Org-modeの文書をエクスポートする時、エクスポート機能は文書の構造をできるだけ
正確に反映しようとします。HTMLや@LaTeX{}、DocBook、その他のリッチフォーマット等
のエクスポートの対象について、Org-modeは文書をリッチエクスポートに変換するル
ールを持ちます。このセクションはOrg-modeのバッファで使われるマークアップのル
ールについて説明します。

@menu
* 構造化されたマークアップの要素::  エクスポートでわかる基本的な構造
* 画像とテーブル::    テーブルと画像は含まれているだろう
* リテラルの例::       特別なフォーマットのためのソースコードの例
* ファイルの挿入::    文書に別のファイルを添付する
* エントリのインデックス::  インデックスを作る
* マクロ置換::          複雑なアウトプットを作成するためにマクロを使用する
* LaTeXの組み込み::     LaTeXはorg-modeの文書では自在に使用することができる
@end menu

@node 構造化されたマークアップの要素, 画像とテーブル, マークアップ, マークアップ
@section 構造化されたマークアップの要素

@menu
* ドキュメントタイトル::  どこからタイトルが取り出されるか
* 見出しとセクション::  文書の構造はエクスポートの設定で確認できる
* 目次::                   コンテンツのテーブルの条件と場所
* 冒頭のテキスト::    最初の見出しより前に書かれた文
* リスト::                リスト
* パラグラフ::          パラグラフ
* フットノートのマークアップ::  脚注
* 強調と等幅::          太字、イタリック、その他
* 水平線のルール::    線を作る
* コメント行::          何がエクスポートされないか
@end menu

@node ドキュメントタイトル, 見出しとセクション, 構造化されたマークアップの要素, 構造化されたマークアップの要素
@subheading ドキュメントタイトル
@cindex 文書のタイトル、マークアップのルール

@noindent
エクスポートされた文書のタイトルは専用の行で設定されます。

@cindex #+TITLE
@example
#+TITLE: これは文書のタイトルです。
@end example

@noindent
もしこの行が存在しなければ、タイトルはバッファ中の最初の空でない、コメントで
ない行を用います。もしまだ何も存在していない、またはあなたが最初の見出しより
前のテキストをエクスポートをしないよう設定していたら、タイトルは拡張子無しの
ファイル名となります。

@cindex プロパティ、EXPORT_TITLE
もしあなたがリージョンでマークしたサブツリーのみをエクスポートしているなら、
サブツリーの見出しは文書のタイトルとなるでしょう。もしサブツリーが
@code{EXPORT_TITLE}プロパティを持っているなら、そのプロパティの値が優先して用いら
れるでしょう。

@node 見出しとセクション, 目次, ドキュメントタイトル, 構造化されたマークアップの要素
@subheading 見出しとセクション
@cindex 見出しとセクション、マークアップのルール

@vindex org-export-headline-levels
@ref{ドキュメントの構造}で説明されているような文書のアウトライン構造は
エクスポートされた文書のセクションの定義の基準を形成しています。しかしながら
、アウトライン構造はまた(例えば)タスクのリストとしても使われているので、最初
の3アウトラインレベルのみ見出しとして使われます。

@cindex #+OPTIONS
@example
#+OPTIONS: H:4
@end example

@node 目次, 冒頭のテキスト, 見出しとセクション, 構造化されたマークアップの要素
@subheading 目次
@cindex 目次、マークアップのルール

@vindex org-export-with-toc
目次は通常ファイルの最初の見出しの前に直接挿入されます。もしあなたが異なる場
所に目次を挿入したいのなら、その場所に@code{[TABLE-OF-CONTENTS]}文字列を書いてく
ださい。目次の深さはデフォルトでは見出しのレベルの数と同じですが、
@code{org-export-with-toc}変数を設定するか、ファイルに以下のように書くことによっ
て、あなたはこれより小さな値に変更することも、目次を完全に表示させないように
することも可能です。

@example
#+OPTIONS: toc:2          (目次に表示するレベルを2までとする)
#+OPTIONS: toc:nil        (目次を表示しない)
@end example

@node 冒頭のテキスト, リスト, 目次, 構造化されたマークアップの要素
@subheading 最初の見出しより前のテキスト
@cindex 最初の見出しより前のテキスト、マークアップのルール
@cindex #+TEXT

Org-modeは通常最初の見出しの前にテキストをエクスポートし、最初の行を文書のタ
イトルにします。テキストは完全にマークアップされているでしょう。もしあなたが
HTMLや@LaTeX{}、DocBookのような<リテラルを含めたい場合、独立したエクスポート機
構のセクションで説明されている特別な構造を使います。

@vindex org-export-skip-text-before-1st-heading
多くの人々は内部リンクの設定のためとそのために異なる方法でエクスポートされた
最初の見出しの前のテキストを制御する最初の見出しの前に空白を使うことを好みま
す。あなたは@code{orgexport-skip-text-before-1st-heading}変数を@code{t}にすることで設
定することができます。ファイル中に設定する場合、あなたは@samp{#+OPTIONS: skip:t}
とすることで同等の設定を行うことができます。

@noindent
もし、あなたがまだ最初の見出しの前にテキストを置きたいのであれば、@code{#+TEXT}構
造を使います:

@example
#+OPTIONS: skip:t
#+TEXT: このテキストは*最初の*見出しの前に置かれます
#+TEXT: [TABLE-OF-CONTENTS]
#+TEXT: このテキストは目次と最初の見出しの間に置かれます
@end example

@node リスト, パラグラフ, 冒頭のテキスト, 構造化されたマークアップの要素
@subheading リスト
@cindex リスト、マークアップのルール

@ref{エントリー中の階層構造}で説明されているプレーンリストは、バックエンドのリス
トに変換されます。多くのバックケンドがサポートしているのは記号付きリスト、番
号付きリスト、見出し付きリストです。

@node パラグラフ, フットノートのマークアップ, リスト, 構造化されたマークアップの要素
@subheading 段落、改行、引用
@cindex 段落、マークアップのルール

段落は最低1つの空白行で区切られます。もしあなたが強制的に段落の中で改行しな
いなら、@samp{\\}を行の末尾に書いてください。

リージョンで改行を保つためには、しかしそうでなければ通常のフォーマットが使わ
れるなら、あなたはフォーマット技法として使われるこの構文を使うことができます
。

@cindex #+BEGIN_VERSE
@example
#+BEGIN_VERSE
 Great clouds overhead
 Tiny black birds rise and fall
 Snow covers Emacs

     -- AlexSchroeder
#+END_VERSE
@end example

別の文書から一節を引用する時、段落の左右の余白を空けることが慣習となっていま
す。あなたは以下を用いることで引用をOrg-modeの文書に含めることができます:

@cindex #+BEGIN_QUOTE
@example
#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE
@end example

もしあなたがテキストを中央寄せにしたいなら、以下を使うことができます:
@cindex #+BEGIN_CENTER
@example
#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER
@end example


@node フットノートのマークアップ, 強調と等幅, パラグラフ, 構造化されたマークアップの要素
@subheading フットノートのマークアップ
@cindex 脚注、マークアップのルール
@cindex @file{footnote.el}

脚注は@ref{脚注}で説明されたように定義されていて、全てのバックエンドにエクスポー
トされます。Org-modeは同じノートに対しての複数の参照と異なるバックエンドをサ
ポートします。

@node 強調と等幅, 水平線のルール, フットノートのマークアップ, 構造化されたマークアップの要素
@subheading 強調と等幅

@cindex 下線のあるテキスト、マークアップのルール
@cindex 太字のテキスト、マーックアップのルール
@cindex 斜体のテキスト、マーックアップのルール
@cindex 文字通りのテキスト、マーックアップのルール
@cindex コードのテキスト、マークアップのルール
@cindex 取り消されたテキスト、マーックアップのルール
あなたは@b{*bold*}と@i{/italic/}、_underlined_、@code{=code=}、@code{~verbatim~}、そして必要な
ら@samp{+strile-through+}を単語に適用することができます。codeとverbatim文字列の中
のテキストはOrg-modeの明確な構文ではありません;
それはverbatimにエクスポートされます。

@node 水平線のルール, コメント行, 強調と等幅, 構造化されたマークアップの要素
@subheading 水平線のルール
@cindex 水平線、マーックアップのルール
少なくとも5文字のダッシュ文字のみで行成される線は水平線(HTMLでは@samp{<hr/>}、
@LaTeX{}では@code{\hrule})にエクスポートされます。

@node コメント行, , 水平線のルール, 構造化されたマークアップの要素
@subheading コメント行
@cindex コメント行
@cindex エクスポートされない部分
@cindex #+BEGIN_COMMENT

行頭の文字が@samp{#}から始まる行はコメントとして扱われ、エクスポートされません。
もしあなたがコメント行をインデントしたいのであれば、@samp{#+}から行を開始してくだ
さい。@samp{COMMENT}ワードを持つサブツリーは、サブツリー全体がエクスポートされま
せん。最後に、@samp{#+BEGIN_COMMENT}から@samp{END_COMMENT}で囲まれた範囲はエクスポート
されません。

@table @kbd
@kindex C-c ;
@item C-c ;
エントリー先頭のCOMMENTキーワードをトグルします。
@end table


@node 画像とテーブル, リテラルの例, 構造化されたマークアップの要素, マークアップ
@section 画像と表

@cindex 表、マークアップのルール
@cindex #+CAPTION
@cindex #+LABEL
Org-modeネイティブなテーブル(@pxref{テーブル})と@file{table.el}パッケージを用いたテーブ
ルの両方が適切にエクスポートされます。Org-modeの表では、最初の水平線の前の行
が表のヘッダ行となります。あなたはキャプションと相互参照の指定を表の直前に、
参照のための@code{\ref@{tab:basic-data@}}オブジェクトをテキストのどこかに書くこと
ができます。

@example
#+CAPTION: これは次の表(またはリンク)のキャプションです
#+LABEL:   tbl:basic-data
   | ... | ...|
   |-----|----|
@end example

@cindex インライン画像、マークアップのルール
多くのバックエンド(HTML、@LaTeX{}、DocBook)はエクスポートされた文書の中に直接画
像を挿入することができます。もし、例えば、@code{[[./img/a.jpg]]}のような説明部分
を持たない画像ファイルへのリンクがあるなら、Org-modeは画像の挿入を行います。
もしあなたが画像のキャプションや内部相互参照のラベルを定義したいなら、以下の
ように@code{#+CAPTION}と@code{#+LABEL}をリンクの前に書きます:

@example
#+CAPTION: これは次の画像(または表)のリンクのキャプションです。
#+LABEL:   fig:SED-HR4049
[[./img/a.jpg]]
@end example

あなたは画像に対する追加要素を定義するかもしれません。これはバックエンドの仕
様なので、さらに情報が必要なら独立したバックエンドについてのセクションを見て
ください。

@xref{リンクの扱い,画像リンクの議論}.

@node リテラルの例, ファイルの挿入, 画像とテーブル, マークアップ
@section リテラルの例
@cindex リテラルの例、マークアップのルール
@cindex コードラインのリファレンス、マークアップのルール

あなたはマークアップに依存しないリテラルの例を含めることができます。そのよう
な例に等幅のタイプセットがあり、それはソースコードやそれに似た例向きです。
@cindex #+BEGIN_EXAMPLE

@example
#+BEGIN_EXAMPLE
テキストファイルからの例。
#+END_EXAMPLE
@end example

そのようなブロックはインデントされたテキストをうまく整列させるためと、特にプ
レーンリスト構造(@xref{エントリー中の階層構造}.)のために@i{インデント}されるでしょう
。小さな例を使う時、それを簡単にするために、あなたはコロンとそれに続く空白か
らなる例の行を使うことができる。それらはコロンの前に空白を追加することもでき
ます。

@example
ここに例を書きます
   : テキストファイルからの例
@end example

@cindex ソースコードのフォーマット、マークアップのルール
もし例がソースコードなら、もしくはEmacsでフォントロックによりマークアップさ
れたテキストなら、あなたはEmacsバッファ@footnote{HTMLバックエンドに対しては、この作業
は自動的に行われます(Org-modeと一緒に配布されている@file{htmlize.el}のバージョン
1.34が必要です)。LaTeXの要塞化されたコードの塊はリスティングか、
@url{http://coe.google.com/p/minted, minted,}パッケージによってアーカイブされま
す。リスティングを使うには、@code{org-export-latex-listings}変数をオンにし、LaTeX
のヘッダにリスティングパッケージが含まれているようにします(例
: @code{org-export-latex-packages-alist}の設定と@:を使います)。色付きの出力を含む
設定のオプションについて、リスティングのドキュメントを見てください。mintedを
使うには、@url{http://pygemnts.org, pygemnts}プログタムをインストールする必要が
あり、@code{org-export-latex-minted}を追加で設定し、LaTeXのヘッダーにmitedパッケ
ージが含まれていることと@code{-shell-escape}オプションが@file{pdflatex}に引き継がれて
いる(@code{org-latex-to-pdf-process}を見てください)ことを確認します。}を要塞化す
るように要請することができます。あなたが例に色付けするために使うメジャーモー
ドの名前を指定することが必要な時、@samp{src}ブロックを使います:
@cindex #+BEGIN_SRC

@example
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
@end example

@code{example}と@code{src}スニペットでは、あなたは@code{BEGIN}の行の最後に@code{-n}を追加するこ
とで、例の行番号を表示することができます。もしあなたが@code{+n}とすると、前のスニ
ペットから現在のものに番号が引き継がれます。リテラルの例で、Org-modeは
@samp{(ref:name)}をラベルとして解釈し、@code{[[(name)]]}のような特別なリンクによりそこ
を参照することができます(i.e.@:
参照名は1つの括弧に囲まれています)。HTMLでは、対応するコード行をマウスオーバ
ーすると自動的にハイライト表示になり、少しクールです。

また、ソースコード@footnote{Org-modeの例で説明するのに便利なリンクに行番号を使う間、
@code{-k}を@code{-n -r}に追加することでソースコードのラベルを@i{維持}します。}からラベルを
@i{消去}するかどうかの切り替えのために@code{-r}を追加することもできます。@code{-n}で切り替
えると、リンクされるそれらのリファレンスはコードリスティングの行番号によって
ラベルを付けられ、そうでなければ括弧無しのラベルにリンクされます。

@example
#+BEGIN_SRC emacs-lisp -n -r
(save-excursion                  (ref:sc)
   (goto-char (point-min))       (ref:jump)
#+END_SRC
In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
jumps to point-min.
@end example

@vindex org-coderef-label-format
もし、ラベルの構文が言語の構文と衝突した場合、@code{-l}を使うことで
@samp{#+BEGIN_SRC pascal -n -r -l "((%s))"}のようにフォーマットを変更できます。
@code{org-coderef-label-format}変数を見てください。

HTMLはエクスポート時にテキストエリア,@xref{HTMLエクスポートでのテキストエリア}.と
することができます

@table @kbd
@kindex C-c '
@item C-c '
カーソル位置のソースコード例をそのネイティブモードで編集します。これは
ソースコードを一時バッファに表示し、切り替えることで働きます。あなたは
@kbd{C-c '}をもう一度押すことで編集を終了します@footnote{終了時、Org-modeによってア
ウトラインの見出しや特別なコメントと間違えられないようにするために、
@samp{*}か@samp{#}から始まる行はカンマが銭湯に追加されます。}。
編集されたバージョンはOrg-modeバッファ上の古いバージョンを置き換えます
。固定幅のリージョンは簡単にASCIIでイラストを書くための
@code{artist-mode}@footnote{@code{org-edit-fixed-width-region-mode}変数により、異なるモー
ドを選択することもできます。}を使うことで編集されます。空行でこのコマ
ンドを使うことで、新しい固定幅のリージョンを作成します。
@kindex C-c l
@item C-c l
@kbd{C-c '}によって作成した一時バッファでのソースコード例の編集中に
@code{org-store-link}の呼び出しはラベルを指示します。現在のバッファがユニー
クであることを確認し、現在の行の最後に@samp{(ref:label)}のように適切にフォ
ーマットされたものが挿入されます。ラベルは@samp{(label)}のようなリンクを記
憶し、@kbd{C-c C-l}検索する。
@end table


@node ファイルの挿入, エントリのインデックス, リテラルの例, マークアップ
@section ファイルの挿入
@cindex ファイルのインクルード、マークアップのルール

エクスポート中、あなたは別のファイルの内容をインクルードすることができます。
例えば、@file{.emacs}をインクルードするなら、あなたは次のようにします:
@cindex #+INCLUDE

@example
#+INCLUDE: "~/.emacs" src emacs-lisp
@end example
@noindent
2つ目のオプションは(e.g.@:
@samp{quote}や@samp{example}、@samp{src})のようなマークアップで、3つ目はマークアップが@samp{src}
ならコンテンツの言語を表します。マークアップはオプションです;
もし与えられなければ、Org-modeフォーマットのテキストと仮定される。インクルー
ドの行は最初の行とそれに続く行のプレフィクスの指定のための追加キーワードパラ
メーターの@code{:prefix1}と@code{:prefix}を、Org-modeのコンテンツを指定したレベル下げ
るための@code{:minilevel}を、同様に選択したマークアップ固有のオプションを持ちます
。例えば、ファイルをインクルードするには:

@example
#+INCLUDE: "~/snippets/xx" :prefix1 "   + " :prefix "     "
@end example

@code{:line}パラメーターを使うことで、ファイルの指定した範囲の行のみをインクルー
ドすることができます。範囲外の行はインクルードされません。範囲の開始と、また
は終了は明らかにデフォルトを使いません。

@example
#+INCLUDE: "~/.emacs" :lines "5-10"   @r{Include lines 5 to 10, 10 excluded}
#+INCLUDE: "~/.emacs" :lines "-10"    @r{Include lines 1 to 10, 10 excluded}
#+INCLUDE: "~/.emacs" :lines "10-"    @r{Include lines from 10 to EOF}
@end example

@table @kbd
@kindex C-c '
@item C-c '
ポイント位置のインクルードされたファイルに移動します。
@end table

@node エントリのインデックス, マクロ置換, ファイルの挿入, マークアップ
@section エントリのインデックス
@cindex 公開のためのインデックスのエントリ

あなたは公開した文書のインデックスに用いるエントリーを規定することができます
。これは@code{#+INDEX}から始まる行により設定します。感嘆符を含むエントリーはサブ
アイテムを作るでしょう。さらなる情報を見るには@ref{インデックスの生成}を参照して
ください。

@example
* Curriculum Vitae
#+INDEX: CV
#+INDEX: Application!CV
@end example




@node マクロ置換, LaTeXの組み込み, エントリのインデックス, マークアップ
@section マクロ置換
@cindex エクスポート中のマクロによる置き換え
@cindex #+MACRO

あなたは次のようにしてテキストスニペットを定義することができます。

@example
#+MACRO: name   replacement text $1, $2 are arguments
@end example

@noindent
これは
@code{@{@{@{name(arg1,arg2)@}@}@}}と書くことでドキュメントのどこからも(コードの例
からも)参照されます。マクロの定義に加えて、@code{@{@{@{title@}@}@}}、
@code{@{@{@{author@}@}@}}などは@code{#+TITLE:}や@code{#+AUTHOR:}や他の似たような行によりセ
ットされる情報を参照します。また、@code{@{@{@{date(@var{FORMAT})@}@}@}}と
@code{@{@{@{modification-time(@var{FORMAT})@}@}@}}は現在の日付とファイルがエクスポー
トされて変更された時刻をそれぞれ参照します。@var{FORMAT}は@code{format-time-string}で
認識した文字列をフォーマットします。

マクロ展開はエクスポート中に行われ、一部の人々は複雑なHTMLコードの構築に用い
る。


@node LaTeXの組み込み, , マクロ置換, マークアップ
@section Embedded @LaTeX{}
@cindex @TeX{}の解釈
@cindex @LaTeX{}の解釈

プレーンなASCIIはほとんどの場合ノートをとるのに十分です。例外は数学の記号や
時々出てくる数式を必要とする科学に関するノートのようなものです。
@LaTeX{}@footnote{@LaTeX{}はドナルド・クヌースの@TeX{}システムを基としたマクロシステムです。
``@LaTeX{}''で説明される多くの機能は@TeX{}からのものですが、違いはそれほどありませ
ん}は科学に関する文書の組版に広く使われています。多くのacademicsは@LaTeX{}のソ
ースコードの読み書きに使われていて、すぐに多くのエクスポートバックエンドに対
応できるため、Org-modeは@LaTeX{}コードのファイルへの組込みをサポートしています
。

@menu
* 特殊記号::             ギリシャ文字や他の記号
* 下付き文字と上付き文字::  テキストを上付き／下付きにする簡単な構文
* LaTeXのコード片::     複雑な数式を簡単に作成する
* LaTeXコード片のプレビュー::  このスニペットは何と似ているか
* CDLaTeXモード::         数式の入力をスピードアップする
@end menu

@node 特殊記号, 下付き文字と上付き文字, LaTeXの組み込み, LaTeXの組み込み
@subsection 特殊記号
@cindex 数学記号
@cindex 特殊記号
@cindex @TeX{}マクロ
@cindex @LaTeX{}の断片、マークアップのルール
@cindex HTMLのエントリ
@cindex @LaTeX{}のエントリ

あなたは@LaTeX{}マクロをギリシャ文字を表す@samp{\alpha}や矢印を表す@samp{\to}のような特殊
記号の挿入に使うことができます。これらのマクロは補完が可能で、@samp{\}まで入力し
、その後に何文字か入力して@kbd{M-@key{TAB}}を押すことで補完が可能です。@LaTeX{}のコード
とは違い、Org-modeは数学の区切り文字を囲まないようなマクロも使うことができま
す。以下に例を挙げます:

@example
Angles are written as Geek letters \alpha, \beta and \gamma.
@end example

@vindex org-entities
エクスポート時、これらのシンボルはエクスポート先のネイティブフォーマットに変
換されます。HTMLでは@code{\alpha}のような文字列は@code{&alpha;}にエクスポートされ、
@LaTeX{}では@code{$\alpha$}となります。同様に、@code{\nbsp}はHTMLでは@code{&nbsp;}に、@LaTeX{}で
は@code{~}となります。もしあなたが記号を単語の中に含めたいのであれば、次のように
します:
@samp{\Aacute@{@}stor}。

非常に多くのエンティティが提供されていて、HTMLと@LaTeX{}からその名前を引き継い
でいます;完全なリストは@code{org-entities}変数を見てください。@samp{\-}はシャイなハイ
フンとして扱われていて、@samp{--}や@samp{---}、@samp{...}は異なる長さのハイフンかドットの集
合を作成するための全て特殊コマンドに変換されます。

もしあなたがUTF-8文字でエンティティを表示したいのなら、以下のコマンド
@footnote{あなたは @code{org-pretty-entities}変数または@code{#+STARTUP}オプション
@code{entitiespretty}にデフォルトを設定することができます}:

@table @kbd
@kindex C-c C-x \
@item C-c C-x \
エンティティのUTF-8での表示をトグルします。これはバッファの内容を変更
せず、UTF-8の文字を表示するためにオーバレイを用いています。
@end table

@node 下付き文字と上付き文字, LaTeXのコード片, 特殊記号, LaTeXの組み込み
@subsection 下付き文字と上付き文字
@cindex 下付き文字
@cindex 上付き文字

@LaTeX{}と同じように、@samp{^}と@samp{_}が下付き文字と上付き文字を示しています。さらに、
それらはmath-modeにの区切り文字に組込まずに使うことができます。ASCIIテキスト
の可読性の向上のため、複数文字の下付き文字と上付き文字を波括弧で囲む必要はあ
りません(囲んでもかまいませんが)。例

@example
The mass of the sun is M_sun = 1.989 x 10^30 kg.  The radius of
the sun is R_@{sun@} = 6.96 x 10^8 m.
@end example

@vindex org-export-with-sub-superscripts
上付きテキスト、下付きテキストの説明を避けるため、あなたはバックスラッシュを
つけた@samp{^}と@samp{_}を引用できます:
@samp{\^}と@samp{\_}です。異なる文脈でしばしば使われるアンダーラインのテキストを書くな
ら、常にこれらの下付き文字として解釈するOrg-modeの慣習はあなたのやり方で得る
ことができます。この慣習を変更するには@code{org-export-with-sb-superscripts}変数
を設定するか、ファイルに次のように書いてください。

@example
#+OPTIONS: ^:@{@}
@end example

@noindent
この設定を有効にした場合、@samp{a_b}は下付き文字として解釈されず、@samp{a_@{b@}}とする
ことで解釈されます。

@table @kbd
@kindex C-c C-x \
@item C-c C-x \
さらにUTF-8のエンティティを見るため、このコマンドは下付き文字と上付き
文字をWYSISYMで形成する。
@end table

@node LaTeXのコード片, LaTeXコード片のプレビュー, 下付き文字と上付き文字, LaTeXの組み込み
@subsection @LaTeX{}の断片的なコード
@cindex @LaTeX{}の断片的なコード

@vindex org-format-latex-header
シンボルと上付き、下付き、完全な式を越えることが必要です。Org-modeは@LaTeX{}の
数式を含むことができ、各エクスポート先への変換もサポートしています。@LaTeX{}に
エクスポートするとき、コードは明らかに残っています。HTMLへエクスポートすると
き、Org-modeは数式@footnote{}の処理と描画のために
@uref{http://www.mathjax.org, MathJax library}
(@pxref{HTMLエクスポートでの数式フォーマット})を呼び出します。最後に、数式表現はブ
ラウザかDocBook文書で描画可能な画像@footnote{これを行うには、あなたのシステムに@LaTeX{}
をインストールする必要があります。そしてまた、
@url{http://sourceforge.net/projects/dvipng/}で入手できる@file{dvipng}プログラムも必
要です。}へと処理されます。

@LaTeX{}のコード片は、特別なマークは全く必要ありません。以下のコード片は@LaTeX{}の
ソースコードとして知られています:
@itemize @bullet
@item
あらゆる種類の環境@footnote{@file{MathJax}が使われている時、@file{MathJax}によって認識さ
れている環境が処理されます。@file{dvipng}を画像の生成に用いる時、@LaTeX{}環境
が扱われます。}。唯一必要なことは@code{\begin}文は空白のみがある行に表示さ
れることです。
@item
通常の@LaTeX{}の数学の区切り文字内部のテキスト。流通仕様との衝突を避ける
ために、囲まれたテキストに最大2つの改行が含まれている場合、@samp{$}文字は数
学区切り文字のみとして認識され、@samp{$}文字がの間に空白がない、そして
@end itemize

@noindent
例：

@example
\begin@{equation@}                          % arbitrary environments,
x=\sqrt@{b@}                                % even tables, figures
\end@{equation@}                            % etc

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt@{2@} $$ or \[ a=-\sqrt@{2@} \].
@end example

@noindent
@vindex org-format-latex-options
もしあなたが他の目的にASCIIの区切り文字が必要なら、@LaTeX{}コンバータに邪魔され
えることを望まない文字を除外するために@code{org-format-latex-options}オプションを
設定することができます。

@vindex org-export-with-LaTeX-fragments
@LaTeX{}の処理は@code{org-export-with-LaTeX-fragments}変数を設定することができます。
デフォルトの設定は@code{t}で、HTMLには@file{MathJax}を用い、DocBookとASCII、@LaTeX{}では
処理しません。あなたはこの変数をファイルの冒頭部分に書くことで設定することも
できます:

@example
#+OPTIONS: LaTeX:t          @r{Do the right thing automatically (MathJax)}
#+OPTIONS: LaTeX:dvipng     @r{Force using dvipng images}
#+OPTIONS: LaTeX:nil        @r{Do not process @LaTeX{} fragments at all}
#+OPTIONS: LaTeX:verbatim   @r{Verbatim export, for jsMath or so}
@end example

@node LaTeXコード片のプレビュー, CDLaTeXモード, LaTeXのコード片, LaTeXの組み込み
@subsection LaTeXコード片のプレビュー
@cindex LaTeXのコード片、プレビュー

もしあなたが@file{dvipng}をインストールしているのであれば、@LaTeX{}のコード片は出力
された組版において画像として処理されます:

@table @kbd
@kindex C-c C-x C-l
@item C-c C-x C-l
ポイント位置の@LaTeX{}コード片の画像プレビューの提供とソースコード上のオ
ーバレイ。もしポイント位置にコード片がないのであれば、現在のエントリ(2
つの見出しの間)の全てのコード片を処理します。前置引数を付けて呼ばれた
時は、サブツリー全体を処理します。前置引数を2つ付けて呼ばれた時、また
はカーソルが最初の見出しの前にある時は、バッファ全体を処理します。
@kindex C-c C-c
@item C-c C-c
オーバレイされたプレビュー画像を消去します。
@end table

@vindex org-format-latex-options
プレビューの外観を変更するために、あなたは@code{org-format-latex-optins}変数をカ
スタマイズすることができます。とりわけ、@code{:scale}(そしてHTMLへのエクスポート
では@code{:html-scale})プロパティは画像のプレビューサイズの調整に使われます。

@node CDLaTeXモード, , LaTeXコード片のプレビュー, LaTeXの組み込み
@subsection CDLa@TeX{}を数学の入力に使う
@cindex CDLa@TeX{}

CDLa@TeX{}モードは環境や数学テンプレートの挿入をスピードアップするためにAUC@TeX{}に
似たメジャーモードである@LaTeX{}モードと併用して通常使われるマイナーモードです
。Org-modeでは、あなたはCDLa@TeX{}モードのいくつかの機能を使用できます。あなたは
@url{http://www.astro.uva.nl/~dominik/Tools/cdlatex}から@file{cdlatex.el}と
@file{texmathp.el}(最近AUC@TeX{}に追加されました)をインストールする必要があります。
Org-mode中ではCDLa@TeX{}モード自身は使わないでください、代わりにOrg-modeに一部で
ある、より軽量なバージョンの@code{org-cdlatex-mode}を使ってください。
@code{M-x org-cdlatex-mode}をカレントバッファで実行して有効にするか、全ての
Org-modeファイルで有効するために次の設定を行います:

@lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
@end lisp

このモードが有効である時、以下の機能が提供されます(詳細はCD@LaTeX{}モードのドキ
ュメントを参照してください)::
@itemize @bullet
@kindex C-c @{
@item
@kbd{C-c @{}による環境テンプレートの挿入。
@item
@kindex @key{TAB}
カーソルが@LaTeX{}のコード片@footnote{カーソルがコード片の中にあるときにOrg-modeは
テストを行うためのメソッドを持ちます。詳細は
@code{org-inside-LaTeX-fragment-p}関数のドキュメントを参照してください。}の
中にある場合、@key{TAB}キーはテンプレートの展開を行います。例えば、@key{TAB}は
@code{fr}を@code{\frac@{@}@{@}}に展開しカーソルを最初の括弧に移動します。もう一
度@key{TAB}を押すと2つ目の括弧にカーソルが移動します。コード片の外だと、
@key{TAB}は行の先頭にある環境の略語を展開します。例えば、もしあなたが行頭
に@samp{equ}と書いていて@key{TAB}を押すと、この略語は@code{equation}環境に展開されま
す。全ての略語を見るには、@kbd{M-x cdlatex-command-help}をタイプしてくださ
い。
@item
@kindex _
@kindex ^
@vindex cdlatex-simplify-sub-super-scripts
@LaTeX{}コード片の中で@kbd{_}と@kbd{^}を押すと、それらの文字が括弧のペアと一緒に
挿入されます。もしあなたが@key{TAB}を括弧から抜け出すために使うなら、また
括弧が1文字の文字かマクロのみを囲っているなら、それらは再び消去されま
す(@code{cdlatex-simplify-sub-super-script}変数に依存します)。
@item
@kindex `
@LaTeX{}のコード片以外の文字に続いて@kbd{TAB}を押すと、数学のマクロが挿入され
ます。もしあなたがバッククォートを押して1.5秒以上待つと、ヘルプウィン
ドウがポップアップします。
@item
@kindex '
別の文字に続いてシングルクォート@kbd{'}を押すと、強調やフォントでポイント
前のシンボルが変更されます。もしシングルクォートを入力した後1.5秒以上
待つと、ヘルプウィンドウがポップアップします。文字の変更は@LaTeX{}コード
片の中でのみ働きます;
それ以外ではクォートは通常通りの働きをします。
@end itemize

@node エクスポート, 公開, マークアップ, Top
@chapter エクスポート
@cindex エクスポート

org-modeのドキュメントは様々なフォーマットにエクスポートすることができます。
ノートを共有し印刷するには
ASCII形式でエクスポートすることでOrgファイルの読みやすく、シンプルなものが得
られます。
HTMLのエクスポートではノートをウェブに公開できるようになりますし,
XOXOフォーマットは他の様々なアプリケーションでやりとりするうえで確かな基礎と
なります。 @LaTeX{}
のエクスポートでは、org-modeとその構造化された編集機能を使って、容易に
 @LaTeX{}
のファイルを出力することができます。DocBookのエクスポートでは、Orgファイルを
DocBookのツールを使った様々なフォーマットに変換することが可能です。プロジェ
クトの管理では、TaskJuggler形式のエクスポートを使って、ガントリソースチャー
トを作成することができます。デッドラインや予約のような時間と関連のあるエント
リーをiCalのようなデスクトップカレンダーに取り込むために
org-modeはiCalendar形式で抽出することもできます。現在、Org-modeはエクスポー
トのみをサポートしており、他の異なるフォーマットからインポートすることはでき
ません。

org-modeは、 @code{transient-mark-mode} がオンの時(Emacs
23ではデフォルト)、は選択したリージョンをエクスポートをすることができます。

@menu
* 選択エクスポート::  タグを使ってツリーを選択したり排除したりする
* エクスポートオプション::  ファイル毎のエクスポート設定
* エクスポート用コマンド選択画面::  どのようにエクスポートのコマンドにアクセ
スするか
* ASCII/Latin-1/UTF-8エクスポート::  文字コードの変換を伴う通常のファイルへ
のエクスポート
* HTMLのエクスポート::  HTMLへのエクスポート
* LaTeXとPDFエクスポート::  @LaTeX{}へのエクスポート、そしてPDFへ変換のプロセス
* DocBookエクスポート::  DocBookへのエクスポート
* TaskJugglerエクスポート::  TaskJugglerへのエクスポート
* Freemindエクスポート::  Freemindのマインドマップへのへエクスポート
* XOXOエクスポート::   XOXOへのエクスポート
* iCalendarエクスポート::  iCalendar形式へのエクスポート
@end menu

@node 選択エクスポート, エクスポートオプション, エクスポート, エクスポート
@section 選択エクスポート
@cindex エクスポート。タグによる選択

@vindex org-export-select-tags
@vindex org-export-exclude-tags
エクスポートしたいドキュメントのある部分を選択、または除外する時にタグを使う
ことができます。 その挙動は、
@code{org-export-select-tags} と @code{org-export-exclude-tags}
の二つの変数により決まります。

org-modeはまず始めに @emph{select} タグがバッファにないかチェックします。 あった
場合は,
タグがない全てのツリーは除外されます。もし選択したツリーがサブツリーだった場
合、それより上の階層はエクスポートされるものとして選択されますが,
それより下の階層は選択されません。

@noindent
もし、選択されたタグがなかった場合, バッファにある全ての内容がエクスポートさ
れるものとして選択されるでしょう。

@noindent
最後に,  @emph{exclude} タグでマークされていない全てのサブツリーはエクスポートバ
ッファから除かれるでしょう。

@node エクスポートオプション, エクスポート用コマンド選択画面, 選択エクスポート, エクスポート
@section エクスポートオプション
@cindex エクスポートのオプション

@cindex 補完、オプションのキーワード
エクスポートする際にはバッファにある特別な行が読みこまれます。 その行には追
加的な情報が含まれており、ファイルの中でどこにでも書くことができます。
@kbd{C-c C-e t} と入力することで、バッファにそのような行をセットで挿入することが
できます。それぞれの行で @samp{#+}
と入力した後に @kbd{M-@key{TAB}} による補完を行ない、 (@pxref{補完})
キーワードが正しいか、確認してみると良いでしょう。エクスポートと関連のない、
バッファ内の設定の概要については @ref{バッファ内での変数制御}
を参照してください。特に、 @code{#+SETUPFILE}
を使うことによって含めることができる別のファイルの中でよく使われる(エクスポ
ートの)オプションを指定できることに注意してください

@table @kbd
@orgcmd{C-c C-e t,org-insert-export-options-template}
エクスポートオプションのテンプレートを挿入します。下の例を見てください。
@end table

@cindex #+TITLE
@cindex #+AUTHOR
@cindex #+DATE
@cindex #+EMAIL
@cindex #+DESCRIPTION
@cindex #+KEYWORDS
@cindex #+LANGUAGE
@cindex #+TEXT
@cindex #+OPTIONS
@cindex #+BIND
@cindex #+LINK_UP
@cindex #+LINK_HOME
@cindex #+EXPORT_SELECT_TAGS
@cindex #+EXPORT_EXCLUDE_TAGS
@cindex #+XSLT
@cindex #+LATEX_HEADER
@vindex user-full-name
@vindex user-mail-address
@vindex org-export-default-language
@example
#+TITLE:       表示されるタイトル (デフォルトはバッファ名)
#+AUTHOR:      著者 (デフォルトは @code{user-full-name} の値)
#+DATE:         @code{format-time-string} で解釈される固定された日付の文字列
#+EMAIL:       彼/彼女のメールアドレス(デフォルトは @code{user-mail-address} の値
)
#+DESCRIPTION: ページの説明, e.g.@: XHTMLのメタタグで使われる。
#+KEYWORDS:    ページのキーワード, e.g.@: XHTMLのメタタグで使われる。
#+LANGUAGE:    HTMLで指定される言語
 e.g.@: @samp{en} (@code{org-export-default-language})
#+TEXT:        冒頭に挿入される説明的な文章
#+TEXT:        複数の行に書くことができます。
#+OPTIONS:     H:2 num:t toc:t \n:nil @@:t ::t |:t ^:t f:t TeX:t ...
#+BIND:        lisp-var lisp-val, e.g.@:: org-export-latex-low-levels itemize
               @r{これらを確認するか, @code{org-export-allow-BIND} を設定すること}
#+LINK_UP:     出力したページにおける ``up'' のリンク先
#+LINK_HOME:   出力したページにおける ``home'' のリンク先
#+LATEX_HEADER: LaTeXのヘッダーで使われる \usepackage@{xyz@} のような余分な
行
#+EXPORT_SELECT_TAGS:   エクスポートするツリーを示すタグ
#+EXPORT_EXCLUDE_TAGS:  エクスポートから除外するツリーを示すタグ
#+XSLT:        FOファイルを生成するのにDocBookのエクスポート機能が使うXSLTの
スタイルシート
@end example

@noindent
OPTIONS行は 以下のようなエクスポートの設定を示すコンパクトな式です。
 @footnote{もし、このように多くのオプションを設定したい時は, それぞれオプション行を作
りことができます。}
@cindex 見出しの階層
@cindex 章の番号
@cindex 目次
@cindex 改行の維持
@cindex HTMLの引用タグ
@cindex 固定幅の段落
@cindex tables
@cindex 上付き、下付き文字を示す @TeX{} のようなシンタックス
@cindex footnotes
@cindex 特別な文字列
@cindex 強調されたテキスト
@cindex @TeX{}マクロ
@cindex @LaTeX{}の断片的なコード
@cindex 著者の情報、エクスポートの中で
@cindex 時間の情報、エクスポートの中で
@example
H:         @r{エクスポートする見出しの階層数}
num:       @r{セクション番号の有無}
toc:       @r{目次の有無, または階層数の上限 (整数)}
\n:        @r{改行を維持するかどうか (うまく動作しない)}
@@:         @r{HTMLの引用タグの有無}
::         @r{固定幅の段落の有無}
|:         @r{表の有無}
^:         @r{上付き、下付き文字を示す @TeX{} のようなシンタックスの有無}
           @r{ "^:@{@}" は @code{a_@{b@}} 解釈されるが、}
           @r{簡潔な @code{a_b} はそのままとなるでしょう。}
-:         @r{特別な文字列を変換するかどうか}
f:         @r{this[1] のような脚注を用いるかどうか}
todo:      @r{TODOキーワードを出力した文字列に含めるかどうか}
pri:       @r{クッキーを優先するかどうか}
tags:      @r{タグの有無, @code{not-in-toc} となるかもしれません。}
<:         @r{DEADLINESのような時間/日付の有無}
*:         @r{強調テキストの有無(太字, イタリック, アンダーライン)}
TeX:       @r{テキスト中のシンプルな @TeX{} マクロの有無 }
LaTeX:     @r{ @LaTeX{} 出力の設定  デフォルトは @code{auto}}
skip:      @r{最初見出しの前にある文章をスキップするかどうか}
author:    @r{著者の名前/e-mailを出力するかどうか}
email:     @r{著者のe-mailを出力するかどうか}
creator:   @r{作者を出力するかどうか}
timestamp: @r{作成した日付を出力するかどうか}
d:         @r{drawerを出力するかどうか}
@end example
@noindent
これらのオプションはHTML、 @LaTeX{} の両方のエクスポートに影響します。 @code{TeX} と
 @code{LaTeX}
のオプションを除き @LaTeX{} のエクスポートをするのに、それぞれ @code{t} 、または
 @code{nil} となります。

 @code{org-export-html-pre/postamble} を @code{t} とするとHTMLにエクスポートする時に
@code{author} 、 @code{email} 及び @code{creator} の値は上書きされるでしょう。 代わりに
@code{org-export-html-pre/postamble-format} が用いられます。

このようなオプションの初期値は変数のセットで与えられます。 そのような変数は
、OPTIONSのキーと公開するキーにも対応しています。
(@pxref{プロジェクトのリスト}), @code{org-export-plist-vars} の定数を見てください。

エクスポートのコマンドを呼びだす前に、 @kbd{C-c @@} で選択した単一のサブツリーを
エクスポートする時、そのサブツリーは、
@code{EXPORT_FILE_NAME} 、 @code{EXPORT_TITLE} 、 @code{EXPORT_TEXT} 、
@code{EXPORT_AUTHOR} 、 @code{EXPORT_DATE} 、 そして @code{EXPORT_OPTIONS}
プロパティでエクスポートの設定を無視することができます。

@node エクスポート用コマンド選択画面, ASCII/Latin-1/UTF-8エクスポート, エクスポートオプション, エクスポート
@section エクスポート用コマンド選択画面
@cindex コマンド選択画面、エクスポートコマンドのための

全てのエクスポートコマンドはエクスポートコマンド選択画面から選ぶことができま
す。
コマンド選択画面では、コマンドを特定するための追加的なキーの入力を促されます
。通常、ファイルの全ての内容がエクスポートされますが、もしアクティブなリージ
ョンに一つのアウトラインツリーが含まれていた場合,
まず、見出しがドキュメントのタイトルとして扱われ、サブツリーがエクスポートさ
れます。

@table @kbd
@orgcmd{C-c C-e,org-export}
@vindex org-export-run-in-background
エクスポート、または公開のコマンド選択画面です。エクスポート、または公
開のコマンドを起動するのに必要なキーがヘルプウィンドウに表示されます。
前置引数として、入力すると、直接エクスポート機能となります。二重の前置
引数 @kbd{C-u C-u}
を入力することで、コマンドは別のEmacsプロセスにおいてバックグラウンド
で実行されます。@footnote{このような挙動をデフォルトにするには、
 @code{org-export-run-in-background}変数を設定してください
.}.  @orgcmd{C-c C-e v,org-export-visible} @kbd{C-c C-e} のように動作しますが、
今見えている文章だけがエクスポートされます。
(i.e.@: アウトライン表示により、隠されていない文章
).  @orgcmd{C-u C-u C-c C-e,org-export}
@vindex org-export-run-in-background
エクスポート機能が呼ばれますが、 @code{org-export-run-in-background} の設定
と逆の挙動となります。 i.e.@:
動いていないバックグラウンドプロセスを呼びだしたり, 現在のEmacsのプロ
セスで強制的に実行したりします。
@end table

@node ASCII/Latin-1/UTF-8エクスポート, HTMLのエクスポート, エクスポート用コマンド選択画面, エクスポート
@section ASCII/Latin-1/UTF-8エクスポート
@cindex ASCII形式へのエクスポート
@cindex Latin-1でのエクスポート
@cindex UTF-8でのエクスポート

ASCII形式へのエクスポートは、org-modeのファイルをASCIIのみが含まれる、シンプ
ルで読みやすい形に書き出します。Latin-1及びUTF-8でのエクスポートでは特殊な文
字やシンボルをそれらのエンコードで出力します。

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e a,org-export-as-ascii}
@cindex プロパティ、EXPORT_FILE_NAME
ASCII形式のファイルをエクスポートします。 Orgファイルを @file{myfile.org}
だとすると、ASCII形式のファイルは
@file{myfile.txt} となるでしょう。 そのファイルは警告なしに上書きされます。
もしアクティブなリージョン
@footnote{@code{transient-mark-mode} が有効である必要があります。} があった場合,
そのリージョンのみがエクスポートされます。 選択したリージョンが一つの
ツリー @footnote{現在のサブツリーを選択するには、 @kbd{C-c @@} と入力してください。
}を含んでいた場合、そのツリーの見出しがドキュメントのタイトルとなるで
しょう. 見出しがあるか、または
@code{EXPORT_FILE_NAME} プロパティを継承していた場合、 エクスポートする際に
はその名前が使われるでしょう。
@orgcmd{C-c C-e A,org-export-as-ascii-to-buffer} 一時的なバッファに出力し、フ
ァイルを作成しません。
@orgcmd{C-c C-e n,org-export-as-latin1} @xorgcmd{C-c C-e N,org-export-as-latin1-to-buffer} 上に示したコマンドのような動作をしますが,
Latin-1でエンコーディングされたものが出力されます。
  @orgcmd{C-c C-e u,org-export-as-utf8}
@xorgcmd{C-c C-e U,org-export-as-utf8-to-buffer} 上に示したコマンドのような動
作をしますが,
UTF-8でエンコーディングされたものが出力されます。
@item C-c C-e v a/n/u
文書の中で、バッファで表示されている部分だけを出力する。
@end table

@cindex （外部出力に用いる）ヘッドラインレベル
エクスポートされたものでは、 最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層はアイテムのリストとしてエクスポートされます。 この違いを異な
る階層に変えたい場合は、 前置引数で、その階層を指定します。  例えば、

@example
@kbd{C-1 C-c C-e a}
@end example

@noindent
は 最初の階層のみを見出しとし、それ以外はアイテムとなります。見出しがアイテ
ムに変更された時、
見出し後の文章のインデントは、アイテムの下にうまく調和するように変更されます
。
この変更は、最初の本文が全体のインデントを示しているという仮定のもとで実行さ
れます。これよりも大きなインデントは、最初の文章との相対的なレイアウトを維持
するように調整されます。最初の行より少ないインデントであれば,
左寄せします。

@vindex org-export-ascii-links-to-notes
次の見出しの前にあるリンクは脚注のような形でエクスポートされます。その脚注は
、次の見出しの前に項目名とリンクがエクスポートされます。詳しい内容と他のオプ
ションについては、変数
@code{org-export-ascii-links-to-notes} を見てください。

@node HTMLのエクスポート, LaTeXとPDFエクスポート, ASCII/Latin-1/UTF-8エクスポート, エクスポート
@section HTMLのエクスポート
@cindex HTMLのエクスポート

org-modeには多くのHTMLのフォーマットに対応したHTML (XHTML 1.0 準拠)エクスポ
ート機能があります。それは、John
Gruberが開発した @emph{markdown} 言語に似ていますが、org-modeではさらにテーブルも
サポートしています。

@menu
* HTMLエクスポートコマンド::  HTMLへのエクスポートをどうやって起動するか
* HTMLタグの引用符::   Org-modeにHTMLを直接書き込む
* HTMLエクスポートでのリンク::  リンクはどのように解釈されフォーマットされる
か
* HTMLエクスポートでのテーブル::  テーブルのフォーマットをどのように修正する
か
* HTMLエクスポートでの画像::  HTMLの出力にどのように図形を挿入するか
* HTMLエクスポートでの数式フォーマット::  web上でも美しい数式
* HTMLエクスポートでのテキストエリア::  例示を表現するための別の方法
* CSSサポート::          出力の見栄えを変更する
* JavaScriptサポート::   webブラウザ上で説明や折りたたみを表示する
@end menu

@node HTMLエクスポートコマンド, HTMLタグの引用符, HTMLのエクスポート, HTMLのエクスポート
@subsection HTMLエクスポートのコマンド

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e h,org-export-as-html}
@cindex プロパティ、EXPORT_FILE_NAME
HTMLファイル@file{myfile.html}をエクスポートします。Orgファイル@file{myfile.org}
をエクスポートすると、ASCII形式のファイルは@file{myfile.html}となるでしょう
。
そのファイルは警告なしに上書きされます。もしアクティブなリージョン
 @footnote{@code{transient-mark-mode} が有効である必要があります。} があった場合, そ
のリージョンのみがエクスポートされます。 選択したリージョンが一つのツリー
@footnote{現在のサブツリーを選択するには、 @kbd{C-c @@} と入力してください。}を含ん
でいた場合、そのツリーの見出しがドキュメントのタイトルとなるでしょう.
見出しがあるか、または
@code{EXPORT_FILE_NAME} プロパティを継承していた場合、 エクスポートする際に
はその名前が使われるでしょう。
@orgcmd{C-c C-e b,org-export-as-html-and-open} HTMLファイルをエクスポートし、
そのファイルをブラウザで開きます。
@orgcmd{C-c C-e H,org-export-as-html-to-buffer} 一時的なバッファに出力し、フ
ァイルを作成しません。
@orgcmd{C-c C-e R,org-export-region-as-html}
アクティブなリージョンを一時的なバッファに出力します。前置引数があると
ヘッダーとフッターを出力せずに、リージョンのHTMLのみを出力します。これ
はカットアンドペーストで編集する際に便利です。
@item C-c C-e v h/b/H/R
文書の中で、バッファで表示されている部分だけを出力する。
@item M-x org-export-region-as-html
org-modeの記法が使われているという前提でリージョンをHTMLに変換します。
これはどのバッファでも起動するグローバルなコマンドです。
@item M-x org-replace-region-by-HTML
org-modeの記法が使われているという前提でアクティブなリージョンをHTMLに
変換します。
@end table

@cindex （外部出力に用いる）ヘッドラインレベル
エクスポートされたものでは、 最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層はアイテムのリストとしてエクスポートされます。 この違いを異な
る階層に変えたい場合は、 前置引数で、その階層を指定します。  例えば、

@example
@kbd{C-2 C-c C-e b}
@end example

@noindent
この場合２番目のレベルまでを見出しとして取り扱い、それ以外は項目として取り扱
います。

@node HTMLタグの引用符, HTMLエクスポートでのリンク, HTMLエクスポートコマンド, HTMLのエクスポート
@subsection HTMLタグの引用符

HTMLにエクスポートする際、プレーンな@samp{<} and @samp{>}は常に
@samp{&lt;}と@samp{&gt;}に変換されます。もし単純なHTMLタグをそのまま含めたい時は
, @samp{@@<b>bold text@@</b>}のようにma@samp{@@}でマークします。これは単純なHTMLタグでしか動作
しませんので注意してください。
エクスポートするファイルにさらに広範囲なHTMLをそのままコピーするには次のよう
なブロックが使えます。

@cindex #+HTML
@cindex #+BEGIN_HTML
@example
#+HTML: エクスポートするHTMLコード
@end example

@noindent or
@cindex #+BEGIN_HTML

@example
マーカー間の全ての行は文字どおり出力されます。
@end example


@node HTMLエクスポートでのリンク, HTMLエクスポートでのテーブル, HTMLタグの引用符, HTMLのエクスポート
@subsection HTMLエクスポートでのリンク

@cindex リンク、出力するHTMLの
@cindex 内部リンク、出力するHTMLの
@cindex 外部リンク、出力するHTMLの
内部リンク(@pxref{内部リンク})
エクスポートされHTMLでも同様に動作します。これには、ラジオターゲット
(@pxref{ラジオターゲット})により生成された自動リンクも含まれます。もしターゲットと
なるファイルが公開されるOrgファイルを示す同じ相対パス上にあっても、リンクは
外部リンクとして動作するでしょう。他の@file{.org}ファイルへのリンクは、HTMLにエク
スポートされたものにも同じ相対パスでリンクされたファイルがある、という前提で
、リンクに変換されます。
@samp{id:}リンクはファイル間で特定のエントリーにジャンプするのに使われます。リン
クするファイル、公開ディレクトリでの公開に関する情報については、
@ref{ファイルリンク付きの公開}参照してください。

リンクの属性を記述したい時は、特別な@code{#+ATTR_HTML}行を用いることができます。
この行は、@code{<a>}タグや@code{<img>}タグを追加する属性を定義するために使われます。以
下の例では、リンクに@code{title}と@code{style}の属性を設定しています。

@cindex #+ATTR_HTML
@example
#+ATTR_HTML: title="The Org-mode homepage" style="color:red;"
[[http://orgmode.org]]
@end example

@node HTMLエクスポートでのテーブル, HTMLエクスポートでの画像, HTMLエクスポートでのリンク, HTMLのエクスポート
@subsection テーブル
@cindex テーブル、HTMLの
@vindex org-export-html-table-tag

org-modeの表は、@code{org-export-html-table-tag}で定義されているテーブルのタグを
使ってHTMLにエクスポートされます。
デフォルトの設定では、セルの罫線とフレームがない状態でテーブルが出力されます
。 個々のテーブルでその設定を変えたい場合は,
次のような行をテーブルの前に記述してください。

@cindex #+CAPTION
@cindex #+ATTR_HTML
@example
#+CAPTION: これはセルの周囲に線が引かれた表です。
#+ATTR_HTML: border="2" rules="all" frame="all"
@end example

@node HTMLエクスポートでの画像, HTMLエクスポートでの数式フォーマット, HTMLエクスポートでのテーブル, HTMLのエクスポート
@subsection HTMLエクスポートでの画像

@cindex 画像、HTMLの中でインライン
@cindex HTMLのインライン画像
@vindex org-export-html-inline-images
HTMLのエクスポートではOrgファイルにリンクがある画像をインライン表示すること
ができます。
その画像はリンクされているクリック可能な部分として扱われます。
デフォルトでは、@footnote{ただし、@code{org-export-html-inline-images}を確認してください。
},
リンクにdescriptionがなければ、画像はインライン表示されます。 つまり、
@samp{[[file:myimg.jpg]]}はインライン表示されますが、
@samp{[[file:myimg.jpg][the image]]}はが画像にリンクされる@samp{the image}というテキス
トリンクが作られます。
descriptionの部分が@code{file:}リンクか画像を示す@code{http:}のURLの場合,
画像はインラインに表示され、画像がクリックされると活性化されます。例えば、リ
ンク先に高解像度の画像があるサムネイルを追加したい場合、次のように書くと良い
でしょう。

@example
[[file:highres.jpg][file:thumb.jpg]]
@end example

インライン画像に属性を追加したい場合は、@code{#+ATTR_HTML}を使います。
次の例では、テキストでの見やすさとアクセスのしやすさを考慮して@code{alt}属性と
@code{title}属性を指定して、alignを右にしています。

@cindex #+CAPTION
@cindex #+ATTR_HTML
@example
#+CAPTION: A black cat stalking a spider
#+ATTR_HTML: alt="cat/spider image" title="Action!" align="right"
[[./img/a.jpg]]
@end example

@noindent
@code{http}のアドレスも使うことができます。

@node HTMLエクスポートでの数式フォーマット, HTMLエクスポートでのテキストエリア, HTMLエクスポートでの画像, HTMLのエクスポート
@subsection HTMLエクスポートでの数式フォーマット
@cindex MathJax
@cindex dvipng

@LaTeX{}の数学用スニペット(@pxref{LaTeXのコード片})は二つの異なる方法でHTMLに表示され
る。デフォルトではorg-modeをインストールすると、すぐに
@uref{http://www.mathjax.org, MathJax system}が使えるようになっています。
@code{http://orgmode.org}は@file{MathJax}がOrg-modeユーザー、小さなアプリケーション、
そしてテストにとって便利だと考えているからです。
@b{もし特定のページで、あるいは常に@file{MathJax}を使うのであれば、私達のサーバでの読
みこみを減らすためにMathJaxをあなたのサーバにインストール@footnote{インストール方法に
ついては、MathJaxのウェブサイトにあります。
@uref{http://www.mathjax.org/resources/docs/?installation.html}を参照してください
。} してください。}
@file{MathJax}について設定するには、@code{org-export-html-mathjax-options}を使うか、バ
ッファに次のような行を挿入してください。

@example
#+MATHJAX: align:"left" mathml:t path:"/MathJax/MathJax.js"
@end example

@noindent
この行の各パラメーターの意味の知るために、ドキュメント文字列の変数
@code{org-export-html-mathjax-options}を見てください。

望むのであれば、@LaTeX{}を小さな画像に変換してブラウザ上のページに挿入すること
もできます。MathJaxが有用である前には、これがorg-modeでのデフォルトの方法で
した。この方法を用いるには、あなたのシステムで@file{dvipng}プログラムが利用できる
状態である必要があります。この方法は以下のような行を追加することでも有効にな
ります。

@example
#+OPTIONS: LaTeX:dvipng
@end example

@node HTMLエクスポートでのテキストエリア, CSSサポート, HTMLエクスポートでの数式フォーマット, HTMLのエクスポート
@subsection HTMLエクスポートでのテキストエリア

@cindex テキストエリア、HTMLの中の
コードサンプルをHTMLにして公開する方法として、テキストエリアを使う方法があり
ます。何かのアプリケーションに貼りつける前であれば、そのコードサンプルは編集
することができます。@code{example}ブロックか@code{src}ブロックに@code{-t}スイッチが付加され
ることでテキストエリアに変換されます。
このスイッチを使うことで、シンタックス、ラベルのハイライト、行番号に関するオ
プションが無効になります。
@code{-h}と@code{-w}を使うことがあるかもしれません。それらのスイッチはテキストエリアの
高さと幅を特定するもので、デフォルトでは高さがexampleブロックの行数で幅は80
となります。設定は、例えば以下のようになります。

@example
#+BEGIN_EXAMPLE -t -w 40
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_EXAMPLE
@end example


@node CSSサポート, JavaScriptサポート, HTMLエクスポートでのテキストエリア, HTMLのエクスポート
@subsection CSSサポート
@cindex CSS、HTMLエクスポートに関する
@cindex HTMLエクスポート、CSS

@vindex org-export-html-todo-kwd-class-prefix
@vindex org-export-html-tag-class-prefix
エクスポートするファイルには、スタイルに関する情報を含めることができます。
HTMLエクスポート機能には、文章のパーツを適切に表示するために次に示す特別な
CSSクラス@footnote{TODOキーワードやタグにCSSが適用されるとコンフリクトを起こします。
@code{org-export-html-todo-kwd-class-prefix}と@code{org-export-html-tag-class-prefix}
を使って、それらをユニークにしてください。}があります。見出しやテーブルなど
の標準的なクラスに加えて、それら特別なCSSクラスも変更することができます。
@example
p.author            @r{著者の情報、email含む}
p.date              @r{公開日}
p.creator           @r{作成情報, org-modeのバージョン}
.title              @r{文章のタイトル}
.todo               @r{DONEとなっていないTODOキーワード}
.done               @r{DONEキーワード、DONEと扱われる全てのキーワードが対象}
.WAITING            @r{各TODOキーワードはその名前のクラス名も用いることができる}
.timestamp          @r{タイムスタンプ}
.timestamp-kwd      @r{SCHEDULED等のタイムスタンプに関連するキーワード}
.timestamp-wrapper  @r{SCHEDULED等のキーワードとタイムスタンプ全体}
.tag                @r{見出し中のタグ}
._HOME              @r{各タグはその名前のクラス名も用いることができる("@@"は"_"
に置き換えられる)}
.target             @r{リンクのターゲット}
.linenr             @r{コード中の行番号}
.code-highlighted   @r{参照されコード行のハイライト}
div.outline-N       @r{深さレベルNのdiv要素(見出しとテキスト)}
div.outline-text-N  @r{深さレベルNのテキスト部分のdiv要素}
.section-number-N   @r{深さレベルNの見出しの番号。各レベルで異なる}
div.figure          @r{インライン画像のフォーマット方法}
pre.src             @r{ソースコードブロックのフォーマット方法}
pre.example         @r{例示ブロック}
p.verse             @r{verseブロック}
div.footnotes       @r{脚注の見出し}
p.footnote          @r{脚注定義の文章、脚注を含む}
.footref            @r{脚注の参照番号(常に<sup>となる)}
.footnum            @r{脚注定義中の番号(常に<sup>となる)}
@end example

@vindex org-export-html-style-default
@vindex org-export-html-style-include-default
@vindex org-export-html-style
@vindex org-export-html-extra
@vindex org-export-html-style-default
エクスポートされたファイルは、基礎的な方法で定義されたコンパクトなスタイル
@footnote{このスタイルは@code{org-export-html-style-default}で定義されており、変更できませ
ん。 この初期設定を無効にするには@code{org-export-html-style-include-default}を修
正してください。}が含まれています。この設定は上書きされるかもしれませんし、
@code{org-export-html-style}
(Org-wideの設定に使われます)や@code{org-export-html-style-extra}
(ファイルごとの設定のような詳細な設定に使われます。)を使って追加されるかもし
れません。後者の変数をファイルごとに設定するには、次のように行ないます。

@cindex #+STYLE
@example
#+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css" />
@end example

@noindent
長いスタイルの定義には複数行で記述することもできます。外部ファイルを参照せず
に@code{<style>}
@code{</style>}セクションに直接記述してください。

サブツリーにスタイルを追加するには, ツリーにクラスを適用する
@code{:HTML_CONTAINER_CLASS:} プロパティを
使います。個々の見出しにCSSスタイルを適用するには、@code{:CUSTOM_ID:}プロパティで
指定されるIDを使うことができます。

@c FIXME: More about header and footer styles
@c FIXME: Talk about links and targets.

@node JavaScriptサポート, , CSSサポート, HTMLのエクスポート
@subsection ウェブページの表示に関するJavaScriptのサポート

@cindex Rose, Sebastian
Sebastian
Roseは、org-modeが生成したHTMLファイルに関するウェブエクスペリエンスを拡張す
るためにデザインされたJavascriptプログラムを書きました。このプログラムを使う
ことで、異なる二つの方法で大きなファイルを見ることができます。一つめは@emph{Info}
のようなモードで、それぞれの章は別々に表示され、@kbd{n}キーと@kbd{p}キーで操作できま
す。(他のキーでも操作できます。利用できるキーの概要を知るには、@kbd{?}を入力して
ください。)。二つめは、org-modeがEmacsで提供するような折りたたまれたスタイル
です。
このスクリプトは、@url{http://orgmode.org/org-info.js}で利用できます。ドキュメン
トについては、@url{http://orgmode.org/worg/code/org-info-js/}にあります。このス
クリプトは私達のサイトでホスティングしていますが、何度も使う場合は、
@url{orgmode.org}にあるものを使わずにあなたのサーバにコピーしたものを使う方を選
択するかもしれせん。

このスクリプトを使うには、@file{org-jsinfo.el}がロードされているか、確認する必要
があります。デフォルトでは、ロードされるようになっていますが、
@kbd{M-x customize-variable @key{RET} org-modules @key{RET}}と入力して、確かにロードされ
ている確認してください。このプログラムを使えるようにするには、次のような行を
Orgファイルに追加するだけです。

@cindex #+INFOJS_OPT
@example
#+INFOJS_OPT: view:info toc:nil
@end example

@noindent
ファイル中にこの行が見つかると、HTMLのヘッダーは自動的にこのスクリプトを起動
させるのに必要なコードを自動的に追加します。以上のような行を使うと、次のよう
なオプションを設定できます。

@example
path:    @r{スクリプトのパス。デフォルトでは、@url{http://orgmode.org/org-info.js} }
         @r{を使うようになっていますが、ローカルにコピーしたものを使いたい場合は
}
         @r{@samp{../scripts/org-info.js}のようなパスを使ってください。}
view:    @r{ウェブサイトを最初に開いた時の表示。可能な値は次のとおり:}
         info      @r{一つのページに一つのセクションが表示されるInfoのようなイン
ターフェイス}
         overview  @r{最初はトップレベルのみが表示される折りたたみインターフェイ
ス}
         content   @r{全ての見出しが見える状態の折りたたみインターフェイス}
         showall   @r{全ての見出しと文章が見える状態の折りたたみインターフェイス
}
sdepth:  @r{infoや折りたたみモードで独立して表示されるセクションの}
         @r{最大の見出しレベル。デフォルトでは@code{org-export-headline-levels}}
         @r{(= @code{#+OPTIONS}の中の@code{H}スイッチ)の値が使われる。}
         @r{もし、@code{org-export-headline-levels}の値より小さかった場合、}
         @r{info/折りたたみ のセクションは小見出しまで含まれます。}
toc:     @r{目次表示の有無}
         @r{@code{nil}としても、@kbd{i}を入力することで目次は表示されます。}
tdepth:  @r{目次の深さ。デフォルトでは、@code{org-export-headline-levels}}
         @r{@code{org-export-with-toc}の値が用いられます。}
ftoc:    @r{CSSによって、目次の場所を指定するかどうか。}
         @r{「yes」の場合は、セクションとして表示されなくなります。}
ltoc:    @r{それぞれのセクションにショートコンテンツを設置するかどうか。}
         @r{セクションの冒頭にショートコンテンツを設置する場合は値を@code{above}とし
ます。}
mouse:   @r{マウスを見出しの上に移動させた時にハイライトさせます。}
         @r{@samp{underline} (default)か、@samp{#cccccc}のように背景色が指定できます。}
buttons: @r{ビューの変更をトグルさせるボタンを様々なところに設置するかどうか。}
         @r{@code{nil}の場合は、(デフォルト)、ボタンが一つだけ表示されます。}
@end example
@noindent
@vindex org-infojs-options
@vindex org-export-html-use-infojs
@code{org-infojs-options}を変更することで、これらのオプションの初期値を変更するこ
とができます。このスクリプトを常にページに適用させたい場合は、
@code{org-export-html-use-infojs}を変更してください。

@node LaTeXとPDFエクスポート, DocBookエクスポート, HTMLのエクスポート, エクスポート
@section @LaTeX{}とPDFのエクスポート
@cindex @LaTeX{}のエクスポート
@cindex PDF出力
@cindex Guerry, Bastien

org-modeには、Bastien
Guerryによって書かれた@LaTeX{}のエクスポート機能があります。追加的な処理と合わ
せて、@footnote{デフォルトのLaTeX出力は、pdftexまたはlatexにより出力されるよう設計さ
れています。それには、xetexや恐らくluatexと互換性のないパッケージが含まれて
います。@code{org-export-latex-default-packages-alist}や
@code{org-export-latex-packages-alist}を参照してください。},このバックエンドはPDF
の出力にも使われています。@LaTeX{}の出力は、リンクと相互参照の実装に@file{hyperref}
を使っているので、出力されたPDFファイルは完全にリンクされているでしょう。セ
クションの階層に合わせて正しく出力されるためには、orgファイルは適切に構造化
されていないといけないので注意してください。

@menu
* LaTeX/PDFエクスポートコマンド::  どのキーでどのコマンドが起動するのか
* ヘッダーと章立て::  ファイル構造を出力するための準備
* LaTeXコードの引用::  @LaTeX{}コードの統合
* LaTeXエクスポートでのテーブル::  @LaTeX{}に表をエクスポートする際のオプション
* LaTeXエクスポートでの画像::  @LaTeX{}の出力に図を挿入する方法
* Beamerクラスのエクスポート::  ファイルをプレゼンテーション資料に変える
@end menu

@node LaTeX/PDFエクスポートコマンド, ヘッダーと章立て, LaTeXとPDFエクスポート, LaTeXとPDFエクスポート
@subsection @LaTeX{}エクスポートのコマンド

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e l,org-export-as-latex}
@cindex プロパティ、EXPORT_FILE_NAME
@LaTeX{}ファイル@file{myfile.tex}を出力します。Orgファイルに対して@file{myfile.org}
、ASCIIファイルは@file{myfile.tex}となるでしょう。そのファイルは警告なしに
上書きされます。アクティブなリージョン@footnote{@code{transient-mark-mode}が有効であ
る必要があります。}があれば、そのリージョンのみが出力されるでしょう。
選択したリージョンが一つのツリー@footnote{現在のサブツリーを選択するには、
@kbd{C-c @@}を入力してください。}であった場合、ツリーの見出しがタイトルに
なります。ツリーの見出しのエントリーが@code{EXPORT_FILE_NAME}プロパティを継
承、または持っている場合、エクスポートされる際には、その名前が使われる
でしょう。@orgcmd{C-c C-e L,org-export-as-latex-to-buffer} 一時バッファに出力
します。ファイルを作りません。
@item C-c C-e v l/L
文書の中で、バッファで表示されている部分だけを出力する。
@item M-x org-export-region-as-latex
Org-modeの記法が使われているという前提でリージョンを@LaTeX{}に変換します
。これはどのバッファでも起動するグローバルなコマンドです。
@item M-x org-replace-region-by-latex
アクティブなリージョンを(Org-modeの記法が使われている前提で)@LaTeX{}コー
ドに置き変えます。@orgcmd{C-c C-e p,org-export-as-pdf} @LaTeX{}に出力し、PDFにも
変換します。@orgcmd{C-c C-e d,org-export-as-pdf-and-open} @LaTeX{}に出力し、PDF
にも変換します。その際出力されたPDFファイルを開きます。
@end table

@cindex （外部出力に用いる）ヘッドラインレベル
@vindex org-latex-low-levels
エクスポートされたものでは、 最初の3つのアウトラインの階層が一般的な文書の構
造と見なされて、見出しとなります。
それ以外の階層は概要のリストとしてエクスポートされます。エクスポート機能では
、@code{org-latex-low-levels}を変更することで、この設定を無視、または変更すること
ができます。

この違いを異なる階層で変えたい場合は、 前置引数で、その階層を指定します。 例
えば、

@example
@kbd{C-2 C-c C-e l}
@end example

@noindent
この場合２番目のレベルまでを見出しとして取り扱い、それ以外は項目として取り扱
います。

@node ヘッダーと章立て, LaTeXコードの引用, LaTeX/PDFエクスポートコマンド, LaTeXとPDFエクスポート
@subsection 見出しと構造の分割
@cindex @LaTeX{}クラス
@cindex @LaTeX{}の構造の分割
@cindex @LaTeX{}の見出し
@cindex 見出し、LaTeXファイルのための
@cindex 構造の分割、LaTeXエクスポートのための

デフォルトでは、@LaTeX{}の出力には@code{article}クラスが使われます。

@vindex org-export-latex-default-class
@vindex org-export-latex-classes
@vindex org-export-latex-default-packages-alist
@vindex org-export-latex-packages-alist
@cindex #+LATEX_HEADER
@cindex #+LATEX_CLASS
@cindex #+LATEX_CLASS_OPTIONS
@cindex property, LATEX_CLASS
@cindex property, LATEX_CLASS_OPTIONS
クラスは@code{org-export-latex-default-class}の値を変更することで、全体的に変更す
ることもできますし、ファイル中に@code{org-export-latex-default-class}のようなオプ
ションを追加することで、局所的に変更することもできます。@code{:LaTeX_CLASS:}プロ
パティを使えば、エクスポートするリージョンにそのツリー(サブツリー)のみが含ま
れていた場合にクラスを指定できます。クラスは、@code{org-export-latex-classes}にリ
ストアップされてます。
この変数は、各クラス@footnote{@code{org-export-latex-default-packages-alist}と
@code{org-export-latex-packages-alist}が接合されたものです。}の見出しテンプレート
を定義し、各クラスの構造の分割について定義します。クラス自体についても定義さ
れます。@code{#+LaTeX_CLASS_OPTIONS}、または@code{LaTeX_CLASS_OPTIONS}プロパティは
@code{\documentclass}マクロのオプションを指定します。見出しに
@code{#+LATEX_HEADER: \usepackage@{xyz@}}を追加して同様のことをすることもできます
。詳しい情報については、@code{org-export-latex-classes}のドキュメント文字列を参照
してください。

@node LaTeXコードの引用, LaTeXエクスポートでのテーブル, ヘッダーと章立て, LaTeXとPDFエクスポート
@subsection @LaTeX{}コードの引用

@ref{LaTeXの組み込み}で記述された埋め込まれた@LaTeX{}は、@LaTeX{}に正しく挿入されます
。図の相互参照を生成するために、@samp{\ref@{LABEL@}}のようなシンプルなマクロが含
まれます。さらに、次のような行を追加することで、@LaTeX{}エクスポートの際に表示
だけしてほしい特別なコードを追加することができます。

@cindex #+LaTeX
@cindex #+BEGIN_LaTeX
@example
#+LaTeX: エクスポートする際に文字のまま、出力されるLaTeX code
@end example

@noindent or
@cindex #+BEGIN_LaTeX

@example
#+BEGIN_LaTeX
マーカの間にある全ての行は文字がそのまま出力されます。
#+END_LaTeX
@end example


@node LaTeXエクスポートでのテーブル, LaTeXエクスポートでの画像, LaTeXコードの引用, LaTeXとPDFエクスポート
@subsection @LaTeX{} エクスポートにおけるテーブル
@cindex @LaTeX{} エクスポートにおけるテーブル

@LaTeX{}で表を出力する際に、番号と表題を指定することができます
(@pxref{画像とテーブル})、@code{ATTR_LaTeX}行を使うことで、表に関する@code{longtable}環境を
呼び出すこともできます。複数のページにまたがる表や、デフォルトの表の環境を
@code{table}から@code{table*}にするため、またはデフォルトの内部tabular環境を@code{tabularx}
や@code{tabulary}にしたい時にも@code{ATTR_LaTeX}行は使われます。つまり、文字の配置や
(@code{tabularx}や@code{tabulary}を使って)幅を次のようにして設定できます。:

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_LaTeX
@example
#+CAPTION: A long table
#+LABEL: tbl:long
#+ATTR_LaTeX: longtable align=l|lp@{3cm@}r|l
| ..... | ..... |
| ..... | ..... |
@end example

@code{tabulary}を使って、複数のセルにまたがる表を指定することもできます。

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_LaTeX
@example
#+CAPTION: A wide table with tabulary
#+LABEL: tbl:wide
#+ATTR_LaTeX: table* tabulary width=\textwidth
| ..... | ..... |
| ..... | ..... |
@end example

@node LaTeXエクスポートでの画像, Beamerクラスのエクスポート, LaTeXエクスポートでのテーブル, LaTeXとPDFエクスポート
@subsection @LaTeX{}エクスポートにおける画像
@cindex 画像、@LaTeX{}の中のインライン
@cindex @LaTeX{}の中のインライン画像

 @samp{[[file:img.jpg]]} や @samp{[[./img.jpg]]} のように説明文にリンクされていない画
像は、
@LaTeX{} の処理によりPDFの中に挿入されます。 Org-modeは、画像を挿入するのに
 @code{\includegraphics}
マクロを使います。もし、@ref{画像とテーブル}で説明されているように図の表題や番号
を特定したいのならば、その図を @code{figure}
環境で囲むとfloat要素になります。 @code{\includegraphics}
マクロのオプション引数として使われている様々なオプションを特定するには
 @code{#+ATTR_LaTeX:} を使います。
@code{figure} 環境のオプションの配置を変更するには、 @samp{placement=[h!]} のように属
性に追加します。

画像のまわりに文字を回りこませたいのであれば、@code{#+ATTR_LaTeX:} の行に @samp{wrap}
を追加すると、画像がページの左半分にきます。微調整するには、@code{wrapfigure} 環
境に引数として、 @code{placement}
フィールドを追加します。画像のサイズを変更する時は、互換性のある
 @code{\includegraphics} と @code{wrapfigure}
を使わなければいけないので注意してください。

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_LaTeX
@example
#+CAPTION:    The black-body emission of the disk around HR 4049
#+LABEL:      fig:SED-HR4049
#+ATTR_LaTeX: width=5cm,angle=90
[[./img/sed-hr4049.pdf]]

#+ATTR_LaTeX: width=0.38\textwidth wrap placement=@{r@}@{0.4\textwidth@}
[[./img/hst.png]]
@end example

もし、このような番号を参照する必要があれば,  @LaTeX{} に
 @samp{\ref@{fig:SED-HR4049@}} と記述してください。

@node Beamerクラスのエクスポート, , LaTeXエクスポートでの画像, LaTeXとPDFエクスポート
@subsection Beamerクラスのエクスポート

LaTeXの一種である @file{beamer}
は、LaTeXとpdf処理により高品質なプレゼンテーション資料を提供します。Org-mode
はOrg-modeのファイルやツリーを
@file{beamer} のプレゼンテーション資料に変換するのに特別なサポートをします。

カレントバッファ ( @code{#+LaTeX_CLASS: beamer} がセットされている) かサブツリー
 (
@code{LaTeX_CLASS} 属性がセットされている)のLaTeXクラスが @code{beamer}
ならば、特別なエクスポートモードがファイルやツリーをbeamerのプレゼンテーショ
ン資料にします。原則的にはあまり深くないネストのツリーなら何でもプレゼンテー
ション資料にします。デフォルトでは、トップレベルのエントリー
(または、選択したサブツリーの最初のレベル) がフレームに変換され、そのレベル
の下のアウトライン構造が箇条書きされたリストになります。 変数
@code{org-beamer-frame-level}
は異なるレベルに設定でき、その時フレームより上の構造はプレゼンテーションの構
造の区切りになります。

バッファでの便利なテンプレートに関する設定や属性は
 @kbd{M-x org-insert-beamer-options-template}
によってバッファに挿入されます。その他については、カラムビューのフォーマット
にインストールされます。カラムビューはbeamerで使う特別な属性を編集するのに便
利だからです。

次のような属性を使ってプレゼンテーションの構造を変えることができます。:

@table @code
@item BEAMER_env
このエントリーをフォーマットする環境を指定します。有効な環境が変数
 @code{org-beamer-environments-default}
に定義されていて、さらに @code{org-beamer-environments-extra}
に追加して定義することができます。もし、この属性がセットされていれば、
それを可視化するため、そのエントリーには
@code{:B_environment:} タグがあるはずです。このタグは字句的な意味はなく、視
覚的に補助するためにあります。
@item BEAMER_envargs
@code{[t]} 、 @code{[<+->]} や @code{<2-3>} のようなbeamerに特有な引数は、この環境で
使われます。もし
@code{BEAMER_col} 属性がセットされていると、 @code{columns} 環境のオプション引数
として、 @code{C[t]}
が追加されたことを意味します。 @code{c[t]} や @code{c<2->} は @code{column}
環境にオプションとして設定されたことを意味します。
@item BEAMER_col
この列が始まるときの列の幅です。もしこの属性がセットされていると、その
エントリーには @code{:BMCOL:}
属性が現れます。このタグも視覚的な補助のためにあります。もし、これが整
数だった場合、 @code{\textwidth} の割合とみなされます。
もしくは、 @samp{3cm} のような場合、特定の単位を使ったとみなされます。まず
、フレームの中のそのような属性は列に囲まれた
@code{columns} 環境で始まります。 @code{BEAMER_col}
属性が0か1、または自動的にフレームの最後となるエントリーでは、その環境
は閉じられます。
@item BEAMER_extra
その環境が始まった後に挿入される追加的なコマンドです。例えば、フレーム
を作った時に変遷を特定します。
@end table

もし、verbatim環境を使ったソースコードが含まれていると、フレームは自動的に
 @code{fragile} を受けとります。
@file{beamer} 特有のコードは @code{#+BEAMER:} を使うことで挿入され、
@code{#+BEGIN_beamer...#+end_beamer} ブロックは,他のエクスポートのものと似ていま
すが、
@code{#+LaTeX:} はプレゼンテーション資料にも含まれるという点で異なります。

@code{BEAMER_env} 属性があるノードの @samp{note} や @samp{noteNH}
の値はbeamerのnotesとして処理されます。例えば、 @code{\note@{...@}} のように囲ま
れます。
前者は、ノートのテキストの一部分として見出しが含まれ、後者は、ノードの見出し
は無視されます。ノートの生成を簡単にするには、実は
@code{BEAMER_env} 属性を作るかわりに、 @emph{tag} (または @code{:B_note:} や
@code{:B_noteNH:}) でマークするだけで十分です。

編集作業のサポートを得るには次のオプションを追加して、マイナーモードの
 @code{org-beamer-mode} を有効にします。

@example
#+STARTUP: beamer
@end example

@table @kbd
@orgcmd{C-c C-b,org-beamer-select-environment}  @code{org-beamer-mode}
でこのキーバインドを使うことでbeamerの環境や @code{BEAMER_col} 属性を素早く
選択することができます。
@end table

カラムビューはノードにおける環境及び重要なパラメーターをセットするうえで、優
れたやり方です。
カラムのフォーマットがこの特別な目的のためにセットされている確認してください
。 コマンド @kbd{M-x org-insert-beamer-options-template} はそのようなフォーマッ
トを定義します。

次の例は、beamerへのエクスポートを意図した簡単なOrg-modeの文書の例です。

@smallexample
#+LaTeX_CLASS: beamer
#+TITLE: プレゼンテーション資料の例
#+AUTHOR: Carsten Dominik
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_FRAME_LEVEL: 2
#+BEAMER_HEADER_EXTRA: \usetheme@{Madrid@}\usecolortheme@{default@}
#+COLUMNS: %35ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Args) %4BEAMER_col(Col) %8BEAMER_extra(Ex)

* これは最初の構造的な章です。

** フレーム 1 \\ サブタイトル
***  Eric Fraga へありがとう
                                  :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_envargs: C[t]
    :BEAMER_col: 0.5
    :END:
    Org-modeでの最初のbeamerの設定
*** みんなへありがとう
                                        :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_envargs: <2->
    :END:
    議論への寄与してくれたみんなへ
**** これは、beamerのnoteとして処理される。                   :B_note:
** Frame 2 \\ 使わないカラム
*** リクエスト                                                   :B_block:
    この部分を試してみてください!
    :PROPERTIES:
    :BEAMER_env: block
    :END:
@end smallexample

さらに詳しく知りたい場合は、Worgの文書を見てください。

@node DocBookエクスポート, TaskJugglerエクスポート, LaTeXとPDFエクスポート, エクスポート
@section DocBookエクスポート
@cindex DocBookエクスポート
@cindex PDF出力
@cindex Cui, Baoqiu

Org-modeは、Baoqiu
Cuiによって作成されたDocBookへのエクスポート機能があります。Org-modeのファイ
ルはDocBookのフォーマットで出力され、さらにDocBookのツールやスタイルシートを
使ってPDF、HTMLやmanなど他のフォーマットに出力することができます。

現在、DocBookのエクスポート機能はDocBook V5.0をサポートしています。

@menu
* DocBookエクスポートコマンド::  DocBookエクスポートの起動方法
* DocBookコードの引用::  DocBookコードをOrgファイルに取りこむ
* 章の繰り返し::       DocBookで繰り返し使われるセクション
* DocBookエクスポートでのテーブル::  表はHTMLのテーブルとして出力される
* DocBookエクスポートでの画像::  DocBookの出力に図を挿入する方法
* 特殊文字::             特殊文字の処理方法
@end menu

@node DocBookエクスポートコマンド, DocBookコードの引用, DocBookエクスポート, DocBookエクスポート
@subsection DocBookエクスポートコマンド

@cindex region, active
@cindex アクティブなリージョン
@cindex transient-mark-mode
@table @kbd
@orgcmd{C-c C-e D,org-export-as-docbook}
@cindex プロパティ、EXPORT_FILE_NAME
DocBookファイルを出力します。Org-modeのファイル @file{myfile.org} は
DocBook XMLファイルの
@file{myfile.xml} となります。ファイルは警告なしに上書きされます。アクティ
ブリージョン
@footnote{@code{transient-mark-mode} を有効にしている必要があります。}
がある場合は、リージョンのみが出力されます。選択したリージョンが単一の
ツリー @footnote{現在のツリーを選択するには @kbd{C-c @@} を使ってください。} だった
場合は, そのツリーの見出しが文書のタイトルになります。そのツリーの見出
しがある、または継承されている場合や、
@code{EXPORT_FILE_NAME} 属性がある場合は、その名前がエクスポートに使われま
す。 @orgcmd{C-c C-e V,org-export-as-docbook-pdf-and-open}
DocBookファイルが出力され、PDF処理を経て出力されたPDFファイルが開きます。

@vindex org-export-docbook-xslt-proc-command
@vindex org-export-docbook-xsl-fo-proc-command
DovBookファイルにエクスポートしてPDFに出力するには、XSLT処理系とXSL-FO
処理系を環境にインストールしておく必要があるので注意してください。変数
@code{org-export-docbook-xslt-proc-command} と
@code{org-export-docbook-xsl-fo-proc-command}を確認してください。

@vindex org-export-docbook-xslt-stylesheet
変数 @code{org-export-docbook-xslt-proc-command} でスタイルシートを表わす引
数 @code{%s}
はユーザーによってセットされる変数 @code{org-export-docbook-xslt-stylesheet}
の値で置き換えられます。Org-modeファイルに  @code{#+XSLT:} を追加することで
、グローバルな設定を封じることができます。

@orgkey{C-c C-e v D} 文書の見えている部分だけを出力します。
@end table

@node DocBookコードの引用, 章の繰り返し, DocBookエクスポートコマンド, DocBookエクスポート
@subsection DocBookコードの引用

次のようなブロックを使えば、Org-modeのファイルでDocBookのコードを引用したり
、文章をそのままDocBookのファイルにコピーすることができます。

@cindex #+DOCBOOK
@cindex #+BEGIN_DOCBOOK
@example
#+DOCBOOK: エクスポートするDocBookコードの文字列
@end example

@noindent or
@cindex #+BEGIN_DOCBOOK

@example
#+BEGIN_DOCBOOK
これらのマーカの間の行はDocBookエクスポート機能により文字がそのまま出力され
ます。
#+END_DOCBOOK
@end example

例えば、DocBookの警告文を含めるには次のような文章を使います。この警告文によ
り、Org-modeのファイルにDocBookコードをのせる時に、文章の文脈に注意を払うで
しょう。DocBookコードを正しく引用しないと、DocBook
XMLファイルを正確に出力できないかもしれせん。

@example
#+BEGIN_DOCBOOK
<warning>
  <para>Org-modeファイルの中でDocBook XMLコードを引用する際、何をしているか
  知っておく必要があります。注意が足りないと、DocBookのエクスポート機能によ
り
  正しくないDocBook XMLが出力されるかもしれません。</para>
</warning>
#+END_DOCBOOK
@end example

@node 章の繰り返し, DocBookエクスポートでのテーブル, DocBookコードの引用, DocBookエクスポート
@subsection 章の繰り返し
@cindex DocBookの再帰的なsection

DocBookのエクスポート機能は、DocBookの @code{article}
要素を使ってOrg-modeのファイルをarticlesとして出力します。再帰的なsections、
例えば @code{section}
要素が出力されたarticlesの中で使われます。
Org-modeのファイルのトップレベルの見出しは、トップレベルのsectionsとして出力
され、低いレベルの見出しはネストしたsectionsとして出力されます。Org-modeのフ
ァイルの全体構造は、完全に出力されます。見出しにネストされたレベルはどれだけ
あっても構いません。

再帰的なセクションを使えば、 出力されたDocBookコードを他の @code{book} や @code{set}
のようなドキュメントタイプに移植したり、再利用したりするのが用意になります。

@node DocBookエクスポートでのテーブル, DocBookエクスポートでの画像, 章の繰り返し, DocBookエクスポート
@subsection DocBookエクスポートでのテーブル
@cindex DocBookへの出力におけるテーブル

Org-modeの表はHTMLの表を出力します。HTMLの表はDocBook V4.3からサポートされて
います。

テーブルに表題がなかった場合、 @code{informaltable} 要素によってinformal
tableが出力されます。表題があれば、@code{table} 要素により、テーブルが出力されま
す。

@node DocBookエクスポートでの画像, 特殊文字, DocBookエクスポートでのテーブル, DocBookエクスポート
@subsection DocBookエクスポートでの画像
@cindex DocBookでのインライン画像
@cindex DocBookでのインライン画像

 @samp{[[file:img.jpg]]} や @samp{[[./img.jpg]]} のように説明文にリンクされていない画
像は、
@code{mediaobject} タグが使われてDocBookに出力されます。 各 @code{mediaobject}
要素には、@code{imagedata} 要素を囲む
@code{imageobject}要素が含まれます。もし、@ref{画像とテーブル}で説明されているように
図の表題を特定するならば、
@code{caption} 要素を  @code{mediaobject} の中に追加します。番号も特定する場合は、
@code{mediaobject} 要素の中に  @code{xml:id} 属性が出力されます。@code{figure}
環境のオプションの配置を変更するには、 @samp{placement=[h!]} のように属性に追加し
ます。

@vindex org-export-docbook-default-image-attributes
画像の属性には @code{imagedata} 要素がサポートされ、 @code{align} や @code{width}
のような属性が二つの方法で特定されます。一つ目は変数
@code{org-export-docbook-default-image-attributes} を設定する方法です。二つ目は
@code{#+ATTR_DOCBOOK:} 行を使う方法です。変数
@code{org-export-docbook-default-image-attributes}
で特定される属性は出力元のOrg-modeファイルに含まれる全ての画像に適用されます
(ただし、 @code{#+ATTR_DOCBOOK:}
行で画像の属性が上書きされている場合は除きます。)。

@code{#+ATTR_DOCBOOK:} 行は、追加的な画像の属性の指定や個々の画像にデフォルトの画
像の属性を上書きするのに使います。もし、
@code{#+ATTR_DOCBOOK:} と 変数
@code{org-export-docbook-default-image-attributes}
に同じ属性が現れた場合、前者の値が優先的に使われます。次の例は画像の属性に関
する設定例です。

@cindex #+CAPTION
@cindex #+LABEL
@cindex #+ATTR_DOCBOOK
@example
#+CAPTION:    Org-modeのロゴ
#+LABEL:      unicorn-svg
#+ATTR_DOCBOOK: scalefit="1" width="100%" depth="100%"
[[./img/org-mode-unicorn.svg]]
@end example

@vindex org-export-docbook-inline-image-extensions
デフォルトでDocBookのエクスポート機能は、 @file{jpeg}, @file{jpg}, @file{png}, @file{gif},
そして @file{svg} のような画像のタイプを認識します。変数
@code{org-export-docbook-inline-image-extensions}
を設定することで、DocBookがサポートしている画像のタイプを追加することができ
ます。

@node 特殊文字, , DocBookエクスポートでの画像, DocBookエクスポート
@subsection DocBook出力における特殊文字
@cindex DocBook出力における特殊文字

@vindex org-export-docbook-doctype
@vindex org-entities
@code{\alpha}, @code{\Gamma}, そして @code{\Zeta} のような @TeX{}
ライクなシンタックスで記述された特殊文字列は、DocBookのエクスポート機能でサ
ポートされています。 そのような文字列は、変数
@code{org-entities} に格納されているリストにもとづき、@code{&alpha;}, @code{&Gamma;}, そし
て
@code{&Zeta;} のように XML
エンティティとして記述されます。対応するエンティティが含まれるDocBookファイ
ルが出力されると、特殊文字列が認識されます。

変数 @code{org-export-docbook-doctype} を設定することで必要なエンティティを含める
ことができます。例えば、 変数
@code{org-export-docbook-doctype}
に次のような値を設定することで、XHTMLエンティティに含まれる全ての特殊文字列
が認識されます。

@example
"<!DOCTYPE article [
<!ENTITY % xhtml1-symbol PUBLIC
\"-//W3C//ENTITIES Symbol for HTML//EN//XML\"
\"http://www.w3.org/2003/entities/2007/xhtml1-symbol.ent\"
>
%xhtml1-symbol;
]>
"
@end example

@node TaskJugglerエクスポート, Freemindエクスポート, DocBookエクスポート, エクスポート
@section TaskJugglerエクスポート
@cindex TaskJugglerエクスポート
@cindex プロジェクト管理

@uref{http://www.taskjuggler.org/, TaskJuggler}はプロジェクト管理ツールです。
プロジェクトのアウトラインと設定して制限をもとにプロジェクトのタイムラインと
リソースの割り当てを計算して最適化されたスケジュールを提供します。

TaskJugglerのエクスポート機能は、例えばHTMLやLaTeXのような他のエクスポート機
能とは少し違い、ドキュメントのノード全てを出力しませんし、ドキュメントのノー
ドの序列に従って出力することもしません。

代わりに、TaskJugglerのエクスポート機能はタスクが定義されているツリーか、こ
のプロジェクトのリソースとして任意に定義されたツリーを探します。そして、それ
らツリーと全てのノードの中で定義された属性をもとにTaskJugglerファイルを作成
します。

@subsection TaskJugglerのエクスポートコマンド

@table @kbd
@orgcmd{C-c C-e j,org-export-as-taskjuggler} TaskJugglerファイルを出力します
。

@orgcmd{C-c C-e J,org-export-as-taskjuggler-and-open}
TaskJugglerファイルを出力し、TaskJugglerUIでファイルを開きます。
@end table

@subsection タスク

@vindex org-export-taskjuggler-project-tag
いつものようにOrg-modeでタスクを作ります。各タスクにプロパティを使ってエフォ
ートを指定します (カラムビューを使うと簡単です。)。
最終的には、Peter
Jonesが作成した
@url{http://www.contextualdevelopment.com/static/artifacts/articles/2008/project-planning/project-planning.org}の例と似たものになっているはずです。次に、タスクのトップノードを@code{:taskjuggler_project:}というタグでマークします
(または変数@code{org-export-taskjuggler-project-tag}をカスタマイズします)。これで
プロジェクトの計画を@kbd{C-c C-e J}で出力する準備ができました。出力されれば、
TaskJugglerUIでガントチャートが開くはずです。

@subsection リソース

@vindex org-export-taskjuggler-resource-tag
次に特定のタスクにリソースを割り当てることができます。階層的にリソースをまと
めることもできます。トップノードのタグは@code{:taskjuggler_resource:}になります
(または@code{org-export-taskjuggler-resource-tag}をカスタマイズします。)。識別子
(@samp{resource_id})をリソースに割り当てることもできます(標準的なOrg-modeのプロパ
ティについては,
@pxref{プロパティの表記法})。また、エクスポート機能は自動で識別子を生成することが
できます。(識別子はユニークであればよいので、エクスポート機能は見出しの最初
の単語を抽出します。詳しくは@code{org-taskjuggler-get-unique-id}のドキュメントを
読んでください)。識別子を使ってリソースをタスクに再配置することができます。
@samp{allocate}属性がタスクで再び実行されます。カラムビューか、タスク上で
@kbd{C-c C-x p allocate @key{RET} <resource_id> @key{RET}}と入力することで実行されます。

再配置が実行されると、再びTaskJugglerに出力してリソースの再配置グラフを確認
することができます。そのグラフでは、各人がいつ何のタスクをこなしているかがわ
かります。

@subsection 属性の出力

エクスポート機能はTODOの状態に関する情報も考慮されています。例えば、タスクが
「DONE」とマークされると、それに対応して、TaskJugglerの属性も
(@samp{complete 100})となります。タスクリソースやタスクノード上のうTaskJugglerで
使われる@samp{limits}, @samp{vacation},
@samp{shift}, @samp{booking}, @samp{efficiency}, @samp{journalentry},
@samp{rate}のようなリソースの属性や@samp{account}, @samp{start}, @samp{note},
@samp{duration}, @samp{end}, @samp{journalentry}, @samp{milestone},
@samp{reference}, @samp{responsible}, @samp{scheduling}などのタスクの属性も、出力されます。

@subsection 依存状態

エクスポート機能はタスクで@samp{ORDERED} 属性 (@pxref{TODO間の関係})、@samp{BLOCKER} 属性
 (see
@file{org-depend.el})、そして選択的に@samp{depends}属性で表される依存状態を操作するこ
とができます。@samp{BLOCKER}
属性も@samp{depends}属性も@samp{previous-sibling}のように扱えますし、プロジェクトの他
のタスクで定義された識別子への参照
(@samp{task_id})として扱うこともできます。@samp{BLOCKER}属性と@samp{depends}属性は、カンマ
やスペースで分けることで複数の依存状態として定義できます。依存状態の属性は、
単純に追加することで任意の属性を追加することができます。これまでの例は次のよ
うに記述できます。

@example
* Preparation
  :PROPERTIES:
  :task_id:  準備
  :ORDERED:  t
  :END:
* 練習の材料
  :PROPERTIES:
  :task_id:  training_material
  :ORDERED:  t
  :END:
** マークアップのガイドライン
   :PROPERTIES:
   :Effort:   2.0
   :END:
** ワークフローのガイドライン
   :PROPERTIES:
   :Effort:   2.0
   :END:
* プレゼンテーション
  :PROPERTIES:
  :Effort:   2.0
  :BLOCKER:  training_material @{ gapduration 1d @} preparation
  :END:
@end example

@subsection レポート

@vindex org-export-taskjuggler-default-reports
TaskJugglerは多くのレポートを作成できます。(例えば gantt chart, resource
allocationなど)。TaskJugglerファイルにあるプロジェクトでどのレポートを作成す
るか定義することができます。エクスポート機能は自動的にデフォルトのレポートを
ファイルに挿入します。それらは、@code{org-export-taskjuggler-default-reports}で定
義されています。カスタマイズ機能を使って、他の様々なオプションを変更すること
ができます。ほかのオプションについて知りたい時は
@kbd{M-x customize-group @key{RET} org-export-taskjuggler @key{RET}}と入力した確認してく
ださい。

さらに詳しい情報や例を見たい時は、
@uref{http://orgmode.org/worg/org-tutorials/org-taskjuggler.html}で
Org-taskjugglerチュートリアルを見てください。

@node Freemindエクスポート, XOXOエクスポート, TaskJugglerエクスポート, エクスポート
@section Freemindエクスポート
@cindex Freemindエクスポート
@cindex マインドマップ

Freemindのエクスポート機能はLennart Borgmanによって作成されました。

@table @kbd
@orgcmd{C-c C-e m,org-export-as-freemind} Freemindのマインドマップファイル
@file{myfile.mm} を出力します。
@end table

@node XOXOエクスポート, iCalendarエクスポート, Freemindエクスポート, エクスポート
@section XOXOエクスポート
@cindex XOXOエクスポート

Org-modeにはXOXOスタイルで出力するエクスポート機能があります。現在、このエク
スポート機能は一般的なアウトライン構造を扱うだけで、Org-modeの特徴を解釈しま
せん。

@table @kbd
@orgcmd{C-c C-e x,org-export-as-xoxo} XOXOファイルを
@file{myfile.html}として出力します。@orgkey{C-c C-e v x} 見えている部分だけを出力
します。
@end table

@node iCalendarエクスポート, , XOXOエクスポート, エクスポート
@section iCalendarエクスポート
@cindex iCalendarエクスポート

@vindex org-icalendar-include-todo
@vindex org-icalendar-use-deadline
@vindex org-icalendar-use-scheduled
@vindex org-icalendar-categories
@vindex org-icalendar-alarm-time
Org-modeユーザーには、プロジェクトの進行を記録している人もいますが、中にはま
だ誕生日や予約のために標準的なカレンダーアプリケーションを好む人もいます。こ
のような場合、カレンダーアプリケーションでOrg-modeのファイルにあるデッドライ
ンとタイムスタンプのある項目が表示されると便利です。Org-modeはカレンダーの情
報を標準的なiCalendarに出力することができます。もしTODOアイテムも出力したい
ならば、変数@code{org-icalendar-include-todo}を調整しま。タイムスタンプはVEVENTと
して出力され、TODOアイテムはVTODOとして出力されます。TODOアイテムでないデッ
ドラインもイベントが生成されます。デッドラインとTODOアイテムの予定日はTODOア
イテム@footnote{詳しくは変数@code{org-icalendar-use-deadline}と
@code{org-icalendar-use-scheduled}を見てください。}の開始日と期日として扱われます
。カテゴリーには、見出しで定義されたタグやファイルやツリーのカテゴリー
@footnote{継承したタグやTODOの状態を追加するには変数@code{org-icalendar-categories}をカス
タマイズしてください。}が使われます。アラームを設定する方法については、変数
@code{org-icalendar-alarm-time}を参照してください。

@vindex org-icalendar-store-UID
@cindex property, ID
標準のiCalendar形式はそれぞれのエントリーにグローバルでユニークな識別子(UID)
が必要となります。Org-modeではエクスポートする際にこの識別子を作成します。変
数@code{org-icalendar-store-UID}が設定されていると、UIDはエントリーの
@code{:ID:}属性に保存され、次にこのエントリーを使うときに再度利用されます。一つの
項目が複数のiCalendar形式の項目(タイムスタンプ、デッドライン、スケジューリン
グされたアイテムやTODOアイテム)となるので,
エントリーの中のトリガーによって、Org-modeはUIDにプレフィックスをつけます。
このようにして、UIDはユニークな値となりますが、同期処理では全て異なるエント
リーから作られたエントリーとみなされるでしょう。

@table @kbd
@orgcmd{C-c C-e i,org-export-icalendar-this-file}
現在のファイルからiCalendar形式のエントリーを作成し、拡張子@file{.ics}をつ
けて同じディレクトリに保存します。
@orgcmd{C-c C-e I, org-export-icalendar-all-agenda-files}
@vindex org-agenda-files
@kbd{C-c C-e i}に似ていますが、@code{org-agenda-files}で指定された全てのファイ
ルで実行されます。それぞれのファイルでiCalendar形式のファイルが作成さ
れます。
@orgcmd{C-c C-e c,org-export-icalendar-combine-agenda-files}
@vindex org-combined-agenda-icalendar-file
@code{org-agenda-files}で指定されたファイルから単一のiCalendar形式のファイ
ルを生成し、@code{org-combined-agenda-icalendar-file}で指定されたファイルに
出力します。
@end table

@vindex org-use-property-inheritance
@vindex org-icalendar-include-body
@cindex SUMMARY属性
@cindex DESCRIPTION属性
@cindex LOCATION属性
エクスポート機能はエントリーがSUMMARY、DESCRIPTIONそしてLOCATION属性
@footnote{@code{org-use-property-inheritance}を設定した場合、それに応じてLOCATION属性は高
い階層からその値が継承されます。}を持っていた場合、それを継承します。なかっ
た場合はSUMMARY属性は見出しから抽出され、DESCRIPTION属性はその内容
(@code{org-icalendar-include-body}で制限されます。)から抽出されます。

このカレンダーを読んだり更新したりするのにベストな方法は、使うカレンダーアプ
リケーション次第です。FAQではこの問題についてカバーしています。

@node 公開, ソースコードとの連携, エクスポート, Top
@chapter 公開
@cindex 公開

Org-modeは連結されたOrg-modeのファイルから成る@emph{projects}の自動的なHTMLへの変
換設定をあなたに許可します。あなたはまた、エクスポートしたHTMLページと画像や
ソースコードのような関係する添付ファイルの自動的なアップロードをOrg-modeに設
定できます。

あなたはまた、Org-modeからPDFへ変換することもでき、さらに、サーバ上で両方の
ファイルを利用できるようにHTMLとPDFへの変換を組み合わせることも可能です。

公開はDavid O'TooleによってOrg-modeに寄与されました。

@menu
* 設定::                   プロジェクトの定義
* ファイルのアップロード::  ファイルをサーバにアップロードする方法
* 設定例::                プロジェクトのサンプル
* 公開の開始::          公開するのに使うコマンド
@end menu

@node 設定, ファイルのアップロード, 公開, 公開
@section 設定

公開はファイルの指定、公開先、プロジェクトのその他多くのプロパティの重要な設
定を必要とします。

@menu
* プロジェクトのリスト::  主な設定用の変数
* ソースと公開先::    ここからそこまで
* ファイルの選択::    どのファイルがプロジェクトの一部なのか
* 公開アクション::    公開を行う関数の設定
* 公開オプション::    HTML/@LaTeX{}エクスポートの調整
* ファイルリンク付きの公開::  どのリンクを公開した後も有効にしておくか
* サイトマップ::       全てのページリストの生成
* インデックスの生成::  ページを超えたインデックス
@end menu

@node プロジェクトのリスト, ソースと公開先, 設定, 設定
@subsection @code{org-publishing-alist}変数
@cindex org-publish-project-alist
@cindex プロジェクト、公開のための

@vindex org-publish-project-alist
公開は@code{org-publish-project-alist}というある変数の値により設定されます。リス
トの各要素が1つのプロジェクトの設定で、2種類の設定方法について以下に示します
:

@lisp
   ("project-name" :property value :property value ...)
     @r{i.e.@: a well-formed property list with alternating keys and values}
@r{or}
   ("project-name" :components ("project-name" "project-name" ...))

@end lisp

どちらの場合もプロパティと値の指定によって設定されます。プロジェクトは公開さ
れるファイルのセットと、それらが公開される時に使用する設定を定義します。上記
の2番目の形式を取る場合、@code{:components}プロパティの個々のメンバは異なる公開設
定を持つファイルをまとめたサブプロジェクトとして扱われます。あなたが``メタプ
ロジェクト''を公開する時、全てのコンポーネントは特定の順序で公開されます。

@node ソースと公開先, ファイルの選択, プロジェクトのリスト, 設定
@subsection ファイルの送り元と送り先
@cindex 公開のためのディレクトリ

多くの<プロパティは任意に選択でき、しかし多くは常にセットされているべきです
。特に、Org-modeはソースファイルをどこで探すか、またファイルの公開先を知る必
要があります。

@multitable @columnfractions 0.3 0.7
@item @code{:base-directory}
@tab 公開するソースファイルを含むディレクトリ
@item @code{:publishing-directory}
@tab アウトプットファイルのあるディレクトリは公開されます。あなたはEmacs@file{tramp}
パッケージの構文のファイル名を使ってウェブサーバに直接公開することができます
。もしくは、ローカルディレクトリに公開したり、あなたのウェブサイト
(@pxref{ファイルのアップロード})にアップロードするための拡張ツールを使うことができ
ます。
@item @code{:preparation-function}
@tab 公開プロセスの開始前に呼ばれる関数または関数のリストです(例えば、公開のため
のファイルの更新に使う@code{make}を実行します)。@code{project-plist}変数であるプロジェ
クトのプロパティリストはこの呼び出しにスコープされます。
@item @code{:completion-function}
@tab 公開プロセスが完了した後に呼ばれる関数または関数のリストです(例えば、出力し
たファイルの権限を変更します)。@code{project-plist}変数であるプロジェクトのプロパ
ティリストはこの呼び出しにスコープされます。
@end multitable
@noindent

@node ファイルの選択, 公開アクション, ソースと公開先, 設定
@subsection ファイルの選択
@cindex ファイル、公開のための選択

デフォルトでは、ベースディレクトリの中の拡張子が@file{.org}である全てのファイルは
プロジェクトの一部であるとみなされます。これはプロパティの設定により変更する
ことができます:
@multitable @columnfractions 0.25 0.75
@item @code{:base-extension}
@tab ソースファイルの拡張子(.を除きます!)です。これは実際は正規表現です。もしあ
なたが@code{:base-directory}の中の全てのファイルを取得したいのであれば、@code{any}シン
ボルをセットします。

@item @code{:exclude}
@tab そのファイルの拡張子が選択されていたとしても、公開したくないファイル名にマ
ッチする正規表現。

@item @code{:include}
@tab @code{:base-extension}と@code{:exclude}にかかわらずインクルードするファイルのリスト。

@item @code{:recursive}
@tab nilでなければ、ベースディレクトリから再帰的に公開するファイルをチェックしま
す。
@end multitable

@node 公開アクション, 公開オプション, ファイルの選択, 設定
@subsection 公開アクション
@cindex アクション、公開のための

公開は、ファイルを宛先ディレクトリにコピーし、場合によっては変換することです
。デフォルトの変換はOrg-modeファイルからHTMLファイルへのエクスポートで、これ
はHTMLエクスポーター(@pxref{HTMLのエクスポート})を呼び出す
@code{org-publish-org-to-html}によって行われます。しかしあなたはまた、
@code{org-publish-org-to-pdf}を用いたPDFファイルのようなコンテンツも公開すること
ができます。もしあなたが@i{アーカイブされた}、@i{コメントされた}、@i{除外タグがついた}ツ
リーを消去したOrg-modeファイル自身を公開したいのであれば、
@code{org-publish-org-to-org}を使い、@code{:plain-source}パラメーターと/または
@code{:htmlized-source}をセットします。これは公開ディレクトリ@footnote{もしソースと公開デ
ィレクトリが同じであれば、@file{file-source.org}と@file{file-source.org.html}です。こ
のようなセットアップでは、プロジェクトが公開される次回、新しいOrg-modeファイ
ルとみなされるソースファイルが公開されるのを防ぐためにあなたは
@code{:exclude \"-source\\\\.org\"}を@code{org-publish-alist}中のプロジェクトの定義に
追加する必要があることに注意しください。}に@file{file.org}と@file{file.org.html}を作り
ます。画像のようなその他のファイル公開ディレクトリにコピーされる必要がありま
す;
このために、あなたは@code{org-publish-attachment}を使うことができます。Org-modeで
ないファイルのために、あなたは常に公開用の関数を指定する必要があります:

@multitable @columnfractions 0.3 0.7
@item @code{:publishing-function}
@tab ファイルの公開を実行する関数です。これは、順番に呼び出される関数のリストに
することもできます。
@item @code{:plain-source}
@tab nilでなければ、プレーンソースを公開します。
@item @code{:htmlized-source}
@tab nilでなければ、HTMLに変換されたソースを公開します。
@end multitable

関数には3つの引数を渡す必要があります:
最低でも@code{:publishing-directory}プロパティを含むプロパティリスト、公開される
ファイル名、出力ファイルの公開ディレクトリへのパスです。それは指定されたファ
イルを取り、(もしあれば)必要な変換を行い、出力をコピー先ディレクトリに置きま
す。

@node 公開オプション, ファイルリンク付きの公開, 公開アクション, 設定
@subsection HTML/@LaTeX{}エクスポート機能のオプション
@cindex オプション、公開のための

プロパティリストはHTMLと@LaTeX{}エクスポート機能の多くのエクスポートオプション
をセットするために使うことができます。多くの場合、これらのプロパティは
Org-mode中のユーザ変数と対応します。下のテーブルはそれらが所属する変数と同様
なプロパティのリストです。各変数の詳細については、ドキュメントを参照してくだ
さい。

@vindex org-export-html-link-up
@vindex org-export-html-link-home
@vindex org-export-default-language
@vindex org-display-custom-times
@vindex org-export-headline-levels
@vindex org-export-with-section-numbers
@vindex org-export-section-number-format
@vindex org-export-with-toc
@vindex org-export-preserve-breaks
@vindex org-export-with-archived-trees
@vindex org-export-with-emphasize
@vindex org-export-with-sub-superscripts
@vindex org-export-with-special-strings
@vindex org-export-with-footnotes
@vindex org-export-with-drawers
@vindex org-export-with-tags
@vindex org-export-with-todo-keywords
@vindex org-export-with-priority
@vindex org-export-with-TeX-macros
@vindex org-export-with-LaTeX-fragments
@vindex org-export-skip-text-before-1st-heading
@vindex org-export-with-fixed-width
@vindex org-export-with-timestamps
@vindex org-export-author-info
@vindex org-export-email
@vindex org-export-creator-info
@vindex org-export-with-tables
@vindex org-export-highlight-first-table-line
@vindex org-export-html-style-include-default
@vindex org-export-html-style-include-scripts
@vindex org-export-html-style
@vindex org-export-html-style-extra
@vindex org-export-html-link-org-files-as-html
@vindex org-export-html-inline-images
@vindex org-export-html-extension
@vindex org-export-html-table-tag
@vindex org-export-html-expand
@vindex org-export-html-with-timestamp
@vindex org-export-publishing-directory
@vindex org-export-html-preamble
@vindex org-export-html-postamble
@vindex user-full-name
@vindex user-mail-address
@vindex org-export-select-tags
@vindex org-export-exclude-tags

@multitable @columnfractions 0.32 0.68
@item @code{:link-up}               @tab @code{org-export-html-link-up}
@item @code{:link-home}             @tab @code{org-export-html-link-home}
@item @code{:language}              @tab @code{org-export-default-language}
@item @code{:customtime}            @tab @code{org-display-custom-times}
@item @code{:headline-levels}       @tab @code{org-export-headline-levels}
@item @code{:section-numbers}       @tab @code{org-export-with-section-numbers}
@item @code{:section-number-format} @tab @code{org-export-section-number-format}
@item @code{:table-of-contents}     @tab @code{org-export-with-toc}
@item @code{:preserve-breaks}       @tab @code{org-export-preserve-breaks}
@item @code{:archived-trees}        @tab @code{org-export-with-archived-trees}
@item @code{:emphasize}             @tab @code{org-export-with-emphasize}
@item @code{:sub-superscript}       @tab @code{org-export-with-sub-superscripts}
@item @code{:special-strings}       @tab @code{org-export-with-special-strings}
@item @code{:footnotes}             @tab @code{org-export-with-footnotes}
@item @code{:drawers}               @tab @code{org-export-with-drawers}
@item @code{:tags}                  @tab @code{org-export-with-tags}
@item @code{:todo-keywords}         @tab @code{org-export-with-todo-keywords}
@item @code{:priority}              @tab @code{org-export-with-priority}
@item @code{:TeX-macros}            @tab @code{org-export-with-TeX-macros}
@item @code{:LaTeX-fragments}       @tab @code{org-export-with-LaTeX-fragments}
@item @code{:latex-listings}        @tab @code{org-export-latex-listings}
@item @code{:skip-before-1st-heading} @tab @code{org-export-skip-text-before-1st-heading}
@item @code{:fixed-width}           @tab @code{org-export-with-fixed-width}
@item @code{:timestamps}            @tab @code{org-export-with-timestamps}
@item @code{:author}                @tab @code{user-full-name}
@item @code{:email}                 @tab @code{user-mail-address} : @code{addr;addr;..}
@item @code{:author-info}           @tab @code{org-export-author-info}
@item @code{:email-info}            @tab @code{org-export-email-info}
@item @code{:creator-info}          @tab @code{org-export-creator-info}
@item @code{:tables}                @tab @code{org-export-with-tables}
@item @code{:table-auto-headline}   @tab @code{org-export-highlight-first-table-line}
@item @code{:style-include-default} @tab @code{org-export-html-style-include-default}
@item @code{:style-include-scripts} @tab @code{org-export-html-style-include-scripts}
@item @code{:style}                 @tab @code{org-export-html-style}
@item @code{:style-extra}           @tab @code{org-export-html-style-extra}
@item @code{:convert-org-links}     @tab @code{org-export-html-link-org-files-as-html}
@item @code{:inline-images}         @tab @code{org-export-html-inline-images}
@item @code{:html-extension}        @tab @code{org-export-html-extension}
@item @code{:html-preamble}         @tab @code{org-export-html-preamble}
@item @code{:html-postamble}        @tab @code{org-export-html-postamble}
@item @code{:xml-declaration}       @tab @code{org-export-html-xml-declaration}
@item @code{:html-table-tag}        @tab @code{org-export-html-table-tag}
@item @code{:expand-quoted-html}    @tab @code{org-export-html-expand}
@item @code{:timestamp}             @tab @code{org-export-html-with-timestamp}
@item @code{:publishing-directory}  @tab @code{org-export-publishing-directory}
@item @code{:select-tags}           @tab @code{org-export-select-tags}
@item @code{:exclude-tags}          @tab @code{org-export-exclude-tags}
@item @code{:latex-image-options}   @tab @code{org-export-latex-image-default-option}
@end multitable

@code{org-export-with-*}変数の大部分は@LaTeX{}エクスポートで@code{nil}と@code{t}のそれぞれで
@code{:TeX-macros}と@code{:LaTeX-fragments}オプションを除きHTMLと@LaTeX{}エクスポート機能
の両方で同じ効果を持ちます。このオプションのリストをチェックするには
@code{org-export-plist-vars}を見てください。



@vindex org-publish-project-alist
プロパティが@code{org-publish-project-alist}中の値で与えられた時、その設定は公開
時に対応するユーザー変数を上書きします。オプションをファイル
(@pxref{エクスポートオプション})内でセットしても、全て上書きされます。

@node ファイルリンク付きの公開, サイトマップ, 公開オプション, 設定
@subsection 公開ファイル間のリンク
@cindex リンク、公開

あるOrg-modeファイルから別のファイルへのリンクを作成する方法として、あなたは
@samp{[[file:foo.org][The foo]]}、もしくはより単純な
@samp{file:foo.org.}(@pxref{ハイパーリンク})のような形式を使うことができます。公開する
とき、このリンクは@file{foo.html}へのリンクとなります。この方法では、あなたはあな
たの\"Org-modeウェブ\"プロジェクトのページとHTMLへ公開するときにリンクを連結
することができます。もしあなたがOrg-modeのソースファイルを公開したりそこへの
リンクを作成したいのであれば、@code{file:}リンクは対応する@file{html}ファイルにリンク
が変換されるため、@code{file:}リンクの代わりに@code{http:}リンクを使います。

あなたはまた、画像のような関連するファイルへのリンクを作成することができます
。あなたが関連するファイル名に慎重になっているとき、そしてあなたが関連するフ
ァイルをアップロードするOrg-modeの設定をするとき、これらのリンクも働きます。
使い方の例は、@ref{複雑な例}を参照してください。

時々、公開されるOrg-modeファイルはあなたの製品環境内でのみ有効で、公開する場
所では有効でないなリンクを含むことができます。この場合、次のプロパティを使い
ます。

@multitable @columnfractions 0.4 0.6
@item @code{:link-validation-function}
@tab 有効にする関数
@end multitable

@noindent
このプロパティはリンクの有効性をチェックする関数を定義します。この関数はファ
イル名と製品環境内で解釈できるファイル名に関連するディレクトリ2つの引数を持
ちます。もしこの関数が@code{nil}を返すなら、HTMLジェネレータはHTMLファイルにリン
クを除き説明のみ挿入します。この関数へのオプションとして、
@code{org-publish-project-alist}中のプロジェクトの一部であるファイルが与えられて
いるなチェックする@code{org-publish-validate-link}があります。

@node サイトマップ, インデックスの生成, ファイルリンク付きの公開, 設定
@subsection サイトマップの生成
@cindex サイトマップ、ページの公開

以下のプロパティはプロジェクトのファイルのマップの公開を制御するために使うこ
とができます。

@multitable @columnfractions 0.35 0.65
@item @code{:auto-sitemap}
@tab nilでないとき、@code{org-publish-current-project}もしくは@code{org-publish-all}の実行
中にサイトマップを公開します。

@item @code{:sitemap-filename}
@tab 出力するサイトマップのファイル名です。デフォルトでは
@file{sitemap.org}(@file{sitemap.html}になります)です。

@item @code{:sitemap-title}
@tab サイトマップページのタイトルです。デフォルトはファイル名です。

@item @code{:sitemap-function}
@tab サイトマップの生成に使うプラグイン関数です。デフォルトでは
@code{org-publish-org-sitemap}で、プロジェクト中の全てのファイルへのリンクのプレ
ーンリストを生成します。

@item @code{:sitemap-sort-folders}
@tab フォルダがサイトマップに表示される位置です。先頭か最後にそれぞれフォルダを
表示するため、これに@code{first}(デフォルト)か@code{last}をセットしてください。

@item @code{:sitemap-sort-files}
@tab サイトマップ中でのファイルのソート方法です。@code{alphabetically}(デフォルト)、
@code{chronologically}または@code{anti-chronologically}をセットします。
@code{chronologically}はファイルを日付の古い順番にソートし、
@code{anti-chronologically}は新しい順番にソートします。@code{alphabetically}はファイル
をアルファベット順にソートします。ファイルの日付は@code{org-publish-find-dat}によ
り検索します。

@item @code{:sitemap-ignore-case}
@tab ソート時に大文字と小文字を区別するかどうかです。デフォルトでは@code{nil}です。

@item @code{:sitemap-file-entry-format}
@tab このオプションでサイトマップのエントリがサイトマップでフォーマットされてい
るか知ることができます。これはエスケープシークエンスを含むフォーマット文字列
です:
@code{%t}はファイルのタイトル、@code{%a}はファイルの著者、@code{%d}はファイルの日付を表しま
す。日付は@code{org-publish-find-date}関数により検索され、
@code{org-publish-sitemap-date-format}によりフォーマットされます。デフォルトは
@code{%t}です。

@item @code{:sitemap-date-format}
@tab エントリの日付をどのようにフォーマットするかを決める@code{format-time-string}関
数用のフォーマット文字列です。このプロパティはデフォルトでは@code{%Y-%m-%d}である
@code{rog-publish-sitemap-date-format}を迂回します.

@end multitable

@node インデックスの生成, , サイトマップ, 設定
@subsection インデックスの生成
@cindex インデックス、プロジェクトの公開

Org-modeは公開するプロジェクトのファイルを跨ぐインデックスを生成することがで
きます。

@multitable @columnfractions 0.25 0.75
@item @code{:makeindex}
@tab nilでないとき、@file{theindex.org}ファイルにインデックスを作成し、
@file{theindex.html}に公開します。
@end multitable

@code{:makeindex}を設定したプロジェクトの最初の公開のとき、ファイルは作成されます
。ファイルは@code{#+include: \"theindex.inc\"}ステートメントのみを含みます。あな
たはタイトルやスタイル情報等をステートメントの周囲に追加することができます。

@node ファイルのアップロード, 設定例, 設定, 公開
@section ファイルのアップロード
@cindex rsync
@cindex unison

Trampに深く頼っているOrg-modeの組込みの公開機能を使うことは望ましくなく、
@command{rsync}や@command{unison}のようなサードパーティの同期ツールを人々は活用しています。
Trampは非常に便利で協力ですが、複数のファイルを送る場合効率的でない場合があ
り、ヘビーに使う環境下での問題の原因として知られています。

専用の同期ユーティリティはいくつかのアドバンテージを提供します。タイムスタン
プの比較に加えて、コンテンツや権限、属性のチェックも行います。そういうわけで
、あなたのWEBページをローカルディレクトリ(場合によるとOrg-modeファイルの場所
で)に公開し、そして@file{unison}や@file{rsync}をリモートホストとの同期に使うために選ぶ
ことができます。

Unisonはファイルを信頼できるリモートの公開先に転送する設定を行うことができる
ので、プロジェクトの公開についての定義を非常にシンプルにすることができます。
@code{org-publish}を用いるあなたのOrg-modeファイルの処理と同期ツールの設定により
、正しい場所で全てのファイルをシンプルに保ちます。このシナリオでは、@file{jpg}や
@file{css}、@file{gif}のようなファイルの添付については、サードパーティの同期ツールがそ
れらを同期するため、設定する必要がありません。

ローカルディレクトリの公開はリモートへの公開に比べると高速で、
全てのプロジェクトをより簡単に再公開できます。もしあなたが
@code{org-publish-use-timestamp-flag}を@code{nil}に設定しているのであれば、変更が加え
られた@code{#+INCLUDE}でインクルードしたたソースファイルのような外部ファイルの再
公開で恩恵を受けます。Org-modeにおけるタイムスタンプのメカニズムはファイルに
変更が加えられたかどうか検出できるほどスマートではありません。

@node 設定例, 公開の開始, ファイルのアップロード, 公開
@section 設定例

私達は2つの設定の例を以下に示します。1つ目の設定はOrg-modeファイルのみのシン
プルなプロジェクトの公開です。2つ目の設定は複数のコンポーネントを持つプロジ
ェクトで、少し複雑な例です。

@menu
* 簡単な例::             1コンポーネントでの公開
* 複雑な例::             複数コンポーネントでの公開
@end menu

@node 簡単な例, 複雑な例, 設定例, 設定例
@subsection 例：シンプルな公開用の設定

この例はOrg-modeファイルのセットをローカルマシンの@file{public_html}にディレクト
リ公開します。

@lisp
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/org/"
         :publishing-directory "~/public_html"
         :section-numbers nil
         :table-of-contents nil
         :style "<link rel=\"stylesheet\"
                href=\"../other/mystyle.css\"
                type=\"text/css\"/>")))
@end lisp

@node 複雑な例, , 簡単な例, 設定例
@subsection 例：複雑な公開用の設定

この少し複雑な例はHTMLに変換されたorg-modeファイル、画像ファイル、Emacs
Lispのソースコード、スタイルシートなどを含む全てのウェブサイトを公開します。
公開ディレクトリはリモートと除外されたプライベートなファイルです。

@c
リンクが保持されていることを保証するには、ウェブサーバ上のディレクトリ構造の
再現、ファイルの相対パスの使用を慎重にするべきです。例えば、もしあなたの
Org-modeファイルが@file{~/org}に、公開する画像が@file{~/image}にあるとすると、あなたは
画像のリンクを以下のようにします。
@example
file:../images/myimage.png
@end example
@c
ウェブサーバ上では、画像への相対パスは同じにするべきです。あなたは\"images\"
フォルダをウェブサーバ上の正しい一に置き、画像をそこに公開することでこれを達
成することができます。

@lisp
(setq org-publish-project-alist
      '(("orgfiles"
          :base-directory "~/org/"
          :base-extension "org"
          :publishing-directory "/ssh:user@@host:~/html/notebook/"
          :publishing-function org-publish-org-to-html
          :exclude "PrivatePage.org"   ;; regexp
          :headline-levels 3
          :section-numbers nil
          :table-of-contents nil
          :style "<link rel=\"stylesheet\"
                  href=\"../other/mystyle.css\" type=\"text/css\"/>"
          :html-preamble t)

         ("images"
          :base-directory "~/images/"
          :base-extension "jpg\\|gif\\|png"
          :publishing-directory "/ssh:user@@host:~/html/images/"
          :publishing-function org-publish-attachment)

         ("other"
          :base-directory "~/other/"
          :base-extension "css\\|el"
          :publishing-directory "/ssh:user@@host:~/html/other/"
          :publishing-function org-publish-attachment)
         ("website" :components ("orgfiles" "images" "other"))))
@end lisp

@node 公開の開始, , 設定例, 公開
@section 公開の開始

一度適切に設定すると、Org-modeは以下のコマンドを使うことで公開することができ
ます。

@table @kbd
@orgcmd{C-c C-e X,org-publish} プロンプトでプロジェクトを指定し、プロジェクト
の全てのファイルを公開します。
@orgcmd{C-c C-e P,org-publish-current-project} 現在のファイルを含むプロジェク
トを公開します。
@orgcmd{C-c C-e F,org-publish-current-file} 現在のファイルのみ公開します。
 @orgcmd{c-c C-e E,org-publish-all} 全てのプロジェクトを公開します。
@end table

@vindex org-publish-use-timestamps-flag
Org-modeはファイルが変更された時を記録するためにタイムスタンプを使います。上
記の関数は通常変更されたファイルのみを公開します。あなたはこれを上書きし、上
記コマンドに前置引数を付けて実行するか@code{org-publish-use-timestamps-flag}変数
をカスタマイズすることで全てのファイルを強制的に公開できます。もし、ファイル
が@code{#+SETUPFILE:}や@code{#+INCLUDE:}を用いて他のファイルをインクルードしているなら
特別必要です。

@comment  node-name,  next,  previous,  up
@comment Working With Source Code, Miscellaneous, Publishing, Top

@node ソースコードとの連携, その他, 公開, Top
@chapter ソースコードとの連携
@cindex Eric Schulte
@cindex Dan Davidson
@cindex ソースコード、連携する

@samp{src}ブロックを使う事でOrg-modeの文書にソースコードを含めることができます。
例えば@:

@example
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
@end example

Org-modeでは生のソースコードと連携する幾つかの機能を用意してます。その機能に
は、コードブロックをそのメジャーモードで編集する機能、コードブロックを評価す
る機能、コードブロックをソースコードへと変換する機能(文芸的プログラミングで
は@dfn{tangling}と知られている機能)、そしてコードブロックとその結果を幾つかのフ
ォーマットに沿ってエクスポートする機能が含まれます。この機能はもともと
Org-bablelと名付けられ、Eric
SchultとDan Davidsonによって開発されました。

以下のセクションでは、Org-modeでコードブロックを取り扱う機能について説明しま
す。

@menu
* コードブロックの構造::  コードブロックシンタックスについて
* ソースコードの編集::  言語のメジャーモードを用いた編集
* コードブロックのエクスポート::  コード(と/または)結果のエクスポート
* ソースコードの抽出::  ソースコードのみのファイルの作成
* コードブロックの評価::  Org-modeバッファ中の評価結果の場所
* Babelライブラリ::     有用なコードブロックのライブラリを読む、そして貢献す
る
* 言語::                   コードブロックがサポートする言語一覧
* ヘッダー引数::       コードブロックの機能的な設定
* 評価の結果::          評価の結果を操作する方法
* Nowebでの参照の構文::  Org-modeでの文芸的プログラミング
* キーバインドと便利関数::  コードブロックを素早く操作する
* バッチ処理::          コマンドラインから関数を呼び出す
@end menu

@comment  node-name,  next,  previous,  up
@comment  Structure of code blocks, Editing source code, Working With Source Code, Working With Source Code

@node コードブロックの構造, ソースコードの編集, ソースコードとの連携, ソースコードとの連携
@section コードブロックの構造
@cindex コードブロック、構造
@cindex ソースコード、ブロック構造

コードブロックの構造は以下の通りです:

@example
#+srcname: <name>
#+begin_src <language> <switches> <header arguments>
  <body>
#+end_src
@end example

スイッチとヘッダー引数は省略可能です。次のように、コードを文章にインラインで
埋め込むこともできます。

@example
src_<language>@{<body>@}
@end example

もしくは

@example
src_<language>[<header arguments>]@{<body>@}
@end example

@table @code
@item <name>
この「name」はコードブロックと関連付けられています。これは、Org-modeの
ファイル内でテーブルに名前を付ける@samp{#+tblname}行と似ています。コードブ
ロックの名前を参照することで、そのファイル内の別の場所にあるコードブロ
ックや別のファイルの別の場所にあるコードブロック、またはOrg-modeのテー
ブルの計算式(@ref{スプレッドシート}を見て下さい)にあるコードブロックから評
価することが可能となります。
@item <language>
ブロック内にあるコードの言語です。
@item <switches>
コードブロックのエクスポートを管理する省略可能なスイッチです
(@ref{リテラルの例}を参照してください)
@item <header arguments>
コードブロックの評価、コードブロックのエクスポート、そしてコードブロッ
クからのソースコードの抽出において、省略可能なヘッダー引数が多くの側面
を管理します。@ref{ヘッダー引数}セクションを見て下さい。プロパティを使うこ
とで、バッファ毎もしくはサブツリー毎にヘッダー引数を設定できます。
@item <body>
ソースコードです。
@end table

@comment  node-name,  next,  previous,  up
@comment  Editing source code, Exporting code blocks, Structure of code blocks, Working With Source Code

@node ソースコードの編集, コードブロックのエクスポート, コードブロックの構造, ソースコードとの連携
@section ソースコードの編集
@cindex コードブロック、編集
@cindex ソースコード、編集

@kindex C-c '
現在のコードブロックを編集するには@kbd{C-c '}を使ってください。コードブロックの
本文を含んだ編集バッファが、その言語のメジャーモードで新たに開かれます。この
バッファを保存すると、Org-modeのバッファへ新しい内容を上書きします。終了させ
るには再度@kbd{C-c '}を使って下さい。

編集バッファにて@code{org-src-mode}のマイナーモードが起動します。編集バッファの振
る舞いを設定するために、以下の変数が使えます。さらなる設定オプションについて
は、カスタマイズのグループ@code{org-edit-structure}も見て下さい。

@table @code
@item org-src-lang-modes
@code{<lang>-mode}と名付けられたメジャーモードがEmacsに存在する場合、そのメ
ジャーモードで編集バッファを開きます。ここで@code{<lang>}とは、コードブロッ
クのヘッダー行で指名された言語のことです。存在するメジャーモードに任意
の言語名を割り当てるために、この変数を使えます。
@item org-src-window-setup
編集バッファを新規作成する時に、Emacsのウィンドウが再配置される方法を
管理します。
@item org-src-preserve-indentation
ホワイトスペース(空白)のインデントが非常に重要であるPythonなどの言語を
tangling(コード本文を抽出)するときに、この変数は特に役に立ちます。
@item org-src-ask-before-returning-to-edit-buffer
デフォルトでは、既に開いてある編集バッファへと戻る前に、Org-modeが確認
のプロンプトを出します。確認のプロンプトを出さずにバッファを変更するに
は、この変数をnilに設定してください。
@end table

@emph{Org-mode}バッファ内にもかかわらず、記述した言語をメジャーモードの配色で表示
したい場合には、変数@code{org-src-fontify-natively}を設定してください。

@comment  node-name,  next,  previous,  up
@comment  Exporting code blocks, Extracting source code, Editing source code, Working With Source Code

@node コードブロックのエクスポート, ソースコードの抽出, ソースコードの編集, ソースコードとの連携
@section コードブロックのエクスポート
@cindex コードブロック、エクスポート
@cindex ソースコード、エクスポート

コードブロックの@emph{内容}、コードブロックを評価した@emph{結果}、@emph{いずれでもないもの}
、もしくは内容と結果@emph{両方}をエクスポートできます。ほとんどの言語では、デフォ
ルトの設定ではコードブロックの内容をエクスポートします。しかし、ある言語(例
えば@:
@code{ditaa})では、デフォルトの設定でコードブロックを評価した結果をエクスポートし
ます。コードブロックの本文をエクスポートするには、@ref{リテラルの例}を参照してく
ださい。

ヘッダー引数@code{:exports}を設定することで、エクスポート時の振る舞いを指定できま
す:

@subsubheading ヘッダー引数:
@table @code
@item :exports code
ほとんどの言語でのデフォルトの設定です。@ref{リテラルの例}で述べたように、
コードブロックの本文が出力されます。
@item :exports results
エクスポートするために、コードブロックが評価され、その結果がOrg-modeの
バッファに出力されます。バッファ内に以前評価した結果があればその結果を
更新し、もし以前に評価した結果が無ければ直ちに今回の評価結果をコードブ
ロックの後に追記します。コードブロックの本文はエクスポートされません。
@item :exports both
コードブロックとその結果の両方がエクスポートされます。
@item :exports none
コードブロックとその結果のいずれもエクスポートされません。
@end table

エクスポートの間、コードブロックの評価を抑止することも可能です。変数
@code{org-export-babel-evaluate}を@code{nil}と設定することで、エクスポートのプロセスの
一部としてのコードブロックの評価を抑止できます。例えばwikiのマークアップ言語
としてOrg-modeを使う場合など、信頼できない可能性があるOrg-modeが自動的にエク
スポートされる場合には、この設定が役立ちます。

@comment  node-name,  next,  previous,  up
@comment  Extracting source code, Evaluating code blocks, Exporting code blocks, Working With Source Code
@node ソースコードの抽出, コードブロックの評価, コードブロックのエクスポート, ソースコードとの連携
@section ソースコードの抽出
@cindex tangling
@cindex 抽出、ソースコード
@cindex ソースコードの抽出、コードブロック

ソースブロックからコードを抽出して純粋なソースコードファイルを作成することを
、``tangling''といいます。この用語は文芸的プログラミングのコミュニティで使わ
れている専門用語です。コードブロックを``tangling''する間、変数と``noweb''ス
タイルの参照点(@ref{Nowebでの参照の構文}を参照)との両方を展開できる
@code{org-babel-expand-src-block}を使ってコードブロックの本文を展開します。

@subsubheading ヘッダー引数
@table @code
@item :tangle no
デフォルトの設定です。コードブロックは、tangleされたアウトプットには含
まれません。
@item :tangle yes
tangleされたアウトプットにコードブロックが含まれます。アウトプットされ
るファイルの名前は、orgファイルの拡張子@samp{.org}をブロックに記述した言語
の拡張子名に置換したものです。
@item :tangle filename
@samp{filename}へのtangleされたアウトプットにはコードブロックを含みます。
@end table

@kindex C-c C-v t
@subsubheading 関数
@table @code
@item org-babel-tangle
現在のファイルをtangleします。キーバインドは@kbd{C-c C-v t}です。
@item org-babel-tangle-file
tangleするファイルを選びます。キーバインドは@kbd{C-c C-v f}です。
@end table

@subsubheading フック
@table @code
@item org-babel-post-tangle-hook
関数@code{org-babel-tangle}によってtangleされたコードファイルの中から、この
hookが実行されます。tangleされたコードファイルの後処理、編集もしくは評
価を、実用例として含められます。
@end table

@node コードブロックの評価, Babelライブラリ, ソースコードの抽出, ソースコードとの連携
@section コードブロックの評価
@cindex 評価、コードブロック
@cindex 評価、ソースコード

コードブロックを評価し@footnote{コードを評価するときはいつでも、そのコードが害をなす
可能性があります。Org-modeは、ユーザーから明示的な確認をできたときのみにコー
ドを評価する安全装置をいくつも用意しています。これらの安全装置については(加
えて、それらを無効化する方法についても)、@ref{コード評価の安全性}を参照してくだ
さい。}、その結果をOrg-modeバッファに表示することが可能です。デフォルトでは
、@code{emacs-lisp}のコードブロックだけを評価しますが、多くの言語での評価のサポー
トがあります。サポートされている言語のリストは、@ref{言語}で見ることができます。
コードブロックを定義する構文について@ref{コードブロックの構造}を参照してください
。

@kindex C-c C-c
コードブロックを評価する方法は多くあります。一番簡単な方法は、コードブロック
@footnote{変数@code{org-babel-no-eval-on-ctrl-c-ctrl-c}を設定することで、キーバインド
@kbd{C-c C-c}からコードの評価を除去できます。}にて@kbd{C-c C-c}もしくは@kbd{C-c C-v e}を
と入力することです。これが関数@code{org-babel-execute-src-block}をコール、コード
ブロックを評価し、その結果をOrg-modeバッファに挿入します。

Org-modeのバッファ内、もしくはOrg-modeのテーブル内のどこからでも、名前付きの
コードブロックを評価することも可能です。現在のOrg-modeバッファや``Library
of Babel''(@ref{Babelライブラリ}にあるコードブロックを離れた場所から実行するには
、@code{#+call}行
(もしくは同義語として@code{#+function}行や@code{#+lob}行)が使えます。これらの行は、以
下の構文を使います。

@example
#+call: <name>(<arguments>) <header arguments>
#+function: <name>(<arguments>) <header arguments>
#+lob: <name>(<arguments>) <header arguments>
@end example

@table @code
@item <name>
評価されるコードブロックの名前です。
@item <arguments>
この場所に記述された引数をコードブロックへと渡します。通常の関数呼び出
しの構文を使って呼び出されたコードブロック内では、これらの引数はヘッダ
ー引数@code{:var}と関係しています。例えば、@code{double}と名付けられたもともとの
コードブロックではヘッダー引数が@code{:var n=2}と書かれている場合、そのコー
ドブロックへ数値の4を渡すには、call行を@code{#+call: double(n=4)}と記述しま
す。
@item <header arguments>
関数呼び出しの後にヘッダー引数をセットできます。ヘッダー引数の詳細につ
いては@ref{ヘッダー引数}を参照してください。
@end table

上の@code{<header arguments>}という部分に記述された全てのヘッダー引数は、
@code{#+call:}行の評価に適用されます。しかし、時には、コードブロックへ渡すヘッダ
ー引数を指定することが好ましい場合もあります。

これには、以下の選択可能な拡張された構文を使えます。

@example
#+call: <name>[<block header arguments>](<arguments>) <header arguments>
@end example

角括弧([])で囲まれた@code{<block header arguments>}部分に置かれたヘッダー引数がど
のようなものであっても、名前付きコードブロックの評価に適用されます。
@code{#+call:}行へとヘッダー引数を渡す例については、@ref{関数実行時のヘッダー引数}を
参照してください。

@node Babelライブラリ, 言語, コードブロックの評価, ソースコードとの連携
@section Babelライブラリ
@cindex ライブラリ、babel
@cindex ライブラリ、ソースコード
@cindex ライブラリ、コードブロック

``Library of Babel''は、どのOrg-modeのファイルからも呼び出せるコードブロック
のライブラリです。
そのライブラリは、Org-modeの@samp{contrib}ディレクトリのOrg-modeファイルに格納さ
れています。Org-modeのユーザーは、一般的に有用だと考えられる関数をそのライブ
ラリ内に置くことができます。

``Library of
Babel''で定義されたコードブロックは、あたかも現在のOrg-modeバッファで処理さ
れるかのように、リモートで呼び出せます(リモートでコードブロックを評価する構
文についての情報は、@ref{コードブロックの評価}を参照してください)。

@kindex C-c C-v i
どんなOrg-modeファイルに記述されたコードブロックでも、@code{org-babel-lob-ingest}
を使って``Library of
Babel''の関数へロードできます。キーバインドは@kbd{C-c C-v i}です。

@node 言語, ヘッダー引数, Babelライブラリ, ソースコードとの連携
@section 言語
@cindex 言語、babel
@cindex ソースコード、言語
@cindex コードブロック、言語

コードブロックでは、以下の言語を使えます。

@multitable @columnfractions 0.28 0.3 0.22 0.2
@item @b{言語} @tab @b{識別子} @tab @b{言語} @tab @b{識別子}
@item Asymptote @tab asymptote @tab Emacs Calc @tab calc
@item C @tab C @tab C++ @tab C++
@item Clojure @tab clojure @tab CSS @tab css
@item ditaa @tab ditaa  @tab Graphviz @tab dot
@item Emacs Lisp @tab emacs-lisp  @tab gnuplot @tab gnuplot
@item Haskell @tab haskell @tab Javascript @tab js
@item LaTeX @tab latex @tab Ledger @tab ledger
@item Lisp @tab lisp @tab MATLAB @tab matlab
@item Mscgen @tab mscgen @tab Objective Caml @tab ocaml
@item Octave @tab octave @tab Org-mode @tab org
@item Oz @tab oz @tab Perl @tab perl
@item Plantuml @tab plantuml @tab Python @tab python
@item R @tab R @tab Ruby @tab ruby
@item Sass @tab sass @tab Scheme @tab scheme
@item GNU Screen @tab screen @tab shell @tab sh
@item SQL @tab sql @tab SQLite @tab sqlite
@end multitable

言語特有の文書が存在する場合があります。文書が存在する場合、それは
@uref{http://orgmode.org/worg/org-contrib/babel/languages}にて見つけられます。

どの言語を評価するかの管理には、関数@code{org-babel-load-languages}を使います(デ
フォルトでは@code{emacs-lisp}のみを評価可能です)。
この変数を設定するには、カスタマイズのインターフェースを使うか、以下のコード
をemacsの設定ファイルに追加します。

@quotation
次のコードでは、@code{emacs-lisp}を評価させないように設定し、@code{R}のコードブロック
を評価させるように設定しています。
@end quotation

@lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . nil)
   (R . t)))
@end lisp

上記方法に加えて、@code{require}関数を使って関連するelispファイルをロードすること
でも、言語のサポートを有効にできます.

@quotation
以下は、@code{clojure}コードブロックの評価を有効にしています。
@end quotation

@lisp
(require 'ob-clojure)
@end lisp

@node ヘッダー引数, 評価の結果, 言語, ソースコードとの連携
@section ヘッダー引数
@cindex コードブロック、ヘッダー引数
@cindex ソースコード、ブロックのヘッダー引数

ヘッダー引数を通してコードブロックの機能を設定できます。このセクションではヘ
ッダー引数の使い方を概説した後に、各ヘッダー引数の詳細について説明します。

@menu
* ヘッダー引数の利用::  ヘッダー引数を設定するための別の方法
* ヘッダー引数の指定::  ヘッダー引数のリスト
@end menu

@node ヘッダー引数の利用, ヘッダー引数の指定, ヘッダー引数, ヘッダー引数
@subsection ヘッダー引数の利用

ヘッダー引数の値は6通りの方法で設定できます。以下の説明で、後に説明されるも
のほど、個別の設定として優先されます。
@menu
* システム全体のヘッダー引数::  全体的な初期値を設定する
* 各言語のヘッダー引数::  言語ごとに初期値を設定する
* バッファ全体のヘッダー引数::  特定のバッファで初期値を設定する
* Orgプロパティでのヘッダー引数::  ヘッダーまたはバッファに初期値を設定する
* コードブック指定のヘッダー引数::  値を設定するうえで最も一般的な方法
* 関数実行時のヘッダー引数::  最も細かいレベル
@end menu


@node システム全体のヘッダー引数, 各言語のヘッダー引数, ヘッダー引数の利用, ヘッダー引数の利用
@subsubheading システム全体のヘッダー引数
@vindex org-babel-default-header-args
変数@code{org-babel-default-header-args}をカスタマイズすることで、システム全体に
わたるヘッダー引数の値を指定できます。

@example
:session    => "none"
:results    => "replace"
:exports    => "code"
:cache      => "no"
:noweb      => "no"
@end example

@c @example
@c   org-babel-default-header-args is a variable defined in `org-babel.el'.
@c   Its value is
@c   ((:session . "none")
@c    (:results . "replace")
@c    (:exports . "code")
@c    (:cache . "no")
@c    (:noweb . "no"))


@c   Documentation:
@c   Default arguments to use when evaluating a code block.
@c @end example

例えば、次の例ではヘッダー引数@code{:noweb}の初期値を@code{yes}と設定できます。この設
定は、ソースコードブロックを評価する時にデフォルトの設定として@code{:noweb}の参照
記号を展開します。

@lisp
(setq org-babel-default-header-args
(cons '(:noweb . "yes")
(assq-delete-all :noweb org-babel-default-header-args)))
@end lisp

@node 各言語のヘッダー引数, バッファ全体のヘッダー引数, システム全体のヘッダー引数, ヘッダー引数の利用
@subsubheading 各言語のヘッダー引数
それぞれの言語用にデフォルトのヘッダー引数を定義できます。オンライン
@uref{http://orgmode.org/worg/org-contrib/babel}で閲覧可能な言語特有の文書を見て
下さい。

@node バッファ全体のヘッダー引数, Orgプロパティでのヘッダー引数, 各言語のヘッダー引数, ヘッダー引数の利用
@subsubheading バッファ全体のヘッダー引数
Org-modeファイルにある特別な行を使って、バッファ全体にわたるヘッダー引数を設
定できます。その行では、キーワード@code{#BABEL:}に続いて、普通のヘッダー引数の構
文を使って指定された一連のヘッダー引数があります。

次の例は、@code{session}を@code{*R*}と設定し、バッファ内にあるコードブロック毎の
@code{results}を@code{silent}と指定しています。この設定により、全ての(コードブロックが
)同一のセッションで実行されること、そして、結果はそのバッファに挿入されない
ことを確かにしています。

@example
#+BABEL: :session *R* :results silent
@end example

@node Orgプロパティでのヘッダー引数, コードブック指定のヘッダー引数, バッファ全体のヘッダー引数, ヘッダー引数の利用
@subsubheading Orgプロパティでのヘッダー引数

ヘッダー引数はOrg-modeのプロパティから読み出すこともできます
(@ref{プロパティの表記法}を見て下さい)。プロパティはバッファ全体もしくは見出しご
との単位で設定できます。例えば、バッファ内の全コードブロックのヘッダー引数を
設定するには、以下のようにします。

@example
#+property: tangle yes
@end example

デフォルトのヘッダー引数を設定するためにプロパティを使う場合、プロパティは継
承(関係)に沿って参照されます。したがって、以下の見出しに属するサブツリー内の
全てのコードブロックでは、ヘッダー引数@code{:cache}の値はデフォルトで@code{yes}となり
ます:

@example
* アウトラインの見出し
:PROPERTIES:
:cache:    yes
:END:
@end example

@kindex C-c C-x p
@vindex org-babel-default-header-args
このように設定されたプロパティは、@code{org-babel-default-header-args}に設定され
たプロパティを上書きします。Org-modeドキュメント内のプロパティを設定する関数
@code{org-set-property}を使うのが便利です。キーバインドは@kbd{C-c C-x p}です。

@node コードブック指定のヘッダー引数, 関数実行時のヘッダー引数, Orgプロパティでのヘッダー引数, ヘッダー引数の利用
@subsubheading コードブック指定のヘッダー引数

コードブロックのレベルでヘッダー引数に値を割り当てる方法が最も一般的です。
@code{#+begin_src}行の一部として、ヘッダー引数とその値とを並べることによって設定
されます。このように設定されたプロパティは変数
@code{org-babel-default-header-args}とプロパティとして設定されたヘッダー引数との
両方を上書きします。以下に示す例では、実行結果をバッファに挿入しないように、
ヘッダー引数@code{:results}を@code{silent}と設定し、加えてHTMLやLaTeXへのエクスポート
時にコードブロックの本文だけが保存されるように、ヘッダー引数@code{:exports}を
@code{code}と設定しています。

@example
#+source: factorial
#+begin_src haskell :results silent :exports code :var n=0
fac 0 = 1
fac n = n * fac (n-1)
#+end_src
@end example
同様に、インラインのコードブロックにヘッダー引数を設定することも可能です:

@example
src_haskell[:exports both]@{fac 5@}
@end example

コードブロックのヘッダー引数を複数行にわたって記述できます。=#+header:=もし
くは=#+headers:=の行を、コードブロックの前に記述するか、名前付きコードブロッ
クの名前とコード本文との間に記述します。

名前を付けていないコードブロックに複数行のヘッダー引数を設定します:
@example
 #+headers: :var data1=1
 #+begin_src emacs-lisp :var data2=2
   (message "data1:%S, data2:%S" data1 data2)
 #+end_src

 #+results:
 : data1:1, data2:2
@end example

名前を付けたコードブロックに複数行のヘッダー引数を設定します:
@example
   #+source: named-block
   #+header: :var data=2
   #+begin_src emacs-lisp
     (message "data:%S" data)
   #+end_src

   #+results: named-block
   : data:2
@end example

@node 関数実行時のヘッダー引数, , コードブック指定のヘッダー引数, ヘッダー引数の利用
@comment  node-name,  next,  previous,  up
@subsubheading 関数実行時のヘッダー引数

一番個別のレベルにおいて、Babelライブラリのためのヘッダー引数もしくは関数の
呼び出し行は、下に示す2つの例のように設定できます。@code{#call:}行の構造について
の更なる情報は、@ref{コードブロックの評価}を参照してください。

以下は、ヘッダー引数@code{:exports results}を@code{#+call:}行の評価に適用します。
@example
#+call: factorial(n=5) :exports results
@end example

以下は、ヘッダー引数@code{:session special}をコードブロック@code{factorial}の評価に適
用します。
@example
#+call: factorial[:session special](n=5)
@end example

@node ヘッダー引数の指定, , ヘッダー引数の利用, ヘッダー引数
@subsection ヘッダー引数の指定
以下のヘッダー引数が定義されています:

@menu
* var::                      引数をコードブロックに渡す
* results::                  結果のタイプ及び操作と収集方法を特定する
* file::                     ファイルを出力するパスを設定する
* dir::                      コードブロックの実行結果を出力する(可能ならばリ
モートの)ディレクトリを特定する
* exports::                  コードと(または)実行結果を出力する
* tangle::                   抽出の有無をトグルしてファイル名を特定する
* mkdirp::                   抽出している間、ターゲットファイルの親ディレク
トリの生成をトグルする
* comments::                 tangleされたコードファイルでコメントの挿入をト
グルする
* no-expand::                tangle中に変数割り当てとnowebの展開をオフにする
* session::                  コード評価の状態を保存する
* noweb::                    noweb参照の展開をトグルする
* cache::                    未変更のコードブロックの再評価を回避する
* sep::                      Org-modeの外部に表を出力するための区切り文字
* hlines::                   テーブルの水平ラインを制御する
* colnames::                 テーブルの列名称を制御する
* rownames::                 テーブルの行名称を制御する
* shebang::                  tangleされたファイルを実行可能形式にする
* eval::                     特定のコードブロックの評価を制限する
@end menu

@node var, results, ヘッダー引数の指定, ヘッダー引数の指定
@subsubsection @code{:var}
ヘッダー引数@code{:var}はコードブロックへ引数を渡すために使われます。コードブロッ
クに含まれている引数を受け取る方法は、言語によって異なります;これらは、言語
固有の文書にて説明されています。しかし、引数を指定する構文はすべての言語で共
通です。引数に渡される値は、定数(リテラル値)、Org-modeのテーブルとliteral
exampleブロックからの値、他のコードブロックの結果、あるいはEmacs Lispのコー
ドです。---Emacs
Lispについては、以下の見出し``Emacs Lisp evaluation of variables''を見て下さ
い。

これらの値は配列のようにインデックス化できます---以下の見出し
``indexable variable values''を見て下さい。

ヘッダー引数@code{:var}を使ってコードブロックへ引数を渡すには、以下の構文を使いま
す。

@example
:var name=assign
@end example

ここで、@code{assign}は以下のフォームのどれかをとることができます。

@itemize @bullet
@item 定数(リテラル値)
文字列(例:@code{"string"})、もしくは数字(例:@code{9})のどちらかです。
@item 参照
テーブルの名前:

@example
#+tblname: example-table
| 1 |
| 2 |
| 3 |
| 4 |

#+source: table-length
#+begin_src emacs-lisp :var table=example-table
(length table)
#+end_src

#+results: table-length
: 4
@end example

@code{#+srcname:}(訳者注:@code{#+source:}と同一のもの)で割り当てられたコードブロ
ックの名前で、後ろに括弧「()」が続きます。

@example
#+begin_src emacs-lisp :var length=table-length()
(* 2 length)
#+end_src

#+results:
: 8
@end example

加えて、@code{:var}により参照されるコードブロックへと引数を渡すことも可能で
す。コードブロック名に続く括弧「()」内の引数が渡されます:

@example
#+source: double
#+begin_src emacs-lisp :var input=8
(* 2 input)
#+end_src

#+results: double
: 16

#+source: squared
#+begin_src emacs-lisp :var input=double(input=1)
(* input input)
#+end_src

#+results: squared
: 4
@end example
@end itemize

@subsubheading Alternate argument syntax(引数を指定する別の構文)
コードブロックの@code{#+source:}行を利用するという方法でも引数を指定できます。も
しかすると、こちらの方法がより自然かもしれません。以下の例のように、引数はソ
ースの名前に続く括弧「()」の内に、カンマ「,」で分離された形でひとまとめにさ
れています。

@example
#+source: double(input=0, x=2)
#+begin_src emacs-lisp
(* 2 (+ input x))
#+end_src
@end example

@subsubheading Indexable variable values(インデックス化可能な変数の値)
変数の``indexing''インデックス化によって割り当てられた変数の一部分を参照でき
ます。インデックス(添え字)は0から始まります。インデックスが負の値の場合、そ
れは要素の最後から逆順に数え上げたものです。インデックスが「@code{,}」で分割され
ているとき、後続する部分のそれぞれが、次に深いネスティング(入れ子構造)にイン
デックス化するか、値の次元にインデックス化します。@code{:hlines}、@code{:colnames}、そ
して@code{:rownames}のようなヘッダー引数と関連する他のテーブルが変更される@emph{前に}
、このインデックス化が行われることに注意して下さい。次の例では、テーブル
@code{example-table}1行目の最後のセルを変数@code{data}に割り当てています:

@example
#+results: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

#+begin_src emacs-lisp :var data=example-table[0,-1]
  data
#+end_src

#+results:
: a
@end example

@code{:}で区切られた2つの整数を使うことで、変数の範囲(行や列?)を参照できます。こ
の場合、包括的な範囲を参照します。例えば、以下では@code{example-table}の中央3行を
@code{data}に割り当てています。

@example
#+results: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |
| 5 | 3 |

#+begin_src emacs-lisp :var data=example-table[1:3]
  data
#+end_src

#+results:
| 2 | b |
| 3 | c |
| 4 | d |
@end example

加えて、インデックスが空の場合もしくは単一文字@code{*}の場合のどちらでも、全ての
範囲すなわち@code{0:-1}を意味していると解釈されます。次の例では、1列目すべてが参
照されます。

@example
#+results: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

#+begin_src emacs-lisp :var data=example-table[,0]
  data
#+end_src

#+results:
| 1 | 2 | 3 | 4 |
@end example

コードブロックの結果をテーブルの様にインデックス化できます。どんな次元数でも
インデックス化できます。以下の例に示すように、次元はそれぞれカンマで分割され
ます。

@example
#+source: 3D
#+begin_src emacs-lisp
  '(((1  2  3)  (4  5  6)  (7  8  9))
    ((10 11 12) (13 14 15) (16 17 18))
    ((19 20 21) (22 23 24) (25 26 27)))
#+end_src

#+begin_src emacs-lisp :var data=3D[1,,1]
  data
#+end_src

#+results:
| 11 | 14 | 17 |
@end example

@subsubheading Emacs Lisp evaluation of variables(Emacs Lispによる変数の評価)

変数の値を初期化するときにEmacs Lispのコードを使えます。変数の値が
@code{(}, @code{[}, @code{'} もしくは
@code{`}で始まる場合、変数はEmacs
Lispとして評価され、その評価結果を変数の値として代入されます。次の例では、こ
の評価を使ってOrg-modのファイル名を確かにコードブロックへ渡しています---元の
Org-file内でヘッダー引数が間違いなく評価されるということに注意して下さい。コ
ードブロックで評価する場合そのような保証はありません。

@example
#+begin_src sh :var file-name=(buffer-file-name) :exports both
  wc -w $file
#+end_src
@end example

テーブルやリストから読み出された値はEmacs Lispとして評価されないことに注意し
て下さい。以下はその例です。

@example
#+results: table
| (a b c) |

#+headers: :var data=table[0,0]
#+begin_src perl
  $data
#+end_src

#+results:
: (a b c)
@end example

@node results, file, var, ヘッダー引数の指定
@subsubsection @code{:results}

ヘッダー引数@code{:results}には3つのクラスがあります。コードブロックでは、クラス
毎に1個のオプションだけを付与できます。

@itemize @bullet
@item
ヘッダー引数@b{collection}は、コードブロックからどのように結果を集めかを指
定します。
@item
ヘッダー引数@b{type}はコードブロックがどのタイプの結果を返すかを指定します
---これは、Org-modeのバッファへ結果を挿入する方法に影響します。
@item
ヘッダー引数@b{handling}はコードブロックの評価の結果をどのように扱うかを指
定します。
@end itemize

@subsubheading Collection
以下のオプションは、コードブロックから結果を収める方法を指定します。どちらか
のオプションしか指定できません。

@itemize @bullet
@item @code{value}
デフォルトの設定です。コードブロックの最終行の値が結果になります。この
ヘッダー引数はfunctional
modeで評価します。このタイプの返り値を使う場合、Pythonなどの言語では、
ソースコードブロックの本文で@code{return}文が必要なことに注意して下さい。
例えば、@code{:results value}のように記述します。
@item @code{output}
コードブロックで実行される間に標準出力(STDOUT)へと出力されたもの全てを
収集して結果とします。このヘッダー引数はscripting
modeで評価します。例えば、@code{:results output}のように記述します。
@end itemize

@subsubheading Type

以下のオプションは相互に排他的で、コードブロックの結果のタイプを返します。デ
フォルトでは、結果の値によって、テーブルかスカラーのどちらかが結果として挿入
されます。

@itemize @bullet
@item @code{table}, @code{vector}
結果は、Org-modeのテーブルとして解釈されます。単一の値が返された場合、
結果は1行1列のテーブルへと変換されます。例えば、@code{:results value table}
のように記述します。
@item @code{list}
結果は、Org-modeのリストとして解釈されます。単一のスカラー値が返された
場合、結果は1要素からなるリストへと変換されます。
@item @code{scalar}, @code{verbatim}
結果は文字通りに評価されます---結果はテーブルへと変換されません。結果
は引用されたテキストとしてOrg-modeのバッファに挿入されます。例えば、
@code{:results value verbatim}と記述します。
@item @code{file}
結果はファイルへのパスとして解釈され、ファイルのリンクとしてOrg-modeの
バッファに挿入されます。例えば、@code{:results value file}のように記述しま
す。
@item @code{raw}, @code{org}
結果は加工されていないOrg-modeのコードとして解釈され、そのバッファに直
接挿入されます。結果がテーブルのように見えるときは、Org-modeのように整
形します。例えば、@code{:results value raw}のように記述します。
@item @code{html}
結果はHTMLであると見なされて、@code{begin_html}ブロックに囲まれます。例えば
、@code{:results value html}のように記述します。
@item @code{latex}
結果はLaTeXと見なされて、@code{begin_latex}ブロックに囲まれます。例えば、
@code{:results value latex}のように記述します。
@item @code{code}
結果は構文解析可能なコードと見なされて、コードブロックに囲まれます。例
えば、@code{:results value code}のように記述します。
@item @code{pp}
結果は装飾されたコードに変換されて、コードブロックに囲まれます。このオ
プションは、現在、Emacs Lisp,
PythonとRubyをサポートしています。例えば、@code{:results value pp}のように
記述します。
@item @code{wrap}
結果は@code{begin_result}ブロックに囲まれます。結果の展開方法(extend?名詞形
を見つけられず)が分かっていて自動的に削除されるか置換されるような、
@code{raw}もしくは@code{org}構文の結果を挿入する時にこのオプションを使うと便利で
す。
@end itemize

@subsubheading Handling
以下のresultのオプションは、結果が1度集められた後に何が起こるかを示していま
す。

@itemize @bullet
@item @code{silent}
結果はミニバッファに表示されますが、Org-modeのバッファには挿入されませ
ん。例えば、@code{:results output silent}と記述します。
@item @code{replace}
デフォルトの設定です。どんな結果でも存在していれば削除し、新しい結果を
Org-modeのバッファのその場所に挿入します。例えば、
@code{:results output replace}と記述します。
@item @code{append}
コードブロックの結果が以前から存在する場合、現在存在する結果の最後に新
しい結果を付け加えます。結果が存在しない場合は、@code{replace}のように新し
い結果を挿入します。
@item @code{prepend}
もしコードブロックの結果が既に存在する場合、現在存在する結果の先頭に新
しい結果を追加します。結果が存在しない場合は、@code{replace}のように新しい
結果を挿入します。
@end itemize

@node file, dir, results, ヘッダー引数の指定
@subsubsection @code{:file}

コードブロックの結果を保存する外部ファイルを指定するために、ヘッダー引数
@code{:file}を使います。コードブロックの評価の後に、そのファイルへのOrg-modeスタ
イルのリンク@code{[[file:]]}(@ref{リンクのフォーマット}を参照)が、Org-modeのバッファ
に挿入されます。R,
gnuplot,
dotやditaaなどの言語では、ヘッダー引数@code{:file}を扱う特別な機能が用意されてい
ます。その機能とは、指定されたファイルへアウトプットを保存するために、必要な
定型のコードでコードブロックの本文を囲むというものです。これは、コードブロッ
クの画像出力を特定のファイルに保存する場合に、しばしば役立ちます。

@code{:file}に対する引数は、ファイルのパスを示す文字列、もしくは、次の2つの文字列
からなるリスト、のどちらかでなくてはなりません。2つの文字列からなるリストと
は、第1要素はファイルのパス、第2要素はそのリンクの説明から構成されます。

@node dir, exports, file, ヘッダー引数の指定
@subsubsection @code{:dir}とリモートでの実行

ヘッダー引数@code{:file}がアウトプットするファイルのパスを指定する一方で、@code{:dir}
はコードブロックを実行する間のデフォルトのディレクトリを指定します。指定され
ない場合、現在のバッファに関連するディレクトリが使われます。つまり、
@code{:dir path}を一時的に与えることは、@kbd{M-x cd path}でカレントディレクトリを変え
るだけで@code{:dir}を設定しない場合と同じ効果を持ちます。水面下では、@code{:dir}が
Emacsの変数@code{default-directory}を変更しているだけなのです。

@code{:dir}を使う場合、アウトプットするファイルを相対パス(例@: @code{:file myfile.jpg}も
しくは@code{:file results/myfile.jpg})で与えなければなりません。その場合、与えた
パスはデフォルトディレクトリに対する相対パスとして解釈されます。

つまり、ホームディレクトリ内の@file{Work}フォルダでプロット(グラフを描画)したい場
合、次のように使えます。

@example
#+begin_src R :file myplot.png :dir ~/Work
matplot(matrix(rnorm(100), 10), type="l")
#+end_src
@end example

@subsubheading リモートでの実行
trampのファイル構文を使う事でリモートマシン上のディレクトリを指定できます。
その場合、リモートマシン上でコードが評価されます。1つの例です。

@example
#+begin_src R :file plot.png :dir /dand@@yakuba.princeton.edu:
plot(1:10, main=system("hostname", intern=TRUE))
#+end_src
@end example

従来通りローカルのOrg-modeのバッファにテキストの結果が返されますが、リモート
マシン上のリモートディレクトリを基準とした相対パスにファイルのアウトプットが
作成されます。リモートのファイルへのOrg-modeのリンクが生成されます。

従って、上の例では、リモートマシン上にグラフが生成され、Org-modeバッファには
次の形式のリンクが挿入されます。

@example
[[file:/scp:dand@@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]
@end example

trampのおかげで、@code{:dir}がEmacsの変数@code{default-directory}の値をセットした後す
ぐに、この機能を使えます。これらの機能を正しく動かすためには、XEmacsや
version23より前のGNU
Emacsを使っている人はtrampを別にインストールする必要があるかもしれません。

@subsubheading 更なるポイント

@itemize @bullet
@item
もし@code{:session}と並行して@code{:dir}が使われるとき、新規セッションを開始する
場合には開始ディレクトリを予想して決定します。しかし、すでにセッション
が存在する場合には、現バージョンでは、そのセッションと関連したディレク
トリを変更しません。
@item
@code{:exports results}や@code{:exports both}を使ってファイルをエクスポートする
間、通常は@code{:dir}を使ってファイルを生成するべきではありません。理由は以
下の通りです。2つのマシンでエクスポートされた結果の移植性を維持するた
めに、エクスポート時にバッファへと挿入されるリンクは
@code{default-directory}に対して展開
*されていません* 。それゆえ、もし@code{:dir}を使って@code{default directory}を変
えてしまうと、リンクで意図していない場所にファイルが作られるという恐れ
があります。
@end itemize

@node exports, tangle, dir, ヘッダー引数の指定
@subsubsection @code{:exports}

ヘッダー引数@code{:exports}は、Org-modeファイルのHTMLエクスポートやLaTeXエクスポ
ートに、何を含めるかを指定します。

@itemize @bullet
@item @code{code}
デフォルトの設定です。コードの本文がエクスポートされるファイルに含まれ
ます。例えば、@code{:exports code}のように記述します。
@item @code{results}
コードの評価結果がエクスポートされるファイルに含まれます。例えば、
@code{:exports results}のように記述します。
@item @code{both}
コードと結果の両方がエクスポートされるファイルに含まれます。例えば、
@code{:exports both}のように記述します。
@item @code{none}
エクスポートされるファイルには何も含まれません。例えば、
@code{:exports none}のように記述します。
@end itemize

@node tangle, mkdirp, exports, ヘッダー引数の指定
@subsubsection @code{:tangle}

ヘッダー引数@code{:tangle}は、ソースコードファイルを抽出したファイルにコードブロ
ックを含めるか否かを指定します。

@itemize @bullet
@item @code{tangle}
コードブロックは、Org-modeのファイルのbasename(拡張子を取り除いた名前)
にちなんだソースコードファイルにエクスポートされます。例えば、
@code{:tangle yes}のように記述します。
@item @code{no}
デフォルトの設定です。コードブロックはソースコードファイルにエクスポー
トされません。例えば、@code{:tangle no}のように記述します。
@item other
ヘッダー引数@code{:tangle}に渡された何か他の文字列を、ブロックをエクスポー
トするファイルのbasenameと解釈します。例えば、@code{:tangle basename}のよう
に記述します。
@end itemize

@node mkdirp, comments, tangle, ヘッダー引数の指定
@subsubsection @code{:mkdirp}

抽出(tangle)されたファイルの親ディレクトリが無いときに、ヘッダー引数
@code{:mkdirp}を使って親ディレクトリを作成できます。ディレクトリ作成を許可するに
はこのヘッダー引数を@code{yes}と設定し、ディレクトリ作成を禁止するには@code{no}と設定
します。

@node comments, no-expand, mkdirp, ヘッダー引数の指定
@subsubsection @code{:comments}
デフォルトの設定では、コードブロックをソースコードへと抽出するときに、コード
ブロック本文に既に存在するコメントだけを挿入します。抽出されたコードファイル
に追加のコメントを挿入するには、ヘッダー引数@code{:comments}を以下のように設定し
ます。

@itemize @bullet
@item @code{no}
デフォルトの設定です。抽出(tangle)する間に、コメントは追加挿入されません。
@item @code{link}
コードブロックは、コードが抽出された元のOrg-modeファイルへ戻るポインタ
を含むコメントに囲まれます。
@item @code{yes}
``link''と同じ意味です。これは後方互換性を保持するためです。
@item @code{org}
Org-modeのファイルからのテキストをコメントとして含みます。

抽出されたコードに先行する文脈からテキストが選ばれます。テキストは、状
況に応じて、一番近い見出しもしくはソースブロックに限定されます。
@item @code{both}
コメントのオプションの``link''と``org''との両方を有効にします。
@item @code{noweb}
コメントのオプション``link''を有効にし、nowebの参照記号をコードブロッ
ク本文に展開し、それをリンクのコメントで囲みます。
@end itemize

@node no-expand, session, comments, ヘッダー引数の指定
@subsubsection @code{:no-expand}

デフォルトの設定では、抽出の際に関数@code{org-babel-expand-src-block}によってコー
ドブロックが展開されます。これには、@code{:var}を使って変数を割り当てる(@ref{var}を参
照してください)効果に加えて、``noweb''の参照記号(@ref{Nowebでの参照の構文}を参照
してください)をそのターゲットで置き換える効果があります。この動作を無効にす
るためにヘッダー引数@code{:no-expand}を使います。

@node session, noweb, no-expand, ヘッダー引数の指定
@subsubsection @code{:session}

ヘッダー引数@code{:session}は、読み取られた言語のにセッションを開始します。セッシ
ョンでは、状態は保存されます。

デフォルトでは、セッションは開始されません。

ヘッダー引数@code{:session}に渡された文字列が、セッション名になります。これにより
、読み取られた言語のそれぞれについて並列セッションを実行可能です。

@node noweb, cache, session, ヘッダー引数の指定
@subsubsection @code{:noweb}

ヘッダー引数@code{:noweb}はコードブロック内における``noweb''スタイル
(@ref{Nowebでの参照の構文}を参照のこと)の参照記号を展開する方法について管理して
います。このヘッダー引数は次の3つ@code{yes}、@code{no}もしくは
@code{tangle}から1つを選ぶことができます。

@itemize @bullet
@item @code{yes}
そのブロックが評価、抽出、エクスポートされる前に、コードブロックの本文
にある全ての``noweb''構文の参照記号が展開されます。
@item @code{no}
デフォルトの設定です。コードブロックの評価では``noweb''構文のアクショ
ンはありません。しかし、抽出の間にnoweb参照記号は展開されます。
@item @code{tangle}
ブロックを抽出する前に、コードブロックの本文にある全ての``noweb''構文
の参照記号は展開されますが、ブロックが評価されるときやエクスポートされ
るときは``noweb''の参照記号は展開されません。
@end itemize

@subsubheading Nowebの行頭部分
現在、Nowebの挿入機能は、@code{<<reference>>}の行頭部分の後ろで実行されます。この
振る舞いは次の例で説明されます。nowwebの参照記号@code{<<example>>}がSQLのコメント
の構文の後で見つかったため、nowebの参照記号を展開して、それぞれの行をコメン
トとして挿入します。

このコードブロックは:

@example
-- <<example>>
@end example


次のように展開されます:

@example
-- これは
-- exampleの複数行の本文です
@end example

次の事に注意して下さい。改行を含まないnowebのテキスト置換ではこの変化の影響
を受けません。したがって、インラインのnowebの参照記号を使う事も可能です。

@node cache, sep, noweb, ヘッダー引数の指定
@subsubsection @code{:cache}

ヘッダー引数@code{:cache}はコードブロックの評価結果をバッファ内に保存するか(=キャ
ッシュするか)を管理します。これにより、変化していないコードブロックを再度評
価することを避けられます。このヘッダー引数は:@code{yes}あるいは@code{no}のどちらかの値
をとります。

@itemize @bullet
@item @code{no}
デフォルトの設定です。実行結果をバッファに保存せず、呼び出される度にコ
ードブロックを評価します。
@item @code{yes}
コードブロックが実行される度に、そのコードとブロックに渡された引数とか
らなるSHA1ハッシュ値を生成します。このハッシュ値は@code{#+results:}行に格納
され、後のコードブロックの実行時にチェックされます。前回評価した時から
コードブロックに変化が無い場合、そのコードブロックは改めて評価されません。
@end itemize

コードブロックの引数である変数の値が変化した場合でも、コードブロックのキャッ
シュは変化として検知します。この場合、キャッシュは無効となり、そのコードブロ
ックは再度実行されます。次の例では、@code{random}の結果が前回実行時から変化しない
限り、@code{caller}は実行されません。

@example
 #+srcname: random
 #+begin_src R :cache yes
 runif(1)
 #+end_src

 #+results[a2a72cd647ad44515fab62e144796432793d68e1]: random
 0.4659510825295

 #+srcname: caller
 #+begin_src emacs-lisp :var x=random :cache yes
 x
 #+end_src

 #+results[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
 0.254227238707244
@end example

@node sep, hlines, cache, ヘッダー引数の指定
@subsubsection @code{:sep}

Org-modeから外部のファイルへ表形式の結果を書き出す時に、ヘッダー引数@code{:sep}を
使って区切り文字のを管理できます。この機能は、次のどちらかの場合に使用できま
す。まずは、コードブロック上で@kbd{C-c C-o}にキーバインドされた関数
@code{org-open-at-point}を呼び出して、表形式で書かれたコードブロックの結果を開く
場合です。もう1つは、コードブロックの結果を外部ファイルのヘッダー引数へ出力
する場合です(@ref{file}を参照してください。)。

デフォルトでは、@code{:sep}が設定されていない場合、出力されるテーブルはタブで区切
られています。

@node hlines, colnames, sep, ヘッダー引数の指定
@subsubsection @code{:hlines}

テーブルは頻繁に1本以上の水平な線、すなわちhlines(訳者注:_h_orizontal
_lines_)を使って表現されます。コードブロックの引数@code{:hlines}の値として@code{yes}も
しくは
@code{no}を使えます。デフォルトでは@code{no}と設定されています。

@itemize @bullet
@item @code{no}
入力されたテーブルから水平な線を取り除きます。ほとんどの言語ではこれが
望ましい設定です。なぜなら@code{hline}の記号を定義されていない変数と見なさ
れて、エラーとなるからです。@code{:hlines no}と設定するか、デフォルトの設定
値を使う場合、次のように出力されます。

@example
#+tblname: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+source: echo-table
#+begin_src python :var tab=many-cols
  return tab
#+end_src

#+results: echo-table
| a | b | c |
| d | e | f |
| g | h | i |
@end example

@item @code{yes}
テーブル内の水平な線を残したままにします。@code{:hlines yes}と設定すると以
下のようになります。

@example
#+tblname: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+source: echo-table
#+begin_src python :var tab=many-cols :hlines yes
  return tab
#+end_src

#+results: echo-table
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |
@end example
@end itemize

@node colnames, rownames, hlines, ヘッダー引数の指定
@subsubsection @code{:colnames}

ヘッダー引数@code{:colnames}は、@code{yes}と@code{no}そして宣言していない場合の@code{nil}を値と
して持てます。デフォルトでは@code{nil}に設定されています。

@itemize @bullet
@item @code{nil}
(2行目が水平な線であることから)入力されたテーブルに列の名前があるよう
に考えられる場合には、列の名前を取り除いてから処理を行い、その結果に対
して改めて列の名前を付け加えます。

@example
#+tblname: less-cols
| a |
|---|
| b |
| c |

#+srcname: echo-table-again
#+begin_src python :var tab=less-cols
  return [[val + '*' for val in row] for row in tab]
#+end_src

#+results: echo-table-again
| a  |
|----|
| b* |
| c* |
@end example

variable indexing (@xref{var, Indexable variable values}.)を使ってテーブル
をインデックス化する前に、テーブルの列の名前が取り除かれていないことに
注意してください。

@item @code{no}
列の名前に関する前処理は行われません。

@item @code{yes}
テーブルが列の名前を持っている「ように見えない」場合でも(すなわち@:
2行目が水平な線でない場合でも)、@code{nil}を設定されたように、列の名前を除
外し、改めて結果の列に名前を付け加えます。
@end itemize

@node rownames, shebang, colnames, ヘッダー引数の指定
@subsubsection @code{:rownames}

ヘッダー引数@code{:rownames}は@code{yes}もしくは@code{no}を値として持つ事ができ、デフォルト
では@code{no}と設定されています。

@itemize @bullet
@item @code{no}
行に関する前処理を行いません。

@item @code{yes}
前処理としてテーブルの1列目を取り除き、処理結果に列の名前を付け加えます。

@example
#+tblname: with-rownames
| one | 1 | 2 | 3 | 4 |  5 |
| two | 6 | 7 | 8 | 9 | 10 |

#+srcname: echo-table-once-again
#+begin_src python :var tab=with-rownames :rownames yes
  return [[val + 10 for val in row] for row in tab]
#+end_src

#+results: echo-table-once-again
| one | 11 | 12 | 13 | 14 | 15 |
| two | 16 | 17 | 18 | 19 | 20 |
@end example

variable indexing (@xref{var, Indexable variable values}.)を使ってテーブル
をインデックス化する前に、テーブルの行の名前が取り除かれていないことに
注意してください。

@end itemize

@node shebang, eval, rownames, ヘッダー引数の指定
@subsubsection @code{:shebang}

ヘッダー引数@code{:shebang}に文字列の値(例えば@: @code{:shebang "#!/bin/bash"})を設定す
ることで、コードブロックを抽出した全てのファイルの1行目にその文字列を挿入し
、抽出されたファイルのパーミッションを実行可能と設定します。

@node eval, , shebang, ヘッダー引数の指定
@subsubsection @code{:eval}
ヘッダー引数@code{:eval}を使って、特定のコードブロックの評価を制限できます。
@code{:eval}は``never''と``query''の2つの値をとれます。@code{:eval never}はコードブロ
ックが評価されないことを確かにします。 これは危険なコードブロックを評価する
ことを防ぐのに便利です。@code{:eval query}と設定すると、変数
@code{org-confirm-babel-evaluate}の値に関係なく、コードブロックを実行する度に確認
のダイアログがでます。

@node 評価の結果, Nowebでの参照の構文, ヘッダー引数, ソースコードとの連携
@section 評価の結果
@cindex コードブロック、評価の結果
@cindex ソースコード、評価の結果

結果の取り扱われ方は、セッションが呼び出されたかに依存することに加えて、
@code{:results value}もしくは@code{:results output}が使われているかに依存します。
(table
possibilies:の意味が分からない)次のテーブルでは全ての場合を表形式にまとめま
した。ヘッダー引数resultsが取り得る完全なリストは、@ref{results}を見て下さい。

@multitable @columnfractions 0.26 0.33 0.41
@item @tab @b{Non-session} @tab @b{Session}
@item @code{:results value} @tab 最後の式の値 @tab 最後の式の値
@item @code{:results output} @tab STDOUTの内容 @tab インタプリタの出力をつなげたもの
@end multitable

以下に注意すること:@code{:results value}と設定することで、適切な場合は、
@code{:session}とnon-sessionの両方の結果はテーブル(文字列もしくは数字からなる1次
元もしくは2次元のベクトル)の形でOrg-modeに返されます。

@subsection Non-session
@subsubsection @code{:results value}
デフォルトの設定です。外部の言語で書かれた関数定義のコードを囲むことと、内部
でその関数を評価することによってその値が得られます。それゆえ、コードはその関
数の本文であるかのように書かなければなりません。特に、Pythonは@code{return}文が存
在しない限り自動的に関数から返り値を返しませんので、Pythonでは多くの場合に
@samp{return}文が必要なことに注意してください。

コンテクストを評価する4つの方法の中で、これは関数定義にコードが自動的に囲ま
れるただ一つの方法です。

@subsubsection @code{:results output}
外部プロセスとしてのインタープリタにコードが渡され、標準出力ストリームの内容
がテキストとして返されます。(いくつかの言語ではエラー出力のストリームも含ま
れます;
これは今後の課題です。)

@subsection Session
@subsubsection @code{:results value}
Emacsのインタラクティブな下位プロセスとして実行しているインタープリタにコー
ドが渡されます。返される結果は、そのインタープリタが最後に評価した結果です。
(これは言語固有の方法で得られています:PythonやRubyでの変数@code{_}の値であり、Rで
の@code{.Last.value}の値です)。

@subsubsection @code{:results output}
Emacsのインタラクティブな下位プロセスとして実行しているインタープリタにコー
ドが渡されます。返される結果は、そのインタープリタからの一連の(テキストの)ア
ウトプットを結合したものです。もし外部プロセスとして実行しているインタラクテ
ィブでないインタープリタに同じコードが送られるなら、@code{STDOUT}へと送られるであ
ろうものと全く同じである必要は無いことに注意して下さい。例えば、次の2つのブ
ロックを比べて下さい:

@example
#+begin_src python :results output
 print "hello"
 2
 print "bye"
#+end_src

#+resname:
: hello
: bye
@end example

non-sessionモードでは、`2'はプリントされず、表示されません。
@example
#+begin_src python :results output :session
 print "hello"
 2
 print "bye"
#+end_src

#+resname:
: hello
: 2
: bye
@end example

しかし@code{:session}モードでは、インタラクティブなインタープリタは入力`2'を受け
取り、その値`2'を表示します。(実際には、ここでは他のprint文は不要です)。

@node Nowebでの参照の構文, キーバインドと便利関数, 評価の結果, ソースコードとの連携
@section Nowebでの参照の構文
@cindex コードブロック、nowebリファレンス
@cindex 構文、noweb
@cindex ソースコード、nowebリファレンス

``noweb''
(@uref{http://www.cs.tufts.edu/~nr/noweb/}を参照のこと)による文芸的プログラミング
のシステムは、名付けられたコードブロックがよく知られたNowebの構文を使って参
照されることを許しています:

@example
<<code-block-name>>
@end example

コードブロックが抽出されるか評価されるとき、``noweb''参照記号を展開するかし
ないかは、ヘッダー引数@code{:noweb}の値に依存します。もし@code{:noweb yes}なら、Noweb
の参照記号が展開されてから評価が行われます。もし@code{:noweb no}なら、デフォルト
の設定ですが、参照記号は展開されずに評価が行われます。

注意:ある言語内で正しいコードが破壊されないように、デフォルトの値を
@code{:noweb no}と設定しています。例えばRubyでは、@code{<<arg>>}が構文的に有効な構成要
素です。もしあなたが使っている言語で@code{<<arg>>}が構文的に有効な構成要素でない
場合に、デフォルトの値を検討してください。

@node キーバインドと便利関数, バッチ処理, Nowebでの参照の構文, ソースコードとの連携
@section キーバインドと便利関数
@cindex コードブロック、 キーバインディング

多くの一般のOrg-modeのキー操作が、コンテクストに応じて再定義されています。

コードブロックの中では、以下のキーバインドが有効になっています。

@multitable @columnfractions 0.25 0.75
@kindex C-c C-c
@item @kbd{C-c C-c} @tab @code{org-babel-execute-src-block}
@kindex C-c C-o
@item @kbd{C-c C-o} @tab @code{org-babel-open-src-block-result}
@kindex C-up
@item @kbd{C-@key{up}}    @tab @code{org-babel-load-in-session}
@kindex M-down
@item @kbd{M-@key{down}}  @tab @code{org-babel-pop-to-session}
@end multitable

Org-modeのバッファ内では、以下のキーバインドが有効になっています。

@multitable @columnfractions 0.45 0.55
@kindex C-c C-v a
@kindex C-c C-v C-a
@item @kbd{C-c C-v a} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-a} @tab @code{org-babel-sha1-hash}
@kindex C-c C-v b
@kindex C-c C-v C-b
@item @kbd{C-c C-v b} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-b} @tab @code{org-babel-execute-buffer}
@kindex C-c C-v f
@kindex C-c C-v C-f
@item @kbd{C-c C-v f} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-f} @tab @code{org-babel-tangle-file}
@kindex C-c C-v g
@item @kbd{C-c C-v g} @tab @code{org-babel-goto-named-source-block}
@kindex C-c C-v h
@item @kbd{C-c C-v h} @tab @code{org-babel-describe-bindings}
@kindex C-c C-v l
@kindex C-c C-v C-l
@item @kbd{C-c C-v l} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-l} @tab @code{org-babel-lob-ingest}
@kindex C-c C-v p
@kindex C-c C-v C-p
@item @kbd{C-c C-v p} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-p} @tab @code{org-babel-expand-src-block}
@kindex C-c C-v s
@kindex C-c C-v C-s
@item @kbd{C-c C-v s} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-s} @tab @code{org-babel-execute-subtree}
@kindex C-c C-v t
@kindex C-c C-v C-t
@item @kbd{C-c C-v t} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-t} @tab @code{org-babel-tangle}
@kindex C-c C-v z
@kindex C-c C-v C-z
@item @kbd{C-c C-v z} @ @ @r{もしくは} @ @ @kbd{C-c C-v C-z} @tab @code{org-babel-switch-to-session}
@end multitable

@c When possible these keybindings were extended to work when the control key is
@c kept pressed, resulting in the following additional keybindings.

@c @multitable @columnfractions 0.25 0.75
@c @item @kbd{C-c C-v C-a} @tab @code{org-babel-sha1-hash}
@c @item @kbd{C-c C-v C-b} @tab @code{org-babel-execute-buffer}
@c @item @kbd{C-c C-v C-f} @tab @code{org-babel-tangle-file}
@c @item @kbd{C-c C-v C-l} @tab @code{org-babel-lob-ingest}
@c @item @kbd{C-c C-v C-p} @tab @code{org-babel-expand-src-block}
@c @item @kbd{C-c C-v C-s} @tab @code{org-babel-execute-subtree}
@c @item @kbd{C-c C-v C-t} @tab @code{org-babel-tangle}
@c @item @kbd{C-c C-v C-z} @tab @code{org-babel-switch-to-session}
@c @end multitable

@node バッチ処理, , キーバインドと便利関数, ソースコードとの連携
@section バッチ処理
@cindex コードブロック、バッチ処理
@cindex ソースコード、バッチ処理

コマンドラインから関数を呼び出すことができます。このシェルスクリプトは、引数
のそれぞれに対して@code{org-babel-tangle}を呼び出します。

あなたのシステムに合わせてパスを設定するように注意してください。

@example
#!/bin/sh
# -*- mode: shell-script -*-
#
# org-mode でファイルを抽出する
#
DIR=`pwd`
FILES=""
ORGINSTALL="~/src/org/lisp/org-install.el"

# tangleする必要があるそれぞれの引数をクォーテーションで囲む
for i in $@@; do
    FILES="$FILES \"$i\""
done

emacs -Q --batch -l $ORGINSTALL \
--eval "(progn
(add-to-list 'load-path (expand-file-name \"~/src/org/lisp/\"))
(add-to-list 'load-path (expand-file-name \"~/src/org/contrib/lisp/\"))
(require 'org)(require 'org-exp)(require 'ob)(require 'ob-tangle)
(mapc (lambda (file)
       (find-file (expand-file-name file \"$DIR\"))
       (org-babel-tangle)
       (kill-buffer)) '($FILES)))" 2>&1 |grep tangled
@end example

@node その他, ハッキング, ソースコードとの連携, Top
@chapter その他

@menu
* 補完::                   M-TABはあなたが何を必要としているか知っています
* 簡単なテンプレート::  構造的な要素の素早い挿入
* スピードキー::       見出しの開始位置で使うの電撃的なコマンド
* コード評価の安全性::  Org-modeのファイルはインラインのコードを評価する
* カスタマイズ::       Org-modeをユーザーの好みに合わせる
* バッファ内での変数制御::  「#+KEYWORDS」の概要
* 「C-c C-c」キーはとても忙しい::  わからなかったら「C-c
                                                C-c」
* アウトラインの「*」を取り除く::  アウトラインの「*」の並びを取り除く
* TTYキー::                Org-modeをtty端末で使う
* 連携::                   Emacsの他のパッケージ
@end menu


@node 補完, 簡単なテンプレート, その他, その他
@section 補完
@cindex 補完、@TeX{}の記号
@cindex 完了、TODOキーワードの
@cindex 補完、辞書の単語
@cindex 補完、オプションのキーワード
@cindex 完了、タグの
@cindex 補完、プロパティキー
@cindex 補完、リンクの省略記法
@cindex @TeX{}シンボルの補完
@cindex TODOキーワードの補完
@cindex 辞書単語の補完
@cindex オプションキーワードの補完
@cindex タグの補完
@cindex リンクの省略記法の補完

Emacsは補完無しではEmacsとはいえません、そしてorg-modeはそれが意味をなすたび
に使用します。もしあなたが@i{iswitchb}-
か@i{ido}-のようなインタフェースを補完のプロンプトとして好むのであれば、あなたは
@code{org-completion-use-iswitchb}や@code{org-completion-use-ido}変数のいずれかを設定
することで指定することができます。

Org-modeはバッファ中の補完をサポートします。この種類の補完はミニバッファを活
用します。あなたは簡単に数文字をバッファに入力し、補完キーを補完するテキスト
の右側で押します。

@table @kbd
@kindex M-@key{TAB}
@item M-@key{TAB}
ポイント位置での補完
@itemize @bullet
@item
見出しの先頭では、TODOキーワードを補完します。
@item
@samp{\}の後では、エクスポート機能によりサポートされる@TeX{}のシンボルを補完し
ます。
@item
@samp{*}の後では、@samp{[[*find this headline]]}のようにリンクを検索できるように
、カレントバッファで見出しを補完します。
@item
見出し中の@samp{:}の後では、タグを補完します。タグのリストは@code{org-tag-alist}
変数(@pxref{タグの設定}より、もしかすると、バッファ中の@samp{#+TAGS}オプションで
も設定されているかもしれません。)から与えられるか、カレントバッファで
使われている全てのタグから動的に生成されます。
@item
見出しの外にある@samp{:}の後では、プロパティキーを補完します。キーのリスト
は現在のバッファで使われている全てのキーから動的に構築されます。
@item
@samp{[}の後では、リンクの省略記法を補完します(@pxref{リンクの省略記法})。
@item
@samp{+}の後では、Org-mode向けのファイル固有の設定としてセットする
@samp{TYP_TODO}や@samp{OPTIONS}のようなスペシャルキーワードを補完します。オプシ
ョンキーワードが既に補完されているなら、@kbd{M-@key{TAB}}を再び押すことでこの
キーワードの設定の例を挿入します。
@item
@samp{#+STARTUP: }の後の行の中では、STARTUPキーワードを補完します、すなわち
、@:はこの行では正しいキーです。
@item
他の場所では、Ispellを用いた辞書補完が行われます。
@end itemize
@end table

@node 簡単なテンプレート, スピードキー, 補完, その他
@section 簡単なテンプレート
@cindex テンプレートの挿入
@cindex テンプレートの挿入

Org-modeは僅かなキーストロークのみによる空の構造の(@code{#+BEGIN_SRC}や
@code{#+END_SRC}のような)要素の挿入をサポートします。これはネイティブなテンプレー
ト拡張機構を通じて得られるものです。ここで留意すべきこととして、Emacsは例え
ば@file{yasnippet}のような同じように使うことができるいくつかの他のテンプレート機
構を持ちます。

構造要素の挿入には、@samp{<}をタイプし、続いてテンプレートセレクタと@kbd{@key{TAB}}をタイ
プします。補完は上記のキーストロークが単独で行に入力されている場合のみ働きま
す。

以下のテンプレートセレクタが現在サポートされています。

@multitable @columnfractions 0.1 0.9
@item @kbd{s} @tab @code{#+begin_src     ... #+end_src}
@item @kbd{e} @tab @code{#+begin_example ... #+end_example}
@item @kbd{q} @tab @code{#+begin_quote   ... #+end_quote}
@item @kbd{v} @tab @code{#+begin_verse   ... #+end_verse}
@item @kbd{c} @tab @code{#+begin_center  ... #+end_center}
@item @kbd{l} @tab @code{#+begin_latex   ... #+end_latex}
@item @kbd{L} @tab @code{#+latex:}
@item @kbd{h} @tab @code{#+begin_html    ... #+end_html}
@item @kbd{H} @tab @code{#+html:}
@item @kbd{a} @tab @code{#+begin_ascii   ... #+end_ascii}
@item @kbd{A} @tab @code{#+ascii:}
@item @kbd{i} @tab @code{#+include:} line
@end multitable

例えば、空の行で"<e"と入力し、その後TABを入力すると、EXAMPLEテンプレートが補
完されます。

あなたは@code{org-structure-template-list}変数をカスタマイズすることで追加のテン
プレートをインストールすることができます。詳細は変数のdocstringを参照してく
ださい。

@node スピードキー, コード評価の安全性, 簡単なテンプレート, その他
@section スピードキー
@cindex speed keys
@vindex org-use-speed-commands
@vindex org-speed-commands-user

最初のアスタリスクの前のように、カーソルが見出しの先頭にある時、シングルキー
はコマンドを実行できるようになっています。@code{org-use-speed-commands}変数を設定
することでこの機能を有効にします。あらかじめ定義されているコマンドのリストを
挙げます。そして、@code{org-speed-commans-user}変数にコマンドを追加することもでき
ます。Speed
keysは操作や他のコマンドを使うスピードを上げるだけではなく、TTYやキーボード
に限界があるモバイル端末上で実行できない、または簡単に実行できないキーに割り
当てられたコマンドを実行するための別の可能性を提供します。

コマンドが実行可能かどうかを見るには、機能を有効にして見出しの先頭にカーソル
を置いて@kbd{?}を押します。

@node コード評価の安全性, カスタマイズ, スピードキー, その他
@section コードの評価とセキュリティの問題

Org-modeは評価を含むコードのスニペットを使って作業をするためのツールを提供し
ます。

あなたのマシン上でコードが動くことは常にセキュリティのリスクをもたらします。
目的のため、またはアクシデントによって良くないコードや悪意のあるコードは実行
されます。Org-modeはあなたが明確に実行の許可を与える場合のみそのようなコード
を評価するデフォルトの設定を持っていて、そしてカジュアルなユーザーに対しては
これらの機能は予防措置として保つべきです。

そのようなコードを通常用いる人々のために、確認用のプロンプトが表示され、そし
てあなたはそれをオフにするかもしれません。これを行うことは可能ですが、あなた
はリスクとかかわることを承知しなくてはなりません。

コードの評価は以下に挙げる状況を引き起こします:

@table @i
@item ソースコードブロック
ソースコードブロックはエクスポート中かブロック中で@kbd{C-c C-c}を押した時
に評価されます。ここで最も重要な事はコードスニペットを含むOrg-modeのフ
ァイルがある意味で、実行可能なファイルに似ているということです。それで
、あたはそれらに対応し正しいソースのみをEmacsにロードすべきです--
あなたがコンピュータ上にインストールしたプログラムのように。

デフォルトのセキュリティ装置を切る変数をカスタマイズする前にあなたがし
ていることを確かめてください。

@defopt org-confirm-babel-evaluate
t(これがデフォルトです)の時、ユーザーはコードブロックを評価する前に毎
回確認されます。nilの時、ユーザは確認されません。関数をセットすると、
それは2つの引数(言語とコードブロックの本体)を伴って呼ばれ、tを返せば尋
ね、nilならば尋ねません。
@end defopt

例えば、これは"ditaa"コード(安全性は考慮されています)を確認無しで実行
する方法です:
@example
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "ditaa")))  ; don't ask for ditaa
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
@end example

@item 以下の@code{shell}と@code{elisp}はリンクしています。
Org-modeはコードを直接評価できる2つのリンクタイプ(@pxref{外部リンク})を持っ
ています。実行されるコードが見えないため、これらのリンクは問題がありえます。

@defopt org-confirm-shell-link-function
シェルへのリンクを実行するための問い合わせを行う関数。
@end defopt
@defopt org-confirm-elisp-link-function
Emacs Lispへのリンクを実行するための問い合わせを行う関数。
@end defopt

@item 表中の式
表中の式(@pxref{スプレッドシート})は@i{calc}インタプリタでも@i{Emacs Lisp}インタプリ
タでも実行できるコードです。
@end table

@node カスタマイズ, バッファ内での変数制御, コード評価の安全性, その他
@section カスタマイズ
@cindex カスタマイズ
@cindex カスタマイズのオプション
@cindex カスタマイズの変数

Org-modeをカスタマイズするために使われる変数は180以上あります。マニュアルの
圧縮のため、私はここで変数の説明はしません。変数のカスタマイズの構造化された
概要は@kbd{M-x org-customize}で見ることができます。もしくは、
@code{Org->Customization}から@code{Browse Org Group}を選択してください。多くの設定はバ
ッファに特別な行を書くこと(@pxref{バッファ内での変数制御})でそのファイル中で有効に
することができます。

@node バッファ内での変数制御, 「C-c C-c」キーはとても忙しい, カスタマイズ, その他
@section バッファ中での設定の要約
@cindex バッファ中での設定
@cindex スペシャルキーワード

Org-modeはファイル単位で設定を定義するために、バッファ内の特別な行を使用しま
す。これらの行は@samp{#+}に続くキーワードとコロン、そして設定を定義する語句ででき
ています。いくつかの設定用語句は同じ行に書くことも、分けて書くこともできます
。これらの設定はマニュアルを通じて説明されており、ここには要約を載せています
。バッファ中の行を編集した後は、カーソル位置の変更をすぐに反映するために
@kbd{C-c C-c}を押しれください。そうでなければ、新しいEmacsのセッションでファイル
を再び開いた時のみ反映されます。

@vindex org-archive-location
@table @kbd
@item #+ARCHIVE: %s_done::
この行はこの行はアジェンダファイルのアーカイブ場所を設定します。次の
@samp{#+ARCHIVE}行まで、もしくはファイルの末尾までの全ての行で適用されます
。最初の行はまた、それより前の全てのエントリにも適用されます。関係する
変数は@code{org-archive-location}です。
@item #+CATEGORY:
この行はアジェンダファイルのカテゴリを設定します。カテゴリは次の
@samp{#+CATEGORY}行か、ファイル末尾までの全ての行で適用されます。また、それ
より前の全ての行にも適用されます。
@item #+COLUMNS: %25ITEM .....
@cindex プロパティ（COLUMNS）
カラムビューのデフォルトフォーマットを設定します。@code{COLUMNS}プロパティ
が適用されていない箇所でカラムビューが呼ばれた場合、このフォーマットが
適用されます。
@item #+CONSTANTS: name1=value1 ...
@vindex org-table-formula-constants
@vindex org-table-formula
テーブル式の中で使われる定数として、ファイルローカルな値を設定します。
この行はローカル変数@code{org-table-formula-constants-local}を設定します。
グローバルバージョンは@code{org-table-formula-constants}です。
@item #+FILETAGS: :tag1:tag2:tag3:
ファイル中のエントリトップレベルエントリを含めたエントリが引き継ぐタグ
を設定します。
@item #+DRAWERS: NAME1 .....
@vindex org-drawers
ファイルローカルな引き出しのセットを設定します。関係するグローバル変数
が@code{org-drawers}です。
@item #+LINK:  linkword replace
@vindex org-link-abbrev-alist
これらの行初はリンクの省略記法を指定します。@xref{リンクの省略記法}.
関係する変数は@code{org-link-abbrev-alist}です。
@item #+PRIORITIES: highest lowest default
@vindex org-highest-priority
@vindex org-lowest-priority
@vindex org-default-priority
これらの行は優先順位の上限と初期値を設定します。3つ全てが、AからZまで
の文字か、0から9までの数字のどれかでなくてはいけません。最も高い優先順
位は最も低い優先順位より低いASCIIの数値を持つ必要があります。
@item #+PROPERTY: Property_Name Value
この行は現在のバッファ中のエントリがデフォルトで引き継ぐ値を設定します
。与えられたプロパティの値を指定するのに、最も便利です。
@cindex #+SETUPFILE
@item #+SETUPFILE: file
この行はバッファ内の設定を持つファイルを定義します。通常は、これは完全
に無視されます。バッファのオプションの設定行をパースされた時のみ、バッ
ファにそれらが含まれていればこのファイルのコンテンツはパースされます。
特に、ファイルは内部設定の別のOrg-modeファイルとすることができます。カ
ーソルをこの行に置き、@kbd{C-c '}を押すことであなたはこのファイルを開くこ
とができます。
@item #+STARTUP:
@cindex #+STARTUP:
この行はOrg-modeのファイルが開かれた時にに使われるオプションを設定します。

最初のオプションセットはアウトラインツリーの初期表示を設定します。グロ
ーバルなデフォルトの設定に関係する変数は@code{org-startup-folded}で、初期値
は@code{t}で、それはすなわち@code{overview}です。
@vindex org-startup-folded
@cindex @code{overview}, STARTUPキーワード
@cindex @code{content}, STARTUPキーワード
@cindex @code{showall}, STARTUPキーワード
@cindex @code{showeverything}, STARTUPキーワード
@example
overview         @r{トップレベルの見出しのみ}
content          @r{全ての見出し}
showall          @r{全てのエントリを畳み込まない}
showeverything   @r{コンテンツの引き出しも表示する}
@end example

@vindex org-startup-indented
@cindex STARTUPキーワード、@code{indent}
@cindex STARTUPキーワード、@code{noindent}
動的な仮想インデントは変数@code{org-startup-idented}@footnote{Emacs22とOrg-mode6.29
が必要です}によって制御されます。
@example
indent     @r{start with @code{org-indent-mode} turned on}
noindent   @r{start with @code{org-indent-mode} turned off}
@end example

@vindex org-startup-align-all-tables
それから、開いたファイルの表を整列させつオプションがあります。これはフ
ァイルがナローされた表を含む時に役に立ちます。関係する変数は
@code{org-startup-align-all-tables}で、デフォルトでは@code{nil}です。
@cindex STARTUPキーワード、@code{align}
@cindex STARTUPキーワード、@code{noalign}
@example
align      @r{align all tables}
noalign    @r{don't align tables on startup}
@end example

@vindex org-startup-with-inline-images
ファイルを開いたとき、インライン画像は自動的に表示されます。関係する変
数は@code{org-startup-with-inine-images}で、ファイルを開いた際の遅延を避け
るためにデフォルトでは@code{nil}になっています。
@cindex @code{inlineimages}, STARTUP keyword
@cindex @code{noinlineimages}, STARTUP keyword
@example
inlineimages   @r{show inline images}
noinlineimages @r{don't show inline images on startup}
@end example

@vindex org-log-done
@vindex org-log-note-clock-out
@vindex org-log-repeat
TODOアイテムの完了と再開のログを取ることとその感覚はこれらのオプション
によって設定することが可能です(変数@code{org-log-done}と
@code{org-log-note-clock-out}、@code{org-log-repeat}を参照してください)。
@cindex STARTUPキーワード、@code{logdone}
@cindex STARTUPキーワード、@code{lognotedone}
@cindex STARTUPキーワード、@code{nologdone}
@cindex STARTUPキーワード、@code{lognoteclock-out}
@cindex STATUPキーワード、@code{nolognoteclock-out}
@cindex STARTUPキーワード、@code{logrepeat}
@cindex STARTUPキーワード、@code{lognoterepeat}
@cindex STARTUPキーワード、@code{nologrepeat}
@cindex STARTUPキーワード、@code{logschedule}
@cindex STARTUPキーワード、@code{lognotereschedule}
@cindex STARTUPキーワード、@code{nologreschedule}
@cindex STARTUPキーワード、@code{logredeadline}
@cindex STARTUPキーワード、@code{lognoredeadline}
@cindex STARTUPキーワード、@code{nologredeadline}
@cindex STARTUPキーワード、@code{logrefile}
@cindex STARTUPキーワード、@code{lognoterefile}
@cindex STARTUPキーワード、<@code{nologrefile}
@example
logdone            @r{アイテムにDONEマークがついたとき、タイムスタンプを記
録します}
lognotedone        @r{ノートにDONEマークがついたとき、タイムスタンプを記録
します}
nologdone          @r{アイテムにDONEマークがついたとき、タイムスタンプを記
録しません}
logrepeat          @r{アイテムが再開されたとき、時刻を記録します}
lognoterepeat      @r{アイテムが再開されたとき、ノートをを記録します}
nologrepeat        @r{アイテムが再開されたとき、記録を行わいません}
lognoteclock-out   @r{時間測定が終了したとき、ノートを記録します}
nolognoteclock-out @r{時間測定が終了したとき、ノートを記録しません}
logreschedule      @r{スケジューリングが変わったとき、タイムスタンプを記録
します}
lognotereschedule  @r{スケジューリングが変わったとき、ノートを記録します}
nologreschedule    @r{スケジューリングが変わったとき、記録しません}
logredeadline      @r{デッドラインが変更されたとき、タイムスタンプを記録し
ます}
lognoteredeadline  @r{デッドラインが変更されたとき、ノートを記録します}
nologredeadline    @r{デッドラインが変更されたとき、記録しません}
logrefile          @r{リファイル時にタイムスタンプを記録します}
lognoterefile      @r{リファイル時にノートを記録します}
nologrefile        @r{リファイル時に記録しません}
@end example
@vindex org-hide-leading-stars
@vindex org-odd-levels-only
ここは、インデントされたアウトラインの見出しを隠すオプションです。関係
する変数は@code{org-hide-leading-stars}と@code{org-odd-levels-only}で、デフォル
トの設定は両方とも@code{nil}(@code{showstars}と@code{oddeven})を意味します。
@cindex STARTUP keyword、@code{hidestars}
@cindex STARTUP keyword、@code{showstars}
@cindex STARTUP keyword、@code{odd}
@cindex STARTUP keyword、@code{even}
@example
hidestars  @r{全てのヘッドラインの「*」を見えなくします}
showstars  @r{全てのヘッドラインの「*」を見えるようにします}
indent     @r{virtual indentation according to outline level}
noindent   @r{アウトラインのレベルに一致する仮想インデントを行いません}
odd        @r{奇数のアウトラインレベル(1、3……)のみ}
oddeven    @r{全てのアウトラインレベル}
@end example
@vindex org-put-time-stamp-overlays
@vindex org-time-stamp-overlay-formats
タイムスタンプ(@code{org-put-time-stamp-overlays}と
@code{org-time-stamp-overlay-formats}変数)のカスタムフォーマットオーバレイ
を切り替えます、
@cindex STARTUP keyword、@code{customtime}
@example
customtime @r{カスタマイズされたタイムフォーマットで覆います}
@end example
@vindex constants-unit-system
以下のオプションは表計算(@code{constants-unit-system}変数)に影響を与えます。
@cindex STARTUP keyword、@code{constcgs}
@cindex STARTUP keyword、@code{constSI}
@example
constcgs   @r{@file{constants.el} should use the c-g-s unit system}
constSI    @r{@file{constants.el} should use the SI unit system}
@end example
@vindex org-footnote-define-inline
@vindex org-footnote-auto-label
@vindex org-footnote-auto-adjust
脚注の設定を行うには、以下のキーワードを使います。関係する変数は
@code{org-footnote-define-inline}と@code{org-footnote-auto-label}、
@code{org-footnote-auto-adjust}です。
@cindex @code{fninline}, STARTUPキーワード
@cindex @code{nofninline}, STARTUPキーワード
@cindex @code{fnlocal}, STARTUPキーワード
@cindex @code{fnprompt},キーワード
@cindex @code{fnauto}, STARTUPキーワード
@cindex @code{fnconfirm}, STARTUPキーワード
@cindex @code{fnplain}, STARTUPキーワード
@cindex @code{fnadjust}, STARTUPキーワード
@cindex @code{nofnadjust}, STARTUPキーワード
@example
fninline    @r{脚注のインラインを定義します}
fnnoinline  @r{分割されたセクションでの脚注を定義します}
fnlocal     @r{最初の言及元の近くの脚注を定義しますが、インラインではあり
ません}
fnprompt    @r{脚注ラベルのプロンプト}
fnauto      @r{@code{[fn:1]}のようなラベルを自動的に作成します(これがデフォルト
です)}
fnconfirm   @r{編集と確認用の自動ラベルを用意します}
fnplain     @r{@code{[1]}のようなラベルを自動的に作成します}
fnadjust    @r{自動的に脚注の番号を振り直し、ソートします}
nofnadjust  @r{自動的に番号の振り直しとソートを行いません}
@end example
@cindex org-hide-block-startup
開始時にブロックを見えなくするには、これらのキーワードを使います。関連
する変数は@code{org-hide-block-startup}です。
@cindex @code{hideblocks}, STARTUP keyword
@cindex @code{nohideblocks}, STARTUP keyword
@example
hideblocks   @r{開始時に全ての開始/終了ブロックを見えなくします}
nohideblocks @r{開始時にブロックを見えなくしません}
@end example
@cindex org-pretty-entities
UTF-8の文字の表示は変数@code{org-pretty-entities}と以下のキーワードにより制
御されます。
@cindex @code{entitiespretty}, STARTUPキーワード
@cindex @code{entitiesplain}, STARTUPキーワード
@example
entitiespretty  @r{可能な時、UTF-8の文字を表示します}
entitiesplain   @r{空白にします}
@end example
@item #+TAGS:  TAG1(c1) TAG2(c2)
@vindex org-tag-alist
これらの行はファイル中の正しいタグと関連する@emph{fast tag selection}キーを
指定します。関連する変数は@code{org-tag-alist}です。
@item #+TBLFM:
この行には行上にある表の数式が含まれます。
@item #+TITLE:, #+AUTHOR:, #+EMAIL:, #+LANGUAGE:, #+TEXT:, #+DATE:,
@itemx #+OPTIONS:, #+BIND:, #+XSLT:,
@itemx #+DESCRIPTION:, #+KEYWORDS:,
@itemx #+LATEX_HEADER:, #+STYLE:, #+LINK_UP:, #+LINK_HOME:,
@itemx #+EXPORT_SELECT_TAGS:, #+EXPORT_EXCLUDE_TAGS:
これらの行はエクスポートするファイルの設定を提供します。詳細については
@ref{エクスポートオプション}を参照してください。
@item #+TODO:    #+SEQ_TODO:   #+TYP_TODO:
@vindex org-todo-keywords
これらの行は現在のファイルでのTODOキーワードとそれらの説明をセットしま
す。関連する変数は@code{org-todo-keywords}です。
@end table

@node 「C-c C-c」キーはとても忙しい, アウトラインの「*」を取り除く, バッファ内での変数制御, その他
@section 「C-c C-c」キーはとても忙しい
@kindex C-c C-c
@cindex C-c C-c、概観

Org-modeでは@kbd{C-c C-c}キーは多くの目的を持っていて、それはこのマニュアルの中
のあちこちに分かれて書かれています。このキーの具体的な機能として、見出しに
@emph{タグ}を追加するものがあります(@pxref{タグ})。他の多くの状況では、@emph{``ここを見て、
見たものに応じて更新する''}というようなものを意味します。これは、異なる文脈
でそれが何を意味するかの概要です。

@itemize @minus
@item
ツリーの抽出か時間表示からバッファ中のハイライトがあるなら、それらのハ
イライトを消去します。
@item
カーソルが特別な行である@code{#+KEYWORD}行上にあるなら、このトリガーはバッ
ファをこの行でスキャンし情報を更新します。
@item
カーソルが表の中にあるなら、表を再調整します。もし自動テーブルエディタ
がオフになっていても、このコマンドは同じように働きます。
@item
カーソルが@code{#+TBLFM}行にあるなら、全ての表に式を再適用します。
@item
カレントバッファがキャプチャバッファの場合、ノートを閉じファイルします
。接頭辞引数を付けると相互作用せずにデフォルトの場所にファイルします。
@item
カーソルが@code{<<<target>>>}上にあるなら、ラジオターゲットとバッファ中の関
係するリンクを更新します。
@item
カーソルがプロパティ行かプロパティ引き出しの開始か終了行にあるなら、プ
ロパティコマンドを提供します。
@item
カーソルが脚注参照上にあるなら、関係する定義部に行きます。反対も同様です。
@item
カーソルが統計データクッキー上にあるなら、それを更新します。
@item
カーソルがチェックボックス付きのプレーンリスト上にあるなら、チェックボ
ックスのステータスをトグルします。
@item
カーソルが数字付きリスト上にあるなら、順序を整理しなおします。
@item
カーソルは。動的なブロックの@code{#+BEGIN}行上にあるなら、ブロックを更新し
ます。
@end itemize

@node アウトラインの「*」を取り除く, TTYキー, 「C-c C-c」キーはとても忙しい, その他
@section より見やすいアウトラインビュー
@cindex 先頭の「*」を隠す
@cindex 動的なインデント
@cindex 奇数レベルのみのアウトライン
@cindex アウトラインビューを見やすくする

多くの人々はOrg-modeの見出しについている「*」の数が増えたときや見出しの下の
テキストがインデントされていないことを不快に感じます。アウトラインの見出しが
本当のセクションの見出しの場所で@emph{本のように}文書を書く時、これは問題ではあり
ませんが、さらに@emph{正しい位置のリスト}アウトライン中では、インデント構造はより
見やすくなります。

@example
@group
* Top level headline             |    * Top level headline
** Second level                  |      * Second level
*** 3rd level                    |        * 3rd level
some text                        |          some text
*** 3rd level                    |        * 3rd level
more text                        |          more text
* Another top level headline     |    * Another top level headline
@end group
@end example

@noindent

もしあなたが少なくともEmacs23.2@footnote{Emacs23.1は@code{org-indent-mode}がクラッシュしま
す}とOrg-modeのバージョン6.29を使っているのなら、この主のビューは
@code{org-indent-mode}を使って表示する時間を動的に実現できます。このマイナーモー
ドでは、全ての行は必要なスペース@footnote{@code{org-indent-mode}は@code{visual-line-mode}(また
は純粋に@code{word-wrap}をセットします)が(見出しを含めた)長い行を正しいインデント
でラップするように@code{wrap-prefix}プロパティをセットします}が前について表示され
ます。見出しはまた追加の「*」が前に置かれていて、それで1レベルにつき
2@footnote{@code{org-indent-indentation-per-level}変数を参照してください}スペースシフトし
てインデントします。全ての見出しの「*」の最後の1個だけは@code{org-hide}フェイス
@footnote{@code{org-indent-mode}を有効にすると、@code{org-hide-leading-stars}に@code{t}が、
@code{org-adapt-indentation-hige}に@code{nil}がセットされます}を使うことで見えなくなり
ます
-
これについてのさらなる情報は@samp{2.}を見てください。あなたは@code{org-indent-mode}を
有効にするか@code{org-startup-indented}変数で全てのファイルについて設定するか、フ
ァイル毎に独立して設定することができます。

@example
#+STARTUP: indent
@end example

もしあなたがEmacs/Org-modeの古いバージョンでも同じような効果を得たいのであれ
ば、またはもしあなたがプレーンテキストの見た目がEmacsでの表示と同様になるよ
うにスペース文字でインデントしたいのであれば、Org-modeは以下の方法であなたを
サポートします:

@enumerate
@item
@emph{見出しの下のテキストのインデント}@* 以下のように、あなたは各見出しの下のテキストを見出しと同じ位置にインデント
できます。

@example
*** 3rd level
    more text, now indented
@end example

@vindex org-adapt-indentation
Org-modeは段落詰め、行の折り返し、構造の編集、適切なインデントの保存と
適合と同時にこれをサポートします。

@item
@vindex org-hide-leading-stars
@emph{先頭の「*」を隠す}@*
あなたは先頭の「*」を非表示にするという方法で変更することができます。
これを行うグローバルな方法は、@code{org-hide-leading-stars}変数を設定するか
、以下のようにファイル毎に設定するかです。

@example
#+STARTUP: hidestars
#+STARTUP: showstars
@end example

「*」を隠した状態だと、ツリーはこうなります:

@example
@group
* Top level headline
 * Second level
  * 3rd level
  ...
@end group
@end example

@noindent
@vindex org-hide @r{(face)}
先頭の「*」は本当に空白スペースに置き換えられたわけではなく、それらは
文字色を背景色にする@code{org-hide}フェイスによって見えているだけです。もし
あなたが白か黒の背景色を使っていないのであれば、あなたはこのフェイスを
必要な効果が得られるようにカスタマイズする必要があるでしょう。別の方法
として、このフォントは余分な「*」が色を用いて、例えば、白い背景色の上
に@code{gray90}を使うことで目に見えなくするというものがあります。

@item
@vindex org-odd-levels-only

あなたが全ての偶数レベルをスキップし、1、3、5といった奇数レベルのみを
使い、効果的にある見出しレベルから次@footnote{あなたがプロパティの検索やリファ
イルの対象のためにレベルを指定する必要がある時、@samp{LEVEL=2}は3つの「*」
などにも対応します}に行くために2つの「*」を追加するのであれば、物事は
より見やすくなります。この方法で、私達はこのセクションの冒頭で見られる
アウトラインビューを得ます。構造の編集とこの慣例を正しく操作するエクス
ポートコマンドを作成すうために、@code{org-odd-levels-only}変数を設定するか
、各ファイルに以下のような行を追加します。

@example
#+STARTUP: odd
#+STARTUP: oddeven
@end example

あなたは@kbd{M-x org-convert-to-odd-levels RET}によりOrg-modeのファイルを1
レベル1スターから1レベル2スターに変換することができます。逆の操作は。
@kbd{M-x org-convert-to-oddeven-levels}です。
@end enumerate

@node TTYキー, 連携, アウトラインの「*」を取り除く, その他
@section Org-modeをtty端末で使う
@cindex tty端末のキーバインディング

Org-modeはとても多くのコマンドを用意しているため、デフォルトではOrg-modeのコ
アコマンドの多くは、例えばカーソルキー(@key{left}、@key{right}、@key{up}、@key{down})や@key{TAB}
、@key{RET}、とりわけ@key{Meta}や@key{Shift}といったモディファイヤキーと一緒に使われるキ
ーなど、通常tty端末では扱えないキーにバインドされています。特別なキーが利用
できない時にtty端末上でこれらのコマンドにアクセスするには、以下の別バインデ
ィングを用いることができます。下記のtty端末バインディングはおそらく扱いにく
いでしょう;
カスタマイズしたバインディングの方が以下のいくつかのものよりよいことに気づく
かもしれません。

@multitable @columnfractions 0.15 0.2 0.1 0.2
@item @b{デフォルト} @tab @b{代替 1} @tab @b{スピードキー} @tab @b{代替 2}
@item @kbd{S-@key{TAB}}     @tab @kbd{C-u @key{TAB}}       @tab @kbd{C} @tab
@item @kbd{M-@key{left}}    @tab @kbd{C-c C-x l}           @tab @kbd{l} @tab @kbd{@key{Esc} @key{left}}
@item @kbd{M-S-@key{left}}  @tab @kbd{C-c C-x L}           @tab @kbd{L} @tab
@item @kbd{M-@key{right}}   @tab @kbd{C-c C-x r}           @tab @kbd{r} @tab @kbd{@key{Esc} @key{right}}
@item @kbd{M-S-@key{right}} @tab @kbd{C-c C-x R}           @tab @kbd{R} @tab
@item @kbd{M-@key{up}}      @tab @kbd{C-c C-x u}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{up}}
@item @kbd{M-S-@key{up}}    @tab @kbd{C-c C-x U}           @tab @kbd{U} @tab
@item @kbd{M-@key{down}}    @tab @kbd{C-c C-x d}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{down}}
@item @kbd{M-S-@key{down}}  @tab @kbd{C-c C-x D}           @tab @kbd{D} @tab
@item @kbd{S-@key{RET}}     @tab @kbd{C-c C-x c}           @tab @kbd{ } @tab
@item @kbd{M-@key{RET}}     @tab @kbd{C-c C-x m}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{RET}}
@item @kbd{M-S-@key{RET}}   @tab @kbd{C-c C-x M}           @tab @kbd{ } @tab
@item @kbd{S-@key{left}}    @tab @kbd{C-c @key{left}}      @tab @kbd{ } @tab
@item @kbd{S-@key{right}}   @tab @kbd{C-c @key{right}}     @tab @kbd{ } @tab
@item @kbd{S-@key{up}}      @tab @kbd{C-c @key{up}}        @tab @kbd{ } @tab
@item @kbd{S-@key{down}}    @tab @kbd{C-c @key{down}}      @tab @kbd{ } @tab
@item @kbd{C-S-@key{left}}  @tab @kbd{C-c C-x @key{left}}  @tab @kbd{ } @tab
@item @kbd{C-S-@key{right}} @tab @kbd{C-c C-x @key{right}} @tab @kbd{ } @tab
@end multitable


@node 連携, , TTYキー, その他
@section 他のパッケージとの関係
@cindex パッケージ、他のものとの連携
Org-modeはGNU Emacsの世界に生きていて、他のコードと様々な方法で連携します。

@menu
* 協調::                   Orgと連携するパッケージ
* 衝突::                   衝突を起こすパッケージ
@end menu

@node 協調, 衝突, 連携, 連携
@subsection Org-modeと強調して動くパッケージ

@table @asis
@cindex @file{calc.el}
@cindex Gillespie, Dave
@item @file{calc.el} by Dave Gillespie
Org-modeはテーブル(@pxref{スプレッドシート})中の表計算関数の実装にCalcパッケ
ージを使います。Org-modeはCalcが適切にインストールされている場合、設定
中に自動で読み込まれる@code{calc-eval}関数を探し、Calcが利用できることを確
認します。Emacs22現在で、CalcはEmacsに最初から組込まれています。2つの
パッケージの連携の別の方法はCalcを組込み計算に使うことです。
@xref{Embedded Mode, , Embedded Mode, Calc, GNU Emacs Calc Manual}.
@item @file{constants.el} by Carsten Dominik
@cindex @file{constants.el}
@cindex Dominik, Carsten
@vindex org-table-formula-constants
テーブル関数中(@pxref{スプレッドシート})で、自然定数や単位に名前を使うことが
できるようになります。あなたが自分で@code{org-table-formula-constants}変数
に定数を定義する代わりに、多くの定数や単位を定義している@file{constants}パ
ッケージをインストールすることで、あなたは@samp{Mega}に@samp{M}のような表現を使
うことができるようになります。このパッケージのバージョン2.0が必要で、
@url{http://www.astro.uva.nl/~dominik/Tools}から利用できます。Org-modeは設
定中に自動で読み込まれる@code{constants-get}関数をチェックします。
@file{constants.el}のインストール説明を参照してください。
@item @file{cdlatex.el} by Carsten Dominik
@cindex @file{cdlatex.el}
@cindex Dominik, Carsten
Org-modeは@LaTeX{}フラグメントをOrg-modeファイルに効率的に入力するために
CDLa@TeX{}パッケージを活用できます。@ref{CDLaTeXモード}を参照してください。
@item @file{imenu.el} by Ake Stenhoff and Lars Lindberg
@cindex @file{imenu.el}
Imenuはファイル中のアイテムのインデックスへのアクセスメニューを提供し
ます。Org-modeはImenuをサポートします---インデックスを得るために、あな
たは以下のようにする必要があります:
@lisp
(add-hook 'org-mode-hook
          (lambda () (imenu-add-to-menubar "Imenu")))
@end lisp
@vindex org-imenu-depth
デフォルトではインデックスは2レベルの深さです---あなたは
@code{org-imenu-depth}オプションを用いることで深さを変更できます。
@item @file{remember.el} by John Wiegley
@cindex @file{remember.el}
@cindex Wiegley, John
Org-modeはこのパッケージをキャプチャに使用します、しかし、もはやそうで
はありません。
@item @file{speedbar.el} by Eric M. Ludlam
@cindex @file{speedbar.el}
@cindex Ludlam, Eric M.
Speedbarはファイルとファイル中のインデックスを表示するためのスペシャル
フレームを作成するパッケージです。Org-modeはSpeedbarをサポートし、
SpeedbarからOrg-modeファイルへ直接繋げます。Speedbarフレームで@kbd{<}コマ
ンドを使うことでファイルまたはサブツリーへのアジェンダコマンドの範囲を
制限します。
@cindex @file{table.el}
@item @file{table.el} by Takaaki Ota
@kindex C-c C-c
@cindex table editor, @file{table.el}
@cindex @file{table.el}
@cindex Ota, Takaaki

自動的な行の折り返し、列、行の広がり、調整を伴う複雑なASCIIテーブルはOta
Takaaki(@uref{http://sourceforge.net/projects/table}、もしくはEmacs22に含ま
れています)によるEmacsのテーブルパッケージを用いることで作成可能です。
Org-modはこれらのテーブルを認識し、適切にセクスポートします。Org-mode
の別の機能による干渉のために、あなたは不幸にもこれらのテーブルをバッフ
ァ中で直接編集することができません。代わりに、あなたはこのテーブルの編
集のためにソースコードスニペットに似た@kbd{C-c '}コマンドを使う必要があり
ます。

@table @kbd
@c
@orgcmd{C-c ',org-edit-special}
@file{table.el}のテーブルを編集します。カーソルがtable.elのテーブル上の時動
作します。@orgcmd{C-c ~, org-table-create-with-table.el}
@file{table.el}のテーブルを挿入します。ポイント位置が既にテーブルなら、この
コマンドは@file{table.el}のフォーマットとOrg-modeのフォーマットで相互変換し
ます。これが可能なことと制限については、@code{org-convert-table}コマンドの
ドキュメントを参照してください。
@end table
@file{table.el}はEmacs22以降のEmacsでは内蔵されています。
@item @file{footnote.el} by Steven L. Baur
@cindex @file{footnote.el}
@cindex Baur, Steven L.
Org-modeはこのパッケージが提供する数字の脚注を認識します。しかしながら、
Org-modeは自身の脚注(@pxref{脚注})もサポートしているため、@file{footnote.el}を使う必要
はありません。
@end table

@node 衝突, , 協調, 連携
@subsection Org-modeとの衝突に繋がるパッケージ

@table @asis

@cindex @code{shift-selection-mode}
@vindex org-support-shift-select
Emacs23では、Shiftキーと組み合わせたカーソルの動きを開始するかリージョ
ンを広げるための@code{shift-selection-mode}がデフォルトで有効になっています
。カーソルがそのような位置にある場合、Org-modeでのタイムスタンプ、TODO
キーワード、プライオリティ、アイテムbulletタイプの変更と@kbd{S-@key{cursor}}コ
マンドは衝突します。デフォルトでは、@kbd{S-@key{cursor}}コマンドは特別なコンテ
クスト以外では何も起きませんが、@code{org-support-shift-select}変数をカスタ
マイズすることができます。Org-modeはスペシャルコマンドが適用される特別
なコンテクストの外で(i)使用することによりShift選択を提供しようとし、ま
た(ii)アクティブなリージョンを拡張することによっても特別なコンテクスト
を通してカーソルが移動します。

@item @file{CUA.el} by Kim. F. Storm
@cindex @file{CUA.el}
@cindex Storm, Kim. F.
@vindex org-replace-disputed-keys
リージョンの選択と拡張について、Org-modeでのキーバインディングは
(@code{pc-select-mode}や@code{s-region-mode}と同様に)CUAモードで使われる
@kbd{S-<cursor>}と衝突します。実際、前の段落を見れば分かりますが、Emacs23
は@code{shift-selection-mode}の形でこのビルトインを持ちますます。あなたが
Emacs23を使っているのであれば、まず間違いなくこの目的のための別のパッ
ケージは使いたくないでしょう。しかし、Org-modeでの作業中に別のパッケー
ジにこれらのキーを渡すことを選ぶのであれば、
@code{org-replace-disputed-keys}変数を設定してください。設定したとき、
Org-modeはOrg-modeファイルとアジェンダバッファ(日付の選択を除きます)中
で以下のキーバインディングを変えるでしょう。

@example
S-UP      @result{}  M-p             S-DOWN     @result{}  M-n
S-LEFT    @result{}  M--             S-RIGHT    @result{}  M-+
C-S-LEFT  @result{}  M-S--           C-S-RIGHT  @result{}  M-S-+
@end example

@vindex org-disputed-keys
はい、残念ながら覚えることがより困難です。もしあなたが他の代わりのキー
を持ちたいのであえれば、@code{org-disputed-keys}変数を見てください。

@item @file{yasnippet.el}
@cindex @file{yasnippet.el}
Org-modeはTABキー(@code{"\t"}の代わりに。@code{[tab]}をバインドします)をバインド
するこのキーでYASnippetsのアクセスを優先します。以下のコードはこの問題
を修正します:

@lisp
(add-hook 'org-mode-hook
          (lambda ()
            (org-set-local 'yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-group)))
@end lisp

yasnippetの最新のバージョンはOrg-modeと相性がよくありません。上記のコ
ードが衝突を修正しないなら、以下の関数を定義してください:

@lisp
(defun yas/org-very-safe-expand ()
       (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
@end lisp

それから、Org-modeに実行すべき新しい関数を教えてくさい:

@lisp
(add-hook 'org-mode-hook
          (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))
@end lisp

@item @file{windmove.el} by Hovav Shacham
@cindex @file{windmove.el}
このパッケージも、@kbd{S-<cursor>}キーを使用し。そしてCUAモードが適用され
ている状態の段落で全てが書かれます。もし、Org-modeが@kbd{S-@key{cursor}}上に特
別な関数を持たない場所であなたがwindmove関数を有効にしたいのであれば、
設定に以下を追加します:

@lisp
;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
@end lisp

@item @file{viper.el} by Michael Kifer
@cindex @file{viper.el}
@kindex C-c /
Viperは@kbd{C-c /}を使い、それ故にOrg-modeの@code{org-sparse-tree}コマンドに対
応しているキーを使えないようにします。あなたはこのコマンドに別のキーを
割り当てるか、@code{viper-vi-global-user-map}でキーを上書きする必要がありま
す:

@lisp
(define-key viper-vi-global-user-map "C-c /" 'org-sparse-tree)
@end lisp

@end table


@node ハッキング, MobileOrg, その他, Top
@appendix ハッキング
@cindex ハッキング

この付録では、ユーザーがOrg-modeの機能を拡張できる幾つかの特徴を紹介します。

@menu
* フック::                Orgの内部にアクセスするのはどれ？
* アドオンパッケージ::  利用できるエクステンション
* ハイパーリンクのタイプの追加::  新しいリンクタイプの作成
* 状況依存のコマンド::  機能的なコマンドの追加方法
* 任意の構文によるテーブル::  @LaTeX{}のためのOrgtblと他のプログラム
* ダイナミックブロック::  自動的にブロック内に挿入する
* 特別なアジェンダビュー::  カスタマイズされたビュー
* アジェンダ情報の抽出::  アジェンダ情報の後処理
* プロパティAPIを使う::  項目のプロパティを使ったプログラミング
* マッピングAPIを使う::  選択した項目、または全てのマッピング
@end menu

@node フック, アドオンパッケージ, ハッキング, ハッキング
@section フック
@cindex フック

Org-modeには、機能を追加するためのフック変数が数多くあります。ハッキングに関
するこの付録では、それらの使い方を説明します。全フックの完全なリストと説明文
は
Worg project
によって維持管理されており、
@uref{http://orgmode.org/worg/org-configs/org-hooks.php}にて見つけられます。

@node アドオンパッケージ, ハイパーリンクのタイプの追加, フック, ハッキング
@section アドオンパッケージ
@cindex アドオンパッケージ

様々な人によって膨大な数のアドオンパッケージが書かれました。これらのパッケー
ジはEmacsの一部ではありませんが、投稿されたパッケージとして独自のリリースで
配布されており、Org-modeのホームページ
@uref{http://orgmode.org}にて入手できます。投稿されたパッケージのリストとその説明
文は Worg project によって
@uref{http://orgmode.org/worg/org-contrib/}にて維持管理されています。



@node ハイパーリンクのタイプの追加, 状況依存のコマンド, アドオンパッケージ, ハッキング
@section ハイパーリンクのタイプの追加
@cindex ハイパーリンク、タイプの追加

Org-modeにはビルトインのハイパーリンク形式が多数用意されています
(@pxref{ハイパーリンク})。新しいタイプのリンクを追加したい場合、Orgは追加するため
のインターフェスを用意します。例となるファイル
@file{org-man.el}を見て下さい。これは
UnixのmanページをEmacsで表示するために、@samp{[[man:printf][printfのmanページ]]}
というリンクを生成するサポートを作成します:

@lisp
;;; org-man.el - Org-modeでmanページのリンクをサポートする

(require 'org)

(org-add-link-type "man" 'org-man-open)
(add-hook 'org-store-link-functions 'org-man-store-link)

(defcustom org-man-command 'man
  "manのページを表示するためのEmacsのコマンド。"
  :group 'org-link
  :type '(choice (const man) (const woman)))

(defun org-man-open (path)
  "パス(PATH)にあるmanpageを開きます。
パスはコマンドmanに渡せる内容でなければなりません。"
  (funcall org-man-command path))

(defun org-man-store-link ()
  "manページへのリンクを保存します。"
  (when (memq major-mode '(Man-mode woman-mode))
    ;; これはmanページなので、リンクを作成します。
    (let* ((page (org-man-get-page-name))
           (link (concat "man:" page))
           (description (format "Manpage for %s" page)))
      (org-store-link-props
       :type "man"
       :link link
       :description description))))

(defun org-man-get-page-name ()
  "バッファ名からページ名を抽出します。"
  ;; `Man-mode' と `woman-mode' の両方で動作します。
  (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
      (match-string 1 (buffer-name))
    (error "このmanページへのリンクを作成できません")))

(provide 'org-man)

;;; org-man.el ends here
@end lisp

@noindent
以下を@file{.emacs}に加えて、この新しいタイプのリンクを有効にします。

@lisp
(require 'org-man)
@end lisp

@noindent
そのファイルを一つずつ順番に検討して、何をするのか見てみましょう。
@enumerate
@item
@code{(require 'org)}を実行して@file{org.el}が読み込まれたことを確認します。
@item
次の行では@code{org-add-link-type}を呼び出して、新しいタイプのリンクを接頭
辞 @samp{man}
で定義します。またこの呼び出しでは、そのようなリンクを辿るために呼び出
される関数の名前も含まれています。
@item
@vindex org-store-link-functions
次の行では、manページを表示したバッファ内にて有用なリンクを@kbd{C-c l}で保
存できるように、関数を@code{org-store-link-functions}に追加します。
@end enumerate

ファイルの残りは必要な変数と関数を定義しています。最初に、manページの表示に
どのEmacsのコマンドを使うかを決める変数のカスタマイズがあります。2つのオプシ
ョン、@code{man}
と @code{woman} があります。次に、リンクを辿る関数が定義されています。リンクのパ
スは引数として渡されます ---
この場合、リンクのパスは単にmanコマンドのトピックです。この関数はmanページの
表示に@code{org-man-command}の値を呼び出します。

最後に、関数@code{org-man-store-link}が定義されています。@kbd{C-c l}でリンクを保存す
る時に、リンクを作成するためにこの関数が呼び出されます。関数は、このバッファ
のタイプでリンク作成がサポートされているかどうかを最初に判断します;
変数@code{major-mode}の値をチェックして判断します。サポートされていない場合、関数
は終了して、@code{nil}の値を返します。サポートされている場合、バッファ名からmanの
トピックを取得して、文字列
@samp{man:}
の後に繋げることで、リンクを生成します。次に、コマンド@code{org-store-link-props}
を呼び出して、@code{:type}と@code{:link}プロパティを設定します。任意で@code{:descriptiion}
プロパティを設定できます。これは、後に@kbd{C-c C-l}でOrg-modeのバッファにリンク
が挿入される時のリンクの説明のデフォルト値を用意します。

新しいタイプのリンクを正しく設定できると、@kbd{C-c C-l}でリンクを挿入するときの
特別な機能(例えば@:
補完機能)のサポートを実装する関数@code{org-PREFIX-complete-link}を定義できます。
そのような関数は引数をとらず、接頭辞がついたリンク全体を返します。

@node 状況依存のコマンド, 任意の構文によるテーブル, ハイパーリンクのタイプの追加, ハッキング
@section 状況依存のコマンド
@cindex 文脈に依存するコマンド、フック
@cindex アドオン、文脈に依存するコマンド
@vindex org-ctrl-c-ctrl-c-hook

Org-modeでは、文脈に依存して動作が変わるコマンドが幾つかあります。最も重要な
例は@kbd{C-c C-c}（@pxref{「C-c C-c」キーはとても忙しい}）です。また、@kbd{M-cursor} と
 @kbd{M-S-cursor} キーもこの性質を持っています。

アドオンにとって特別な文脈を検知し、文脈に沿って適切に実行する関数を準備する
ことによって、アドオンはこの機能を活用できます。ここに例として Dan
Davisonの
@file{org-R.el}があります。このファイルは@file{R}プログラミング言語@footnote{@file{org-R.el}は
@ref{ソースコードとの連携}で説明されたOrg-modeの機能によって置き換えられ、現在使
われておりません。}に基づいてコマンドを実行できます。このパッケージでは、特
別な文脈とは@code{#+R:}
や @code{#+RR:}で始まる行のことです。

@lisp
(defun org-R-apply-maybe ()
  "org-Rの文脈なら検知して、Rのコマンドを実行します。"
  (if (save-excursion
        (beginning-of-line 1)
        (looking-at "#\\+RR?:"))
      (progn (call-interactively 'org-R-apply)
             t) ;; 処置したと信号を送ります
    nil)) ;; 処置しなかったと信号を送ります

(add-hook 'org-ctrl-c-ctrl-c-hook 'org-R-apply-maybe)
@end lisp

関数は最初にそのような行にカーソルがあるのかをチェックします。そうである場合
、@code{org-R-apply}が呼び出されて関数は処置したと信号を送るために@code{t}を返し、そし
て@kbd{C-c C-c}は他の文脈を探すことを止めます。もし関数がそこですべきことが無い
と分かった場合は、他の同じような関数が試せるように@code{nil}を返します。


@node 任意の構文によるテーブル, ダイナミックブロック, 状況依存のコマンド, ハッキング
@section 任意のシンタックスによる表やリスト
@cindex テーブル、他のモードで
@cindex リスト、他のモードで
@cindex Orgtblモード

Orgtblモードを任意のバッファでマイナーモードとして使えるため、@LaTeX{}のような
特定言語のテーブルでモードを動作させる機能の要望がよく出されます。しかし、通
常の方法でこれを実装するのは極めて難しく、結局悪夢のような設定となってしまい
、Orgtblモードのテーブルエディタによって得られる単純さのほとんどを失ってしま
うでしょう。

この付録では、別の方法を説明します。Orgtblモード本来のフォーマットでテーブル
を保ち(@i{もとのテーブル})、その表を正しいシンタックスへと@i{変換}するカスタム関数を
使い、(@i{目的のテーブルを})正しい場所に配置します。これはユーザーに変換する関数
を書く負担をかけますが、まさにフレキシブルな方法が可能となります。

Bastienはリストに対して同じ機能をOrgstructモードに加えました。リストを編集し
たり構造化するOrg-modeの機能を使うには、@code{orgstruct-mode}をオンにして、そこで
当該リストを別のフォーマット(HTML,
@LaTeX{} もしくは Texinfo)へとエクスポートしてください。


@menu
* ラジオテーブル::    ラジオテーブルの送受信
* LaTeXの例::              少しずつ、チュートリアルのようなものを
* 変換関数::             コピーと修正
* ラジオリスト::       リストでも同じように
@end menu

@node ラジオテーブル, LaTeXの例, 任意の構文によるテーブル, 任意の構文によるテーブル
@subsection ラジオテーブル
@cindex ラジオテーブル

ターゲットテーブルの場所を定義するには、Orgtblモードが見つけ出せるマジックワ
ード含んだ2行のコメントを最初にカレントモード内で作成します。Orgtblモードは
その2行の間に変換されたテーブルを挿入します。前に何が在ったかは考慮せずに置
き換えます。例えば:

@example
/* BEGIN RECEIVE ORGTBL table_name */
/* END RECEIVE ORGTBL table_name */
@end example

@noindent
ソーステーブル(元のテーブル)のすぐ上に、変換する方法と挿入する場所をOrgtblモ
ードに知らせる特別な行を付け加えます。例えば:
@cindex #+ORGTBL
@example
#+ORGTBL: SEND table_name translation_function arguments....
@end example

@noindent
@code{table_name}はそのテーブルの参照名で、それは変換結果を挿入する行でも使われま
す。@code{translation_function}は変換するLispの関数です。加えて、その行の最後では
、(keyとvalueを交互においた)引数のリストを含むことができます。引数はプロパテ
ィのリストとして解釈するために、変換する関数(translation
function)に渡されます。変換する関数(translation
function)が呼び出される前に、いくつかの基本的なパラメーターは既に認識され、
影響を受けています。

@table @code
@item :skip N
テーブルの最初のN行を飛ばして読み進みます。このパラメーターは、行を分
ける横線をカウントします。

@item :skipcols (n1 n2 ...)
飛ばすべき列のリストです。もしもテーブルに計算用にマークされた列がある
場合、同じようにに自動的に無視されます。列を除去した@emph{後で}変換する関数
がテーブルを見るので、そこには更に列があったとは知る由もないことに注意
して下さい。
@end table

@noindent
残る1つの問題は、ファイルの通常動作を妨げずに、バッファ内のソーステーブルを
保つ方法です。例えば、C言語のファイルや@LaTeX{}ファイルを編集している場合です。
いくつかの方法があります:

@itemize @bullet
@item
その言語でサポートされたブロックコメント内にテーブルを設置できます。例
えばCモードの場合、テーブルを@samp{/*}と@samp{*/}の行で括れます。
@item
時には、@TeX{}の@samp{\bye}や@LaTeX{}の@samp{\end@{document@}}のような、ある種の終了文
の後にテーブルを書けることがあります。
@item
単純に、ファイルを編集したいときはテーブルを一行一行コメントにし、テー
ブルを編集したいときはコメントを外すこともできます。これは退屈そうに聞
こえますが---コマンド@kbd{M-x orgtbl-toggle-comment}を使えばコメントのオン
オフを簡単にできます。キーバインドを設定すると特に便利です。
@end itemize

@node LaTeXの例, 変換関数, ラジオテーブル, 任意の構文によるテーブル
@subsection @LaTeX{}でのラジオテーブルの例
@cindex @LaTeX{}、Orgtblモードと

@LaTeX{}でソーステーブルを囲む最良の方法は、@file{comment.sty}で提供される@code{comment}
環境を使うことです。文書のヘッダーに@code{\usepackage@{comment@}}と書くことで有効
になります。Orgtblモードで@kbd{M-x orgtbl-insert-radio-table}とすると、テーブル
のスケルトンを挿入できます@footnote{デフォルトでは、@LaTeX{}, HTMLと Texinfoの場合だけ動
作します。他のモードのテンプレートをインストールするには、変数
@code{orgtbl-radio-tables}を編集して下さい。}。
テーブル名を確認されますので、@samp{salesfigures}と入力します。 そして以下のテン
プレートを得ました:

@cindex #+ORGTBL, SEND
@example
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex
| | |
\end@{comment@}
@end example

@noindent
@vindex @LaTeX{}-verbatim-environments
@code{#+ORGTBL: SEND}の行は、関数@code{orgtbl-to-latex}を使ってテーブルを@LaTeX{}へ変換し
、@code{salesfigures}の名前で受け取る場所に設置するようにと、Orgtblモードに指示し
ています。これからテーブルに記入します---スプレッドシートの機能を自由に使っ
てください@footnote{@samp{#+TBLFM}行に奇数個のドル記号(dollar character, $)が在る場合、
@LaTeX{}モードの色分けで問題が生じるかも知れません。この問題を解決するには、例
で示すように@code{comment}環境内に行を追加してドル記号の表現を調整してください。
AUC@TeX{}をfont-latexライブラリと使っている場合のはるかに優れた解決法は、変数
@code{LaTeX-verbatim-environments}に@code{comment}環境追加することです。}:

@example
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex
| 月  | 日数 | 販売数 | 一日あたり |
|-----+------+--------+------------|
| 1月 |   23 |     55 |        2.4 |
| 2月 |   21 |     16 |        0.8 |
| 3月 |   22 |    278 |       12.6 |
#+TBLFM: $4=$3/$2;%.1f
% $ (font-lock 色分けをうまく動作させるための余分なドル記号、脚注参照)
\end@{comment@}
@end example

@noindent
入力し終わり、テーブルの中で@kbd{C-c C-c}と押下すると、目印となる2行の間に変換さ
れたテーブルが挿入されます。

さて、列の文字揃えを制御したいなどの理由から、テーブルのヘッダーを書きたいと
します。この場合は次のことを確認します。テーブルを変換する関数がソーステーブ
ルの最初の2行を飛ばすことと、接合部として動作すること、すなわち@:
ターゲットテーブルのヘッダーとフッターを生成しないことです:

@example
\begin@{tabular@}@{lrrr@}
月 & \multicolumn@{1@}@{c@}@{日数@} & 販売数 & 一日あたり \\
% BEGIN RECEIVE ORGTBL salesfigures
1月 & 23 & 55 & 2.4 \\
2月 & 21 & 16 & 0.8 \\
3月 & 22 & 278 & 12.6 \\
% END RECEIVE ORGTBL salesfigures
\end@{tabular@}
%
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2
| 月  | 日数 | 販売数 | 1日あたり |
|-----+------+--------+-----------|
| 1月 |   23 |     55 |       2.4 |
| 2月 |   21 |     16 |       0.8 |
| 3月 |   22 |    278 |      12.6 |
#+TBLFM: $4=$3/$2;%.1f
\end@{comment@}
@end example

@LaTeX{}へ変換する関数@code{orgtbl-to-latex}は既にOrgtblモードの一部です。@code{tabular}
環境を使ってテーブルをタイプセットし、横線に@code{\hline}で印を付けます。加えて、
以下のパラメーターを解釈します(@pxref{変換関数}も参照してください):

@table @code
@item :splice nil/t
tのとき、tabular環境で囲まずに、テーブルの本文だけを返します。デフォル
トではnilです。

@item :fmt fmt
各フィールドを囲むのに使われるフォーマットで、@code{%s}にはフィールドの元の
値が入っています。例えばドルマークで囲む場合には、@code{:fmt "$%s$"}と書け
ます。また、列の番号とフォーマットというプロパティのリストにもなります
。例えば@code{:fmt (2 "$%s$" 4 "%s\\%%")}と書けます。文字列の変わりに、1つ
の引数を持つ関数を使えます; その関数は書式設定された文字列を返します。

@item :efmt efmt
指数表記で数値を出力する時に使います。仮数部と指数部を挿入するため、こ
の形式では@code{%s}が2回出現します。例えば@code{"%s\\times10^@{%s@}"}。デフォル
トでは@code{"%s\\,(%s)"}です。これも列数と書式設定のリスト、例えば
@code{:efmt (2 "$%s\\times10^@{%s@}$" 4 "$%s\\cdot10^@{%s@}$")}となり得ます
。値に@code{efmt}が適用された後に、@code{fmt}も適用されます。@code{fmt}と同様に、文字
列の代わりに引数2つの関数を使えます。
@end table

@node 変換関数, ラジオリスト, LaTeXの例, 任意の構文によるテーブル
@subsection 変換関数
@cindex HTML、Orgtblモードと
@cindex 変換関数

Orgtblモードには幾つかの組み込み変換関数があります: @code{orgtbl-to-csv} (カンマ
区切り),
@code{orgtbl-to-tsv} (タブ区切り)  @code{orgtbl-to-latex}, @code{orgtbl-to-html}
そして
@code{orgtbl-to-texinfo}です。@code{orgtbl-to-html}@footnote{HTMLの変換関数は、HTMLをエクスポー
トする時にテーブルを作るコードと全く同じものを使っています。}を除いた、これ
ら全ての関数は包括的な変換関数@code{orgtbl-to-generic}を使います。例えば、
@code{orgtbl-to-latex}それ自体はとても短い関数で@code{tabular}環境の列の定義を計算した
り、幾つかのフィールドセパレータや行セパレータを定義してそれから処理を包括的
な変換関数へと渡しています。ここに完全なコードがあります:

@lisp
@group
(defun orgtbl-to-latex (table params)
  "OrgtblモードのテーブルをLaTeXに変換します。"
  (let* ((alignment (mapconcat (lambda (x) (if x "r" "l"))
                               org-table-last-alignment ""))
         (params2
          (list
           :tstart (concat "\\begin@{tabular@}@{" alignment "@}")
           :tend "\\end@{tabular@}"
           :lstart "" :lend " \\\\" :sep " & "
           :efmt "%s\\,(%s)" :hline "\\hline")))
    (orgtbl-to-generic table (org-combine-plists params2 params))))
@end group
@end lisp

ご覧のように、関数に渡されたプロパティ(変数@var{PARAMS})が、関数の中で新しく定義
されたプロパティ(変数@var{PARAMS2})と結合されています。関数に渡されたもの(すなわ
ち@:@samp{ORGTBL SEND}行でセットされたプロパティ)が優先されます。よって、もし
@LaTeX{}
変換関数を使いたけれども、行の最後はデフォルトの@samp{\\}の代わりに@samp{\\[2mm]}とし
たいなら、デフォルトの設定をこのように上書きできます

@example
#+ORGTBL: SEND test orgtbl-to-latex :lend " \\\\[2mm]"
@end example

新しい言語に対して、@LaTeX{}変換関数とのアナロジーから自分で変換関数を書くか、
もしくは、包括的な変換関数を直接使うこともできます。例えば、もしある言語では
、テーブルが始まるときは@samp{!BTBL!}、終わるときには@samp{!ETBL!}、そしてテーブル行は
@samp{!BL!}で始まり、@samp{!EL!}で終わり、フィールドセパレータはタブだとしたら、このよ
うに(1行だけで!)包括的な変換関数を呼び出すことができます:

@example
#+ORGTBL: SEND test orgtbl-to-generic :tstart "!BTBL!" :tend "!ETBL!"
                              :lstart "!BL! " :lend " !EL!" :sep "\t"
@end example

@noindent
関数によって理解されるパラメーターの完全なリストのために、関数
@code{orgtbl-to-generic}の説明文をチェックしてください。そして、それらの1つずつを
@code{orgtbl-to-latex}、@code{orgtbl-to-texinfo}や、包括的な変換関数を使った何か他の関
数に渡せることを覚えて下さい。

もちろん包括的な変換関数では行えない複雑な事を処理する全く新しい関数を書くこ
ともできます。変換関数は2つの引数を持ちます。1つ目の引数はテーブル、行のリス
ト、それぞれの行のシンボルコード@code{hline}
もしくはフィールドのリストです。2つめの引数はプロパティリストで、
@samp{#+ORGTBL: SEND}行で指定された全てのパラメーターを含みます。関数は書式設定さ
れたテーブルを含む1つの文字列を返します。もし一般に有用な変換関数を書いた場
合、他の人があなたの仕事から恩恵に預かれるように、どうか
@email{emacs-orgmode@@gnu.org}に投稿して下さい。

@node ラジオリスト, , 変換関数, 任意の構文によるテーブル
@subsection ラジオリスト
@cindex ラジオリスト
@cindex org-list-insert-radio-list

ラジオリストを送受信する方法は、ラジオテーブル(@pxref{ラジオテーブル})を送受信する
方法と全く同じです。ラジオテーブル(ラジオリストのtypo?)に関しては、関数
@code{org-list-insert-radio-list}を呼び出して、HTMLモード、@LaTeX{}モードそして
Texinfoモードにラジオリストを挿入できます。

ここではラジオテーブルとの違いを説明します:

@itemize @minus
@item
Orgstructモードが有効でなければなりません。
@item
@code{ORGTBL}の代わりに、キーワード@code{ORGLST}を使います。
@item
現在利用できるラジオリストの変換関数は、パラメーターをとりません。
@item
リストの1つ目の項目で@kbd{C-c C-c}と押すと、動作します。
@end itemize

これは@LaTeX{}の例です。@LaTeX{}ファイルに以下が書いてあるとします:

@cindex #+ORGLST
@example
% BEGIN RECEIVE ORGLST to-buy
% END RECEIVE ORGLST to-buy
\begin@{comment@}
#+ORGLST: SEND to-buy org-list-to-latex
- 新しい家
- 新しいコンピュータ
  + 新しいキーボード
  + 新しいマウス
- 新しい生活
\end@{comment@}
@end example

@code{新しい家}の上で`C-c C-c'とタイプすると、@LaTeX{}に変換されたリストが目印の2行
の間に挿入されます。

@node ダイナミックブロック, 特別なアジェンダビュー, 任意の構文によるテーブル, ハッキング
@section ダイナミックブロック
@cindex 動的なブロック

Org-modeの文書は@emph{動的なブロック}を含むことができます。これらのブロックはユー
ザーが書いた関数によって更新される印のついた領域です。そのようなブロックの良
い例は、@kbd{C-c C-x C-r}(@pxref{作業に費やした時間の計測})というコマンドで挿入した時
計のテーブル(クロックテーブル)です。

動的なブロックは、そのブロックに名前を指定し、そしてそのブロックの内容を実行
する機能のためのパラメーターを指定する「BEGIN-END」構造によって囲まれている
必要があります。

@cindex #+BEGIN:dynamic block
@example
#+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...

#+END:
@end example

動的なブロックを更新するには以下のコマンドを使用します。

@table @kbd
@orgcmd{C-c C-x C-u,org-dblock-update}その場所での動的なブロックを更新します
。@orgkey{C-u C-c C-x C-u}現在のファイルの全ての動的なブロックを更新します。
@end table

動的なブロックを更新するということは、すべての「BEGIN」と「END」の間のテキス
トを取り除き、「BEGIN」の行に書かれているパラメーターを解析し、それからその
ブロックのための特定の書き出し用の関数を呼び出して新しい内容を書き込むことを
意味します。もしもその書き出し用の関数の中で元の中身を使いたい場合は、追加の
パラメーターである@code{:content}を使えます。

@code{myblock}という名前のブロックに対する書き出し用の関数は
@code{org-dblock-write:myblock}です。BEGINの行にて与えられるパラメーターのプロパ
ティリストを単一パラメータとして受け取ります。ブロックの一例として、ブロック
を更新する関数が最後に実行されたのはいつかを記録します:

@example
#+BEGIN: block-update-time :format "on %m/%d/%Y at %H:%M"

#+END:
@end example

@noindent
対応するブロックへの書き出し用の関数は、このようになっています:

@lisp
(defun org-dblock-write:block-update-time (params)
   (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
     (insert "ブロックの最終更新日時は: "
             (format-time-string fmt (current-time)))))
@end lisp

もしもすべての動的なブロックが常に最新のものに更新されるようにしたいならば、
関数@code{org-update-all-dblocks}をフック、例えば変数@code{before-save-hook}に追加しま
す。@code{org-update-all-dblocks}は@code{org-mode}内ではないバッファの中では何もしない
ように書かれています。

@code{org-narrow-to-block}を使って、(他のブロックの様に)現在のバッファを現在の動
的なブロックへとナローイングできます。

@node 特別なアジェンダビュー, アジェンダ情報の抽出, ダイナミックブロック, ハッキング
@section 特別なアジェンダビュー
@cindex アジェンダビュー、ユーザー定義

@vindex org-agenda-skip-function
@vindex org-agenda-skip-function-global
Org-modeでは、以下のアジェンダビューによって選択されたものを絞り込む特別なフ
ック関数を用意しています: @code{todo},
@code{alltodo}, @code{tags}, @code{tags-todo},
@code{tags-tree}。検索でマッチする度に、実際にアジェンダビューでマッチしたかを確
認したり、もしマッチしなければどれくらい飛ばすのかを、関数で指定できます。全
てのアジェンダビューに適用されるようにグローバルな条件を設定でき、それは変数
@code{org-agenda-skip-function-global}に格納されます。通常は、変数
@code{org-agenda-skip-function}を使って、このような定義を特定のカスタムサーチに適
用します。

プロジェクトのツリーのどこかにWAITINGというタグを含むプロジェクトのリストを
作成する場合を考えてみましょう。ツリーの見出しには、プロジェクトを定義する
TODOのキーワード「PROJECT」でマークされているとします。この場合、キーワード
のPROJECTでTODOを検索し、プロジェクトのサブツリーにWAITINGのタグが無ければ検
索でマッチしてもスキップしたいとします。

これを達成するには、サブツリーをタグで検索する関数を書かなければなりません。
もしそのタグが見つかったら、そのマッチはスキップされるべきではないと示すため
に、その関数は@code{nil}を返さなければなりません。もしそのようなタグが無ければ、
そこから検索し続けるということを示すために、そのサブツリーの終端の場所を返さ
なくてはなりません。

@lisp
(defun my-skip-unless-waiting ()
  "waitingでないツリーをスキップします"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":waiting:" subtree-end t)
        nil          ; タグが見つかったので、スキップしません
      subtree-end))) ; タグが見つからないので、サブツリーの最後から検索を再
開します
@end lisp

今からこの関数をアジェンダのカスタムコマンドで使えます。例えばこうなります:

@lisp
(org-add-agenda-custom-command
 '("b" todo "PROJECT"
   ((org-agenda-skip-function 'my-skip-unless-waiting)
    (org-agenda-overriding-header "waiting (待ち)状態のプロジェクト: "))))
@end lisp

@vindex org-agenda-overriding-header
関数@code{org-agenda-overriding-header}を使って、アジェンダビューで意味のある見出
しに変更したことにも注意して下さい。

@vindex org-odd-levels-only
@vindex org-agenda-skip-function
カスタム検索を作成するには、あるレベルの制限を設けた検索を基づくのが一般的な
方法です。自作の検索関数で全てのエントリーを検索したい場合は、単に
@samp{LEVEL>0}@footnote{@code{org-odd-levels-only}を使用している場合、level numberは階層構造の
レベルと対応していて、スター「*」の数ではないことに注意して下さい。}を検索し
た後に、必要なエントリを選択してください。

変数@code{org-agenda-skip-function}にLispフォームを渡すこともできます。具体的に言
うと、例えばこのように関数@code{org-agenda-skip-entry-if}と関数
@code{org-agenda-skip-subtree-if}とを使えます:

@table @code
@item '(org-agenda-skip-entry-if 'scheduled)
現在のエントリがスケジューリングされている場合、それをスキップします。
@item '(org-agenda-skip-entry-if 'notscheduled)
現在のエントリがスケジューリングされていない場合、それをスキップします。
@item '(org-agenda-skip-entry-if 'deadline)
現在のエントリがデッドラインを設定されている場合、それをスキップします。
@item '(org-agenda-skip-entry-if 'scheduled 'deadline)
現在のエントリがデッドラインを設定されているかもしくはスケジューリング
されている場合、それをスキップします
@item '(org-agenda-skip-entry-if 'todo '("TODO" "WAITING"))
現在のエントリのTODOのキーワードがTODOもしくはWAITINGの場合、それをス
キップします。
@item '(org-agenda-skip-entry-if 'todo 'done)
現在のエントリのTODOのキーワードがDONEとマークされている場合、それをス
キップします。
@item '(org-agenda-skip-entry-if 'timestamp)
現在のエントリが何かしらのタイムスタンプを持っている場合、それをスキッ
プします。タイムスタンプはデッドラインかスケジューリングが考えられます。
@item '(org-agenda-skip-entry 'regexp "regular expression")
現在のエントリの中で正規表現「regular expression」にマッチした場合、そ
れをスキップします。
@item '(org-agenda-skip-entry 'notregexp "regular expression")
現在のエントリの中で正規表現「regular expression」にマッチしない場合、
それをスキップします。
@item '(org-agenda-skip-subtree-if 'regexp "regular expression")
2つ上と同じですが、サブツリー全体をチェックしてスキップします。
@end table

従って特別な関数を定義しなかったとしても、WAITINGがあるプロジェクトの検索を
このように書くこともできました:

@lisp
(org-add-agenda-custom-command
 '("b" todo "PROJECT"
   ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                'regexp ":waiting:"))
    (org-agenda-overriding-header "waiting (待ち)状態のプロジェクト: "))))
@end lisp

@node アジェンダ情報の抽出, プロパティAPIを使う, 特別なアジェンダビュー, ハッキング
@section アジェンダ情報の抽出
@cindex アジェンダ、パイプ
@cindex スクリプト、アジェンダの処理のために

@vindex org-agenda-custom-commands
Org-modeは、コマンドラインからEmacsのバッチモードでアジェンダの情報にアクセ
スするコマンドを用意しています。
この抽出された情報はプリンタに直接送ることも可能ですし、更にデータを処理させ
るプログラムに読み込ませることも可能です。1つ目のコマンドは関数
@code{org-batch-agenda}であり、アジェンダビューを作成し、それをASCIIテキストとし
てSTDOUTへと送ります。コマンドはパラメーターとして1つの文字列をとります。文
字列の長さが1のとき、@code{org-agenda-custom-commands}にあなたが設定したコマンド
の1つが使われます。基本的に、@kbd{C-c a}の後にはどんなキーも使えます。例えば、現
在のTODOリストを直接印刷するなら、このように使えます

@example
emacs -batch -l ~/.emacs -eval '(org-batch-agenda "t")' | lpr
@end example

パラメーターが2文字以上の文字列の場合、tags/TODOの検索に使われます。例えば、
地元でのショッピングリスト(@samp{shop}というタグが付いていて、@samp{NewYork}というタグ
を含んでいない全てのアイテム)を印刷するには、このように使えます

@example
emacs -batch -l ~/.emacs                                      \
      -eval '(org-batch-agenda "+shop-NewYork")' | lpr
@end example

@noindent
このように、その場でパラメーターを変えることもできます:

@example
emacs -batch -l ~/.emacs                                      \
   -eval '(org-batch-agenda "a"                               \
            org-agenda-span month                             \
            org-agenda-include-diary nil                      \
            org-agenda-files (quote ("~/org/project.org")))'  \
   | lpr
@end example

@noindent
これは30日のアジェンダを作成します。情報は、Org-modeのファイル
@file{~/org/projects.org}だけに制限され、~/diary(日誌)ファイルでさえ含まれません
。

もっと洗練された方法でアジェンダのデータを処理したい場合は、アジェンダのアイ
テム毎に値をカンマで区切られたリストを作成する@code{org-batch-agenda-csv}というコ
マンドを使えます。アウトプットの各行にはカンマで区切られたいろいろなフィール
ドがあります。行内のフィールドは以下の通りです:

@example
category     @r{アイテムのカテゴリーです}
head         @r{TODOキーワード、TAGSそしてPRIORITYを除いた見出しです}
type         @r{アジェンダのタイプは、以下が考えられます}
                todo               @r{TODO検索で選ばれた}
                tagsmatch          @r{tags検索で選ばれた}
                diary              @r{diaryからインポートされた}
                deadline           @r{デッドラインを設定された}
                scheduled          @r{スケジューリングされた}
                timestamp          @r{タイムスタンプで選ばれたアポイントメント}
                closed             @r{その日付にcloseされたエントリ}
                upcoming-deadline  @r{デッドラインが近づいていると警告している}
                past-scheduled     @r{その日付より前にスケジューリングされたアイ
テム, 原文:forwarded scheduled item.}
                block              @r{エントリが日付のブロックを持っていて日付を
含む}
todo         @r{もしあれば、TODOのキーワード}
tags         @r{継承したものも含めた全てのtags。コロンで区切られている。}
date         @r{2007-2-14のような基準日}
time         @r{15:00-16:50のような時間}
extra        @r{追加のプラニング情報の文字列}
priority-l   @r{もし与えられていれば優先順位の文字}
priority-n   @r{計算された数字の優先度}
@end example

@noindent
タイムスタンプ(すなわちデッドラインを設定された/スケジューリングされた)がそ
のアイテムのセクションをleadする場合にのみTimeもしくはdateが与えられます。

このようなCSVリストは後処理のスクリプトでとても使いやすいです。例のPerlプロ
グラムは、Emacs/Org-modeからTODOリストを取得して、前にチェックボックスを挿入
して、全てのアイテムを出力します。

@example
#!/usr/bin/perl

# 実行するEmacsのコマンドを定義します
$cmd = "emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \"t\")'";

# 実行してアウトプットを取得します
$agenda = qx@{$cmd 2>/dev/null@};

# 全ての行についてループします
foreach $line (split(/\n/,$agenda)) @{
  # それぞれの値を取得します
  ($category,$head,$type,$todo,$tags,$date,$time,$extra,
   $priority_l,$priority_n) = split(/,/,$line);
  # 処理して出力します
  print "[ ] $head\n";
@}
@end example

@node プロパティAPIを使う, マッピングAPIを使う, アジェンダ情報の抽出, ハッキング
@section プロパティAPIを使う
@cindex プロパティのためのAPI
@cindex プロパティ（API）

プロパティを扱うために使用できる関数を説明します。

@defun org-entry-properties &optional pom which
ポイントかマーカー(point-or-marker POM)の位置でのエントリのプロパティを全て
取得します。@*これには、TODOキーワード,
tags, デッドラインのtime文字列, スケジューリングのtime文字列, 計測のtime文字
列,
エントリ内で更に定義されているプロパティが含まれます。返り値は連想リストです
。プロパティのキーが何度も使われた場合は、キーは複数回出現します。@*POMはnilとなり得ます。その場合は現在のエントリが使われます。WHICHがnilもし
くは`all'の場合、全てのプロパティを取得します。WHICHが`special'もしくは
`standard'の場合、部分集合(subclass)を取得します。
@end defun
@vindex org-use-property-inheritance
@defun org-entry-get pom property &optional inherit
ポイントかマーカー(point-or-marker POM)の位置でのエントリーのプロパティ
 PROPERTY
の値を取得します。デフォルトでは、そのエントリーで局所的に定義されたプロパテ
ィのみを調べます。もしINHERITがnon-nilかつエントリーがプロパティを持っていな
い場合、階層のより高いレベルをチェックします。もしINHERITがシンボル
@code{selective}である場合、継承を使います。また、継承を使うのは、継承のためのプ
ロパティを@code{org-use-property-inheritance}の設定が選んだときに限ります。
@end defun

@defun org-entry-delete pom property
ポイントかマーカー(point-or-marker POM)の位置のエントリーからプロパティ
PROPERTYを削除します。
@end defun

@defun org-entry-put pom property value
ポイントかマーカー(point-or-marker POM)の位置のエントリにプロパティPROPERTY
の値VALUEをセットします。
@end defun

@defun org-buffer-property-keys &optional include-specials
カレントバッファにある全てのプロパティのキーを取得します。
@end defun

@defun org-insert-property-drawer
ポイントの位置にプロパティの引き出し(drawer)を挿入します。
@end defun

@defun org-entry-put-multivalued-property pom property &rest values
ポイントかマーカー(point-or-marker
POM)のプロパティPROPERTYを値VALUESにセットします。値VALUESは文字列のリストで
なければなりません。それらはスペースを区切り文字として連結されます。
@end defun

@defun org-entry-get-multivalued-property pom property
プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、文字列の
リストを返します。
@end defun

@defun org-entry-add-to-multivalued-property pom property value
プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、このリス
トの中に値VALUEがあることを確認します。
@end defun

@defun org-entry-remove-from-multivalued-property pom property value
プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、このリス
トの中に値VALUEが@emph{ない}ことを確認します。
@end defun

@defun org-entry-member-in-multivalued-property pom property value
プロパティPROPERTYの値を、値がスペースで区切られたリストとして扱い、このリス
トの中に値VALUEがあるかをチェックします。
@end defun

@defopt org-property-allowed-value-functions
特定のプロパティに許可された値を提供する関数へのフックです。その関数はプロパ
ティの名前を単一の引数として受け取り、許可された値の単純なリストを返します。
@samp{:ETC}がその値の1つである場合、その値を補完の候補として使いますが、他の値も
入力することができます。もし関数がプロパティと関係無い場合には、関数は@code{nil}
を返します。
@end defopt

@node マッピングAPIを使う, , プロパティAPIを使う, ハッキング
@section マッピングAPIを使う
@cindex API、マッピングの
@cindex エントリのマッピング、API

Org-modeは一定の基準を満たす全てのエントリーを探すために、洗練されたマッピン
グ機能を持っています。アジェンダビューを作成するために内部でこの機能を使われ
ていますが、エントリのそれぞれもしくは選択されたエントリに対して任意の関数を
実行するためにAPIも使われます。

@defun org-map-entries func &optional match scope &rest skip
範囲SCOPEの内でMATCHにマッチして選択された各見出しで関数FUNCを呼び出します。

FUNCは関数かLispのフォームです。関数は引数なしですが、見出しの始まりと終わり
のカーソル位置とともに呼び出されます。関数への全ての返り値は、リストとして集
められて返されます。

save-excursionフォームの中でFUNCを呼び出されるので、ポイントを保存する必要が
ありません。評価の後に、カーソルは(処理しているエントリの)行末に移動し、検索
を続行します。ある条件では、この方法では希望する結果を得られないかも知れませ
ん。例えば、もし現在の(サブ)ツリーを削除した(例えば@:
アーカイブした)場合、次のエントリをスキップすることを意味します。そのような
場合、変数`org-map-continue-from'に希望するバッファポジションをFUNCに設定さ
せることで、どこから検索を続けるべきかというポジションを指定できます。

アジェンダビューに使われるとき、MATCHはtags/property/todoにマッチします。繰
り返しの間、このクエリにマッチする見出しだけが考慮されます。もしMATCHがnilか
tの場合、繰り返しで全ての見出しがチェックされます。

SCOPEはこのコマンドのスコープ(対象とする範囲)を決定します。以下のどれかにな
り得ます:

@example
nil     @r{カレントバッファ、 制限があればそれに従う}
tree    @r{現在位置のエントリから始まるサブツリー}
file    @r{カレントバッファ、制限なしで}
file-with-archives
        @r{カレントバッファ、関連したアーカイブも含む}
agenda  @r{全てのアジェンダファイル}
agenda-with-archives
        @r{全てのアジェンダフィル、関連したアーカイブファイルも含む}
(file1 file2 ...)
        @r{ファイルがリスト形式の場合、リスト内の全てのファイルをスキャンします}
@end example
@noindent
残りの引数は、スキャナー(読み取る関数?)のスキップ機能の設定として取り扱われ
ます。以下のアイテムをとることができます。

@vindex org-agenda-skip-function
@example
archive   @r{アーカイブタグ(archive tag)があるツリーをスキップします}
comment   @r{キーワードCOMMENTがあるツリーをスキップします}
function or Lisp form
          @r{@code{org-agenda-skip-function}の値として使われます。}
          @r{関数であればいつもtを返します、}
          @r{FUNCはは呼び出されません、}
          @r{関数がポイントを置いたままにした位置から検索は続きます}
@end example
@end defun

マッピングルーティーンへと与えられる関数はどのような動作もできます。エントリ
に関する情報を更に集めるためにプロパティAPI(@pxref{プロパティAPIを使う})を使えます
し、もしくはエントリのメタデータを変更するために使えます。
便利な幾つかの関数を紹介します:

@defun org-todo &optional arg
エントリのTODO状態を変更します。引数ARGが取り得る多くの値については、関数の
ドキュメント文字列を見て下さい。
@end defun

@defun org-priority &optional action
エントリのプライオリティを変更します。ACTIONが取り得る値についてはこの関数の
ドキュメント文字列を見て下さい。
@end defun

@defun org-toggle-tag tag &optional onoff
現在のエントリのタグTAGをトグルします。@code{on}か@code{off}のいずれかを設定するという
ことは、タグをトグルするのではなく、onかoffのどちらかであることを確かにしま
す。
@end defun

@defun org-promote
現在のエントリを一階層上に引き上げます。
@end defun

@defun org-demote
現在のエントリを一階層下へ引き下げます。
@end defun

これは、現在のファイルの中でTODO@code{TOMORROW}を持つ全てエントリを、キーワード
@code{UPCOMIND}をつけたTODOのエントリへと変化させる簡単な例です。

@lisp
(org-map-entries
   '(org-todo "UPCOMING")
   "+TOMORROW" 'file 'archive 'comment)
@end lisp

以下の例では、全てのアジェンダファイルに渡って、TODOのキーワードに@code{WAITING}
があるエントリの数をカウントします。

@lisp
(length (org-map-entries t "/+WAITING" 'agenda))
@end lisp

@node MobileOrg, 歴史と謝辞, ハッキング, Top
@appendix MobileOrg
@cindex iPhone
@cindex MobileOrg

@uref{http://mobileorg.ncogni.to/, MobileOrg} はRichard
Morelandよって開発された@i{iPhone/iPod Touch}
シリーズの携帯端末のためのアプリケーションです。@i{MobileOrg}は「リアル」のコン
ピュータ上にあるOrg-modeシステムのために、オフラインのビューとキャプチャによ
るサポートを提供します。その機能によって、実際のエントリーがどのように変化し
たかについて記録することができます。AndroidのユーザーはMatt
Jonesよって作成された
@uref{http://wiki.github.com/matburt/mobileorg-android/, MobileOrg Android}のアプ
リをチェックしてください。

この付録では、@i{MobileOrg}で表示されるフォーマットの中でアジェンダビューを作成
し、キャプチャされたノートと@i{MobileOrg}で変更を、メインのシステムに統合してい
くために、Org-modeのサポートについて説明します。

MobileOrgの中でタグやTODOの状態を変更するためには、あなたは、例え、ひとつひ
とつのファイルが、一部しか使っていないとしても、全ての重要なタグやTODOキーワ
ードを網羅するように@code{org-todo-keywords}と@code{org-tags-alist}変数のカスタマイズ
を設定しなければなりません。MobileOrgは、同様にインバッファの設定で状態やタ
グを提供しますが、これらの変数の中で設定されているものについてのみ、TODOの状
態についての@i{設定}
(@pxref{ファイル毎のキーワード}) や@i{相互に排他的な} タグ (@pxref{タグの設定}) についての装
備状況を理解してください。

@menu
* ディレクトリの設定::  モバイルデバイスとはどこでデータをやりとりすれば良い
ですか？
* ディレクトリへの出力::  Orgファイルとアジェンダをアップロードする
* MobileOrgからpullする::  キャプチャした項目とフラグを立てた項目を統合する
@end menu

@node ディレクトリの設定, ディレクトリへの出力, MobileOrg, MobileOrg
@section ディレクトリの設定

MobileOrgはサーバー上のディレクトリを通して、Emacsと相互に連携させる必要があ
ります。もしも公開のサーバーを使用しているなら、そのサーバーにアップロードさ
れるファイルを暗号化したいと考えるかもしれません。この機能はOrg-mode7.02の
@i{MobileOrg 1.5}（iPhoneバージョン）で実現していますが、あなたのシステムに
 @file{openssl}
をインストールしておく必要があるでしょう。暗号化するために、@i{MobileOrg}にパス
ワードを設定し、Emacs上では、@code{org-mobile-use-encryption}@footnote{もしもあなたのEmacs
の設定ファイルの中にパスワードを安全に保存したいならば、
@code{org-mobile-encryption-password}変数を設定すると良いでしょう。その変数の説明
文を読んでください。暗号化は、@file{.org} ファイルの内容のみに適用されることに注
意してください。ファイルの名称そのものは、そのまま表示されます。}変数を設定
しておく必要があります。

無料の@uref{http://dropbox.com,Dropbox.com}のアカウント@footnote{もしもDropboxを利用できな
い場合、またはMobileOrgのバージョンがそれをサポートしていない場合には、
webdavサーバが利用できます。詳しい情報を得るには、MobileOrgの説明部と
@uref{http://orgmode.org/worg/org-faq.html#mobileorg_webdav, FAQ entry}をチェック
してください。}を使い、ディレクトリを作成するのが最も簡単な方法です。
MobileOrgで最初にDropboxに接続したときにDropboxの中にMobileOrgのディレクトリ
が作成されます。そのディレクトリが作成されたあと、次のようにEmacsに書き込み
ます。

@lisp
(setq org-mobile-directory "~/Dropbox/MobileOrg")
@end lisp

Org-modeはそのディレクトリの中に、@i{MobileOrg}用のファイルを置いたり、そこから
キャプチャされたノートを読み込んだりするコマンドを持っています。

@node ディレクトリへの出力, MobileOrgからpullする, ディレクトリの設定, MobileOrg
@section ディレクトリへの出力

この操作では、@code{org-mobile-files}の中にリストアップされている全てのファイルを
、@code{org-mobile-directory}で指定したディレクトリにコピーします。デフォルトでは
このリストにはすべてのアジェンダファイル（@code{org-agenda-files}に登録されている
）を含んでいます。しかしながら、@code{org-mobiles-files}をカスタマイズすることで
ファイルを追加できます。ファイル名は、@code{org-directory}との相対パスで登録され
るので、すべてのファイルがこのディレクトリの中に入ることになります。プッシュ
する操作で、ユーザー@footnote{アジェンダを作成する際に、Org-modeではすべての参照され
るエントリーにID属性を強制的に付加します。そのため、これらのエントリーは、将
来の行動のために、それらのエントリーに@i{MobileOrg}によってフラグを付けたとして
も、ユニークなものとして識別されます。もしも、こんなにも沢山のエントリーにそ
ういう属性値をつけたくない場合は、@code{org-mobile-force-id-on-agenda-items}変数
を@code{nil}と設定してください。Org-modeは、各エントリーが十分ユニークであること
を期待したうえで、アウトラインの階層構造に依存することになるでしょう。}によ
って定義されたすべてのカスタマイズされたアジェンダビューを持った
@file{agendas.org}という特別なOrg-modeファイルを作成します。最後に、Org-modeは全
ての他のファイルへのリンクを含んだ@file{index.org}というファイルを書き込みます。
@i{MobileOrg}は、最初サーバーからこのファイルを読み込み、それから、そこに置かれ
ているすべてのアジェンダファイルとOrg-modeファイルをダウンロードします。ダウ
ンロードのスピードを上げるために、MobileOrgは、どのファイルのチェック記号
@footnote{@file{checksums.dat}というファイルの中に自動的に保存されます。}が変更されたかど
うかを読み取るだけなのです。

@node MobileOrgからpullする, , ディレクトリへの出力, MobileOrg
@section MobileOrgからpullする

@i{MobileOrg}がサーバーと同期する際に、Org-modeのファイルを閲覧するために呼び出
すだけではありません。それによってサーバー上の@file{mobileorg.org}というファイル
に対して、フラグがつけられたり、変更されたりしたエントリーに対して、キャプチ
ャされたエントリーやポインタを追加します。Org-modeでは、この情報をInBoxファ
イルに統合し、フラッグがつけられたエントリーにポインタを使って操作するという
@emph{pull}の操作機能をもっています。どのように動作するのでしょうか。

@enumerate
@item
Org-modeは、@file{mobileorg.org}@footnote{@file{mobileorg.org}はこの操作のあとで空になり
ます。}の中で発見した全てのエントリーを移動し、
@code{org-mobile-inbox-for-pull}変数によって、ポインタが付けられたファイル
に追加します。記録されたエントリと編集されたイベントは、それぞれInBox
ファイル中でトップレベルのエントリーとして位置づけられるでしょう。
@item
エントリーを移動したあと、Org-modeは、@i{MobileOrg}の中で作られた変更を実
行することを試みます。いくつかの変更は直接、ユーザーの確認無しに適用さ
れます。例では、タグ、TODOの状態、見出しそして本文に対するすべての変更
がはっきりと適用されるというものです。将来の行動のために、フラグを付け
られたエントリーは、@code{:FLAGGED:}というタグが付けられるでしょう。そのた
め、再び簡単に見つけることができるでしょう。あるエントリを探したり、変
更を適用するさいに問題があれば、ポインタのついたエントリーはinboxに残
され、エラーメッセージの印がつけられるでしょう。あなたはあとでこれらの
案件を手動で解決する必要があります。
@item
Org-modeでは、その際にフラグがつけられたすべてのエントリーとともに、ア
ジェンダビューを作成できます。そしてユーザーはそれらの項目をやり終えた
り、必要な行動を実行するでしょう。@i{MobileOrg}のエントリーにフラグが付け
られている間に、ノートが保存されていたら、そのノートは、カーソルがアジ
ェンダの行の上に置かれた時に、エコーエリア上に表示されるでしょう。
@table @kbd
@kindex ?
@item ?
そういう特別なアジェンダの中で、@kbd{?}が入力されたときには、別のウインド
ウでフラグの付けられたノートの全てが表示され、キルリング上に内容がコピ
ーされます。そして、@kbd{? z C-y C-c C-c}を使用することで、フラグのつけら
れたノートを、そのエントリーの通常のノートとして保存することができます
。@kbd{?}を２度続けて入力すると、（プロパティの中に保存されていた）記録さ
れているフラグの付いたノートと一緒に、@code{:FLAGGED:}というタグを削除する
よう指示したことになります。この方法で、あなたはこのフラグの付けられた
エントリーを意図したプロセスで完了させるという指示をすることになります。
@end table
@end enumerate

@kindex C-c a ?
もしも、すべてのフラグのついたエントリーを直接処理することができないならば、
あなたは@kbd{C-c a ?}を入力して、アジェンダビュー@footnote{しかしながら、微妙な差があるこ
とに注意してください。@kbd{M-x org-mobile-pull @key{RET}}によって、自動的に作成され
たビューは、最後にpullされて配置されたすべてのファイルを検索することを保証さ
れています。これは、あなたのアジェンダファイルのリストに、現在含まれていない
ファイルも含みます。もしもあなたが、ビューを再作成するために、@kbd{C-c a ?}を最
後に使用したならば、カレントのアジェンダファイルのみが検索されます。}にいつ
でも戻ることができます。

@node 歴史と謝辞, メインインデックス, MobileOrg, Top
@appendix 歴史と謝辞
@cindex 謝辞
@cindex 歴史
@cindex 感謝

Org-modeは2003年に誕生しました。Emacs
Outlineモードのユーザーインターフェイスに対するフラストレーションから自由に
なるためでした。私（Carsten
Dominik）は、自分のノートとプロジェクトを整理しようと試みていて、Emacs使うこ
とが自然なやり方に思えました。ところが、アウトラインツリーの一部を隠したり表
示したりするだけでも、2〜3個のキーを組み合わせたコマンドを、7種類も覚えなけ
ればならず、これは全く受け入れがたいことでした（訳注：org-modeでは@key{TAB}だけ
でよい）。また、アウトラインでノートを取るとき、私は絶えずツリーの構造を変更
して、自分の考えや計画に合わせて整理しておきたかったのです。
@emph{Visibility cycling}と@emph{structure editing}は、当初@file{outline-magic.el}パッケー
ジに実装されていましたが、すぐにより一般的な@file{org.el}に移しました。プロジェク
トを計画するための心地良い環境になったので、次の段階は@emph{TODOリスト}、基本的な
@emph{タイムスタンプ}そして@emph{テーブル機能}を追加することでした。これらの機能は、
org-modeが今日も追求している2つの主要なゴールを明らかにしました。すなわち、
現代的で、アウトラインベースの、革新的かつ直感的な編集機能を持ったプレーンテ
キストモードになること。そして、ノートファイルに、プロジェクトプランイングの
機能を直接組み込むことです。

Org-modeをリリースして以来、私や@email{emacs-orgmode@@gnu.org}に送られてくる、文字
通りに何千ものeメールは、バグレポート、フィードバック、新しいアイディア、そ
して時にはパッチやアドオンを絶えず提供してくれます。org-modeを改良するために
手助けしてくれるすべての人に感謝します。org-modeの様々な側面で、改善に多大な
影響を与えた方々のリストをここに記したいと思います。このリストは完全ではない
と思うので、もし書き忘れてしまった方がいればお詫びすると共に、連絡をください
。

リストを記す前に、何名かについてアルファベット順で特別に紹介します。

@table @i
@item Bastien Guerry
Bastienは、LaTeXエクスポートとプレーンなリストを構文解析する機能を含む
、org-modeの数多くの拡張機能を実装しました（その多くが、現在はorg-mode
の中心に組み込まれています）。彼が副管理者としての役割を果たしていた開
発初期の尽力は、org-modeプロジェクトの成功の中心となりました。また彼は
Worg（訳注：org-modeのコミュニティサイト。@uref{http://orgmode.org/worg/}）
を考案し、org-modeのウェブにおける存在の認知を手助けし、orgmode.orgの
ホスティングコストのスポンサーになりました。
@item Eric Schulte and Dan Davison
EricとDanは、共同でorg-babelシステムに構築しました。これによりorg-mode
を、コードの評価、文芸的プログラミングそして再現可能な研究に対応する、
他言語環境へと変えました。
@item John Wiegley
Johnは、数々の素晴らしいアイディアとパッチを直接的にorg-modeに提供して
くれました。具体的には、ファイル添付システム（@file{org-attach.el}）、
AppleMailとの一体化（@file{org-mac-message.el}）、TODOリストの階層的な依存
関係、習慣のトラッキング（@file{org-habits.el}）そして、暗号化（
@file{org-crypt.el}）です。そして実は、org-modeのキャプチャシステムは、彼の
素晴らしい@file{remember.el}を拡張したものです。
@item Sebastian Rose
Sebastianが居なければ、org-modeのHTML/XHTMLエクスポートは、無知なアマ
チュアによる痛ましい機能になっていたでしょう。彼はorg-modeの該当部分を
より高いレベルに押し上げました。また、@file{org-info.js}の作者でもあります
。このJavaScriptは、org-modeから生成されたウェブページをinfoのように表
示したり、単一キーによるナビゲーションでツリーを折り畳むインターフェイ
スを提供します。
@end table

@noindent
さて！いよいよ貢献してくれた方々のリストに移ります。繰り返しますが、忘れてい
るところがあれば教えてください。

@itemize @bullet

@item
@i{Russel Adams}は、引き出しのアイディアを思いつきました。
@item
@i{Thomas Baumann}は、@file{org-bbdb.el}と@file{org-mhe.el}を作成しました
@item
@i{Christophe Bataillon}は、org-modeのウェブサイトで使っている素晴らしいユ
ニコーンのロゴを作成しました。
@item
@i{Alex Bochannek}は、タイムスタンプの丸め込みのためのパッチを提供しました。
@item
@i{Jan Böcker}は、@file{org-docview.el}を作成しました。
@item
@i{Brad Bozarth}は、org-modeのファイルにRSSフィードの情報を引き込む方法を
示しました。
@item
@i{Tom Breton}は、@file{org-choose.el}を作成しました。
@item
@i{Charles Cave}の提案は、Rememberのためのテンプレートの実装を活性化しまし
た。現在はCaptureのテンプレートになっています。
@item
@i{Pavel Chalmoviansky}は、時間指定したアイテムについてアジェンダの扱いに
影響を与えました。
@item
@i{Gregory Chernov}は、テーブルの計算でLisp形式をサポートするパッチを作成
し、XEmacsとの互換性を改善しました。特に、XEmacsへ@file{nouline.el}を移植し
ました。を行ないました。
@item
@i{Sacha Chua}は、Plannerからのいくつかのリンクコードをコピーすることを提
案しました。
@item
@i{Baoqiu Cui}は、DocBookエクスポートに貢献しました。
@item
@i{Eddward DeVilla}は、チェックボックスの統計を提案し、テストしました。ま
た、プロパティのアイディアを思いつきました。しかも、そのためのAPIがあ
ります。
@item
@i{Nick Dokos}は、いくつもの扱いにくいバグを見つけ出しました。
@item
@i{Kees Dullemond}は、HTMLにあるプロジェクトのリストを直接編集していました
。そのため、HTMLエクスポートを含む初期の開発の一部をとても活性化しまし
た。彼は、テーブルの列を狭めたり広げたりする手段を求めました。
@item
@i{Thomas S. Dye}は、Worgにドキュメントを寄稿し、マニュアルにOrg-babelのド
キュメントを組み込む手助けをしました。
@item
@i{Christian Egli}は、ドキュメントをTexinfo形式に変換し、アジェンダを呼び
起こし、HTMLエクスポートにCSSフォーマットのパッチを生成しました。さら
に、@file{org-taskjuggler.el}を作成しました。
@item
@i{David Emery}は、エクスポートされたHTMLのアジェンダでカスタムなCSSをサポ
ートするパッチを提供しました。
@item
@i{Nic Ferrier}は、mailcapとXOXOサポートに貢献しました。
@item
@i{Miguel A. Figueroa-Villanueva}は、階層的なチェックボックスを実装しまし
た。
@item
@i{John Foerch}は、隠されたアウトラインツリーで、どうすればインクリメンタ
ルサーチが検索結果の周辺にコンテクストを表示するようになるかを明らかに
しました。
@item
@i{Raimar Finken}は、@file{org-git-line.el}を作成しました。
@item
@i{Mikael Fornius}は、メーリングリストの司会をしています。
@item
@i{Austin Frank}は、メーリングリストの司会をしています。
@item
@i{Eric Fraga}は、アイディアを出しテストを行ない、BEAMERエクスポートの開発
を進めました。
@item
@i{Barry Gidden}は、Network Theory Ltd. を通した本の出版のための準備で、マ
ニュアルを校正してくれました。
@item
@i{Niels Giesen}は、DONEとしたツリーを自動的にアーカイブするアイディアを提
供しました。
@item
@i{Nicolas Goaziou}は、プレーンなリストのコードの多くの部分を書き直しまし
た。
@item
@i{Kai Grossjohann}は、他のパッケージとのキーバインディングの衝突を指摘し
ました。
@item
Network Theory Ltd. の@i{Brian Gough}は、org-modeのマニュアルを書籍として
出版しました。
@item
@i{Bernt Hansen}は、タスクの自動リピート、タスクの状態遷移ログ、クロックテ
ーブルのサポートで、多くの部分を担当しました。彼の明瞭な説明は、Gitの
バージョン管理システムを採用した時にとても重要でした。
@item
@i{Manuel Hermenegildo}は、いくつものアイディア、小数のバグフィックスとパ
ッチを提出しました。
@item
@i{Phil Jackson}は、@file{org-irc.el}を作成しました。
@item
@i{Scott Jaderholm}は、フットノート、折り畳んだエントリー間の空行の制御、
そしてプロパティの列表示を提案しました。
@item
@i{Matt Jones}は、@i{MobileOrg Android}を作成しました。
@item
@i{Tokuya Kameshima}は、@file{org-wl.el}と@file{org-mew.el}を作成しました。
@item
@i{Shidai Liu}
("Leo")は、@LaTeX{}の組み込みを探求し検証しました。また彼は頻繁なフィード
バックといくつかのパッチを提供しました。
@item
@i{Matt Lundin}は、テーブルの数式と名前付きの非表示アンカーへの参照をテー
ブルの最終行に置くことを提案しました。
@item
@i{David Maus}は、@file{org-atom.el}を作成し、org-modeに関するgitのチケットを管
理しました。またメーリングリストに、有益な返信といくつかのバグフィック
ス、そしてパッチを多数提出する貢献者でした。
@item
@i{Jason F. McBrayer}は、アジェンダのCSV形式のエクスポートを提案しました。
@item
@i{Max Mikhanosha}は、ノートの再配置のアイディアを思いつきました。
@item
@i{Dmitri Minaev}は、ファイルごとに優先順位の制限を設定するパッチを提出し
ました。
@item
@i{Stefan Monnier}は、Emacs Lisp コンパイラの出力を快適に保つためのパッチ
を 提供しました。
@item
@i{Richard Moreland}は、iPhone向けに@i{MobileOrg}を作成しました。
@item
@i{Rick Moynihan}は、一つのファイルで複数のTODOの連なりを扱うことを可能に
し、アジェンダをサブツリーに素早く制限可能にしました。
@item
@i{Todd Neal}は、INFOファイルとElisp形式へのリンクについてパッチを提供しま
した。
@item
@i{Greg Newman}は、ユニコーンのロゴを現在の形にリフレッシュしました。
@item
@i{Tim O'Callaghan}は、ファイル内リンク、一般的なファイルリンクのための検
索オプション、そしてタグを提案しました。
@item
@i{Osamu Okano}は、@file{orgcard2ref.pl}を作成しました。リファレンスカードのテ
キスト版を作るためのPerlスクリプトです。
@item
@i{Takeshi Okano}は、org-modeのマニュアルと、David O'Toole'sのチュートリア
ルを日本語に翻訳しました。
@item
@i{Oliver Oppitz}は、TODOアイテムが複数の状態を持つことを提案しました。
@item
@i{Scott Otterson}は、他の要素とのリンクに説明文を導入するきっかけを作りま
した。
@item
@i{Pete Phillips}は、タグの開発をする際に助力しました。また、頻繁にフィー
ドバックを提供しました。
@item
@i{Martin Pohlack}は、文字列の挿入をアンドゥのために使いやすい束にするコー
ドスニペットを提供しました。
@item
@i{T.V. Raman}は、バグをレポートして改善を提案しました。
@item
@i{Matthias Rempe} (Oelde)は、アイディアとWindowsサポート、品質制御を提供
しました。
@item
@i{Paul Rivier}は、名前付き注釈の基本的な実装を提供しました。また彼は、し
ばらくメーリングリストの管理者でした。
@item
@i{Kevin Rogers}は、リモートホストのVMファイルにアクセスするコードを提出し
ました。
@item
@i{Frank Ruell}は、@code{keymapp nil}のミステリアスなバグ（@file{allout.el}との衝突
）を解消しました。
@item
@i{Jason Riedy}は、拡張パッチによってorgtblテーブルのための送受信の仕組み
を汎用化しました。
@item
@i{Philip Rooke}は、org-modeのリファレンスカードを作成しました。数多くのフ
ィードバックを提供し、org-modeの文書化の基準を作成し適用しました。
@item
@i{Christian Schlauer}は、特に、リンクで利用するカギ括弧（<,>）について提
案しました。
@item
@i{Paul Sexton}は、@file{org-ctags.el}を作成しました。
@item
VM、BBDB、Gnusへリンクすることの最初のアイディアは、@i{Tom Shannon}の
@file{organizer-mode.el}によってもたらされました。
@item
@i{Ilya Shlyakhter}は、同一階層内でのアーカイブ、リテラルの例での行番号、
そして、参照されたコード行のリモートハイライトを提案しました。
@item
@i{Stathis Sideris}は、ASCIIをPNGに変換する@file{ditaa.jar}を作成しました。現在
これは、org-modeの@file{contrib}ディレクトリに格納されています。
@item
@i{Daniel Sinder}は、サブツリーのロックによる内部的なアーカイブ機能のアイ
ディアを思いつきました。
@item
@i{Dale Smith}は、リンクの省略記法を提案しました。
@item
@i{James TD Smith}は、便利なカスタマイズと機能のための数多くのパッチを提供
しました。
@item
@i{Adam Spiers}は、グローバルなリンクコマンドを求めました。これはリンクの
拡張システムの構築のきっかけとなり、行列のサポートを追加し、さらにマッ
ピングAPIを提案しました。
@item
@i{Ulf Stegemann}は、特別な記号をHTML、LaTeX、UTF-8、Latin-1、そしてASCII
に変換するための表を作成しました。
@item
@i{Andy Stewart}は、@file{org-w3m.el}にコードを提供しました。org-modeのシンタッ
クスにリンクを変換したHTMLコンテンツをコピーする機能です。
@item
@i{David O'Toole}は、@file{org-publish.el}を作成しました。また、マニュアルにお
ける公開の章のドラフトを執筆しました。
@item
@i{Sebastien Vauban}は、LaTeXとBEAMERエクスポートについての多くの問題をレ
ポートしました。また、GNUSのソースコードをハイライトする機能を有効にし
ました。
@item
@i{Stefan Vollmar}は、神経学のマックスプランク研究所での講演（ビデオ収録さ
れている）を準備しました。また彼は、HTMLエクスポートのコンセプトインデ
ックスの生成を思いつきました。
@item
@i{J@"urgen Vollmer}は、HTML出力で目次を生成するコードを提供しました。
@item
@i{Samuel Wales}は、改善のためのフィードバックとバグレポートを提供しました。
@item
@i{Chris Wallace}は、@samp{QUOTE}キーワードを改良するパッチを提供しました。
@item
@i{David Wainberg}は、アーカイブと、リンクシステムの改良を提案しました。
@item
@i{Carsten Wimmer}は、いくつかの変更を提案し、GNUSへのリンクに関するバグフ
ィックスを手助けしました。
@item
@i{Roland Winkler}は、tty端末でorg-modeを動かすためのキーバインドの追加を
依頼しました。
@item
@i{Piotr Zielinski}は@file{org-mouse.el}を作成しました。アジェンダブロックを提
案し、様々なアイディアをコードスニペットを提供しました。
@end itemize


@node メインインデックス, キーワードインデックス, 歴史と謝辞, Top
@unnumbered Concept index

@printindex cp

@node キーワードインデックス, コマンドと関数インデックス, メインインデックス, Top
@unnumbered Key index

@printindex ky

@node コマンドと関数インデックス, 変数インデックス, キーワードインデックス, Top
@unnumbered Command and function index

@printindex fn

@node 変数インデックス, , コマンドと関数インデックス, Top
@unnumbered Variable index

これは変数とフェイスの完全なインデックスではありません。このマニュアルで言及
したものだけを列挙しています。さらに詳しいリストは、
@kbd{M-x org-customize @key{RET}}で表示されるカスタムブラウザで確認できます。表示さ
れるツリーをクリックしてください。

@printindex vr

@bye

@ignore
        arch-tag: 7893d1Fe-cc57-4d13-b5e5-f494a1CBC7ac
@end ignore

@c Local variables:
@c fill-column: 77
@c indent-tabs-mode: nil
@c paragraph-start:    "\\|^@[a-zA-Z]*[ \n]\\|^@x?org\\(key\\|cmd\\)\\|\f\\|[ 	]*$"
@c paragraph-separate: "\\|^@[a-zA-Z]*[ \n]\\|^@x?org\\(key\\|cmd\\)\\|[ 	\f]*$"
@c End:


@c  LocalWords:  webdavhost pre
